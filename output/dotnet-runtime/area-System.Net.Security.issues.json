[
    {
        "url":  "https://github.com/dotnet/runtime/issues/16393",
        "createdAt":  "2016-02-17T10:44:54Z",
        "number":  16393,
        "author":  "vijaykota",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-05-14T23:15:36Z",
        "body":  "The script used on Linux OSs (see dotnet/corefx#6158) does not work on OSX since the latter uses Heimdal KDC. So currently the tests are blocked on OSX. The script needs to be fixed and tests need to be enabled for OSX.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOIAv0NQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NzEzMDgzOQ==",
                                           "createdAt":  "2016-12-14T19:27:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "We need design for these tests.",
                                           "updatedAt":  "2016-12-14T19:27:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyODAyMzU4Mg==",
                                           "createdAt":  "2019-09-04T18:20:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "This issue needs more design thoughts. The current design of the tests using scripts that modify the machine state needs to be completely changed. I have some ideas of building/using/running containers here to do the proper testing of these enterprise scenario related things.",
                                           "updatedAt":  "2019-09-04T18:20:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNzY1NDMyNQ==",
                                           "createdAt":  "2019-10-02T19:57:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: Part of @davidsh\u0027s enterprise work.",
                                           "updatedAt":  "2019-10-02T19:57:32Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Enable NegotiateStream tests on OSX",
        "labels":  [
                       "area-System.Net.Security",
                       "os-mac-os-x",
                       "test-enhancement"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/18837",
        "createdAt":  "2016-10-03T18:52:57Z",
        "number":  18837,
        "author":  "CIPop",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-17T15:43:05Z",
        "body":  "Tracking TLS Alert TODO items for non-Windows platforms (#11489, \n1. `close_notify` implementation\n2. TLS handshake implementation: please note that in order to extract the exact error during handshake, `Win32Exception.NativeErrorCode` is used (e.g. `SEC_E_ILLEGAL_MESSAGE`)\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqfbhGA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI4MDIwMTA5OA==",
                                           "createdAt":  "2017-02-16T01:32:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Priya91",
                                           "body":  "The windows functionality will be available in 2.0.0 but missing in Unix. Adding it to 2.0.0, to consider this Unix work if manpower available.\r\n\r\nNext Steps: Search issue number in System.Net.Security and implement the pal layer for Unix.",
                                           "updatedAt":  "2017-02-16T01:33:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5OTYwNDA2OQ==",
                                           "createdAt":  "2017-05-06T00:41:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Priya91",
                                           "body":  "The close_notify alerts are implemented. The other part of implementing cert failure alerts is tricky, as openssl doesn\u0027t expose any APIs to do that. The given structure of cert validation happens after the handshake. To support this, we will have to change this order, and make the cert validation be a part of handshake, by registering a certificate validation callback with openssl. The registered callback has to return failure upon which the openssl will send the TLS alerts.\r\n\r\nThis work involves restructuring the pal error in System.Net.Security, and cert failure alerts is a nice to have feature. Moving to future.",
                                           "updatedAt":  "2017-05-08T21:22:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyODUyMTIyMw==",
                                           "createdAt":  "2019-09-05T18:45:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "There is specific issue: dotnet/runtime#914\r\n\r\nWe should review the disabled tests, see what we can reasonably fix and then close this in 5.0.",
                                           "updatedAt":  "2019-09-05T18:45:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Oh7kL",
                                           "createdAt":  "2022-11-16T18:56:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "triage: may be fixed with new OpenSSL. We should verify and possibly close for 8.0",
                                           "updatedAt":  "2022-11-16T18:56:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p9v5b",
                                           "createdAt":  "2023-10-24T18:25:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Triage: This might require us to change how we do cert validation (to do it still while in handshake instead of after). Additionally, Windows code throws Win32Exception which does not make much sense on non-Windows platforms, but we probably do that already somewhere. There is room for improvement.",
                                           "updatedAt":  "2023-10-24T18:25:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p9y6a",
                                           "createdAt":  "2023-10-24T18:33:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "OpenSSL does not have API to inject alters expcilty. We may need to change the flow and du validation during handshake so it also actually fails at TLS level.\r\nIn 3.x we can use https://www.openssl.org/docs/man3.1/man3/SSL_want_retry_verify.html \r\nThere are discussion on Internet about async validation with OpenSSL 1.1",
                                           "updatedAt":  "2023-10-24T18:33:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6k5kb9",
                                           "createdAt":  "2025-03-31T15:13:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "So I gave this a try, seems like SSL_want_retry_verify works only on client-side, it is a no-op on server-side, so if we register a validation callback on the server (to validate client certificate), we need to provide the validation result during the callback.\n\nThis gives us a few choices:\n- Make a change only on client side, using SSL_want_retry_verify - this does not affect cases where .NET server rejects client cert, i.e. the case where getting alerts is more useful\n- perform the certificate validation from inside the callback, this option will give us trouble down the road if we ever decide to do async certificate validation (unless we request SSL_want_retry_verify support on server side as well, or decide to do the async validation \"the old way\").\n   - We can argue that any certificate validation on the server side which would profit from async (i.e. performing network I/O) is a bad practice and can live with sync-over-async there, but we need to keep in mind that not all users read the documentation.\n- combine the two approaches\n- do nothing and keep the existing behavior, as the amount of changes to achieve either of the above is nontrivial.\n\n@wfurt, any thoughts on this? I am inclined to move forward with using the callback directly. (also given the fact that SSL_want_retry_verify was added later in 3.0.2 to fix some backwards incompatible behavior introduced in 3.0.0, I would have to check if those versions are used by any major distro.).",
                                           "updatedAt":  "2025-03-31T15:14:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6k5x6S",
                                           "createdAt":  "2025-03-31T15:32:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "could this possibly work https://github.com/openssl/openssl/issues/10894 ?  \nI know it is even bigger change but it can be beneficial for other reasons and in practice I think we need to now worry only about OpenSSL 3+ ",
                                           "updatedAt":  "2025-03-31T15:32:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6paePb",
                                           "createdAt":  "2025-04-30T15:01:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEQVUuw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wfurt",
                                                                               "createdAt":  "2025-04-30T17:21:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rzikm",
                                           "body":  "While the async mode looks promising, it is not possible for us to use it, as it requires that following SSL_do_handshake are called on the *same* OS thread as the original call that was paused. which\n- is difficult to track, since even managed threads can jump native threads, failure to do this will crash the process at some point\n- completely beats the purpose for us, since the idea of async/await and threadpool is to continue the operation on any free threadpool thread\n\nas the famous saying goes, it\u0027s a trap next to a trap.",
                                           "updatedAt":  "2025-04-30T15:01:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6pcNHk",
                                           "createdAt":  "2025-04-30T17:23:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "Is that documented somewhere? I did not see anything obvious in SSL_do_handshake docs. ",
                                           "updatedAt":  "2025-04-30T17:23:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6p4bfD",
                                           "createdAt":  "2025-05-05T07:30:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "it\u0027s in https://docs.openssl.org/1.1.1/man3/SSL_get_error/#return-values, see last sentence\n\n\u003e SSL_ERROR_WANT_ASYNC\n\u003e \n\u003e The operation did not complete because an asynchronous engine is still processing data. This will only occur if the mode has been set to SSL_MODE_ASYNC using [SSL_CTX_set_mode(3)](https://docs.openssl.org/1.1.1/man3/SSL_CTX_set_mode/) or [SSL_set_mode(3)](https://docs.openssl.org/1.1.1/man3/SSL_CTX_set_mode/) and an asynchronous capable engine is being used. An application can determine whether the engine has completed its processing using select() or poll() on the asynchronous wait file descriptor. This file descriptor is available by calling [SSL_get_all_async_fds(3)](https://docs.openssl.org/1.1.1/man3/SSL_get_all_async_fds/) or [SSL_get_changed_async_fds(3)](https://docs.openssl.org/1.1.1/man3/SSL_get_all_async_fds/). The TLS/SSL I/O function should be called again later. The function must be called from the same thread that the original call was made from.\n\nWith that in mind, @wfurt, are you okay with doing the validation directly inside the callback? If we ever decide to do the async cert validation, then we should be able to do that using the `SSL_want_retry_verify` for the client in the future.",
                                           "updatedAt":  "2025-05-05T07:30:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6p9uEY",
                                           "createdAt":  "2025-05-05T16:18:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "That seems to be applicable only to SSL_get_changed_async_fds or SSL_get_all_async_fds, right? I\u0027m wondering if we could simply do \"engine\"  - like we do for Sockets to handle the management. We we would possibly need this only for the handshake, right? Or use `SSL_waiting_for_async` during handshake - that should be only few messages. But I can see this would not be trivial change and may impact perf so we should be careful. ",
                                           "updatedAt":  "2025-05-05T16:18:33Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Supports TLS alerts for cert validation for non-Windows platforms",
        "labels":  [
                       "enhancement",
                       "area-System.Net.Security",
                       "disabled-test",
                       "os-linux",
                       "os-mac-os-x"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/26323",
        "createdAt":  "2018-05-30T21:25:22Z",
        "number":  26323,
        "author":  "cocowalla",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODMOTmg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "erik4711",
                                            "createdAt":  "2019-03-01T15:42:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gingters",
                                            "createdAt":  "2019-10-15T15:13:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dif-sam",
                                            "createdAt":  "2023-12-19T04:11:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ygoe",
                                            "createdAt":  "2024-08-18T12:37:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EcmaXp",
                                            "createdAt":  "2025-03-27T01:32:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "patrikwlund",
                                            "createdAt":  "2025-08-22T02:11:59Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2025-05-28T15:28:58Z",
        "body":  "I\u0027m using the RabbitMQ C# Client, which under the hood uses `SslStream`. I\u0027m having an issue where clients are unable to authenticate using x509 certificates if intermediate certificates are involved - such a chain looks like:\r\n\r\nRoot CA -\u003e Issuing CA -\u003e Issued Client Certificate\r\n\r\nUsing Wireshark I can see that when authenticating as a client, `SslStream` is sending only the leaf certificate, which is causing a certificate handshake error. However, if the Root CA and Issuing CA are added to the Windows Certificate Store as trusted roots, then `SslStream` sends all 3 certificates, and RabbitMQ is happy.\r\n\r\nThe certificate I\u0027m using as the client cert is a PKCS#12 file that contains the whole chain (as `X509Certificate2`). So, the question is if there is any way to force `SslStream` to send the whole chain when authenticating as a client, even if the chain certs are not in the Windows Certificate Store?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpvVZ3g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MzMyNTUzNA==",
                                           "createdAt":  "2018-05-30T21:28:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "cc: @bartonjs ",
                                           "updatedAt":  "2018-05-30T21:28:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MzM0NjA0Ng==",
                                           "createdAt":  "2018-05-30T22:56:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "...except you\u0027re using the file, not a cert from the store, as the client id, right?  Very probably it\u0027s not loading the entire chain from the file (it only actually loads one), so the leaf has a reference value to the issuer cert (thumbprint?  not sure), but no idea what the actual cert is.  \r\nIf I remember right, you have to load the entire set of certs into a runtime store, then grab the leaf certificate from that.  The reason it works if it\u0027s in the windows cert store is that it does do lookup there by default.",
                                           "updatedAt":  "2018-05-30T22:56:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MzYzNjM0NQ==",
                                           "createdAt":  "2018-05-31T18:45:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cocowalla",
                                           "body":  "@Clockwork-Muse I\u0027m currently selecting the certificate from an `X509CertificateCollection` that contains the full chain.\r\n\r\nI figured the solution might involve creating some kind of temporary `X509Store`, but if I create a unique one for my app and select a certificate from it, it\u0027s still the case that only the leaf is sent - it only seems to send the whole chain if the others certs are in the My store (strangely, not the Machine store).\r\n\r\nIf you have any info on how to create a temporary store only visible to the app and have `SslStream` send the whole chain, some guidance would be much appreciated.",
                                           "updatedAt":  "2018-06-06T19:47:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5Mzg4NDIyMA==",
                                           "createdAt":  "2018-06-01T13:41:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cocowalla",
                                           "body":  "I\u0027ve checked from Linux, and observed the same behavior - the chain of intermediate certs is sent if I use the My certificate store, but _not_ if I create a unique one with `new X509Store(\"whatever\")`.\r\n\r\nI guess this is happening in `SecureChannel`, but that is a bit of a whale, and I\u0027m struggling to find _where_ in the code this actually takes please?",
                                           "updatedAt":  "2018-06-06T19:48:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MzkxMTc4MA==",
                                           "createdAt":  "2018-06-01T15:13:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cocowalla",
                                           "body":  "I\u0027ve managed to get it working as expected on Linux, by using the `SSL_CERT_FILE` environment variable:\r\n\r\n`SSL_CERT_FILE=/opt/my-app/etc/ca-bundle.crt ./My.App`\r\n\r\nWhen doing this, `SslStream` is sending the intermediate certificate as well as the leaf, and RabbitMQ is happy.\r\n\r\nIs there anything like this for Windows? @bartonjs, I guess if anyone would know it would be you? ;)",
                                           "updatedAt":  "2018-06-01T15:13:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDA2MDgyNw==",
                                           "createdAt":  "2018-06-02T05:44:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "@cocowalla - well, _often_, `SSL_CERT_FILE`/`SSL_CERT_DIR` are set to a global location, so it ends up being the equivalent of the Windows certificate store (I\u0027m currently cursing Python, because it uses about 3/4 different sets of certs during setup pulled in from different packages).  I guess the closest equivalent would be certs that only certain users would have permission to access (which you\u0027d normally want to do for the private key anyways).\r\n\r\n\r\nI thought I\u0027d discovered a way to load/send the entire chain when dealing with a different issue, but I can\u0027t recreate it now, possibly I just imagined it.\r\n\r\nWhat\u0027s your usecase here, that you wouldn\u0027t be adding the certs to the store anyways?",
                                           "updatedAt":  "2018-06-02T05:44:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDExMDIxMg==",
                                           "createdAt":  "2018-06-02T19:16:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cocowalla",
                                           "body":  "Regarding `SSL_CERT_FILE`/`SSL_CERT_DIR`, these certs are only for use by this particular application, so the env var is set just for the application.\r\n\r\nMy usecase was a (failed!) attempt to keep things simple by using the same approach on both Windows and Linux (keys stored in the filesystem, protected by ACLs). I\u0027ve decided to give up; I\u0027ll use `SSL_CERT_FILE` on Linux, and the My root and intermediate stores on Windows.\r\n\r\nI do however still think that `SslStream` should have some means of providing chain certs from ephemeral stores or a `X509Certificate2Collection`.",
                                           "updatedAt":  "2018-06-06T19:47:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDExNTE5Mw==",
                                           "createdAt":  "2018-06-02T20:32:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "While I agree that  it would be nice if `SslStream` would send the entire cert (which would probably require the actual cert domain types keeping their reference, or whatever), there\u0027s a problem with that: You\u0027re sidestepping the normal mechanism for chain resolution on the platforms.  If the cert end up in a resource bundle or something, it ends up being more difficult for the end user to configure.\r\n",
                                           "updatedAt":  "2018-06-02T20:32:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDExNjE2Mg==",
                                           "createdAt":  "2018-06-02T20:49:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cocowalla",
                                           "body":  "I don\u0027t really see it as side-stepping anything; more _augmenting_ the existing mechanism. The My store would still be used, but the ephemeral store or `X509Certificate2Collection` the cert came from would additionally be used to locate chain certs. I imagine most devs would expect this behaviour; if you load a chain from a PKCS12 file, it seems counter-intuitive to only use the leaf cert and completely ignore the chain certs.\r\n\r\nFor your last point, I\u0027d argue that most users would be comfortable replacing a file, and probably haven\u0027t even _heard_ of the Windows Certificate Store ;)",
                                           "updatedAt":  "2018-06-06T19:47:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDM5NzA0OA==",
                                           "createdAt":  "2018-06-04T15:30:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAgo9_Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mtttcgcg",
                                                                               "createdAt":  "2018-12-19T18:27:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "I don\u0027t really know the SChannel APIs (which provide TLS for us on Windows), but I think that they only take the single certificate, then internally do the chain building for sending the intermediates.\r\n\r\nThe Linux and macOS TLS APIs are a little more raw, so they might be more amenable to such a feature, but I wouldn\u0027t add a new feature that doesn\u0027t work on Windows (71% of the usage of .NET Core, as of last summer).",
                                           "updatedAt":  "2018-06-04T15:30:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDM5OTcwNQ==",
                                           "createdAt":  "2018-06-04T15:37:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cocowalla",
                                           "body":  "@bartonjs ah, that explains why I couldn\u0027t find anything in `SecureChannel` that sends the intermediate certs - I didn\u0027t realise it was using an SChannel API that\u0027s hard-coded to check against specific stores.\r\n\r\nI agree it makes no sense to add this unless it works across all platforms.",
                                           "updatedAt":  "2018-06-04T15:37:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MjI4MDA0Ng==",
                                           "createdAt":  "2019-10-15T15:49:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQBkRw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cocowalla",
                                                                               "createdAt":  "2019-10-15T16:06:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Clockwork-Muse",
                                                                               "createdAt":  "2019-10-15T16:22:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidsh",
                                                                               "createdAt":  "2019-10-15T16:43:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "uecasm",
                                                                               "createdAt":  "2020-01-07T05:14:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ViAl",
                                                                               "createdAt":  "2020-01-16T18:13:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JesperTreetop",
                                                                               "createdAt":  "2020-02-12T10:00:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dbeinder",
                                                                               "createdAt":  "2020-07-04T18:21:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Pilchard123",
                                                                               "createdAt":  "2020-11-19T13:43:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dif-sam",
                                                                               "createdAt":  "2023-12-19T04:16:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  9
                                                         },
                                           "author":  "gingters",
                                           "body":  "I like to bring this issue back to the table.\r\n\r\nWe have a aspnet core based service that should be deployed onto clients windows computers. They are most likely not publicly available on the internet, and the http API that our service provides should be secured. We have a self-signed root CA and an intermediate CA and this issues a certificate for each installation. This way we can also do client-certificate auth with our service as the client.\r\n\r\nWe really want to avoid to install our root and intermediate certificates into the trusted root CA store of the clients computers. We deem this a bad security practice and really want to avoid it.\r\n\r\nTechnically it is sufficient to use certificate pinning to our root CA cert within our dedicated client application. There is no need that any computer should be needed to completely trust our cert.\r\n\r\nSo there needs to be a way to tell kestrel on windows (which uses SslStream) to not only send the actual server certificate we configured but the complete chain, _without_ installing the chain in the trusted root store of the computer.\r\n\r\nThis is pretty counter intuitive if you create a .pfx file containing the complete chain (the server cert, the servers private key as well as both the root and intermediate CA certs), tell kestrel to use this file, and then, when its not working, find out that the `X509Certificate2` only represents a single cert from the file and not the chain, and there is no other way to tell the system where to find the certificates that it should send along except for exposing the computer of your client to a risk that usually should be prevented at all costs.\r\n\r\nSo, what is the actual plan to overcome this issue? Is there anything we could do to help get this sorted out?\r\n",
                                           "updatedAt":  "2019-10-15T15:49:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MjMwNDQzNQ==",
                                           "createdAt":  "2019-10-15T16:46:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidsh",
                                           "body":  "\u003eSo, what is the actual plan to overcome this issue? Is there anything we could do to help get this sorted out?\r\n\r\nI agree with your thoughts about the importance of this scenario. It should \"just work\".\r\n\r\nAs far as making progress on this issue, we need to understand what the capabilities/API of the underlying TLS stacks (SCHANNEL for Windows, OpenSsl for Linux, MacOS) are. At this point, we aren\u0027t sure the platforms support this functionality.",
                                           "updatedAt":  "2019-10-15T16:46:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NTEzMzIyOQ==",
                                           "createdAt":  "2020-02-12T10:16:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JesperTreetop",
                                           "body":  "I have almost exactly the same situation as @gingters . We would like to send the full chain if possible - and would also like to avoid placing root certificates in a user/computer-wide store for a variety of reasons. As mentioned, telling Kestrel to use a .pfx which provides a full chain and then having them conceptually \"dropped on the floor\" is not a good experience, and recent efforts (#31944) to be able to read formats that are often associated with carrying the full chain highlights this. \r\n\r\n(For anyone in the same situation who needs to have clients validate a certificate presented without its chain: if you can prime a list of potential certificates and get a grip on their chains beforehand, that\u0027s a good workaround. We can\u0027t, because the set of potential certificates is large and volatile. Our workaround right now is for the client to connect, receive the certificate, disconnect, use a secondary server or endpoint to retrieve the full chain and then connect again with the answer in hand. The alternative is to stall synchronously in the certificate validator, which is not only an incredibly bad idea but can also look hostile and malicious to the server, and is liable to be tripped up by defenses or timeouts in Kestrel or Schannel. Asynchronous certificate validation might have fixed this if this step wasn\u0027t supposed not to have huge pauses in it in the first place.)\r\n\r\nSchannel not supporting this is a reasonable explanation why, but considering alternate stacks can provide a solution it would be good to be able to opt into them. (And yes - I realize this is a big hammer, but it would also be able to pound in many nails.)",
                                           "updatedAt":  "2020-02-12T11:24:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwMTYwMzAxOQ==",
                                           "createdAt":  "2020-03-20T09:20:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwAHJA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cocowalla",
                                                                               "createdAt":  "2020-03-20T09:36:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JesperTreetop",
                                                                               "createdAt":  "2020-03-20T09:42:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Pilchard123",
                                                                               "createdAt":  "2020-05-28T10:51:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "erik4711",
                                                                               "createdAt":  "2020-09-02T06:58:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hbertsch",
                                                                               "createdAt":  "2022-11-22T10:01:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "knapsu",
                                           "body":  "Hi. We are having the exact same problem. Certificate _trust chain_ is broken because only the server leaf certificate is sent without the intermediate CA (and root CA). The PFX file had all the certs bundled. Very unexpected and problematic behavior.\r\n\r\nAs a workaround I am using HAProxy to terminate the SSL traffic and forward it to unencrypted port.",
                                           "updatedAt":  "2020-03-20T09:22:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NTI4MDk5NA==",
                                           "createdAt":  "2020-09-02T04:07:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODgG2bw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "erik4711",
                                                                               "createdAt":  "2020-09-02T06:58:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JesperTreetop",
                                                                               "createdAt":  "2020-09-02T08:33:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Pilchard123",
                                                                               "createdAt":  "2020-11-19T13:44:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pepone",
                                                                               "createdAt":  "2024-04-30T15:34:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "wfurt",
                                           "body":  "the server part will be fixed in 5.0. There is now option to pass [CertificateContext](https://docs.microsoft.com/en-us/dotnet/api/system.net.security.sslstreamcertificatecontext.create?view=net-5.0) with all chain - perhaps loaded from pfx or PEM file. However, on Windows that will add intermediates to the store if needed - there is no other way how to deal with it as the handshake actually does not happen in the same process space. That was recommended by Windows platform developers. \r\n\r\nThe client part will need some more work and thinking.\r\n\r\nIt also seems like this morphed from client to server side back in 2019. Since this is probably too late for @cocowalla, I\u0027m thinking about closing this and perhaps moving the server discussion to separate issue if needed - and the 5.0 behavior does not seem sufficient - #35844.",
                                           "updatedAt":  "2020-09-02T04:07:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NTQ0NjgwOA==",
                                           "createdAt":  "2020-09-02T08:37:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JesperTreetop",
                                           "body":  "Good to see some progress and that this issue is given some thought and attention. (Less good that the workaround is all that can happen on Windows, but that\u0027s not the fault of the .NET team.)",
                                           "updatedAt":  "2020-09-02T08:37:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GJA6a",
                                           "createdAt":  "2022-07-06T21:30:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOClho4w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cocowalla",
                                                                               "createdAt":  "2022-07-06T21:54:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "erik4711",
                                                                               "createdAt":  "2022-07-07T06:09:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "Reassigning to System.Net.Security since it\u0027s about SslStream.  The original issue was about client certs, and so far the SslCertificateContext type (which fixed it for the server role) isn\u0027t available to the client role.",
                                           "updatedAt":  "2022-07-06T21:30:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GJA9X",
                                           "createdAt":  "2022-07-06T21:30:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI\u0027m using the RabbitMQ C# Client, which under the hood uses `SslStream`. I\u0027m having an issue where clients are unable to authenticate using x509 certificates if intermediate certificates are involved - such a chain looks like:\r\n\r\nRoot CA -\u003e Issuing CA -\u003e Issued Client Certificate\r\n\r\nUsing Wireshark I can see that when authenticating as a client, `SslStream` is sending only the leaf certificate, which is causing a certificate handshake error. However, if the Root CA and Issuing CA are added to the Windows Certificate Store as trusted roots, then `SslStream` sends all 3 certificates, and RabbitMQ is happy.\r\n\r\nThe certificate I\u0027m using as the client cert is a PKCS#12 file that contains the whole chain (as `X509Certificate2`). So, the question is if there is any way to force `SslStream` to send the whole chain when authenticating as a client, even if the chain certs are not in the Windows Certificate Store?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecocowalla\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`bug`, `area-System.Net.Security`, `area-System.Security`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-06T21:30:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O4YlJ",
                                           "createdAt":  "2022-11-22T10:00:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hbertsch",
                                           "body":  "I think I am having the same issue here and so far (after days of trying) no solution for that. \r\n\r\nOur backend (which we can not touch) requires that two intermediate certificates are send along with the client certificate. In Wireshark we can observe, that only the client certificate is sent. When trying this with e.g. Python `Requests` or `CURL` this does not cause any issues. \r\n\r\nWe are now thinking about switching technology since we can not come up with a proper solution for this. Does anyone have a workaround for this problem? It is a bit shocking, that something \"simple\" as:\r\n\r\n`curl -v -s -k\\\r\n--request GET\\\r\n    --key-type PEM --key /PATH_TO_CERT_KEY\r\n    --cert-type PEM --cert /PATH_TO_CERT_WITH_CHAIN\r\n    https://SOMEHOSTNAME.COM`\r\n\r\nseems to be impossible to achieve with .Net Core...\r\n\r\nThis is the structure of our certificate:\r\n\r\n\u003e -----BEGIN CERTIFICATE-----\r\n\u003e // Client cert\r\n\u003e -----END CERTIFICATE-----\r\n\u003e -----BEGIN CERTIFICATE-----\r\n\u003e // intermediate\r\n\u003e -----END CERTIFICATE-----\r\n\u003e -----BEGIN CERTIFICATE-----\r\n\u003e //intermediate\r\n\u003e -----END CERTIFICATE-----\r\n\r\n",
                                           "updatedAt":  "2022-11-22T11:18:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O5DXW",
                                           "createdAt":  "2022-11-22T12:20:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "\u003e Does anyone have a workaround for this problem?\r\n\r\nThe workaround is to install the client intermediate certificates into the Windows certificate store (I think the \"My\" store is the right place).",
                                           "updatedAt":  "2022-11-22T12:20:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O6nLJ",
                                           "createdAt":  "2022-11-22T17:02:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwD99w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wfurt",
                                                                               "createdAt":  "2022-11-22T17:07:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hbertsch",
                                                                               "createdAt":  "2022-11-22T17:30:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2022-11-23T08:46:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "\u003e I think the \"My\" store is the right place\r\n\r\nIntermediates should go in `StoreName.CertificateAuthority`, which the Windows Certificate Store UI calls \"Intermediate Certificate Authorities\".  (They\u0027ll probably _work_ in the My store, but that\u0027s not the expected place)",
                                           "updatedAt":  "2022-11-22T17:02:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O6vWi",
                                           "createdAt":  "2022-11-22T17:30:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hbertsch",
                                           "body":  "Well, I noticed, that I can access my (mac OS) store using a [X509Store](https://learn.microsoft.com/de-de/dotnet/api/system.security.cryptography.x509certificates.x509store?view=net-7.0). However, this is only my dev machine and we have to deploy this stuff to Microsoft Azure on Linux driven `function apps`. Did not test this yet, but might give it a try, since @cocowalla  wrote:\r\n\r\n\u003e I\u0027ve checked from Linux, and observed the same behavior - the chain of intermediate certs is sent if I use the My certificate store, but not if I create a unique one with new X509Store(\"whatever\").\r\n\r\nSo I was thinking to maybe add and remove the intermediate certificates on the fly when executing our tests (context: we have hundreds of virtual entities, that are alle equipped with client certificates. Therefore it would be cool not to \"pollute\" the systems too much by adding certificates to the store).\r\n\r\nThank you @bartonjs for the hint with the `CertificateAuthority`, I will have a look into this tomorrow!",
                                           "updatedAt":  "2022-11-22T17:30:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O60W0",
                                           "createdAt":  "2022-11-22T17:50:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwCP9g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hbertsch",
                                                                               "createdAt":  "2022-11-22T18:29:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wfurt",
                                           "body":  "This will probably be solved by #71194 in 8.0. Note that on Windows there is no API to pass specific certificates. `SslStreamCertificateContext` puts the certificates to stores automatically as needed so callers do not need to worry about it. This is primarily about intermediates. The certificate _AND_ key still needs to be in a store on Windows as the handshake happens in separate process. (#23749)",
                                           "updatedAt":  "2022-11-22T17:50:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O9KL5",
                                           "createdAt":  "2022-11-23T07:34:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hbertsch",
                                           "body":  "Hi @bartonjs @rzikm I wrote the following code and tried to send it out. Should this be working? I still don\u0027t get the certificates sent with the request (no matter if I use `StoreName.CertificateAuthority` or `StoreName.My`). From what I understand, the `SslStreamCertificateContext` should now grab the certificates implicitly from the store when sending out the request:\r\n\r\n``` \r\n private void TestRegistration(X509Certificate2 clientCert, X509Certificate2 l1, X509Certificate2 l2,  X509Certificate2 root, string payload)\r\n    {\r\n        if (clientCert.HasPrivateKey == false)\r\n            throw new Exception(\"Client certificate is missing private key\");\r\n\r\n        // Prime Root store\r\n        var storeRoot = new X509Store(StoreName.AuthRoot);\r\n        storeRoot.Open(OpenFlags.ReadWrite);\r\n        storeRoot.Add(root);\r\n        storeRoot.Close();\r\n\r\n        // Prime CA store\r\n        var storeAuthorities = new X509Store(StoreName.CertificateAuthority);\r\n        storeAuthorities.Open(OpenFlags.ReadWrite);\r\n        storeAuthorities.Add(l1);\r\n        storeAuthorities.Add(l2);\r\n        storeAuthorities.Close();\r\n\r\n        var handler = new HttpClientHandler();\r\n        handler.ClientCertificateOptions = ClientCertificateOption.Manual;\r\n        handler.SslProtocols = SslProtocols.Tls12;\r\n\r\n        // Prime certificate store\r\n        var storeCerts = new X509Store(StoreName.My);\r\n        storeCerts.Open(OpenFlags.ReadWrite);\r\n        storeCerts.Add(clientCert);\r\n\r\n        // Freshly fetch the client cert from store\r\n        var storedCertificate = storeCerts.Certificates.Where(x =\u003e x.SerialNumber == clientCert.SerialNumber).First();\r\n        if (storedCertificate.HasPrivateKey == false)\r\n            throw new Exception(\"Client certificate is missing private key\");\r\n\r\n        handler.ClientCertificates.Add(storedCertificate);\r\n        storeCerts.Close();\r\n\r\n        handler.ServerCertificateCustomValidationCallback =\r\n            (httpRequestMessage, cert, cetChain, policyErrors) =\u003e\r\n            {\r\n                return true;\r\n            };\r\n\r\n        var content = new StringContent(payload, System.Text.Encoding.UTF8, \"application/json\");\r\n        var client = new HttpClient(handler);\r\n        var result = client.PutAsync(\"https:/MY_BACKEND_HOSTNAME.com/api/register\",\r\n            content).GetAwaiter().GetResult();\r\n\r\n        if (result.StatusCode != HttpStatusCode.OK)\r\n        {\r\n            var statuscode = result.StatusCode;\r\n            throw new SuccessException(\"Registration failed with \" + statuscode.ToString());\r\n        }\r\n    }\r\n```",
                                           "updatedAt":  "2022-11-23T11:21:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O90FP",
                                           "createdAt":  "2022-11-23T10:17:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JesperTreetop",
                                           "body":  "\u003e `store.Add(clientCert);`\r\n\r\nI do not know if this is the error, but you are adding the client certificate to the Certificate Authority store too. You may need to add it to the .My store. You may also need to Close/Dispose a store for the changes to take effect - I don\u0027t see anything confirming or denying this in the documentation.",
                                           "updatedAt":  "2022-11-23T10:17:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O984v",
                                           "createdAt":  "2022-11-23T10:47:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hbertsch",
                                           "body":  "Hi @JesperTreetop , I updated the code above ^ , **to now have two stores that are closed** before sending the request. Still not working. Is is pretty hard to guess what is going on in the back when doing it like this. I was wondering how the client will know, that the intermediates belong to the client certificate added to `handler.ClientCertificates.Add(storedCertificate)`",
                                           "updatedAt":  "2022-11-23T10:47:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O9_cv",
                                           "createdAt":  "2022-11-23T10:57:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JesperTreetop",
                                           "body":  "\u003e I was wondering how the client will know, that the intermediates belong to the client certificate\r\n\r\nIn the standard X509 certificate chain-of-trust way. The client certificate is signed/issued by the intermediate certificate and the intermediate certificate is signed/issued by the root CA certificate. Each certificate also contains \"issuer\" metadata through which you can find an issuing certificate. [See \"Issuer\" here, for example](https://crt.sh/?id=7684466911).\r\n\r\nCome to think of it, per [the documentation](https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.storename?view=netcore-3.1), the intermediate certificate should go in the `StoreName.CertificateAuthority` store and the root CA certificate should go in the `StoreName.Root` store. The intermediate certificate would be unable to find the root CA certificate (which issued the intermediate certificate) if only looking in the root store if it hadn\u0027t been added to the root store.",
                                           "updatedAt":  "2022-11-23T10:57:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O-H_e",
                                           "createdAt":  "2022-11-23T11:26:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hbertsch",
                                           "body":  "Hi @JesperTreetop, thank you for looking into this. I have now (again) updated the code above ^ and put the 3rd party root certificate into the `StoreName.AuthRoot`. Unfortunately this also did not help. In case you wonder, this is the certificate structure:\r\n```\r\nroot\r\n|_ intermediate L1\r\n     |_ intermediate L2\r\n          |_ client certificate \r\n```\r\nThey form a valid chain, which I also checked using the `openssl verify` command.  PS: I know that is odd, that the client needs to send the L2 and L1 certs to the server, but unfortunately this is out of my hands and we simply must do it this way :/",
                                           "updatedAt":  "2022-11-23T11:27:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O-Kje",
                                           "createdAt":  "2022-11-23T11:34:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwFY3Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hbertsch",
                                                                               "createdAt":  "2022-11-23T14:55:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "JesperTreetop",
                                           "body":  "I think maybe this is better answered by someone involved with that code. I\u0027m just some dude guessing. It would be great if this just worked as intended out of the box.",
                                           "updatedAt":  "2022-11-23T11:34:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PATe3",
                                           "createdAt":  "2022-11-23T18:17:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "You should not need to add to `AuthRoot` That modifies trust so it can be dangerous. Putting intermediates to `CertificateAuthority` makes them available but not trusted. Now, are you on Linux @hbertsch? Just confirming as the original issue is about _Windows_.  On Linux, the client certificate does not need to be in `X509Store` as all the handshake happens in application process. \r\n\r\nYou can add `X509Chain.Build(clientCert)` just before `handler.ClientCertificates.Add` to verify that the chain _could_ be constructed. If not, we need to debug that part. \r\n\r\nLast part is the certificate itself. Does it it have clients attributes e.g. proper KU/EKU? (#26531)\r\n\r\nas far as sending the intermediates: RFC for tls 1.2 states that client _should_ send them. Without it, the server may have difficulty to construct the chain if the certificate some from different CAs. \r\n",
                                           "updatedAt":  "2022-11-23T18:17:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PCaTZ",
                                           "createdAt":  "2022-11-24T07:00:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hbertsch",
                                           "body":  "Hi @wfurt, many thanks for your feedback. \r\nWe have Macs as developer machines but the target infra is Linux:\r\n\r\n\u003e Well, I noticed, that I can access my (mac OS) store using a [X509Store](https://learn.microsoft.com/de-de/dotnet/api/system.security.cryptography.x509certificates.x509store?view=net-7.0). However, this is only my dev machine and we have to deploy this stuff to Microsoft Azure on Linux\r\n\r\nI am sorry if this caused any confusion. To me it looked like a related problem. Should I move this to a new thread?\r\n\r\nI tried to use the `X509Chain` to check the certificate chain validity with success.\r\n\r\n```\r\n         var chain = new X509Chain();\r\n        chain.ChainPolicy.RevocationFlag = X509RevocationFlag.EntireChain;\r\n        chain.ChainPolicy.RevocationMode = X509RevocationMode.NoCheck;\r\n        chain.ChainPolicy.TrustMode = X509ChainTrustMode.CustomRootTrust;\r\n        chain.ChainPolicy.CustomTrustStore.Add(root);\r\n        chain.ChainPolicy.CustomTrustStore.Add(l1);\r\n        chain.ChainPolicy.CustomTrustStore.Add(l2);\r\n\r\n        var buildSuccess = chain.Build(clientCert);\r\n        if (buildSuccess == false)\r\n            return;\r\n\r\n        if (chain.ChainElements.Count != 4)\r\n            return;\r\n\r\n        // HttpClientHandler \r\n        handler.ClientCertificates.Add(clientCert);\r\n```\r\n\r\nThe KU \u0026 EKU of the client certificate are:\r\n\r\n```\r\n X509v3 Key Usage: critical\r\n                Digital Signature, Non Repudiation, Key Agreement\r\n X509v3 Extended Key Usage: \r\n                TLS Web Server Authentication, TLS Web Client Authentication\r\n```",
                                           "updatedAt":  "2022-11-24T07:19:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Pb44G",
                                           "createdAt":  "2022-11-30T20:39:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "You should not add the intermediates to `CustomTrustStore` as there is no way how `HttpClient` can do it at the moment. \r\nThe test is to verify that the chain _can_ be build just with OS trust or by adding intermediates to `StoreName.CertificateAuthority` store. If it cannot, `SslStream` and `HttpClient` won\u0027t be able to send it. Does it make sense? ",
                                           "updatedAt":  "2022-11-30T20:39:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YlzyU",
                                           "createdAt":  "2023-03-28T06:49:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hbertsch",
                                           "body":  "Good day @wfurt, due to other urgent project tasks we postponed the implementation of this particular part. Now I am turning back to this and still was not able to figure out how to get this to work.\r\n\r\nI hope it is ok if we continue discussing this in this thread since we are developing on macOS and will deloy it on linux on Azure. \r\n\r\nTo summarize what I need to achive: we need to send the leaf- and two intermediate certificates to the server (not the root certificate) for the server beeing able to trust the client.\r\n\r\nI was able to validate the chain using the following code:\r\n\r\n````\r\n[Test]\r\n    public void CheckCertificateChainValidity()\r\n    {\r\n        var leafCert = X509Certificate2.CreateFromPem(leafCertificate64.ToCharArray());\r\n        var lvl2Intermediate = X509Certificate2.CreateFromPem(LVL_2_Intermediate64.ToCharArray());\r\n        var lvl1Intermediate = X509Certificate2.CreateFromPem(LVL_1_Intermediate64.ToCharArray());\r\n        var rootCa = X509Certificate2.CreateFromPem(rootCa64.ToCharArray());\r\n\r\n        // Create a new chain and add the certificates to it\r\n        var chain = new X509Chain();\r\n        chain.ChainPolicy.RevocationFlag = X509RevocationFlag.EntireChain;\r\n        chain.ChainPolicy.RevocationMode = X509RevocationMode.NoCheck;\r\n        chain.ChainPolicy.TrustMode = X509ChainTrustMode.CustomRootTrust;\r\n        chain.ChainPolicy.VerificationFlags = X509VerificationFlags.AllFlags;\r\n        chain.ChainPolicy.CustomTrustStore.Add(lvl2Intermediate);\r\n        chain.ChainPolicy.CustomTrustStore.Add(lvl1Intermediate);\r\n        chain.ChainPolicy.CustomTrustStore.Add(rootCa);\r\n\r\n        chain.Build(leafCert);\r\n\r\n        // Check if the chain is valid\r\n        var chainIsValid = chain.ChainStatus.Length == 0;\r\n\r\n        if (!chainIsValid)\r\n        { \r\n            var statusText = chain.ChainStatus.First().StatusInformation;\r\n        }\r\n\r\n        Assert.That(chainIsValid, Is.EqualTo(true));\r\n        \r\n        // Clean up\r\n        chain.Reset();\r\n    }\r\n````\r\n\r\nHowever, I do not understand how to properly add / store the certificates, so that the `HttpClient` (and as of your explanation the `SslStream`)  can use and send them to the server.\r\n\r\nI did not add those certificates to my system store (macOS Keychain) manually. This should also not be the goal, since the application is build to test a large sum of devices (clients) where each device comes with its own client certificate and might have differing intermediate certificates etc. \r\n\r\nSo I tried using the `StoreName.CertificateAuthority` without success. Would you please have a look at the code below? Maybe I have a fundamental problem understanding the use of the `X509Store` in conjunction with `HttpClient` / `HttpClientHandler`.\r\n\r\n`````\r\n[Test]\r\n    public async Task RegisterDevice()\r\n    {\r\n        var leafCert = X509Certificate2.CreateFromPem(leafCertificate64.ToCharArray());\r\n        var lvl2Intermediate = X509Certificate2.CreateFromPem(LVL_2_Intermediate64.ToCharArray());\r\n        var lvl1Intermediate = X509Certificate2.CreateFromPem(LVL_1_Intermediate64.ToCharArray());\r\n        var rootCa = X509Certificate2.CreateFromPem(rootCa64.ToCharArray());\r\n\r\n        // Check the chain validity before continuing\r\n        Assert.DoesNotThrow(() =\u003e CheckCertificateChainValidity());\r\n\r\n        // Add Root CA to System CA Store\r\n        var store = new X509Store(StoreName.CertificateAuthority);\r\n        store.Open(OpenFlags.ReadWrite);\r\n        store.Add(lvl2Intermediate); // probably not required\r\n        store.Add(lvl1Intermediate);  // probably not required\r\n        store.Add(rootCa);\r\n        store.Close();\r\n\r\n        var handler = new HttpClientHandler();\r\n        handler.ServerCertificateCustomValidationCallback = (sender, certificate, chain, sslPolicyErrors) =\u003e true;\r\n        handler.ClientCertificateOptions = ClientCertificateOption.Manual;\r\n        handler.SslProtocols = System.Security.Authentication.SslProtocols.Tls12;\r\n        handler.CheckCertificateRevocationList = false;\r\n\r\n        var key = ECDsa.Create(\"ECDsa\");\r\n        var keybytes = Convert.FromBase64String(leafKey);\r\n        key.ImportECPrivateKey(keybytes, out _);\r\n        var leafCertWithKey = leafCert.CopyWithPrivateKey(key);\r\n        \r\n        // add certificates to the http handler\r\n        handler.ClientCertificates.Add(leafCertWithKey);\r\n        handler.ClientCertificates.Add(lvl2Intermediate);\r\n        handler.ClientCertificates.Add(lvl1Intermediate);\r\n\r\n        var httpClient = new HttpClient(handler);\r\n        var xmlContent = File.ReadAllText(payloadPath);\r\n        var requestContent = new StringContent(xmlContent, Encoding.UTF8, \"application/xml\");\r\n        var response = await httpClient.PostAsync(uri, requestContent);\r\n\r\n        Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.OK));\r\n    }\r\n`````\r\n\r\nThe result is always: \r\n\r\n\u003cimg width=\"501\" alt=\"leafOnly\" src=\"https://user-images.githubusercontent.com/14974052/228151547-3e47a1e4-9733-41cb-8149-dff7b54fe9ea.png\"\u003e\r\n\r\nI would be happy to discuss this in person if it is of any help.\r\n",
                                           "updatedAt":  "2023-03-28T06:50:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Yl7da",
                                           "createdAt":  "2023-03-28T07:16:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC4rkGg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "hbertsch",
                                                                               "createdAt":  "2023-03-28T07:54:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rzikm",
                                           "body":  "@hbertsch\r\n\r\n\u003e I did not add those certificates to my system store (macOS Keychain) manually. This should also not be the goal, since the application is build to test a large sum of devices (clients) where each device comes with its own client certificate and might have differing intermediate certificates etc.\r\n\r\nIn 8.0, we have added support for `SslClientAuthenticationOptions.ClientCertificateContext`, where you can specify a context created via `SslCertificateContext.Create(certificate, intermediateCerts, ...). It will internally build the chain and if it builds, the chain will be used and sent over the wire.\r\n\r\nUnfortunately, you can\u0027t provide the entire chain to SslClient/HttpClient in 7.0 (or earlier). You can provide only the (leaf) client certificate and SslStream will build the SslStreamCertificateContext internally (without specifying additional intermediates), so if the intermediates are somehow custom (i.e. not present in the system-wide intermediate certs stores), they will not be found and will not be sent over the wire.",
                                           "updatedAt":  "2023-03-28T07:16:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YmLKq",
                                           "createdAt":  "2023-03-28T08:07:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hbertsch",
                                           "body":  "@rzikm that is a pitty. I guess, since 8.0 is currently in preview, it will take a while until it is supported by Azure Functions and therefore not usable (for us) as of now. \r\n\r\nCould you give an example of how `SslCertificateContext.Create(...` would be best implemented in aboves test (for dotnat 8.0)? This would be helpfull.\r\n\r\nMany thanks!\r\n\r\n## Edit\r\nWhen adding both intermediate and the root certificate to the macOS system truststore (Keychain) and trusting the root it is working (dotnet 6.0):\r\n\r\n\u003cimg width=\"459\" alt=\"Bildschirm­foto 2023-03-28 um 10 37 31\" src=\"https://user-images.githubusercontent.com/14974052/228179173-04d473ae-359b-4521-b497-689b0c741dd6.png\"\u003e\r\n",
                                           "updatedAt":  "2023-03-28T08:40:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Yowv6",
                                           "createdAt":  "2023-03-28T15:12:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC4ucPA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hbertsch",
                                                                               "createdAt":  "2023-03-28T17:16:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wfurt",
                                           "body":  "yes, it should as long as X509Chain can find them. (watch for #80490 on macOS)\r\nAs far example, you can perhaps look at our tests @hbertsch  like\r\nhttps://github.com/dotnet/runtime/blob/95df571be36ed8973d09746b61fae16b2e3f251f/src/libraries/System.Net.Security/tests/FunctionalTests/SslStreamNetworkStreamTest.cs#L919\r\n\r\n",
                                           "updatedAt":  "2023-03-28T15:12:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bdtqs",
                                           "createdAt":  "2023-05-04T10:34:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD65GiA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wfurt",
                                                                               "createdAt":  "2023-05-04T15:49:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2023-05-09T11:57:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "niqqq25",
                                                                               "createdAt":  "2024-05-26T14:05:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Tyrrx",
                                                                               "createdAt":  "2024-11-14T14:50:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "hbertsch",
                                           "body":  "Hello again @wfurt , I had a closer look into the referenced tests and understand the following:\r\n\r\n```\r\n# clientCertificate = the X509Certificate2 client certificate including the private key \r\n# clientChain = a X509Certificate2Collection containing the root and leaf certificates from which the client clientCertificate is derived from\r\n# TargetHost = whatever hostname our server has\r\n\r\nvar clientOptions = new SslClientAuthenticationOptions()\r\n{\r\n      TargetHost = \"localhost\",\r\n};\r\n# ignores server certificate validation errors\r\nclientOptions.RemoteCertificateValidationCallback = (sender, certificate, chain, sslPolicyErrors) =\u003e true;\r\n# this is where the magic happens and the SSL stream gets the context to be used with the clientCertificate. After setting the certificate and the chain here, the chain should be sent alongside with the client certificate in dotnet v8\r\nclientOptions.ClientCertificateContext = SslStreamCertificateContext.Create(clientCertificate, clientChain);\r\n```\r\n\r\nBut how can this be used with our existing implementations where we use the `HttpClient` from `System.Net.Http`? Should the HttPClient implicitly use the updated SslStream? Is this currently only supported when working with raw `SslStream`objects? \r\n\r\nI am on `8.0.100-preview.2.23157.25` of the sdk\r\n\r\n## Update: \r\n\r\nI guess I have awnsered my own question by playing around with the code now. I don\u0027t know if there is a better way but if I use this approach, all certificates are sent and we have a **successful** response:\r\n\r\n````\r\n...\r\n        // Set client certificate options\r\n        var clientOptions = new SslClientAuthenticationOptions()\r\n        {\r\n            EnabledSslProtocols = System.Security.Authentication.SslProtocols.Tls12,\r\n            AllowRenegotiation = true\r\n        };\r\n\r\n        clientOptions.RemoteCertificateValidationCallback = (sender, certificate, chain, sslPolicyErrors) =\u003e true;\r\n        clientOptions.ClientCertificateContext = SslStreamCertificateContext.Create(leafCertWithKey, chain);\r\n        \r\n         // Create an HTTP client with the SSL stream as the transport\r\n        var httpClient = new HttpClient(new SocketsHttpHandler\r\n        {\r\n            SslOptions = clientOptions\r\n        });\r\n\r\n        // var httpClient = new HttpClient(handler);\r\n        var requestContent = new StringContent(xmlContent, Encoding.UTF8, \"application/xml\");\r\n        var response = await httpClient.PutAsync(uri, requestContent);\r\n\r\n        Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.OK));\r\n...\r\n\r\n````\r\nThanks for your help here. Looking forward to dotnet v8 LTS :)\r\n",
                                           "updatedAt":  "2023-05-04T12:04:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53Vvpl",
                                           "createdAt":  "2024-03-16T23:45:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD61c3w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2024-03-18T08:20:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Tyrrx",
                                                                               "createdAt":  "2024-11-14T08:04:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tomrus88",
                                           "body":  "Why is this still not fixed and we are forced to create different workarounds?\r\n\r\nYesterday I\u0027ve discovered that when you use SslServerAuthenticationOptions/SslStreamCertificateContext classes, certificates are being secretly added into Windows Certificate store without my consent. This is unacceptable and there\u0027s should be a way for developer to provide what he wants to send and it should just work without polluting random system stores...\r\n\r\nAfter 6 years Microsoft still not fixed such a simple bug... Unbelievable...\r\n",
                                           "updatedAt":  "2024-03-16T23:46:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53WF7B",
                                           "createdAt":  "2024-03-17T02:06:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "\u003e After 6 years Microsoft still not fixed such a simple bug... Unbelievable...\r\n\r\nfeel free to contribute. This is open source project. This comes from limitation of the underlying schannel. If you know way how to do it please share it @tomrus88 ",
                                           "updatedAt":  "2024-03-17T02:06:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53d25S",
                                           "createdAt":  "2024-03-18T15:59:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "\u003e Yesterday I\u0027ve discovered that when you use SslServerAuthenticationOptions/SslStreamCertificateContext classes, certificates are being secretly added into Windows Certificate store without my consent.\r\n\r\nPresumably the CA (Intermediates) store?  Windows (the OS) does that when building a chain that a) it had to go find the intermediate and b) it ultimately trusted.  That saves it the work of repeating \"find it\" in the future.  The CA/Intermediates store implies no trust, the OS just treats it as a cache.",
                                           "updatedAt":  "2024-03-18T15:59:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53em5F",
                                           "createdAt":  "2024-03-18T17:21:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "I believe he means this particular piece of code.\r\n\r\nhttps://github.com/dotnet/runtime/blob/4bbde33ac01496375ee8902c886c9f0c3c7c709c/src/libraries/System.Net.Security/src/System/Net/Security/SslStreamCertificateContext.Windows.cs#L43-L101",
                                           "updatedAt":  "2024-03-18T17:21:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IzsJ5",
                                           "createdAt":  "2024-08-18T12:51:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ygoe",
                                           "body":  "This is a very long discussion and I can\u0027t follow it entirely. I have an SslStream on the server side and need it to present a server certificate along with the CA certificate that signed it (both selfmade, in a local network). Did I understand it correctly that Windows 11 is uncapable of providing that? And .NET 8 relies on that Windows thing that\u0027s not suitable for the task? Can we please have OpenSSL in .NET on every platform if Windows doesn\u0027t support such basic scenarios? OpenVPN handles selfmade CA and other certificates effortlessly. So I assume that the Windows kernel isn\u0027t needed for SSL. (I\u0027d even consider it dangerous to let the privileged kernel handle such complex data from the network!)",
                                           "updatedAt":  "2024-08-18T12:51:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6I2Qw8",
                                           "createdAt":  "2024-08-19T08:05:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "@ygoe \r\n\r\n\u003e I have an SslStream on the server side and need it to present a server certificate along with the CA certificate that signed it (both selfmade, in a local network). Did I understand it correctly that Windows 11 is uncapable of providing that?\r\n\r\nThis issue is quite old and there have been some changes made since it was filed. In currently supported versions of .NET, you can construct `SslStreamCertificateContext` with the leaf+intermediate certificates you want your app to use and then supply it to the authentication options. It is fully supported for server side, but for client side, the property was added only in .NET 8 and there is no way to explicitly provide cert chain for the client side.\r\n\r\nSee specifically these two comments\r\n- https://github.com/dotnet/runtime/issues/26323#issuecomment-1486337882\r\n- https://github.com/dotnet/runtime/issues/26323#issuecomment-1534515884\r\n\r\n\u003e Can we please have OpenSSL in .NET on every platform if Windows doesn\u0027t support such basic scenarios?\r\n\r\nThere are many reasons why we can\u0027t use OpenSSL on Windows. Short version is that .NET tries *very* hard not to ship any cryptograpic code and relies on libraries ubiquitously present on the target platform. This is very much off-topic, but just to humor you I will list a few obstacles to relying on OpenSSL on windows:\r\n- Shipping openssl - openssl is not present on all Windows machines by default, .NET installations would have to redistribute the openssl binaries, which has implications for the following points\r\n- Security - imagine having self-contained application running somewhere, self-contained means the openssl binaries need to be packaged with the applications, now a critical vulnerability gets discovered, to protect your app, you need to wait until a new version of .NET with fixed openssl bin is available, and rebuild and redeploy your application (i.e. significant delay)\r\n- Security (again) - Windows architecture regarding certificates works in such a way that the private keys are never in the memory of the program itself (they are loaded by a privileged process `lsass` and all operations happen over IPC with the applications), this means that private keys cannot be dumped from your applications memory.\r\n- FIPS compliance - some customers require all crypto in an application to be FIPS compliant, since .NET would ship openssl binaries, it would be our burden to make sure the binaries we ship are FIPS compliant.",
                                           "updatedAt":  "2024-08-19T08:05:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TmAg0",
                                           "createdAt":  "2024-11-14T12:19:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tyrrx",
                                           "body":  "Would something like this work with managed HttpClients?\n\n```cs\nbuilder.Services.AddHttpClient(\"sample\").UseSocketsHttpHandler((handler, sp) =\u003e\n{\n    handler.SslOptions = new SslClientAuthenticationOptions\n    {\n        // Pass in the mTLS cert and its chain here\n        ClientCertificateContext = SslStreamCertificateContext.Create(new X509Certificate2(), new X509Certificate2Collection())\n    };\n});\n```",
                                           "updatedAt":  "2024-11-14T12:19:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TmuzJ",
                                           "createdAt":  "2024-11-14T13:49:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD65F6g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Tyrrx",
                                                                               "createdAt":  "2024-11-14T14:49:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rzikm",
                                           "body":  "\u003e Would something like this work with managed HttpClients?\n\u003e \n\u003e builder.Services.AddHttpClient(\"sample\").UseSocketsHttpHandler((handler, sp) =\u003e\n\u003e {\n\u003e     handler.SslOptions = new SslClientAuthenticationOptions\n\u003e     {\n\u003e         // Pass in the mTLS cert and its chain here\n\u003e         ClientCertificateContext = SslStreamCertificateContext.Create(new X509Certificate2(), new X509Certificate2Collection())\n\u003e     };\n\u003e });\n\nYes, this approach should work on all platforms and is the recommended way to pass certificates.\n\nIdeally also make sure the SslStreamCertificateContext object is getting reused as it\u0027s reuse removes some computation cost from the TLS handshake. I am not sure how many times the provided callback is invoked.",
                                           "updatedAt":  "2024-11-14T13:49:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TnIGI",
                                           "createdAt":  "2024-11-14T14:33:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD65GXQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Tyrrx",
                                                                               "createdAt":  "2024-11-14T14:50:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "\u003e I am not sure how many times the provided callback is invoked.\n\nFrom HttpClientFactory perspective, every time a new handler gets created, meaning at most every `HandlerLifetime` time period (by default 2 mins)",
                                           "updatedAt":  "2024-11-14T14:33:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TnTSH",
                                           "createdAt":  "2024-11-14T14:49:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD65IfQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CarnaViire",
                                                                               "createdAt":  "2024-11-14T14:53:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Tyrrx",
                                           "body":  "\u003e Ideally also make sure the SslStreamCertificateContext object is getting reused as it\u0027s reuse removes some computation cost from the TLS handshake. I am not sure how many times the provided callback is invoked.\n\nPerfect, thanks. Then I create a lazy factory for it and register the factory in the service provider.",
                                           "updatedAt":  "2024-11-14T14:49:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TqihV",
                                           "createdAt":  "2024-11-14T21:01:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD7AHKQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2024-11-15T07:29:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Tyrrx",
                                                                               "createdAt":  "2024-11-15T07:36:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "wfurt",
                                           "body":  "Note that the SslStreamCertificateContext puts certificates to store as needed as the fundamental limitation comes from underlying windows api",
                                           "updatedAt":  "2024-11-14T21:01:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6m9Vne",
                                           "createdAt":  "2025-04-14T09:36:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathanantoine",
                                           "body":  "On the same topic, is there a way to send the root certificate and not only the intermediate ? \nRoot certificates are completely ignored from .net api. \n\nI am moving from gRPC.Core to gRPC.Net and this is a breaking changes (that breaks my existing clients...).",
                                           "updatedAt":  "2025-04-14T09:36:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6m98cX",
                                           "createdAt":  "2025-04-14T10:29:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pepone",
                                           "body":  "\u003e On the same topic, is there a way to send the root certificate and not only the intermediate ?\n\nWhat is the use case here? I don\u0027t see why you would want to use a root certificate send by the peer.",
                                           "updatedAt":  "2025-04-14T10:29:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nMpDd",
                                           "createdAt":  "2025-04-15T13:44:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEOZelg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wfurt",
                                                                               "createdAt":  "2025-04-15T13:45:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pepone",
                                                                               "createdAt":  "2025-04-15T15:05:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "rzikm",
                                           "body":  "\u003e On the same topic, is there a way to send the root certificate and not only the intermediate ?\n\nI second the question here, sending the trust root over the wire does not do anything from security/trust standpoint. if the root cert would be trusted, then the peer would already have it available locally, and if it does not have it then the peer is not going to trust it (it can\u0027t verify that the other side sent a genuine copy as root certificates are self-signed)",
                                           "updatedAt":  "2025-04-15T13:44:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6orPwF",
                                           "createdAt":  "2025-04-25T09:40:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathanantoine",
                                           "body":  "@pepone @rzikm In the first place : this is the behavior of other SSL server implementation and it brings breaking changes when migrating to Kestrel. \n\nSometimes you want SSL to encrypt the communication and you can use this feature to get the certificate chain first and then trust it for SSL communication. \n\nYou can not always relies on the fact that the client already knows the final server root certificate, especially in IOT contexts.",
                                           "updatedAt":  "2025-04-25T09:40:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ot4vL",
                                           "createdAt":  "2025-04-25T14:30:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "\u003e this is the behavior of other SSL server implementation\n\nYou mean there is a difference between gRPC.Core and gRPC.Net server implementations while running on the same .NET version? Unless one of the servers uses custom TLS stack, there should not be any differences between the two.\n\nMoreover, with SslStream, I don\u0027t think either .NET Framework or .NET Core (on either platform?) ever sent root certificate during the handshake. changing the code to include it in the handshake is undesireable in general (increased size and time of the handshake), but it seems possible to implement it and tie it to a new parameter on the autentication options. If you are interested in such a feature, please file a separate issue.\n\n\u003e Sometimes you want SSL to encrypt the communication and you can use this feature to get the certificate chain first and then trust it for SSL communication.\n\nI don\u0027t understand what you are trying to say, you can override the certificate validation result via the RemoteCertificateValidationCallback. If you mean that you can get the root cert from the target peer and save it in a trusted store for future connections, then you effectively open the app to MITM attacks.\n\n\u003e You can not always relies on the fact that the client already knows the final server root certificate, especially in IOT contexts.\n\nI don\u0027t have experience with IOT, but this sounds to me that either IOT devices are vulnerable to MITM attacks, or there is some other mechanism for verifying the server\u0027s identity which does not require access to the root cert (public key pinning?) I still don\u0027t see how sending the root certificate in the handshake helps here. If you decide to file the feature request, please describe the scenario where sending the root certificate during the handshake is important.",
                                           "updatedAt":  "2025-04-25T14:30:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oun3I",
                                           "createdAt":  "2025-04-25T15:51:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "If it comes to it, you can also choose to trust any intermediate cert @jonathanantoine. If you feel strongly about it we should open separate issue to track it as it is not related to the original post e.g. Windows store dependency. ",
                                           "updatedAt":  "2025-04-25T15:51:11Z"
                                       }
                                   ],
                         "totalCount":  55
                     },
        "title":  "SslStream only sends chain certs if they\u0027re in the Windows Cert Store",
        "labels":  [
                       "bug",
                       "area-System.Net.Security",
                       "tracking-external-issue"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1979",
        "createdAt":  "2020-01-21T20:04:57Z",
        "number":  1979,
        "author":  "wfurt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODGJ3mQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "igbenic",
                                            "createdAt":  "2023-07-28T18:33:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ricardoboss",
                                            "createdAt":  "2023-09-14T11:18:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Will-Low",
                                            "createdAt":  "2024-07-15T22:25:00Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "istipeti",
                                            "createdAt":  "2024-10-07T19:17:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "v1r",
                                            "createdAt":  "2024-10-10T17:17:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "burakberkkeskin",
                                            "createdAt":  "2024-10-17T07:11:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pepone",
                                            "createdAt":  "2024-11-04T20:22:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tina-hello",
                                            "createdAt":  "2024-11-14T08:43:29Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "krispypen",
                                            "createdAt":  "2024-12-02T13:11:25Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "johnnypea",
                                            "createdAt":  "2025-02-26T16:14:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "johnnypea",
                                            "createdAt":  "2025-02-26T16:14:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jerschneid",
                                            "createdAt":  "2025-04-06T15:53:54Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "jerschneid",
                                            "createdAt":  "2025-04-06T16:16:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danielwegener",
                                            "createdAt":  "2025-05-15T11:00:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alkhimey",
                                            "createdAt":  "2025-06-02T18:52:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "frank-applab",
                                            "createdAt":  "2025-07-08T10:46:25Z"
                                        }
                                    ],
                          "totalCount":  16
                      },
        "updatedAt":  "2025-08-22T17:17:11Z",
        "body":  "It seems like on Catalina TLS1.3 works out of the box - at least with Safari. \r\nHowever, when I try to use in .NET I get the following error:\r\n```\r\nSystem.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception.\r\n ---\u003e System.Security.Authentication.AuthenticationException: Authentication failed, see inner exception.\r\n ---\u003e Interop+AppleCrypto+SslException: bad protocol version\r\n   --- End of inner exception stack trace ---\r\n```\r\n\r\nThis may be because API we currently use is marked as obsolete or there may be something missing since TLS1.3 support got out before Catalina. And all TLS1.3 tests are disabled on all versions of MacOS. \r\n\r\n\r\nrelated to https://github.com/dotnet/runtime/issues/1720\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOt9-gEQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzNDMxMTQ5Mg==",
                                           "createdAt":  "2020-05-26T22:21:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "It seems like we will need to rewrite PAL to use new Network framework API.\r\nThat should fix iOS as well.\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/tls/5QjzTilqjomSyzENtgfaAqQOhbA/\r\n\r\n",
                                           "updatedAt":  "2020-05-26T22:21:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NjMxNDAyOA==",
                                           "createdAt":  "2020-06-18T21:26:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: Will require PAL rewrite on Mac -- out of scope of 5.0.\r\nThe new Catalina API will help also iOS and light up TLS 1.3 there.",
                                           "updatedAt":  "2020-06-18T21:26:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AMRCl",
                                           "createdAt":  "2022-03-24T00:43:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chucker",
                                           "body":  "Is this still current? In a .NET 6 console app with macOS 12.3 against a host that _only_ seems to support TLS 1.3, I still get the same stacktrace as above. .NET info:\r\n\r\n\u003cdetails\u003e\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.201\r\n Commit:    ef40e6aa06\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  12.3\r\n OS Platform: Darwin\r\n RID:         osx.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/6.0.201/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.3\r\n  Commit:  c24d9a9c91\r\n\r\n.NET SDKs installed:\r\n  6.0.201 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.3 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-24T01:03:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5APTdJ",
                                           "createdAt":  "2022-03-24T15:26:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCUheig==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "chucker",
                                                                               "createdAt":  "2022-03-24T15:28:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wfurt",
                                           "body":  "yes, it is @chucker. #27727 has more detail but it is essentially same work. It is not clear at this moment if it is even feasible. ",
                                           "updatedAt":  "2022-03-24T15:26:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Crwzs",
                                           "createdAt":  "2022-05-05T16:23:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bhoffman-splunk",
                                           "body":  "Not to add pressure, but I am more and more encountering TLS 1.3-only systems. This is especially true for internal, greenfield APIs that companies build, since they can \"start secure\" from the beginning. Any work around (such leveraging OpenSSL as is done in Linux) would be tremendously helpful.",
                                           "updatedAt":  "2022-05-05T16:23:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CsO7V",
                                           "createdAt":  "2022-05-05T18:04:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "Is there need for client, server or both? I was thinking about some fallback because to allow HTTP2 for macOS developers (https://github.com/dotnet/runtime/issues/27727) We generally do that for HTTP3/Quic (preview in 6.0) so we have some parts already in a place. _if_ we go down this path, it would probably be opt-in feature with dependency on OpenSSL from Brew/MacPorts. Would that be acceptable? ",
                                           "updatedAt":  "2022-05-05T18:04:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CsSIo",
                                           "createdAt":  "2022-05-05T18:17:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCbdYfw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wfurt",
                                                                               "createdAt":  "2022-05-05T18:19:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "chucker",
                                           "body":  "@wfurt client in my case. macOS as a server is uncommon. But server might still be useful (if less important) for developers who run Kestrel on a Mac?",
                                           "updatedAt":  "2022-05-05T18:17:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CsVib",
                                           "createdAt":  "2022-05-05T18:32:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "And yes, the server part would be for Mac developers (like me). Production deployment of Kestrel on macOS is unlikely IMHO. \r\n\r\nJust to elaborate more since the use case here is different from  https://github.com/dotnet/runtime/issues/27727.\r\n\r\nAside testing and support, the biggest challenge with using OpenSSL on macOS is integration with keychain and certificate management. Using Apple\u0027s AP allows to use private keys that are non-exportable and private keys are not in core dumps. And Apple packages LibreSSL instead of OpenSSL and that is not binary compatible. So dependency management is going to be hard. \r\n\r\nThe new Apple\u0027s api makes it very difficult (and maybe impossible) for `SslStream` to consume. Based on testing @filipnavara did, client may be easier and there may some possibilities. The challenge would be moving forward with client if there is not solution for the server. That would effectively mean we would need to maintain both PAL layers. ",
                                           "updatedAt":  "2022-05-05T18:32:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Cvrnx",
                                           "createdAt":  "2022-05-06T16:32:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1El4A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elias-ik",
                                                                               "createdAt":  "2024-02-22T21:30:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "istipeti",
                                                                               "createdAt":  "2024-10-07T10:27:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "bhoffman-splunk",
                                           "body":  "@wfurt sorry for not being more clear. This is for clients.\r\n\r\nAs a client, not being able to make encrypted connections to TLS 1.3-only services/servers is by far the bigger issue. I\u0027m finding companies start a new green-field API or service, and configure it to only use TLS 1.3. Writing .NET code that can talk to services configured like this will only grow with time.\r\n\r\nAt this point I\u0027m literally shelling out from .NET to run \"ncat + openssl\" via the `Process` class to make requests for me and get the response, which is super clumsy and slow.",
                                           "updatedAt":  "2022-05-06T18:08:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Cv3Yt",
                                           "createdAt":  "2022-05-06T17:38:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCbpvJQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "bhoffman-splunk",
                                                                               "createdAt":  "2022-05-06T18:09:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2022-05-06T18:51:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "wfurt",
                                           "body":  "ok. thanks for the feedback @bhoffman-splunk and @chucker. I\u0027m not sure if this fits to 7.0 but I\u0027ll try to take another look and I\u0027ll sync up with with @filipnavara.",
                                           "updatedAt":  "2022-05-06T17:38:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CwKgc",
                                           "createdAt":  "2022-05-06T18:52:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I am gonna be away for the next week but happy to discuss it when I get back.",
                                           "updatedAt":  "2022-05-06T18:52:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JcENb",
                                           "createdAt":  "2022-08-30T19:47:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC7PPIQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "acidus99",
                                                                               "createdAt":  "2023-05-07T17:12:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidkaya",
                                           "body":  "Hi, are there any plans on supporting TLS 1.3 on macOS in future .NET releases? \r\n\r\nOur usecase is that we have customers with 10s of thousands of users using our software (.NET 6) on their macOS. The server side is deployed on a Windows Server which has only TLS 1.3 enabled. The software deployed on workstations currently cannot communicate with the server side due to the TLS 1.3 requirement.",
                                           "updatedAt":  "2022-08-30T19:47:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Oh5Ga",
                                           "createdAt":  "2022-11-16T18:47:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1EmMw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "istipeti",
                                                                               "createdAt":  "2024-10-07T10:27:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wfurt",
                                           "body":  "triage: we should investigate for 8.0",
                                           "updatedAt":  "2022-11-16T18:47:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OiJ8h",
                                           "createdAt":  "2022-11-16T19:43:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODheSmg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wfurt",
                                                                               "createdAt":  "2022-11-16T19:56:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tanveerbadar",
                                                                               "createdAt":  "2024-05-11T06:02:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Here\u0027s a link to the example on how to \"misuse\" the framer API in Network.framework to perform client-side TLS: https://gist.github.com/filipnavara/d5fb55bdb5edcceb1981f73078b855c4\r\n\r\n(I\u0027ll be happy to answer any questions about it once I get back from holiday at the beginning of December.)",
                                           "updatedAt":  "2022-11-16T19:43:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kmTXU",
                                           "createdAt":  "2023-08-22T08:54:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODfDNig==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "evallesv",
                                                                               "createdAt":  "2023-08-23T03:47:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "chucker",
                                                                               "createdAt":  "2023-08-23T09:54:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "rosen-vladimirov",
                                                                               "createdAt":  "2023-08-23T15:03:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "pmauchle",
                                                                               "createdAt":  "2024-04-22T09:25:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "lini",
                                           "body":  "Hi there, \r\nIt seems that TLS1.3 support for macOS clients is not coming in the .NET 8.0 release this year. Currently we have to use a third party library (Bouncy Castle) to workaround this on our mac clients, but it is not a perfect solution - e.g. the performance penalty for high network throughput threads is high. \r\nWhat is the current status of this feature - is the implementation possible at all using the Apple native APIs?",
                                           "updatedAt":  "2023-08-22T08:54:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5k4IFz",
                                           "createdAt":  "2023-08-24T21:28:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1EmtQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "istipeti",
                                                                               "createdAt":  "2024-10-07T10:28:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wfurt",
                                           "body":  "It is on 9.0 wish list for me. We simply run out of time in 8.0 and it is not trivial effort. Based on prototypes from @filipnavara it should be doable at least for the client side. While not ideal I would be OK for me doing only half for now - just to make some progress. ALPN was like that for a while until https://github.com/dotnet/runtime/issues/27727 plugged server side in 8.0. But in the mean time HttpClient (and others) could connect to HTTP/2 servers. ",
                                           "updatedAt":  "2023-08-24T21:28:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pramn",
                                           "createdAt":  "2023-10-20T15:50:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "@wfurt see https://github.com/dotnet/installer/issues/17588",
                                           "updatedAt":  "2023-10-20T15:50:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p9sYx",
                                           "createdAt":  "2023-10-24T18:16:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Triage: big effort, unclear implementation direction (the new API does not make it easy to get TLS messages in a buffer so that we can push them to the provided inner stream ourselves). But would be great for platform compatibility.",
                                           "updatedAt":  "2023-10-24T18:16:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc502DcM",
                                           "createdAt":  "2024-02-22T21:16:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elias-ik",
                                           "body":  "Its 2024, and we still can\u0027t call TSL1.3 APIs?\r\nAny plans?",
                                           "updatedAt":  "2024-02-22T21:16:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5089o5",
                                           "createdAt":  "2024-02-23T23:37:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD77Jig==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "pmauchle",
                                                                               "createdAt":  "2024-04-24T05:56:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "istipeti",
                                                                               "createdAt":  "2024-10-07T10:29:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "marvas",
                                                                               "createdAt":  "2024-11-21T13:57:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "jozefizso",
                                           "body":  "We are writing troubleshooting utility in .NET to verify our app can correctly connected using IPv4 and IPv6 and using different TLS protocols.\r\n\r\nOn macOS the app reports only TLS v1.2 connection.\r\n\r\nWill TLS 1.3 really be ready in .NET 9?",
                                           "updatedAt":  "2024-02-23T23:37:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc509Xek",
                                           "createdAt":  "2024-02-24T04:05:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "It is still high on the priority list. However, it is not clear if it is even doable because of  Apple\u0027s new AI shape. ",
                                           "updatedAt":  "2024-02-24T04:05:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BEsYV",
                                           "createdAt":  "2024-06-13T12:17:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pmauchle",
                                           "body":  "Does anybody have a workaround for this problem that works in combination with HttpClient and consumes TLS 1.3 APIs?",
                                           "updatedAt":  "2024-06-13T12:17:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Bmv9K",
                                           "createdAt":  "2024-06-17T21:02:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD77J5Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "istipeti",
                                                                               "createdAt":  "2024-10-07T19:16:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "marvas",
                                                                               "createdAt":  "2024-11-21T13:58:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "wfurt",
                                           "body":  "you would need TLS terminating proxy @pmauchle. It is probably doable but tricky. I really wish we can make progress but realistically we don\u0027t have resources to get it done in 9.",
                                           "updatedAt":  "2024-06-17T21:02:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XdpDz",
                                           "createdAt":  "2024-12-13T10:36:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEJaQSA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elias-ik",
                                                                               "createdAt":  "2024-12-13T10:41:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "istipeti",
                                                                               "createdAt":  "2024-12-13T10:48:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MattParkerDev",
                                                                               "createdAt":  "2024-12-13T11:27:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "niquenen",
                                                                               "createdAt":  "2024-12-13T13:24:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jozefizso",
                                                                               "createdAt":  "2024-12-13T13:49:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mdryden",
                                                                               "createdAt":  "2024-12-16T21:45:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "slawton-concurrency",
                                                                               "createdAt":  "2025-03-11T15:36:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "stvndall",
                                           "body":  "Azure services are now highlighting that TLS 1.2 needs to be upgraded to TLS 1.3. After a day of not understanding why local development calling to hosted services was suddenly not working, we found the security team upgraded based on Azure\u0027s recommendation. Half the team ended up with issues. \n\nThis really needs a fix, considering Azure is recommending to upgrade, and our security team says they can select either 1.2 or 1.3, not both. Considering both are Microsoft, this needs a patch before dotnet can run on security recommendations just because team members are running on mac.",
                                           "updatedAt":  "2024-12-13T10:44:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Xfr2C",
                                           "createdAt":  "2024-12-13T15:10:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFRi1g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "istipeti",
                                                                               "createdAt":  "2024-12-13T15:12:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stvndall",
                                                                               "createdAt":  "2025-01-09T15:02:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "skinkairewalker",
                                                                               "createdAt":  "2025-02-05T01:07:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "liveans",
                                           "body":  "Hello @stvndall,\nThis is something we\u0027re actively working on it right now, and we\u0027re targeting to finish this in January.",
                                           "updatedAt":  "2024-12-13T15:10:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6X4CwG",
                                           "createdAt":  "2024-12-17T10:15:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKYPaA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "jozefizso",
                                                                               "createdAt":  "2024-12-17T11:56:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "stvndall",
                                                                               "createdAt":  "2025-01-09T15:02:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "andrem0",
                                                                               "createdAt":  "2025-02-20T09:10:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Will-Low",
                                                                               "createdAt":  "2025-03-18T15:12:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "karelz",
                                           "body":  "@stvndall can you tell us more about your Mac usage and why are your devs blocked? What are the apps you are using that require only TLS 1.3?\nNote that we plan to fix this in upcoming release - .NET 10. The change required to support TLS 1.3 on Mac is a non-trivial feature and we won\u0027t be able to backport it into .NET 9.\nIn the meantime, we would recommend to keep your Azure services on TLS 1.2, which will enable your Mac workloads. The Azure warning is IMHO a bit aggressive on security recommendations and there is not immediate danger with TLS 1.2 being deprecated or compromised security-wise.\n\nJust FYI: The key reason why TLS 1.3 on Mac is not supported yet by .NET, is because Apple decided to not implement it in their low-level APIs (where they support all previous TLS versions). They exposed only new high-level APIs which encapsulate also TCP connection. That model is not working for .NET, because we expose the TCP connection under TLS. Therefore we have to do a lot of hackary around the new Apple APIs, which is complicated.",
                                           "updatedAt":  "2024-12-17T10:15:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Zz1Qk",
                                           "createdAt":  "2025-01-09T15:02:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFX7BA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DocktorDicking",
                                                                               "createdAt":  "2025-01-09T15:06:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jozefizso",
                                                                               "createdAt":  "2025-01-12T21:15:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2025-02-05T15:58:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "stvndall",
                                           "body":  "Hi @karelz.\n\nIt is no specific app. We are writing applications that are hosted on azure, with there being many APIs that are in flux, it is not viable for the team to use local environments for the whole system. Because of that, we point to dev environments hosted on Azure from our local development environments. \n\nFor security reasons, the infrastructure team set v1.3 as the minimum TLS version, as per Azure constant popup recommendations.\n\nThis locked out all members not using Windows (the team is not permitted to use Linux 🤷 ). Any members using the Mac were instantly unable to communicate with services on the dev environments until they were rolled back to v1.2 as minimum. This caused some internal confusion and issues as Azure was constantly reminding our infra team to set the TLS minimum to TLS v1.3  ",
                                           "updatedAt":  "2025-01-09T15:03:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aQfBk",
                                           "createdAt":  "2025-01-13T19:28:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFX7JA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2025-02-05T15:59:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I\u0027m wondering where the recommendation is coming from @stvndall? AFAIK the recommendation for Azure is 1.2+ -\u003e and that is what all our services use. \n\nAlso from the description it seems like you really need just the client side, right? e.g. functionality from #104835 would be sufficient? It is tricky business and we will be looking for beta testers at some point. Hopefully it will land in 10.0.",
                                           "updatedAt":  "2025-01-13T19:28:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gEhGZ",
                                           "createdAt":  "2025-02-26T16:14:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXOC9g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "optinn-henrik",
                                                                               "createdAt":  "2025-02-27T12:25:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ingljoOpt",
                                                                               "createdAt":  "2025-02-27T12:25:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jarhov",
                                                                               "createdAt":  "2025-02-27T12:25:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "seboptinn",
                                                                               "createdAt":  "2025-02-27T12:25:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PoojaOptinn",
                                                                               "createdAt":  "2025-02-27T12:26:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "optinn-adrian",
                                                                               "createdAt":  "2025-02-27T13:36:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "slawton-concurrency",
                                                                               "createdAt":  "2025-03-11T15:33:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Will-Low",
                                                                               "createdAt":  "2025-03-18T15:12:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jerschneid",
                                                                               "createdAt":  "2025-04-06T15:56:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SamBWagner",
                                                                               "createdAt":  "2025-04-10T04:54:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "claust",
                                                                               "createdAt":  "2025-05-13T08:49:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jamie-nzfunds",
                                                                               "createdAt":  "2025-06-10T04:44:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dooya-trading",
                                                                               "createdAt":  "2025-06-19T13:56:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  13
                                                         },
                                           "author":  "johnnypea",
                                           "body":  "This is ridiculous 🙄",
                                           "updatedAt":  "2025-02-26T16:14:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gwNUf",
                                           "createdAt":  "2025-03-04T10:30:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tskardal",
                                           "body":  "I might be missing some pieces here, so sorry in advance if that is. I too am unable to develop against an API that requires TLS 1.3.\n\n\u003e I\u0027m wondering where the recommendation is coming from [@stvndall](https://github.com/stvndall)? AFAIK the recommendation for Azure is 1.2+ -\u003e and that is what all our services use.\n\nRequiring TLS 1.3 for Azure App Services is at least recommended by Microsoft Defender for Cloud as a _Medium risk level_.\n\n\u003e Also from the description it seems like you really need just the client side, right? e.g. functionality from [#104835](https://github.com/dotnet/runtime/pull/104835) would be sufficient? It is tricky business and we will be looking for beta testers at some point. Hopefully it will land in 10.0.\n\nWhen writing clients for HTTP+JSON APIs you\u0027ll end up with this kind of error:\n\n```csharp\nusing System.Security.Authentication;\n\nvar handler = new HttpClientHandler\n{\n    // Results in the following exception:\n    // Unhandled exception. System.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception.\n    // ---\u003e System.Security.Authentication.AuthenticationException: Authentication failed, see inner exception.\n    // ---\u003e System.PlatformNotSupportedException: The requested security protocol is not supported.\n    SslProtocols = SslProtocols.Tls13\n    \n    // This will work (if the server accepts it):\n    // SslProtocols = SslProtocols.Tls12\n};\n\nusing var client = new HttpClient(handler);\nvar response = await client.GetAsync(\"https://github.com\");\nresponse.EnsureSuccessStatusCode();\nvar content = await response.Content.ReadAsStringAsync();\nConsole.WriteLine(content);\n```\n",
                                           "updatedAt":  "2025-03-04T10:30:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ih1xB",
                                           "createdAt":  "2025-03-15T16:49:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jogibear9988",
                                           "body":  "Isn\u0027t it possible that netcore uses openssl on other os ?\nin https://github.com/dotnetprojects/S7CommPlusDriver/tree/master/src/S7CommPlusDriver/runtimes we use it for ssl, but we have to deliver openssl for every OS in our package. This could be done my the MS netcore installer for each system\n",
                                           "updatedAt":  "2025-03-15T16:49:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iovei",
                                           "createdAt":  "2025-03-17T08:36:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKJvCA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jogibear9988",
                                                                               "createdAt":  "2025-03-17T10:01:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rzikm",
                                           "body":  "@jogibear9988 we want to specifically avoid shipping OpenSSL binaries. Shipping crypto code is always problematic due to various certifications and restrictions. Also delivery of critical security fixes is more difficult for crypto code which is not part of the given platform (e.g. Schannel fixes may be delivered as part of Windows Update, but your deployed application which shipped with openssl library has to be patched manually).",
                                           "updatedAt":  "2025-03-17T08:36:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6io7su",
                                           "createdAt":  "2025-03-17T08:55:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "One there are challenges for integration with KeyChains. The scenario @tskardal described would be covered by https://github.com/dotnet/runtime/pull/104835 or some of its reincarnations. The problematic part is server side e.g. https://github.com/dotnet/aspnetcore/issues/60200\n\nWhoever is anxious can either contribute or at least try to convince Apple to provide useable API. ",
                                           "updatedAt":  "2025-03-17T08:55:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6itDaj",
                                           "createdAt":  "2025-03-17T14:26:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tverboon",
                                           "body":  "\u003e Whoever is anxious can either contribute or at least try to convince Apple to provide useable API.\n\nIf we Mac developers are going to report bugs through Apple Feedback, could you please provide a design document or a list of requirements that the API needs to meet?",
                                           "updatedAt":  "2025-03-17T14:26:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6it7ye",
                                           "createdAt":  "2025-03-17T15:26:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "\u003e If we Mac developers are going to report bugs through Apple Feedback, could you please provide a design document or a list of requirements that the API needs to meet?\n\nWe don\u0027t have a formal design document at hand. In short, since `SslStream` is a wrapper class around another stream, we need to be able to exchange raw bytes with the crypto library implementing the actual TLS logic, i.e. abstract away the network transport. The (very) simplified (client, openssl-like) handshake code is basically\n\n    do while not authenticated:\n        get outgoing blob to send to server from crypto lib\n        receive response blob from the server and pass it to crypto lib\n        call a method on crypto lib to progress the handshake, react to any events (received remote cert, remote side asked for cert, ....)\n    \nAny api which allows us to perform TLS handshake (and rest of the connection) without involving sockets or network will do. The old Secure Transport API loosely copies OpenSSL API and was very suitable for this. However, the new Network framework is built around the concept of connections between endpoints. So we need to resort to some workarounds like abusing the Framer concept to extract/inject TLS messages from elsewhere.\n    ",
                                           "updatedAt":  "2025-03-17T15:26:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6m_kMr",
                                           "createdAt":  "2025-04-14T13:16:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXOBTQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "dooya-trading",
                                                                               "createdAt":  "2025-06-19T13:52:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dwarfland",
                                           "body":  "Are there any plans after 5 years to have this addressed and support TLS 1.3 on macOS? More and more servers are changing to require 1.3 (and the error reporting also doesn\u0027t make ti very clear what the issue is, when it fails).",
                                           "updatedAt":  "2025-04-14T13:16:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nA4HD",
                                           "createdAt":  "2025-04-14T15:05:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXSNdw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "dwarfland",
                                                                               "createdAt":  "2025-04-14T16:40:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "dooya-trading",
                                                                               "createdAt":  "2025-06-20T06:34:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tverboon",
                                           "body":  "I created an Apple Feedback issue on 21 March: `FB16957804` referencing this issue and provided comments from this issue. Status is `Open`.",
                                           "updatedAt":  "2025-04-14T15:05:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nCExo",
                                           "createdAt":  "2025-04-14T17:02:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEOVCXQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tverboon",
                                                                               "createdAt":  "2025-04-14T17:03:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "dwarfland",
                                                                               "createdAt":  "2025-04-14T20:24:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "johnnypea",
                                                                               "createdAt":  "2025-04-15T07:16:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "wfurt",
                                           "body":  "thanks @tverboon. Current goal is to move forward and @liveans is working on getting the client support to good shape. the server part is till unknown at the moment. ",
                                           "updatedAt":  "2025-04-14T17:02:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oGbU_",
                                           "createdAt":  "2025-04-22T06:57:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alkhimey",
                                           "body":  "Has anyone been able to find a workaround for a client situation (we have a client connecting to a server that allows only TLS 1.3). Would be happy to hear details on how you managed to make it work.",
                                           "updatedAt":  "2025-04-22T06:57:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oHEf4",
                                           "createdAt":  "2025-04-22T07:37:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEPL8Jg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "alkhimey",
                                                                               "createdAt":  "2025-04-22T08:25:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MattParkerDev",
                                           "body":  "@alkhimey \n\nYou can proxy via ghostunnel locally, and let it handle TLS 1.3\nhttps://github.com/ghostunnel/ghostunnel\n\n`ghostunnel client --listen localhost:1337 --target remoteurl.com:443  --disable-authentication`\n\nNote that you may get errors back regarding an incorrect host header, you\u0027ll need to override the default Host header like this:\n\n```csharp\nvar client = new HttpClient();\nclient.DefaultRequestHeaders.Host = \"remoteurl.com\";\n```",
                                           "updatedAt":  "2025-04-22T07:37:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oHh45",
                                           "createdAt":  "2025-04-22T08:20:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chucker",
                                           "body":  "\u003e we want to specifically avoid shipping OpenSSL binaries.\n\nIs the code that ultimately links the TLS library tightly coupled, or would it be feasible for third parties to swap in a different SSL library while still using `HttpClient`, etc.?",
                                           "updatedAt":  "2025-04-22T08:20:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc632miG",
                                           "createdAt":  "2025-07-17T15:39:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEd0U5g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "liveans",
                                                                               "createdAt":  "2025-07-17T17:34:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "ricardoboss",
                                                                               "createdAt":  "2025-07-17T19:35:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2025-07-18T16:32:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "yroc92",
                                                                               "createdAt":  "2025-07-28T16:20:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "archerbird",
                                                                               "createdAt":  "2025-08-07T14:10:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "fguchelaar",
                                                                               "createdAt":  "2025-08-11T10:55:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Experimental TLS 1.3 Client support has been merged in https://github.com/dotnet/runtime/pull/117428. It will ship in .NET 10 preview 7",
                                           "updatedAt":  "2025-07-17T15:39:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc632m-f",
                                           "createdAt":  "2025-07-17T15:40:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Moving to 11.0.0 milestone for server implementation and further evolution.",
                                           "updatedAt":  "2025-07-17T15:40:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6321rO",
                                           "createdAt":  "2025-07-17T16:00:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "We probably should share instructions and limitations are for 10. As this is opt-in preview-ish feature .... but it should get most of the use cases unblocked. ",
                                           "updatedAt":  "2025-07-17T16:00:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6336AR",
                                           "createdAt":  "2025-07-17T17:33:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEa-ofw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "liveans",
                                                                               "createdAt":  "2025-07-17T17:34:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rzikm",
                                           "body":  "We will prepare some release notes, cc @liveans \n",
                                           "updatedAt":  "2025-07-17T17:33:01Z"
                                       }
                                   ],
                         "totalCount":  45
                     },
        "title":  "investigate TLS13 on MacOS",
        "labels":  [
                       "bug",
                       "area-System.Net.Security",
                       "os-mac-os-x"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/40631",
        "createdAt":  "2020-08-10T20:44:43Z",
        "number":  40631,
        "author":  "wfurt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-05-04T20:23:08Z",
        "body":  "The regression described in #39011 was caused by some unrelated SslStream changes. \r\nUnfortunately, we do not have good mechanism right now to catch that. \r\nRecently added EnterpriseScenario test runs are focus on Linux and they use docker compose to create multi-machine setup. We will need something similar or at least find a way how to authenticate Windows CI machines to container.\r\nAlternatively, we may need to have more permanent setup similar to existing HTTP echo service. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKAeBsQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MTU4MDU5Mw==",
                                           "createdAt":  "2020-08-10T20:44:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-08-10T20:44:44Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Add test automation for ChannelBinding and Windows auth",
        "labels":  [
                       "area-System.Net.Security",
                       "test-enhancement"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43912",
        "createdAt":  "2020-10-27T19:30:06Z",
        "number":  43912,
        "author":  "scalablecory",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3Ccsg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "geoffkizer",
                                            "createdAt":  "2020-10-29T17:28:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "viktor-svub",
                                            "createdAt":  "2021-06-24T08:44:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eighthave",
                                            "createdAt":  "2021-11-30T08:41:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "franlerma",
                                            "createdAt":  "2024-04-05T20:03:10Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-01-07T00:47:52Z",
        "body":  "We should add an API to SslStream -- possibly just `SslClientAuthenticationOptions` -- to enable support for [Encrypted Client Hello](https://www.ietf.org/archive/id/draft-ietf-tls-esni-08.html).\r\n\r\nThough there are already implementations for this in the wild, this spec is still in draft. It may not be the correct time to add this. I\u0027m also not sure if OpenSSL and SCHANNEL support this yet.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmW7oYg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNzQ4NDY2MA==",
                                           "createdAt":  "2020-10-27T19:30:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-27T19:30:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNzUwOTI2Ng==",
                                           "createdAt":  "2020-10-27T20:09:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I think this will need to come from the platform. By brief look at it, it is unlikely than we can crate it and then hand it down in middle of the handshake. Once this is available, we may add API to control it. ",
                                           "updatedAt":  "2020-10-27T20:09:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxODkwNTA0OA==",
                                           "createdAt":  "2020-10-29T17:26:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "OpenSSL issue tracking this here: https://github.com/openssl/openssl/issues/7482",
                                           "updatedAt":  "2020-10-29T17:26:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NzY1MDE5OA==",
                                           "createdAt":  "2021-07-10T14:52:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCEhUag==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "viktor-svub",
                                                                               "createdAt":  "2021-07-10T16:33:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eighthave",
                                                                               "createdAt":  "2021-11-30T08:41:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "xljiulang",
                                           "body":  "Expect to implement the ECH feature",
                                           "updatedAt":  "2021-07-10T14:52:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47BsZ5",
                                           "createdAt":  "2021-12-09T21:41:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCGLiNQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "viktor-svub",
                                                                               "createdAt":  "2021-12-10T05:46:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xljiulang",
                                                                               "createdAt":  "2021-12-10T05:49:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wfurt",
                                                                               "createdAt":  "2021-12-10T22:47:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "eighthave",
                                           "body":  "We just completed a first working implementation for Java/Android in [Conscrypt](https://github.com/google/conscrypt/issues/730).  Our experience implementing ECH on the client side is written up here:\r\nhttps://guardianproject.info/2021/11/30/implementing-tls-encrypted-client-hello/",
                                           "updatedAt":  "2021-12-09T21:41:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZRlXz",
                                           "createdAt":  "2025-01-05T06:51:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Would this be available in HttpClient as well? I would find this highly useful.",
                                           "updatedAt":  "2025-01-05T06:51:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZVJ1R",
                                           "createdAt":  "2025-01-06T07:26:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "If this were added as a feature in `SslStream`, it would also be possible to use it from `HttpClient`, yes.",
                                           "updatedAt":  "2025-01-06T07:26:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Zbuhi",
                                           "createdAt":  "2025-01-07T00:47:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "The OpenSSL discussion still drags on https://github.com/openssl/openssl/issues/7482\nI\u0027m not sure where schannel stands at the moment. ",
                                           "updatedAt":  "2025-01-07T00:47:52Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Add Encrypted ClientHello support to SslStream",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net.Security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/63663",
        "createdAt":  "2022-01-12T05:13:04Z",
        "number":  63663,
        "author":  "wfurt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-6rTw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "filipnavara",
                                            "createdAt":  "2022-01-12T22:42:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "geoffkizer",
                                            "createdAt":  "2022-01-12T22:59:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sahin52",
                                            "createdAt":  "2022-06-10T12:42:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rducom",
                                            "createdAt":  "2025-02-09T17:55:50Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2022-01-13T16:50:58Z",
        "body":  "### Background and motivation\r\nThis is somewhat similar to #63162 but works at different level and somewhat inspired by Network.framework @filipnavara mentioned in https://github.com/dotnet/runtime/issues/63162#issuecomment-1002093423.\r\n\r\nTypical use of SslStream now looks like:\r\n```c#\r\n   var clientSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\r\n   clientSocket.Connect(listener.LocalEndPoint);\r\n   var ns = new NetworkStream(clientSocket, ownsSocket: true)\r\n   SslStream ssl = new SslStream(ns);\r\n   ssl.AuthenticateAsClient(options, cancellationToken); \r\n```\r\n\r\nWhile this is not terribly long but it forces user to deal with `Sockets`, `AddressFamily` and none of it is really necessary if all they want is encrypted safe channel. \r\n\r\nWith the current layering, some actions would be very difficult. For example, TCP Fast Open described in #1476 requires first chunk of data for connect and For TLS that would be the initial hello. Together with parallel connect and TLS 1.3 this could be big win for anybody who cares about initial connect latency. \r\n\r\nAnother example may be kernel TLS https://people.freebsd.org/~gallatin/talks/euro2019-ktls.pdf\r\nWhile this is not available in Linux (yet?), this allows to do handshake in user mode but then switch to HW accelerated encryption for bulk data. If SslStream \"owns\" the underlying transport, we would be able to explore options like this. \r\n\r\n### Proposed API\r\n```c#\r\nnamespace System.Net.Security\r\n{\r\n    [Flags]\r\n    public enum ConnectOptions\r\n    {\r\n       Default = 0,\r\n       IPv4Only,\r\n       IPv6Only,\r\n       Parallel, // Happy-Eyeball\r\n       FastOpen,\r\n       ...\r\n    }\r\n    // New class\r\n    public class SslStream\r\n    {\r\n        public Stream InnerStream;\r\n        public static Task\u003cSslStream\u003e ConnectAsync(string target, int port, ConnectOptions connectOptions, SslClientAuthenticationOptions sslClientAuthenticationOptions, cancellationToken cancellationToken = default);\r\n        public static SslStream Connect(string target, int port, ConnectOptions connectOptions, SslClientAuthenticationOptions sslClientAuthenticationOptions);\r\n    }\r\n}\r\n```\r\n\r\nNow, aside from the FastOption option to decrease latency, it would be great if the rest comes from underlying networking code.\r\nHowever, since this is high level convenience API, I think it is ok if it does not e.g. we leave `Socket` as simple low-level primitive and we either add it to #63162 or we would keep it here to match Network.Framework. \r\n\r\nI added `InnerStream\u0027 property so there is some access to underlying transport. That can be useful (aside from this) for audit logs.  \r\n\r\n### Alternative Designs\r\nI\u0027m wondering if this could be merged with #63162 to something like \r\n```c#\r\n public static Task\u003cStream\u003e ConnectAsync(string target, int port, ConnectOptions connectOptions = ConnectOptions.Default, SslClientAuthenticationOptions? sslClientAuthenticationOptions = null, cancellationToken cancellationToken = default);\r\n```\r\nand negotiate TLS _if_ sslClientAuthenticationOptions is set. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPErUxg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc48PS_8",
                                           "createdAt":  "2022-01-12T05:13:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\nThis is somewhat similar to #63162 but works at different level and somewhat inspired by Network.framework @filipnavara mentioned in https://github.com/dotnet/runtime/issues/63162#issuecomment-1002093423.\r\n\r\nTypical use of SslStream now looks like:\r\n```c#\r\n   var clientSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\r\n   clientSocket.Connect(listener.LocalEndPoint);\r\n   var ns = new NetworkStream(clientSocket, ownsSocket: true)\r\n   SslStream ssl = new SslStream(ns);\r\n   ssl.AuthenticateAsClient(options, cancellationToken); \r\n```\r\n\r\nWhile this is not terribly long but it forces user to deal with `Sockets`, `AddressFamily` and none of it is really necessary if all they want is encrypted safe channel. \r\n\r\nWith the current layering, some actions would be very difficult. For example, TCP Fast Open described in #1476 requires first chunk of data for connect and For TLS that would be the initial hello. Together with parallel connect and TLS 1.3 this could be big win for anybody who cares about initial connect latency. \r\n\r\nAnother example may be kernel TLS https://people.freebsd.org/~gallatin/talks/euro2019-ktls.pdf\r\nWhile this is not available in Linux (yet?), this allows to do handshake in user mode but then switch to HW accelerated encryption for bulk data. If SslStream \"owns\" the underlying transport, we would be able to explore options like this. \r\n\r\n### Proposed API\r\n```c#\r\nnamespace System.Net.Security\r\n{\r\n    [Flags]\r\n    public enum ConnectOptions\r\n    {\r\n       Default = 0,\r\n       IPv4Only,\r\n       IPv6Only,\r\n       Parallel, // Happy-Eyeball\r\n       FastOpen,\r\n       ...\r\n    }\r\n    // New class\r\n    public class SslStream\r\n    {\r\n        public Stream InnerStream;\r\n        public static Task\u003cSslStream\u003e ConnectAsync(string target, int port, ConnectOptions connectOptions, SslClientAuthenticationOptions sslClientAuthenticationOptions, cancellationToken cancellationToken = default);\r\n        public static SslStream Connect(string target, int port, ConnectOptions connectOptions, SslClientAuthenticationOptions sslClientAuthenticationOptions);\r\n    }\r\n}\r\n```\r\n\r\nNow, aside from the FastOption option to decrease latency, it would be great if the rest comes from underlying networking code.\r\nHowever, since this is high level convenience API, I think it is ok if it does not e.g. we leave `Socket` as simple low-level primitive and we either add it to #63162 or we would keep it here to match Network.Framework. \r\n\r\nI added `InnerStream\u0027 property so there is some access to underlying transport. That can be useful (aside from this) for audit logs.  \r\n\r\n### Alternative Designs\r\nI\u0027m wondering if this could be merged with #63162 to something like \r\n```c#\r\n public static Task\u003cStream\u003e ConnectAsync(string target, int port, ConnectOptions connectOptions = ConnectOptions.Default, SslClientAuthenticationOptions? sslClientAuthenticationOptions = null, cancellationToken cancellationToken = default);\r\n```\r\nand negotiate TLS _if_ sslClientAuthenticationOptions is set. \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ewfurt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Net.Security`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-12T05:13:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48SQxD",
                                           "createdAt":  "2022-01-12T20:22:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "Actually, OpenSSL has `SSL_OP_ENABLE_KTLS ` and reference to Linux 4.20. So Kernel TLS should be possible. (we should investigate separately) ",
                                           "updatedAt":  "2022-01-12T20:22:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48SozQ",
                                           "createdAt":  "2022-01-12T22:46:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Generally looks reasonable although I didn\u0027t check all the nooks and crannies. One question that I would love to have answered though is whether this API provides all the features necessary for using it in `SocketsHttpHandler`.",
                                           "updatedAt":  "2022-01-12T22:46:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48Sq_c",
                                           "createdAt":  "2022-01-12T23:02:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCJrN8Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wfurt",
                                                                               "createdAt":  "2022-01-12T23:14:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "geoffkizer",
                                           "body":  "I agree with the direction here.\r\n\r\nI think it\u0027s worth considering something like this just for simplicity and ease of use. But also, fast open and kernel TLS are good justification as well.\r\n\r\nI wonder if we want a similar Listen/Accept API for acting as an SSL server.\r\n\r\nIf we decide to do something here, we should probably do it in conjunction with #63162 so that we end up with a consistent story here.",
                                           "updatedAt":  "2022-01-12T23:02:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48StTG",
                                           "createdAt":  "2022-01-12T23:14:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "Possibly in https://github.com/dotnet/runtime/blob/8fef95be4a4fee42005a511d9b31a034e1fc3baf/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs#L1339\r\n\r\nTricky with custom streams. ",
                                           "updatedAt":  "2022-01-12T23:14:26Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Consider adding SslStream.Connect",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net.Security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/66224",
        "createdAt":  "2022-03-04T23:20:26Z",
        "number":  66224,
        "author":  "wfurt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODMnT8g==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "rzikm",
                                            "createdAt":  "2022-03-07T08:19:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "iamcarbon",
                                            "createdAt":  "2022-03-18T02:21:00Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "adityamandaleeka",
                                            "createdAt":  "2022-11-03T23:22:36Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "ozkanpakdil",
                                            "createdAt":  "2025-08-26T03:25:47Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2022-03-29T16:55:50Z",
        "body":  "Linux Kernel supports TLS framing and it also allows to offload encryption to network interface if the HW supports it. \r\nhttps://www.kernel.org/doc/html/latest/networking/tls-offload.html\r\n\r\nIn essence after initial handshake and certificate validation, symmetric session keys ar negotiated. The build encryption is pretty simple and it can be done by kernel, possibly with HW offload.\r\nThere is already support for this in OpenSSL when using standard BIO interface. SslStream does not use that so we cannot benefit from it even on system with HW support. \r\n\r\nThis can provide interesting performance benefit. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQH_yEg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4_KDT0",
                                           "createdAt":  "2022-03-04T23:20:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nLinux Kernel supports TLS framing and it also allows to offload encryption to network interface if the HW supports it. \r\nhttps://www.kernel.org/doc/html/latest/networking/tls-offload.html\r\n\r\nIn essence after initial handshake and certificate validation, symmetric session keys ar negotiated. The build encryption is pretty simple and it can be done by kernel, possibly with HW offload.\r\nThere is already support for this in OpenSSL when using standard BIO interface. SslStream does not use that so we cannot benefit from it even on system with HW support. \r\n\r\nThis can provide interesting performance benefit. \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ewfurt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Security`, `os-linux`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-04T23:20:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Af_IS",
                                           "createdAt":  "2022-03-29T16:55:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: Worth investigation if it would help perf in certain scenarios.\r\nOnce the HW is available and usable in Cloud, it could bring non-trivial savings",
                                           "updatedAt":  "2022-03-29T16:55:50Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "support kernel TLS and offload on Linux",
        "labels":  [
                       "enhancement",
                       "area-System.Net.Security",
                       "os-linux",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/66633",
        "createdAt":  "2022-03-15T02:12:20Z",
        "number":  66633,
        "author":  "arontsang",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-16T17:45:49Z",
        "body":  "### Description\n\nNegotiateStreamPal should support loading credential from NTLM_USER_FILE env var as per https://github.com/gssapi/gss-ntlmssp/blob/main/TESTING.txt\r\n\r\nDelegating the credentials to gss-ntlmssp.\r\n\r\nHowever, NegotiateStreamPal throws an exception before gss-ntlmssp has a chance to provide its own credentials.\n\n### Reproduction Steps\n\ncreate an ntlm user file as per https://github.com/gssapi/gss-ntlmssp/blob/main/TESTING.txt\r\nSet NTLM_USER_FILE env var to point to said file.\r\nThen do an http get from an NTLM web server.\n\n### Expected behavior\n\nHTTP 200\n\n### Actual behavior\n\nSystem.PlatformNotSupportedException: NTLM authentication is not possible with default credentials on this platform.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nProvide the credentials from dotnet. Which is a security risk that is advised against specifically.\n\n### Configuration\n\nOS = Amazon Linux 2\r\nDotnet 3.1\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOToYmeA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4_oJPe",
                                           "createdAt":  "2022-03-15T02:12:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nNegotiateStreamPal should support loading credential from NTLM_USER_FILE env var as per https://github.com/gssapi/gss-ntlmssp/blob/main/TESTING.txt\r\n\r\nDelegating the credentials to gss-ntlmssp.\r\n\r\nHowever, NegotiateStreamPal throws an exception before gss-ntlmssp has a chance to provide its own credentials.\n\n### Reproduction Steps\n\ncreate an ntlm user file as per https://github.com/gssapi/gss-ntlmssp/blob/main/TESTING.txt\r\nSet NTLM_USER_FILE env var to point to said file.\r\nThen do an http get from an NTLM web server.\n\n### Expected behavior\n\nHTTP 200\n\n### Actual behavior\n\nSystem.PlatformNotSupportedException: NTLM authentication is not possible with default credentials on this platform.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nProvide the credentials from dotnet. Which is a security risk that is advised against specifically.\n\n### Configuration\n\nOS = Amazon Linux 2\r\nDotnet 3.1\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003earontsang\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-15T02:12:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_oTH7",
                                           "createdAt":  "2022-03-15T03:37:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nNegotiateStreamPal should support loading credential from NTLM_USER_FILE env var as per https://github.com/gssapi/gss-ntlmssp/blob/main/TESTING.txt\r\n\r\nDelegating the credentials to gss-ntlmssp.\r\n\r\nHowever, NegotiateStreamPal throws an exception before gss-ntlmssp has a chance to provide its own credentials.\n\n### Reproduction Steps\n\ncreate an ntlm user file as per https://github.com/gssapi/gss-ntlmssp/blob/main/TESTING.txt\r\nSet NTLM_USER_FILE env var to point to said file.\r\nThen do an http get from an NTLM web server.\n\n### Expected behavior\n\nHTTP 200\n\n### Actual behavior\n\nSystem.PlatformNotSupportedException: NTLM authentication is not possible with default credentials on this platform.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nProvide the credentials from dotnet. Which is a security risk that is advised against specifically.\n\n### Configuration\n\nOS = Amazon Linux 2\r\nDotnet 3.1\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003earontsang\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Security`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-15T03:37:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AgA_v",
                                           "createdAt":  "2022-03-29T16:59:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage:\r\n- On one hand it is implementation detail of gss\r\n- On the other hand, it would be useful to have -- we need to understand how portable it is - is it Unix only? What about Mac? Something similar on Windows? ... What about security implications?",
                                           "updatedAt":  "2022-03-29T16:59:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OhiZ4",
                                           "createdAt":  "2022-11-16T17:45:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "We should not process the file directly but we can let gssapi to decide instead of failing early in NegotiateStream.",
                                           "updatedAt":  "2022-11-16T17:45:49Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "NegotiateStreamPal.Unix.cs does not support default auth",
        "labels":  [
                       "enhancement",
                       "area-System.Net.Security",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/69042",
        "createdAt":  "2022-05-09T02:26:48Z",
        "number":  69042,
        "author":  "davidfowl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-28T15:09:17Z",
        "body":  "### Description\r\n\r\nContinuing looking at various profiles that include HTTPS and not just looking at more than just CPU profiles since these benchmarks are IO bound. I\u0027m reporting what I see in the profiles.\r\n\r\n### Configuration\r\n\r\n- .NET Core 7.0.0-preview.5.22251.5+5f7f7e8\r\n- Linux x64\r\n- This is an HTTP/2 scenario\r\n\r\n### Regression?\r\n\r\nNope\r\n\r\n### Data\r\n\r\n\u003cimg width=\"1184\" alt=\"image\" src=\"https://user-images.githubusercontent.com/95136/167327720-a8dee91b-acbd-4f53-9c5b-35099103ca26.png\"\u003e\r\n\r\n### Analysis\r\n\r\nI haven\u0027t dug deeply into this yet but I\u0027m a little confused why the handshake lock has any contention beyond the handshake (https://github.com/dotnet/runtime/blob/6ca8c9bc0c4a5fc1082c690b6768ab3be8761b11/src/libraries/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs#L146 and https://github.com/dotnet/runtime/blob/6ca8c9bc0c4a5fc1082c690b6768ab3be8761b11/src/libraries/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs#L788).\r\n\r\n\r\n\r\nProfile attached:\r\n[application.05-02-19-35-44.zip](https://github.com/dotnet/runtime/files/8648398/application.05-02-19-35-44.zip)\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTK0k4Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5CyojC",
                                           "createdAt":  "2022-05-09T02:26:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nContinuing looking at various profiles that include HTTPS and not just looking at more than just CPU profiles since these benchmarks are IO bound. I\u0027m reporting what I see in the profiles.\r\n\r\n### Configuration\r\n\r\n- .NET Core 7.0.0-preview.5.22251.5+5f7f7e8\r\n- Linux x64\r\n\r\n### Regression?\r\n\r\nNope\r\n\r\n### Data\r\n\r\n\u003cimg width=\"1184\" alt=\"image\" src=\"https://user-images.githubusercontent.com/95136/167327720-a8dee91b-acbd-4f53-9c5b-35099103ca26.png\"\u003e\r\n\r\n### Analysis\r\n\r\nI haven\u0027t dug deeply into this yet but I\u0027m a little confused why the handshake lock has any contention beyond the handshake (https://github.com/dotnet/runtime/blob/6ca8c9bc0c4a5fc1082c690b6768ab3be8761b11/src/libraries/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs#L146 and https://github.com/dotnet/runtime/blob/6ca8c9bc0c4a5fc1082c690b6768ab3be8761b11/src/libraries/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs#L788)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edavidfowl\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Security`, `tenet-performance`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-09T02:26:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CzBR6",
                                           "createdAt":  "2022-05-09T05:50:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "It is not safe to encrypt and decrypt at the same time.  The lock used to be in OpenSSL PAL but got moved and shared with handshake because of TLS 1.3 windows behavior.  ",
                                           "updatedAt":  "2022-05-09T05:50:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CzBu5",
                                           "createdAt":  "2022-05-09T05:54:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "Here is the original PR https://github.com/dotnet/corefx/pull/37736",
                                           "updatedAt":  "2022-05-09T05:54:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CzGEF",
                                           "createdAt":  "2022-05-09T06:23:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Hmm those end to end benchmarks are suspicious... AFAIK we don\u0027t have `PlaintextNonPipelined` that runs with https.",
                                           "updatedAt":  "2022-05-09T06:23:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CzHPS",
                                           "createdAt":  "2022-05-09T06:30:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "There still may be some opportunity for improvements. For example, this also covers reading from BIO and copying data. AFAIK we only need to prevent SSL state being modified from two threads. On Windows the bug deal is Tls13. It uses the handshake code path _after_ the handshakes is finished and concurrent writes fail with some weird error. So we combined the locks to one (end left it perhaps badly named)",
                                           "updatedAt":  "2022-05-09T06:30:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DEMx4",
                                           "createdAt":  "2022-05-12T16:05:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "Triage: we should investigate this in 7.0",
                                           "updatedAt":  "2022-05-12T16:05:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K48KU",
                                           "createdAt":  "2022-09-23T16:52:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "https://www.openssl.org/docs/faq.html#PROG1\r\n```\r\nIs OpenSSL thread-safe?\r\n\r\nYes but with some limitations; for example, an SSL connection cannot be used concurrently by multiple threads. This is true for most OpenSSL objects.\r\nFor version 1.1.0 and later, there is nothing further you need do.\r\nFor earlier versions than 1.1.0, it is necessary for your application to set up the thread callback functions. To do this, your application must call CRYPTO_set_locking_callback(3) and one of the CRYPTO_THREADID_set… API’s. See the OpenSSL threads manpage for details and “note on multi-threading” in the INSTALL file in the source distribution.\r\n```\r\n\r\nThe \"handshake\" name comes from Windows. It can actually go through the handshake logic from `Decrypt\u0027 during Tls13 negotiation and more rarely during renegotiation. ",
                                           "updatedAt":  "2022-09-23T16:52:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K5nqY",
                                           "createdAt":  "2022-09-23T19:57:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMzG8A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2022-09-23T21:13:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2023-11-16T15:02:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "We should:\r\n- Rename the lock object; it\u0027s confusing :)\r\n- Avoid locking entirely in situations where we don\u0027t need it, e.g. do we need it on Windows for TLS versions other than TLS 1.3?\r\n- Reduce the scope of the locking to the bare minimum that actually requires mutual exclusion (and if any of that is because of management of our own managed state, find a way to avoid the need for that)",
                                           "updatedAt":  "2022-09-23T19:57:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K53oF",
                                           "createdAt":  "2022-09-23T21:13:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "\u003e Avoid locking entirely in situations where we don\u0027t need it, e.g. do we need it on Windows for TLS versions other than TLS 1.3?\r\n\r\nI\u0027m aware of renegotiation. That should be easy to check and it should be disabled in most cases. I will need to follow up with Schannel team to see if there are any other cases.\r\n\r\nWould it make sense to push this down to the pal? Certainly for OpenSSL we can do that in C using their mechanisms or low level primitives just around invocation of the encrypt/decrypt calls. ",
                                           "updatedAt":  "2022-09-23T21:13:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MrSTh",
                                           "createdAt":  "2022-10-21T03:36:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I did some measurements and we can probably get ~ 10% on single connection\r\n\r\ntested on Server 2022\r\n\r\n\r\n|                                 Method |        Job |          Toolchain |     Mean |     Error |    StdDev |   Median |      Min |       Max | Ratio | RatioSD | Allocated | Alloc Ratio |\r\n|--------------------------------------- |----------- |------------------- |---------:|----------:|----------:|---------:|---------:|----------:|------:|--------:|----------:|------------:|\r\n|                    ConcurrentReadWrite | Job-NPKZNC | \\test\\corerun.exe  | 17.94 us |  0.650 us |  0.722 us | 18.09 us | 16.55 us |  19.16 us |  1.00 |    0.00 |         - |          NA |\r\n|                    ConcurrentReadWrite | Job-AYBFGA |  \\main\\corerun.exe | 19.11 us |  0.862 us |  0.922 us | 18.93 us | 17.61 us |  21.15 us |  1.07 |    0.06 |         - |          NA |\r\n|                                        |            |                    |          |           |           |          |          |           |       |         |           |             |\r\n|         ConcurrentReadWriteLargeBuffer | Job-NPKZNC | \\test\\corerun.exe  | 21.61 us |  1.012 us |  1.083 us | 21.88 us | 19.17 us |  23.80 us |  1.00 |    0.00 |         - |          NA |\r\n|         ConcurrentReadWriteLargeBuffer | Job-AYBFGA |  \\main\\corerun.exe | 18.87 us |  0.655 us |  0.701 us | 18.90 us | 17.46 us |  20.42 us |  0.88 |    0.06 |         - |          NA |\r\n|                                        |            |                    |          |           |           |          |          |           |       |         |           |             |\r\n| ParallelConcurrentReadWriteLargeBuffer | Job-NPKZNC | \\test\\corerun.exe  | 38.82 us |  3.383 us |  3.760 us | 39.45 us | 26.62 us |  42.66 us |  1.00 |    0.00 |         - |          NA |\r\n| ParallelConcurrentReadWriteLargeBuffer | Job-AYBFGA |  \\main\\corerun.exe | 54.14 us | 19.036 us | 21.922 us | 42.31 us | 32.48 us | 108.34 us |  1.42 |    0.60 |         - |          NA |\r\n\r\nI added new test so see what the difference would be with multiple SslStreams. (one per CPU Core)\r\nBut I cannot get stable numbers for some reason. \r\n",
                                           "updatedAt":  "2022-10-21T03:36:46Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Lock contention in SslStream.Encrypt/Decrypt",
        "labels":  [
                       "enhancement",
                       "area-System.Net.Security",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/69130",
        "createdAt":  "2022-05-10T12:42:25Z",
        "number":  69130,
        "author":  "juzuluag",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_cWVw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NN---",
                                            "createdAt":  "2022-05-13T17:31:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omghb",
                                            "createdAt":  "2022-06-23T12:26:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fossbrandon",
                                            "createdAt":  "2023-10-11T00:07:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2024-05-03T13:07:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ilmax",
                                            "createdAt":  "2024-05-06T07:23:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "doerig",
                                            "createdAt":  "2024-07-10T09:29:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "iSazonov",
                                            "createdAt":  "2024-09-20T17:04:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ricardoboss",
                                            "createdAt":  "2024-09-26T07:12:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "raulsntos",
                                            "createdAt":  "2024-10-12T16:46:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ShreyasZare",
                                            "createdAt":  "2025-02-25T11:12:56Z"
                                        }
                                    ],
                          "totalCount":  10
                      },
        "updatedAt":  "2024-09-20T07:49:10Z",
        "body":  "During the work with a customer, discovered that .NET core doesn\u0027t contain SSH which was crucial for the development of the engagement. Using a 3rd party NuGet package (known as SSH.NET) was the workaround, which unfortunately is not well maintained and supported, which brings the following issues:\r\n- **Security**:\r\nLack of more/new secure encryption algorithms given the fact the github repository lacks continuous support.\r\n- **Asynchronous support**: \r\nCurrent package is implemented using AMP (Asynchronous Programming Model), which is the legacy asynchronous implementation, compared to what most recent versions of dotnet .NET that supports – TAP (Task-based Asynchronous Pattern), which is what was used by customer.\r\n- **Lack of Documentation**:\r\nIt required to spend good amount of time reading SSH.NET repository, on how the package was implemented, look at some tests how those were written to have a good idea on how to consume the SSH client provided by the package. \r\n\r\nit is very common to find SSH as a standard mechanism to communicate between services across different platform, which brings the issue here whether this should be considered as workable item.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjNlQcw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5C5ZCb",
                                           "createdAt":  "2022-05-10T12:42:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-05-10T12:42:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5C5hYs",
                                           "createdAt":  "2022-05-10T13:15:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nDuring the work with a customer, discovered that .NET core doesn\u0027t contain SSH which was crucial for the development of the engagement. Using a 3rd party NuGet package (known as SSH.NET) was the workaround, which unfortunately is not well maintained and supported, which brings the following issues:\r\n- **Security**:\r\nLack of more/new secure encryption algorithms given the fact the github repository lacks continuous support.\r\n- **Asynchronous support**: \r\nCurrent package is implemented using AMP (Asynchronous Programming Model), which is the legacy asynchronous implementation, compared to what most recent versions of dotnet .NET that supports – TAP (Task-based Asynchronous Pattern), which is what was used by customer.\r\n- **Lack of Documentation**:\r\nIt required to spend good amount of time reading SSH.NET repository, on how the package was implemented, look at some tests how those were written to have a good idea on how to consume the SSH client provided by the package. \r\n\r\nit is very common to find SSH as a standard mechanism to communicate between services across different platform, which brings the issue here whether this should be considered as workable item.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejuzuluag\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Security`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-10T13:15:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5C6tSh",
                                           "createdAt":  "2022-05-10T17:39:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEHi0yg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "juzuluag",
                                                                               "createdAt":  "2022-05-10T17:58:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "omariom",
                                                                               "createdAt":  "2022-05-10T20:09:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2022-05-12T16:27:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NN---",
                                                                               "createdAt":  "2022-05-13T17:32:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ShreyasZare",
                                                                               "createdAt":  "2025-02-25T11:13:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "wfurt",
                                           "body":  "related to #40424 and  #31437. We may choose to contribute to https://github.com/sshnet/SSH.NET and perhaps bring it under https://dotnetfoundation.org/ umbrella. \r\n",
                                           "updatedAt":  "2022-05-10T17:39:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DENrc",
                                           "createdAt":  "2022-05-12T16:09:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCci_7Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2022-05-12T16:27:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "Triage: we want to see how much demand is from community, and consider it in the future. Please upvote top post if interested.",
                                           "updatedAt":  "2022-05-12T16:32:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DETLw",
                                           "createdAt":  "2022-05-12T16:33:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Previously we had interest in:\r\n- #17188\r\n- Related: #31437",
                                           "updatedAt":  "2022-05-12T16:33:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DFQeF",
                                           "createdAt":  "2022-05-12T21:49:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "I think @tmds made or started an SSH client library and noted that there are some possible missing cryptographic pieces, particularly around DiffieHellman, if I recall correctly. SSH needs the \"raw\" DiffieHellman secret where we don\u0027t provide it. SSH.NET gets around this by implementing a lot of the cryptography by hand or borrowing from BouncyCastle.\r\n\r\nIs that right @tmds?",
                                           "updatedAt":  "2022-05-12T22:14:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DhXUN",
                                           "createdAt":  "2022-05-20T12:02:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "That\u0027s right. There is no API that returns the shared secret. And if I remember correctly, Windows itself doesn\u0027t provide one.\r\n\r\nAfter trying the managed implementation on top of .NET crypto APIs, I did another prototype that wraps [libssh](https://www.libssh.org/). The code is at https://github.com/tmds/Tmds.Ssh. (The managed implementation is under the `release/v0.1` branch.)",
                                           "updatedAt":  "2022-05-20T12:02:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DhjuP",
                                           "createdAt":  "2022-05-20T12:56:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "/cc @SteveL-MSFT Could you please share thoughts on the possibility of implementing this request?",
                                           "updatedAt":  "2022-05-20T12:56:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Dh8n7",
                                           "createdAt":  "2022-05-20T14:35:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "\u003e Windows itself doesn\u0027t provide one.\r\n\r\nI _think_ this is possible with `BCryptDeriveKey` and specifying `BCRYPT_KDF_RAW_SECRET`. It\u0027s only on Windows 10+, and would be somewhat tricky to make work as it\u0027s a BCrypt API, whereas the `ECDiffieHellmanCng` implementation is built on top of NCrypt (to support CngKey and the like). For whatever reason the `NCryptDeriveKey` does not support raw values.\r\n\r\nBut I digress.",
                                           "updatedAt":  "2022-05-20T14:35:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZoFw6",
                                           "createdAt":  "2023-04-11T16:04:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODOltiA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wfurt",
                                                                               "createdAt":  "2023-04-11T18:32:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "juzuluag",
                                                                               "createdAt":  "2023-04-12T17:29:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2023-12-05T18:18:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "To follow up on raw DH, .NET 8 has [`DeriveRawSecretAgreement`](https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.ecdiffiehellman.deriverawsecretagreement?view=net-8.0) so the D-H blocker has been removed.",
                                           "updatedAt":  "2023-04-11T16:04:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58v2A_",
                                           "createdAt":  "2024-05-03T12:26:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODghMsA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vcsjones",
                                                                               "createdAt":  "2024-05-03T12:39:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "omariom",
                                                                               "createdAt":  "2024-05-03T13:07:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antonfirsov",
                                                                               "createdAt":  "2024-05-03T13:49:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "tmds",
                                           "body":  "I started the Tmds.Ssh repo with a managed implementation. After I got stuck on the DH secret, I switched it to wrap libssh instead. I\u0027m going to circle back to the managed implementation and see if I can now get it to fully work using only .NET BCL crypto.\r\n\r\nI\u0027m posting here to raise some awareness. It may take some weeks until I actually get this done.",
                                           "updatedAt":  "2024-05-03T12:26:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-LmQ5",
                                           "createdAt":  "2024-05-17T07:57:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODiSa6w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "samsosa",
                                                                               "createdAt":  "2024-05-18T13:57:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e see if I can now get it to fully work using only .NET BCL crypto.\r\n\r\nI have this working. Here are some \"getting started\" steps: https://github.com/tmds/Tmds.Ssh?tab=readme-ov-file#getting-started.\r\n\r\nIf you have feedback, you can create an issue or starting a discussion in the repo.",
                                           "updatedAt":  "2024-05-17T07:58:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-SXJ-",
                                           "createdAt":  "2024-05-18T09:40:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "I\u0027m looking at the algorithms my OpenSSH client would prefer to use (see below), and these are some preferable algorithms that .NET doesn\u0027t provide APIs for:\r\n\r\n- Ed25519 and Curve25519: https://github.com/dotnet/runtime/issues/14741\r\n- ChaCha20 (needed separate from [ChaCha20-Poly1305](https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.chacha20poly1305?view=net-8.0)  for implementing `chacha20-poly1305@openssh.com`)\r\n- AES+CTR (default `ssh-keygen` cypher)\r\n\r\nThis is the list of algorithms currently provided through BCL crypto in Tmds.Ssh: https://github.com/tmds/Tmds.Ssh?tab=readme-ov-file#tmdsssh.\r\n\r\n```\r\nKEX algorithms: curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,ext-info-c,kex-strict-c-v00@openssh.com\r\nhost key algorithms: ssh-ed25519-cert-v01@openssh.com,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,sk-ssh-ed25519-cert-v01@openssh.com,sk-ecdsa-sha2-nistp256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,ssh-ed25519,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,sk-ssh-ed25519@openssh.com,sk-ecdsa-sha2-nistp256@openssh.com,**rsa-sha2-512,rsa-sha2-256**\r\nciphers ctos: aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes256-ctr,aes128-gcm@openssh.com,aes128-ctr\r\nciphers stoc: aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes256-ctr,aes128-gcm@openssh.com,aes128-ctr\r\nMACs ctos: hmac-sha2-256-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha1,umac-128@openssh.com,hmac-sha2-512\r\nMACs stoc: hmac-sha2-256-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha1,umac-128@openssh.com,hmac-sha2-512\r\ncompression ctos: none,zlib@openssh.com,zlib\r\ncompression stoc: none,zlib@openssh.com,zlib\r\n```",
                                           "updatedAt":  "2024-05-18T11:14:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-Telt",
                                           "createdAt":  "2024-05-19T00:05:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODijDSA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "tmds",
                                                                               "createdAt":  "2024-05-21T07:54:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "@tmds\r\n\r\n\u003e ChaCha20 (needed separate from [ChaCha20-Poly1305](https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.chacha20poly1305?view=net-8.0) for implementing chacha20-poly1305@openssh.com)\r\n\r\nYou can implement ChaCha20 with ChaCha20Poly1305 (basically remove the Poly1305).\r\n\r\nBasically, you just use `Encrypt` with ChaCha20Poly1305 and throw away the tag (which is produced by Poly1305). So, that takes care of encrypt.\r\n\r\nFor `Decrypt`, since ChaCha20 is a stream cipher that derives a key stream and XORs it with the data, that means `Encrypt` is the exact same thing as decrypt since XOR is associative and commutative. So to decrypt it without a tag, you just encrypt it again (and throw away the tag).\r\n\r\nHere is an implementation of ChaCha20:\r\n\r\n```C#\r\npublic sealed class ChaCha20 : IDisposable {\r\n    private readonly ChaCha20Poly1305 _chaCha20Poly1305;\r\n\r\n    public ChaCha20(byte[] key) =\u003e _chaCha20Poly1305 = new(key);\r\n    public ChaCha20(ReadOnlySpan\u003cbyte\u003e key) =\u003e _chaCha20Poly1305 = new(key);\r\n\r\n    public void Encrypt(byte[] nonce, byte[] plaintext, byte[] ciphertext) {\r\n        ArgumentNullException.ThrowIfNull(nonce);\r\n        ArgumentNullException.ThrowIfNull(plaintext);\r\n        ArgumentNullException.ThrowIfNull(ciphertext);\r\n\r\n        Span\u003cbyte\u003e tagThrowAway = stackalloc byte[16];\r\n        _chaCha20Poly1305.Encrypt(nonce, plaintext, ciphertext, tagThrowAway);\r\n    }\r\n\r\n    public void Encrypt(ReadOnlySpan\u003cbyte\u003e nonce, ReadOnlySpan\u003cbyte\u003e plaintext, Span\u003cbyte\u003e ciphertext) {\r\n        Span\u003cbyte\u003e tagThrowAway = stackalloc byte[16];\r\n        _chaCha20Poly1305.Encrypt(nonce, plaintext, ciphertext, tagThrowAway);\r\n    }\r\n\r\n    // ChaCha20 is a stream cipher that builds a keystream and XORs the keystream with the data.\r\n    // So encrypt and decrypt are actually the same thing. We use encrypt here because it allows us to throw away\r\n    // the tag, essentially decryption without providing a tag.\r\n\r\n    public void Decrypt(byte[] nonce, byte[] ciphertext, byte[] plaintext) =\u003e\r\n        Encrypt(nonce, ciphertext, plaintext);\r\n\r\n    public void Decrypt(ReadOnlySpan\u003cbyte\u003e nonce, ReadOnlySpan\u003cbyte\u003e ciphertext, Span\u003cbyte\u003e plaintext) =\u003e\r\n        Encrypt(nonce, ciphertext, plaintext);\r\n\r\n    public void Dispose() =\u003e _chaCha20Poly1305.Dispose();\r\n}\r\n```\r\n\r\nAnd to test it:\r\n\r\n```C#\r\nReadOnlySpan\u003cbyte\u003e key = [\r\n    00, 01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 11, 12, 13, 14, 15,\r\n    16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];\r\n\r\nChaCha20 chaCha20 = new(key);\r\nReadOnlySpan\u003cbyte\u003e plaintext = \"Ladies and Gentlemen of the class of \u002799: If I could offer you only one tip for the future, sunscreen would be it.\"u8;\r\nReadOnlySpan\u003cbyte\u003e nonce = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x00];\r\nSpan\u003cbyte\u003e ciphertextBuffer = stackalloc byte[plaintext.Length];\r\nSpan\u003cbyte\u003e plaintextBuffer = stackalloc byte[plaintext.Length];\r\n\r\nchaCha20.Encrypt(nonce, plaintext, ciphertextBuffer);\r\nConsole.WriteLine(Convert.ToHexString(ciphertextBuffer));\r\n\r\nchaCha20.Decrypt(nonce, ciphertextBuffer, plaintextBuffer);\r\nConsole.WriteLine(Encoding.UTF8.GetString(plaintextBuffer));\r\n```\r\n\r\nWe can see this roundtrips the encryption and decryption appropriately, and produces the same cipher text (Ciphertext Sunscreen) as the RFC.\r\n\r\nThis does mean the implementation is doing Poly1305 for no reason, but Poly1305 overhead is fairly small.\r\n\r\n\u003e AES+CTR (default ssh-keygen cypher)\r\n\r\nI don\u0027t know if .NET will ever have a CTR mode in the box. But, this one is _reasonable_ to implement on top of AES-ECB. \r\n\r\n\u003e Ed25519 and Curve25519\r\n\r\nThere is no good work around for these currently, unfortunately, and nor are they trivial to implement. As you have found we have (several) tracking issues for various 25519 curve uses, but impeded by some operating systems.",
                                           "updatedAt":  "2024-05-19T12:40:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-e2Mw",
                                           "createdAt":  "2024-05-21T08:05:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e You can implement ChaCha20 with ChaCha20Poly1305 (basically remove the Poly1305).\r\n\r\n@vcsjones thanks for providing code for this!\r\n\r\n\u003e this one is reasonable to implement on top of AES-ECB.\r\n\r\nIf you could provide an implementation, it would be very welcome too.\r\n\r\nIn the next months I want to release a 0.2 version that includes both a managed and libssh based implementation.\r\nAfter that, I will drop the libssh based implementation.",
                                           "updatedAt":  "2024-05-21T08:05:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-jy2m",
                                           "createdAt":  "2024-05-21T19:36:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e use Encrypt with ChaCha20Poly1305 and throw away the tag\r\n\r\n@vcsjones I\u0027m doing some reading on ChaCha20Poly1305. As I understand it, the algorithm has a block counter and counter zero is used to derive a key. The counter then increments for encrypting the plaintext. To implement chacha20-poly1305@openssh.com ([spec](https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.chacha20poly1305)) we need to encrypt with the zero block counter. I think this means we can\u0027t use `ChaCha20Poly1305.Encrypt` (because the counter used on the plaintext \u003e 0). Is that right?",
                                           "updatedAt":  "2024-05-21T19:36:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_CA9I",
                                           "createdAt":  "2024-05-25T12:11:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scott-xu",
                                           "body":  "\u003e \u003e use Encrypt with ChaCha20Poly1305 and throw away the tag\r\n\u003e \r\n\u003e @vcsjones I\u0027m doing some reading on ChaCha20Poly1305. As I understand it, the algorithm has a block counter and counter zero is used to derive a key. The counter then increments for encrypting the plaintext. To implement [chacha20-poly1305@openssh.com](mailto:chacha20-poly1305@openssh.com) ([spec](https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.chacha20poly1305)) we need to encrypt with the zero block counter. I think this means we can\u0027t use `ChaCha20Poly1305.Encrypt` (because the counter used on the plaintext \u003e 0). Is that right?\r\n\r\nI got the exact problem when try to bring `ChaCha20Poly1305` into SSH.NET. There\u0027s nowhere to set the counter.",
                                           "updatedAt":  "2024-05-25T12:11:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_CoCX",
                                           "createdAt":  "2024-05-25T18:57:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "I think we need a class to provide ChaCha20 separately which could be something like:\r\n```cs\r\nnamespace System.Security.Cryptography;\r\n\r\nclass ChaCha20 : IDisposable\r\n{\r\n    static bool IsSupported;\r\n\r\n    ChaCha20(ReadOnlySpan\u003cbyte\u003e key, int initialCounter);\r\n\r\n    void Transform(ReadOnlySpan\u003cbyte\u003e nonce, ReadOnlySpan\u003cbyte\u003e input, Span\u003cbyte\u003e output);\r\n}\r\n```\r\nThis would be usable for the _packet length field_ encryption of chacha20-poly1305@openssh.com.\r\n\r\nFor the _entire packet_ encryption, I _think_ the algorithm described in [chacha20-poly1305@openssh.com](https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.chacha20poly1305) matches with what [ChaCha20Poly1305](https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.chacha20poly1305?view=net-8.0) provides.",
                                           "updatedAt":  "2024-05-25T18:57:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_CtrY",
                                           "createdAt":  "2024-05-25T19:57:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "\u003e int initialCounter\r\n\r\nUnfortunately a number of the platform crypto primitives do not expose unauthenticated ChaCha20 which accepts an initial counter.\r\n\r\n* Windows does not\r\n* macOS / iOS does not\r\n* Linux (OpenSSL) does with `EVP_chacha20`\r\n* Android kinda does with `ChaCha20ParameterSpec`. I say \"kinda\" because it was just added in API Level 35 (Android 15) which is unreleased.\r\n\r\nI also do not know if there is much appetite for adding unauthenticated `ChaCha20`, that\u0027s a @GrabYourPitchforks and @bartonjs question.",
                                           "updatedAt":  "2024-05-25T19:57:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_FIYQ",
                                           "createdAt":  "2024-05-26T03:47:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scott-xu",
                                           "body":  "I\u0027m trying to bring **chacha20-poly1305\u003cnolink/\u003e@openssh.com** into SSH.NET.\r\n1. Use hand-written managed `ChaCha20` class to encrypt the packet length field.\r\n2. Use BCL `ChaCha20Poly1305` to encrypt packet payload.\r\n\r\nHowever, the openssh server doesn\u0027t like the ~~encrypted packet~~ tag and closes the connection immediately.\r\nThe server log says: `ssh_dispatch_run_fatal: Connection from 127.0.0.1 port 33182: message authentication code incorrect [preauth]`\r\n\r\nHere\u0027s the PR: https://github.com/sshnet/SSH.NET/pull/1416\r\n",
                                           "updatedAt":  "2024-05-26T06:31:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_IDa_",
                                           "createdAt":  "2024-05-27T07:25:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e do not expose unauthenticated ChaCha20 which accepts an initial counter.\r\n\r\n@vcsjones do you know if they start counting at zero?\r\n\r\n\u003e Here\u0027s the PR: https://github.com/sshnet/SSH.NET/pull/1416\r\n\r\n@scott-xu It looks like you got it working (CI is passing). You aren\u0027t using the BCL `ChaCha20Poly1305`. Is it not usable for encrypting the packet payload per chacha20-poly1305@openssh.com?",
                                           "updatedAt":  "2024-05-27T07:25:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_JxdQ",
                                           "createdAt":  "2024-05-27T11:23:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODjXYNQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tmds",
                                                                               "createdAt":  "2024-05-27T11:36:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "scott-xu",
                                           "body":  "@tmds I\u0027m now using both home-made managed `ChaCha20` and managed `Poly1305` to encrypt the packet payload and compute tag because BCL\u0027s `ChaCha20Poly1305` follows RFC8439 ([section 2.8](https://datatracker.ietf.org/doc/html/rfc8439#section-2.8)) to **pad** the AAD and the CipherText  and append 2 lengths at the end before compute the tag.\r\n\r\n\u003e Finally, the Poly1305 function is called with the Poly1305 key\r\n\u003e      calculated above, and a message constructed as a concatenation of\r\n\u003e      the following:\r\n\u003e\r\n\u003e      *  The AAD\r\n\u003e\r\n\u003e      *  padding1 -- the padding is up to 15 zero bytes, and it brings\r\n\u003e         the total length so far to an integral multiple of 16.  If the\r\n\u003e         length of the AAD was already an integral multiple of 16 bytes,\r\n\u003e         this field is zero-length.\r\n\u003e\r\n\u003e      *  The ciphertext\r\n\u003e\r\n\u003e      *  padding2 -- the padding is up to 15 zero bytes, and it brings\r\n\u003e         the total length so far to an integral multiple of 16.  If the\r\n\u003e         length of the ciphertext was already an integral multiple of 16\r\n\u003e         bytes, this field is zero-length.\r\n\u003e\r\n\u003e      *  The length of the additional data in octets (as a 64-bit\r\n\u003e         little-endian integer).\r\n\u003e\r\n\u003e      *  The length of the ciphertext in octets (as a 64-bit little-\r\n\u003e         endian integer).\r\n\r\nwhile the OpenSSH\u0027s `ChaCha20Poly1305` does not pad nor append lengths. See the draft ([section 4](https://datatracker.ietf.org/doc/html/draft-josefsson-ssh-chacha20-poly1305-openssh-00#section-4))\r\n\r\n\u003e the MAC tag calculated using Poly1305 with this\r\n   key over the ciphertext of the packet length and the payload\r\n   together.",
                                           "updatedAt":  "2024-05-27T11:25:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_RBdQ",
                                           "createdAt":  "2024-05-28T13:04:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scott-xu",
                                           "body":  "\u003e \u003e int initialCounter\r\n\u003e \r\n\u003e Unfortunately a number of the platform crypto primitives do not expose unauthenticated ChaCha20 which accepts an initial counter.\r\n\u003e \r\n\u003e * Windows does not\r\n\u003e * macOS / iOS does not\r\n\u003e * Linux (OpenSSL) does with `EVP_chacha20`\r\n\u003e * Android kinda does with `ChaCha20ParameterSpec`. I say \"kinda\" because it was just added in API Level 35 (Android 15) which is unreleased.\r\n\u003e \r\n\u003e I also do not know if there is much appetite for adding unauthenticated `ChaCha20`, that\u0027s a @GrabYourPitchforks and @bartonjs question.\r\n\r\n@vcsjones Do you mean `ChaCha20` or `ChaCha20` **with initial counter**? I ask because eventually I found that there\u0027s nothing special for the initial counter about ChaCha20 in SSH protocol.\r\nIf there\u0027s individual `ChaCha20` and `Poly1305` class in BCL, it would save a lot of work to implement `chacha20-poly1305@openssh.com`. And it would be much more performance efficient and secure.\r\n\r\nI\u0027m trying to check the [Windows CNG](https://learn.microsoft.com/en-us/windows/win32/seccng/cng-algorithm-identifiers) myself. However, there\u0027s even no \"chacha20poly1305\" found. Am I looking at the wrong doc?",
                                           "updatedAt":  "2024-05-28T13:04:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6M2VBz",
                                           "createdAt":  "2024-09-20T07:49:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODy_lIA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "samsosa",
                                                                               "createdAt":  "2024-09-20T09:06:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tmds",
                                           "body":  "On the topic of the original issue: I don\u0027t think it is likely .NET will include an in-box SSH client because SSH is extensible for algorithms, and the SSH use-case alone is not sufficient for the .NET team to provide these algorithms.\r\n\r\n[Tmds.Ssh](https://github.com/tmds/Tmds.Ssh) should now have a feature set that meets the needs of most .NET SSH use-cases. I\u0027m interested in any feedback you have about the library (bugs, missing features, API, ...). To give feedback, you can open an issue in the repo or start a discussion.",
                                           "updatedAt":  "2024-09-20T07:49:08Z"
                                       }
                                   ],
                         "totalCount":  24
                     },
        "title":  "SSH from .NET Core support",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net.Security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71304",
        "createdAt":  "2022-06-26T14:08:19Z",
        "number":  71304,
        "author":  "M144-Coder",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-16T12:52:55Z",
        "body":  "According to the [SMTP client documentation](https://docs.microsoft.com/en-us/dotnet/api/system.net.mail.smtpclient.enablessl?view=net-6.0) the SmtpClient class supports STARTTLS (Explicit SSL/TLS) and there is no support support for implicit TLS.\r\n\r\nThere are several issue with STARTTLS:\r\n\r\n1-According to [RFC 8314](https://www.rfc-editor.org/rfc/rfc8314) STARTTLS is depreciated and the recommended way is implicit TLS.\r\n2- STARTTLS allows clients to switch to clear text which is a huge problem.\r\n3-A lot of mail servers, firewalls and service providers block port 25 for various reasons and this port is used at first to start STARTTLS.\r\n\r\nImplicit TLS is the way to go, please consider adding support for it.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORa1LgQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5FiA1u",
                                           "createdAt":  "2022-06-26T14:08:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAccording to the [SMTP client documentation](https://docs.microsoft.com/en-us/dotnet/api/system.net.mail.smtpclient.enablessl?view=net-6.0) the SmtpClient class supports STARTTLS (Explicit SSL/TLS) and there is no support support for implicit TLS.\r\n\r\nThere are several issue with STARTTLS:\r\n\r\n1-According to [RFC 8314](https://www.rfc-editor.org/rfc/rfc8314) STARTTLS is depreciated and the recommended way is implicit TLS.\r\n2- STARTTLS allows clients to switch to clear text which is a huge problem.\r\n3-A lot of mail servers, firewalls and service providers block port 25 for various reasons and this port is used at first to start STARTTLS.\r\n\r\nImplicit TLS is the way to go, please consider adding support for it.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eM144-Coder\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Security`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-26T14:08:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FiFmw",
                                           "createdAt":  "2022-06-26T15:24:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCkKE_Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wfurt",
                                                                               "createdAt":  "2022-06-27T13:26:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2022-06-28T12:23:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2022-06-28T16:55:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "[`SmtpClient` is in maintenance mode and not getting new features.](https://github.com/dotnet/platform-compat/blob/master/docs/DE0005.md) You are encouraged to move to a library such as MailKit which I think supports implicit TLS.",
                                           "updatedAt":  "2022-06-26T15:24:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FrUuB",
                                           "createdAt":  "2022-06-28T16:55:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: As mentioned above, this is maintenance mode. We would take a high-quality contribution in the space though.",
                                           "updatedAt":  "2022-06-28T16:55:56Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Support implicit TLS for SMTP client",
        "labels":  [
                       "enhancement",
                       "area-System.Net.Security",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71427",
        "createdAt":  "2022-06-29T12:22:45Z",
        "number":  71427,
        "author":  "filipnavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-09T17:40:50Z",
        "body":  "Both krb5+gssntlm-ssp and macOS GSSAPI seem to support passing a custom credential file for testing through the `NTLM_USER_FILE` environment variable. The format of the file is the following:\r\n\r\n```\r\nDOMAIN:user:password\r\n```\r\n\r\nIn theory that could enable some round-trip tests like the ones for HTTP authentication or the NegotiateStream tests. I briefly experimented with it and already uncovered a couple of issues.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORbt8Pg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Fu3rN",
                                           "createdAt":  "2022-06-29T12:22:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-06-29T12:22:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Fu3w-",
                                           "createdAt":  "2022-06-29T12:23:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nBoth krb5+gssntlm-ssp and macOS GSSAPI seem to support passing a custom credential file for testing through the `NTLM_USER_FILE` environment variable. The format of the file is the following:\r\n\r\n```\r\nDOMAIN:user:password\r\n```\r\n\r\nIn theory that could enable some round-trip tests like the ones for HTTP authentication or the NegotiateStream tests. I briefly experimented with it and already uncovered a couple of issues.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003efilipnavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Security`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-29T12:23:17Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Enhance the NTLM negotiation testing on Linux/macOS",
        "labels":  [
                       "area-System.Net.Security",
                       "test-enhancement",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73118",
        "createdAt":  "2022-07-30T23:49:55Z",
        "number":  73118,
        "author":  "Neustradamus",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-28T20:15:50Z",
        "body":  "### Description\r\n\r\nCan you add the support of RFC 9266: Channel Bindings for TLS 1.3?\r\n- https://datatracker.ietf.org/doc/html/rfc9266 \r\n\r\nLittle details, to know easily:\r\n- tls-unique for TLS =\u003c 1.2\r\n- tls-server-end-point\r\n- tls-exporter for TLS = 1.3 \r\n\r\nThanks in advance.\r\n\r\nLinked to:\r\n- https://github.com/dotnet/runtime/search?q=tls-unique\r\n- https://github.com/dotnet/runtime/search?q=ChannelBindingKind\r\n\r\n### Reproduction Steps\r\n\r\nPlease read the RFC9266.\r\n\r\n### Expected behavior\r\n\r\nPlease read the RFC9266.\r\n\r\n### Actual behavior\r\n\r\nPlease read the RFC9266.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuobmJA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Hi1hN",
                                           "createdAt":  "2022-07-30T23:50:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-07-30T23:50:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hi31g",
                                           "createdAt":  "2022-07-31T01:07:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nCan you add the support of RFC 9266: Channel Bindings for TLS 1.3?\r\n- https://datatracker.ietf.org/doc/html/rfc9266 \r\n\r\nLittle details, to know easily:\r\n- tls-unique for TLS =\u003c 1.2\r\n- tls-exporter for TLS = 1.3 \r\n\r\nThanks in advance.\r\n\r\nLinked to:\r\n- https://github.com/dotnet/runtime/search?q=tls-unique\n\n### Reproduction Steps\n\nPlease read the RFC9266.\n\n### Expected behavior\n\nPlease read the RFC9266.\n\n### Actual behavior\n\nPlease read the RFC9266.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNeustradamus\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Security`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-31T01:07:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hny-C",
                                           "createdAt":  "2022-08-01T19:20:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neustradamus",
                                           "body":  "@wfurt, @aik-jahoda, @filipnavara, @hughbe: What do you think?\r\n\r\nI have added some info in the main ticket.",
                                           "updatedAt":  "2022-08-01T19:20:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hn-gQ",
                                           "createdAt":  "2022-08-01T20:10:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "not in 7.0. We may look into it in 8.0. On Windows this comes from schannel. We will need to check what is supported there. ",
                                           "updatedAt":  "2022-08-01T20:10:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vcfLw",
                                           "createdAt":  "2023-12-26T19:42:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neustradamus",
                                           "body":  "Dear @dotnet team,\r\n\r\nHave you progressed on it?",
                                           "updatedAt":  "2023-12-26T19:42:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vdDJe",
                                           "createdAt":  "2023-12-27T02:22:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "no, but we may during 9.0. On Windows, this could just work as we depends on schannel implementation. It will need some more research and testing. What is your intended use case @Neustradamus ?\r\n",
                                           "updatedAt":  "2023-12-27T02:22:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50OX3W",
                                           "createdAt":  "2024-02-17T10:14:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neustradamus",
                                           "body":  "Dear all @dotnet team,\r\n\r\nAny news of this security missing problem?\r\n\r\nThanks in advance.\r\n\r\nWhere I can send an email to security Microsoft team?",
                                           "updatedAt":  "2024-02-17T10:14:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50f5WC",
                                           "createdAt":  "2024-02-20T15:54:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jstedfast",
                                           "body":  "@wfurt\r\n\r\nHi, I\u0027m the author of MailKit and @Neustradamus has asked me to comment here, although I don\u0027t think my comment will go the way he expects.\r\n\r\nIt appears that @Neustradamus [goes around to every single project on GitHub that supports any mode of SASL authentication](https://github.com/scram-sasl/info/issues/1) and requests that they implement support for all of the (numerous) SCRAM-SHA-* authentication mechanisms combined with the channel binding support that the `-PLUS` variants require.\r\n\r\nWhen he asked me to implement `tls-export` channel binding support for the SCRAM mechanisms, I told him that I couldn\u0027t because .NET\u0027s SslStream didn\u0027t support it which is how this issue got opened.\r\n\r\nFoolishly, I wasted a ton of time implementing all of the SCRAM mechanisms and channel binding support for `tls-unique` and `tls-server-end-point` several years ago under the assumption that he had filed these feature requests for MailKit because he needed them (as opposed to him using MailKit and dozens of other hapless projects as evidence that there is wide support for it).\r\n\r\nNow I see that not a single human being is asking for SCRAM on *any* of these products other than @Neustradamus himself, which leads me to conclude that there is absolutely no organic demand for it anywhere.\r\n\r\nI\u0027m sure @Neustradamus has all of the best intentions, but I wish that he realized how much wasted effort he is causing for developers across a wide variety of projects that might be better off focusing their effort on other things that matter more.\r\n\r\nIn conclusion, this is all about checking a checkbox and nothing more as far as I can tell.\r\n\r\nMy recommendation would be to wait and see if there is any actual organic demand for it. That\u0027s my plan from here on out.\r\n\r\nEdit:\r\n\r\nThis was an interesting read on the topic of SCRAM: https://blog.josefsson.org/2021/06/08/whats-wrong-with-scram/",
                                           "updatedAt":  "2024-02-20T16:12:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50g8ci",
                                           "createdAt":  "2024-02-20T18:10:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neustradamus",
                                           "body":  "@jstedfast: SCRAM-SHA-1, SCRAM-SHA-1-PLUS, SCRAM-SHA-256, SCRAM-SHA-256-PLUS have been added in GNU SASL by @jas4711, the author of your latest link.\r\n\r\nYou can see a lot of information about SCRAM and Channel Binding and a list of supported projects:\r\n- https://github.com/scram-sasl/info/issues/1\r\n\r\nOld and unsecure mechanisms like CRAM-MD5 and DIGEST-MD5 have been removed from Cyrus SASL and Cyrus IMAP in master code.\r\n\r\nYou can see that Cyrus SASL/IMAP, Dovecot, Exim support SCRAM-SHA-*-PLUS and several other softwares, look the uncomplete list.",
                                           "updatedAt":  "2024-02-20T18:10:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50k47x",
                                           "createdAt":  "2024-02-21T03:37:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODXl8YA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jstedfast",
                                                                               "createdAt":  "2024-02-21T04:46:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wfurt",
                                           "body":  "thanks for the feedback @jstedfast. I\u0027ll ping Windows TLS team to see what is their take on it. ",
                                           "updatedAt":  "2024-02-21T03:37:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50nhlS",
                                           "createdAt":  "2024-02-21T12:11:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neustradamus",
                                           "body":  "@wfurt: Thanks for your ping to Windows TLS team!\r\n\r\nI hope a security solution soon.\r\n\r\nIt is linked to Microsoft Channel Binding:\r\n- https://www.google.com/search?q=microsoft+channel+binding\r\n\r\nIt is needed to have a compatibility with:\r\n- tls-unique for TLS =\u003c 1.2 (RFC5929)\r\n- tls-server-end-point (RFC5929)\r\n- tls-exporter for TLS = 1.3 (RFC9266)\r\n",
                                           "updatedAt":  "2024-02-21T12:11:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64cOo6",
                                           "createdAt":  "2025-07-20T09:57:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neustradamus",
                                           "body":  "Any progress on it?",
                                           "updatedAt":  "2025-07-20T09:57:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66huYk",
                                           "createdAt":  "2025-07-28T20:15:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "no, It is certainly out of scope for 10.0. ",
                                           "updatedAt":  "2025-07-28T20:15:49Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "RFC 9266: Channel Bindings for TLS 1.3 support",
        "labels":  [
                       "area-System.Net.Security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77989",
        "createdAt":  "2022-11-07T20:17:51Z",
        "number":  77989,
        "author":  "brunobritodev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8ZHWA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "carloscds",
                                            "createdAt":  "2022-11-23T01:19:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "epicstar",
                                            "createdAt":  "2024-08-19T18:31:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pablokawan",
                                            "createdAt":  "2024-11-04T19:41:01Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-05-28T17:11:44Z",
        "body":  "### Description\n\nWhile trying to make a Client integration with a server through Mutual TLS we got this error: \r\n\r\n```\r\nSystem.Net.Http.HttpRequestException\r\n  HResult=0x80131501\r\n  Message=The SSL connection could not be established, see inner exception.\r\n  Source=System.Net.Http\r\n  StackTrace:\r\n   at System.Net.Http.ConnectHelper.\u003cEstablishSslConnectionAsync\u003ed__2.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()\r\n   at System.Net.Http.HttpConnectionPool.\u003cConnectAsync\u003ed__96.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()\r\n   at System.Net.Http.HttpConnectionPool.\u003cCreateHttp11ConnectionAsync\u003ed__98.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()\r\n   at System.Net.Http.HttpConnectionPool.\u003cAddHttp11ConnectionAsync\u003ed__73.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at System.Threading.Tasks.TaskCompletionSourceWithCancellation`1.\u003cWaitWithCancellationAsync\u003ed__1.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()\r\n   at System.Net.Http.HttpConnectionPool.\u003cGetHttp11ConnectionAsync\u003ed__75.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()\r\n   at System.Net.Http.HttpConnectionPool.\u003cSendWithVersionDetectionAndRetryAsync\u003ed__83.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at System.Net.Http.DiagnosticsHandler.\u003cSendAsyncCore\u003ed__8.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()\r\n   at System.Net.Http.RedirectHandler.\u003cSendAsync\u003ed__4.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at System.Net.Http.HttpClient.\u003c\u003cSendAsync\u003eg__Core|83_0\u003ed.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Program.\u003c\u003cMain\u003e$\u003ed__0.MoveNext() in D:\\workspace\\PixSantander\\PixSantander\\Program.cs:line 43\r\n\r\nInner Exception 1:\r\nAuthenticationException: Authentication failed, see inner exception.\r\n\r\nInner Exception 2:\r\nWin32Exception: The message received was unexpected or badly formatted.\r\n```\r\n\r\nOur code:\r\n\r\n```csharp\r\nServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls13;\r\nvar certificatePath = @\"\u003cyour-certificate\u003e.pfx\";\r\nvar certificatePassword = \"\u003cyour-password\u003e\";\r\n\r\nvar handler = new HttpClientHandler();\r\n\r\nhandler.ClientCertificateOptions = ClientCertificateOption.Manual;\r\nhandler.ClientCertificates.Add(new X509Certificate2(certificatePath, certificatePassword));\r\n\r\nvar client = new HttpClient(handler);\r\nclient.BaseAddress = new Uri(\"https://trust-pix-h.santander.com.br/\");\r\n\r\nvar content = new FormUrlEncodedContent(new[]\r\n{\r\n    new KeyValuePair\u003cstring, string\u003e(\"client_id\", \"\u003cyour-client_id\u003e\"),\r\n    new KeyValuePair\u003cstring, string\u003e(\"client_secret\", \"\u003cyour-client-secret\u003e\"),\r\n});\r\nvar result = await client.PostAsync(\"oauth/token?grant_type=client_credentials\", content);\r\nConsole.WriteLine(await result.Content.ReadAsStringAsync());\r\n```\r\n\r\nIf we change from Windows to run through WSL2, then works. If we do the same integration, with same parameters, but in another languages like nodejs, java or even in Postman, everything goes fine. \r\n\r\nOne of our devs spent a week and didn\u0027t got any solution out there. The error message dont give any clue. After hours trying to figure out what\u0027s happening. Then we found that changing a Windows registry information:\r\n\r\n```registry\r\n[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Messaging]\r\n\"MessageLimitClient\"=dword:00418000\r\n```\r\n\r\nThen .NET start to work at Windows.\r\n\r\nMy whole point is: Maybe a better error message? A way to change tls handshake size? \r\n\n\n### Reproduction Steps\n\nI can\u0027t give all information to reproduce the error, since it\u0027s needs to share sensitive information (pfx file and password). But I can share some details:\r\nServer: https://trust-pix-h.santander.com.br/\r\nCipher: ECDHE-RSA-AES256-GCMA-SHA384\r\nTLS 1.2\r\n![image](https://user-images.githubusercontent.com/7241156/200406416-f0374c4c-9ddf-4077-be56-c83c36b87d77.png)\r\n\n\n### Expected behavior\n\nA better error message saying the handshake was failed because the TLS size. The actual message lead the developer to unknown places where he never finds what\u0027s really going on.\n\n### Actual behavior\n\nMessage=The SSL connection could not be established, see inner exception.\r\n\r\nInner Exception 1:\r\nAuthenticationException: Authentication failed, see inner exception.\r\n\r\nInner Exception 2:\r\nWin32Exception: The message received was unexpected or badly formatted.\n\n### Regression?\n\nWorks in Linux.\n\n### Known Workarounds\n\nChange windows registry:\r\n\r\n```registry\r\n[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Messaging]\r\n\"MessageLimitClient\"=dword:00418000\r\n```\r\n\r\nOr deploy in Linux environments.\n\n### Configuration\n\n* Which version of .NET is the code running on?\r\n   .NET 2.2, 3.1, 5 and 6. Also occur in .NET Framework\r\n\r\n* What OS and version, and what distro if applicable?\r\n  Windows 10 Pro version 21h2\r\n\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n  x64\r\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrd6ggg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5N2hqd",
                                           "createdAt":  "2022-11-07T20:18:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhile trying to make a Client integration with a server through Mutual TLS we got this error: \r\n\r\n```\r\nSystem.Net.Http.HttpRequestException\r\n  HResult=0x80131501\r\n  Message=The SSL connection could not be established, see inner exception.\r\n  Source=System.Net.Http\r\n  StackTrace:\r\n   at System.Net.Http.ConnectHelper.\u003cEstablishSslConnectionAsync\u003ed__2.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()\r\n   at System.Net.Http.HttpConnectionPool.\u003cConnectAsync\u003ed__96.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()\r\n   at System.Net.Http.HttpConnectionPool.\u003cCreateHttp11ConnectionAsync\u003ed__98.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()\r\n   at System.Net.Http.HttpConnectionPool.\u003cAddHttp11ConnectionAsync\u003ed__73.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at System.Threading.Tasks.TaskCompletionSourceWithCancellation`1.\u003cWaitWithCancellationAsync\u003ed__1.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()\r\n   at System.Net.Http.HttpConnectionPool.\u003cGetHttp11ConnectionAsync\u003ed__75.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()\r\n   at System.Net.Http.HttpConnectionPool.\u003cSendWithVersionDetectionAndRetryAsync\u003ed__83.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at System.Net.Http.DiagnosticsHandler.\u003cSendAsyncCore\u003ed__8.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()\r\n   at System.Net.Http.RedirectHandler.\u003cSendAsync\u003ed__4.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at System.Net.Http.HttpClient.\u003c\u003cSendAsync\u003eg__Core|83_0\u003ed.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Program.\u003c\u003cMain\u003e$\u003ed__0.MoveNext() in D:\\workspace\\PixSantander\\PixSantander\\Program.cs:line 43\r\n\r\nInner Exception 1:\r\nAuthenticationException: Authentication failed, see inner exception.\r\n\r\nInner Exception 2:\r\nWin32Exception: The message received was unexpected or badly formatted.\r\n```\r\n\r\nOur code:\r\n\r\n```csharp\r\nServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls13;\r\nvar certificatePath = @\"\u003cyour-certificate\u003e.pfx\";\r\nvar certificatePassword = \"\u003cyour-password\u003e\";\r\n\r\nvar handler = new HttpClientHandler();\r\n\r\nhandler.ClientCertificateOptions = ClientCertificateOption.Manual;\r\nhandler.ClientCertificates.Add(new X509Certificate2(certificatePath, certificatePassword));\r\n\r\nvar client = new HttpClient(handler);\r\nclient.BaseAddress = new Uri(\"https://trust-pix-h.santander.com.br/\");\r\n\r\nvar content = new FormUrlEncodedContent(new[]\r\n{\r\n    new KeyValuePair\u003cstring, string\u003e(\"client_id\", \"\u003cyour-client_id\u003e\"),\r\n    new KeyValuePair\u003cstring, string\u003e(\"client_secret\", \"\u003cyour-client-secret\u003e\"),\r\n});\r\nvar result = await client.PostAsync(\"oauth/token?grant_type=client_credentials\", content);\r\nConsole.WriteLine(await result.Content.ReadAsStringAsync());\r\n```\r\n\r\nIf we change from Windows to run through WSL2, then works. If we do the same integration, with same parameters, but in another languages like nodejs, java or even in Postman, everything goes fine. \r\n\r\nOne of our devs spent a week and didn\u0027t got any solution out there. The error message dont give any clue. After hours trying to figure out what\u0027s happening. Then we found that changing a Windows registry information:\r\n\r\n```registry\r\n[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Messaging]\r\n\"MessageLimitClient\"=dword:00418000\r\n```\r\n\r\nThen .NET start to work at Windows.\r\n\r\nMy whole point is: Maybe a better error message? A way to change tls handshake size? \r\n\n\n### Reproduction Steps\n\nI can\u0027t give all information to reproduce the error, since it\u0027s needs to share sensitive information (pfx file and password). But I can share some details:\r\nServer: https://trust-pix-h.santander.com.br/\r\nCipher: ECDHE-RSA-AES256-GCMA-SHA384\r\nTLS 1.2\r\n![image](https://user-images.githubusercontent.com/7241156/200406416-f0374c4c-9ddf-4077-be56-c83c36b87d77.png)\r\n\n\n### Expected behavior\n\nA better error message saying the handshake was failed because the TLS size. The actual message lead the developer to unknown places where he never finds what\u0027s really going on.\n\n### Actual behavior\n\nMessage=The SSL connection could not be established, see inner exception.\r\n\r\nInner Exception 1:\r\nAuthenticationException: Authentication failed, see inner exception.\r\n\r\nInner Exception 2:\r\nWin32Exception: The message received was unexpected or badly formatted.\n\n### Regression?\n\nWorks in Linux.\n\n### Known Workarounds\n\nChange windows registry:\r\n\r\n```registry\r\n[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Messaging]\r\n\"MessageLimitClient\"=dword:00418000\r\n```\r\n\r\nOr deploy in Linux environments.\n\n### Configuration\n\n* Which version of .NET is the code running on?\r\n   .NET 2.2, 3.1, 5 and 6. Also occur in .NET Framework\r\n\r\n* What OS and version, and what distro if applicable?\r\n  Windows 10 Pro version 21h2\r\n\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n  x64\r\n\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebrunobritodev\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Http`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-07T20:18:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5N2mzA",
                                           "createdAt":  "2022-11-07T20:40:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhile trying to make a Client integration with a server through Mutual TLS we got this error: \r\n\r\n```\r\nSystem.Net.Http.HttpRequestException\r\n  HResult=0x80131501\r\n  Message=The SSL connection could not be established, see inner exception.\r\n  Source=System.Net.Http\r\n  StackTrace:\r\n   at System.Net.Http.ConnectHelper.\u003cEstablishSslConnectionAsync\u003ed__2.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()\r\n   at System.Net.Http.HttpConnectionPool.\u003cConnectAsync\u003ed__96.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()\r\n   at System.Net.Http.HttpConnectionPool.\u003cCreateHttp11ConnectionAsync\u003ed__98.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()\r\n   at System.Net.Http.HttpConnectionPool.\u003cAddHttp11ConnectionAsync\u003ed__73.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at System.Threading.Tasks.TaskCompletionSourceWithCancellation`1.\u003cWaitWithCancellationAsync\u003ed__1.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()\r\n   at System.Net.Http.HttpConnectionPool.\u003cGetHttp11ConnectionAsync\u003ed__75.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()\r\n   at System.Net.Http.HttpConnectionPool.\u003cSendWithVersionDetectionAndRetryAsync\u003ed__83.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at System.Net.Http.DiagnosticsHandler.\u003cSendAsyncCore\u003ed__8.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult()\r\n   at System.Net.Http.RedirectHandler.\u003cSendAsync\u003ed__4.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at System.Net.Http.HttpClient.\u003c\u003cSendAsync\u003eg__Core|83_0\u003ed.MoveNext()\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Program.\u003c\u003cMain\u003e$\u003ed__0.MoveNext() in D:\\workspace\\PixSantander\\PixSantander\\Program.cs:line 43\r\n\r\nInner Exception 1:\r\nAuthenticationException: Authentication failed, see inner exception.\r\n\r\nInner Exception 2:\r\nWin32Exception: The message received was unexpected or badly formatted.\r\n```\r\n\r\nOur code:\r\n\r\n```csharp\r\nServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls13;\r\nvar certificatePath = @\"\u003cyour-certificate\u003e.pfx\";\r\nvar certificatePassword = \"\u003cyour-password\u003e\";\r\n\r\nvar handler = new HttpClientHandler();\r\n\r\nhandler.ClientCertificateOptions = ClientCertificateOption.Manual;\r\nhandler.ClientCertificates.Add(new X509Certificate2(certificatePath, certificatePassword));\r\n\r\nvar client = new HttpClient(handler);\r\nclient.BaseAddress = new Uri(\"https://trust-pix-h.santander.com.br/\");\r\n\r\nvar content = new FormUrlEncodedContent(new[]\r\n{\r\n    new KeyValuePair\u003cstring, string\u003e(\"client_id\", \"\u003cyour-client_id\u003e\"),\r\n    new KeyValuePair\u003cstring, string\u003e(\"client_secret\", \"\u003cyour-client-secret\u003e\"),\r\n});\r\nvar result = await client.PostAsync(\"oauth/token?grant_type=client_credentials\", content);\r\nConsole.WriteLine(await result.Content.ReadAsStringAsync());\r\n```\r\n\r\nIf we change from Windows to run through WSL2, then works. If we do the same integration, with same parameters, but in another languages like nodejs, java or even in Postman, everything goes fine. \r\n\r\nOne of our devs spent a week and didn\u0027t got any solution out there. The error message dont give any clue. After hours trying to figure out what\u0027s happening. Then we found that changing a Windows registry information:\r\n\r\n```registry\r\n[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Messaging]\r\n\"MessageLimitClient\"=dword:00418000\r\n```\r\n\r\nThen .NET start to work at Windows.\r\n\r\nMy whole point is: Maybe a better error message? A way to change tls handshake size? \r\n\n\n### Reproduction Steps\n\nI can\u0027t give all information to reproduce the error, since it\u0027s needs to share sensitive information (pfx file and password). But I can share some details:\r\nServer: https://trust-pix-h.santander.com.br/\r\nCipher: ECDHE-RSA-AES256-GCMA-SHA384\r\nTLS 1.2\r\n![image](https://user-images.githubusercontent.com/7241156/200406416-f0374c4c-9ddf-4077-be56-c83c36b87d77.png)\r\n\n\n### Expected behavior\n\nA better error message saying the handshake was failed because the TLS size. The actual message lead the developer to unknown places where he never finds what\u0027s really going on.\n\n### Actual behavior\n\nMessage=The SSL connection could not be established, see inner exception.\r\n\r\nInner Exception 1:\r\nAuthenticationException: Authentication failed, see inner exception.\r\n\r\nInner Exception 2:\r\nWin32Exception: The message received was unexpected or badly formatted.\n\n### Regression?\n\nWorks in Linux.\n\n### Known Workarounds\n\nChange windows registry:\r\n\r\n```registry\r\n[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Messaging]\r\n\"MessageLimitClient\"=dword:00418000\r\n```\r\n\r\nOr deploy in Linux environments.\n\n### Configuration\n\n* Which version of .NET is the code running on?\r\n   .NET 2.2, 3.1, 5 and 6. Also occur in .NET Framework\r\n\r\n* What OS and version, and what distro if applicable?\r\n  Windows 10 Pro version 21h2\r\n\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n  x64\r\n\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebrunobritodev\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Http`, `area-System.Net.Security`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-07T20:40:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5N3TBn",
                                           "createdAt":  "2022-11-07T23:03:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "While I agree better exception would be nice the error code is coming from OS and .NET is really not involved in parsing and TLS Handshake. I\u0027m not sure if there is much we can do.\r\n\r\nBTW as far as repro, you can always generate new pair of keys for testing while ",
                                           "updatedAt":  "2022-11-07T23:03:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jW5Te",
                                           "createdAt":  "2023-08-06T19:07:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karayakar",
                                           "body":  "This issue still happens in dot net 6.\r\n\r\nBuffer=\"System.Exception: One or more errors occurred. (One or more errors occurred. (The SSL connection could not be established, see inner exception.)) ---\u003e System.AggregateException: One or more errors occurred. (One or more errors occurred. (The SSL connection could not be established, see inner exception.)) ---\u003e System.AggregateException: One or more errors occurred. (The SSL connection could not be established, see inner exception.) ---\u003e System.Net.Http.HttpRequestException: **The SSL connection could not be established, see inner exception.** ---\u003e System.Security.Authentication.AuthenticationException: **Authentication failed, see inner exception.** ---\u003e System.ComponentModel.Win32Exception (0x80090326): **The message received was unexpected or badly formatted.**    --- End of inner exception stack trace ---    at System.Net.Security.SslStream.ForceAuthenticationAsync[TIOAdapter](TIOAdapter adapter, Boolean receiveFirst, Byte[] reAuthenticationData, Boolean isApm)    at System.Net.Http.ConnectHelper.EstablishSslConnectionAsync(SslClientAuthenticationOptions sslOptions, HttpRequestMessage request, Boolean async, Stream stream, CancellationToken cancellationToken)    --- End of inner exception stack trace ---    at System.Net.Http.ConnectHelper.EstablishSslConnectionAsync(SslClientAuthenticationOptions sslOptions, HttpRequestMessage request, Boolean async, Stream stream, CancellationToken cancellationToken)    at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)    at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)    at System.Net.Http.HttpConnectionPool.AddHttp11ConnectionAsync(HttpRequestMessage request)    at System.Threading.Tasks.TaskCompletionSourceWithCancellation`1.WaitWithCancellationAsync(CancellationToken cancellationToken)    at System.Net.Http.HttpConnectionPool.GetHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)    at System.Net.Http.HttpConnectionPool.SendWithVersionDetectionAndRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)    at System.Net.Http.DiagnosticsHandler.SendAsyncCore(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)    at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)    at System.Net.Http.HttpClient.\u003cSendAsync\u003eg__Core|83_0(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationTokenSource cts, Boolean disposeCts, CancellationTokenSource pendingRequestsCts, CancellationToken originalCancellationToken)    --- End of inner exception stack trace ---    at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)    at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)    at XXXXXX.GetUploadStreamUrlService(LocalFile file) in XXXXXXXXXXX.cs:line 329    --- End of inner exception stack trace ---    at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)    at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)    at XXX.GetStreamUrl() in XXXXX.cs:line 68    --- End of inner exception stack trace ---    at XXXXXX.GetStreamUrl() in",
                                           "updatedAt":  "2023-08-06T19:08:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jXFx9",
                                           "createdAt":  "2023-08-06T22:58:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "The error come from schannel .NET use to do the TLS e.g. were are not in charge of the the error we surface what OS give use. 0x80090326 `SEC_E_ILLEGAL_MESSAGE` - it may be worth to do packet capture to see what TLS message this if failing on.   ",
                                           "updatedAt":  "2023-08-06T22:58:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SXNTv",
                                           "createdAt":  "2024-11-04T19:43:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pablokawan",
                                           "body":  "After only eight hours of banging my head trying to figure out why Banco do Brasil wasn’t accepting the digital certificate, I finally discovered it’s an issue that’s been open since 2022—and could be fixed simply by using the registry editor. Incredible, right?",
                                           "updatedAt":  "2024-11-04T19:43:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6t3qCC",
                                           "createdAt":  "2025-05-28T17:11:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Triage: we should improve troubleshooting guide at https://learn.microsoft.com/en-us/dotnet/core/extensions/sslstream-troubleshooting, otherwise there is not much we can do.",
                                           "updatedAt":  "2025-05-28T17:11:44Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "TLS Handshake error: `Win32Exception: The message received was unexpected or badly formatted`",
        "labels":  [
                       "area-System.Net.Security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79441",
        "createdAt":  "2022-12-09T09:46:46Z",
        "number":  79441,
        "author":  "mddddb",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAQyhA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mstefarov",
                                            "createdAt":  "2024-09-21T01:30:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pvrobays",
                                            "createdAt":  "2025-03-19T12:06:35Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-05-31T14:42:04Z",
        "body":  "### Background and motivation\r\n\r\nIt is currently possible to have a custom remote certificate validation for HttpClient using https://github.com/dotnet/runtime/blob/4cbe6f99d23e04c56a89251d49de1b0f14000427/src/libraries/System.Net.Http/src/System/Net/Http/HttpClientHandler.cs#L261 and https://github.com/dotnet/runtime/blob/a5f3676cc71e176084f0f7f1f6beeecd86fbeafc/src/libraries/System.Net.Security/src/System/Net/Security/SslClientAuthenticationOptions.cs#L26\r\nHowever, it is currently impossible to have async validation without sync-over-async, since the signature of the delegate is as below:\r\n`public delegate bool RemoteCertificateValidationCallback(object sender, X509Certificate? certificate, X509Chain? chain, SslPolicyErrors sslPolicyErrors);`\r\n\r\nI.e.\r\n```c#\r\nservices\r\n    .AddHttpClient(\"someEndpointClient\")\r\n    .ConfigureHttpMessageHandlerBuilder(builder =\u003e\r\n    {\r\n        var handler = (HttpClientHandler)builder.PrimaryHandler;\r\n        handler.ServerCertificateCustomValidationCallback = (httpRequestMessage, certificate, chain, sslPolicyErrors) =\u003e\r\n        {\r\n            Task\u003cbool\u003e someValidationTask = ...;\r\n            return someValidationTask.GetAwaiter().GetResult(); // sync-over-async\r\n        };\r\n    });\r\n```\r\n\r\nOriginal discussion: https://github.com/dotnet/runtime/discussions/78761\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Net.Security;\r\n\r\npublic delegate ValueTask\u003cbool\u003e RemoteCertificateValidationAsyncCallback(object sender, X509Certificate? certificate, X509Chain? chain, SslPolicyErrors sslPolicyErrors);\r\n```\r\n\r\n```csharp\r\nnamespace System.Net.Security\r\n\r\npublic class SslClientAuthenticationOptions\r\n{\r\n    ...\r\n\r\n    public RemoteCertificateValidationAsyncCallback? RemoteCertificateValidationAsyncCallback { get; set; }\r\n}\r\n```\r\n\r\n```csharp\r\nnamespace System.Net.Http\r\n\r\npublic partial class HttpClientHandler : HttpMessageHandler\r\n{\r\n    ...\r\n\r\n    public Func\u003cHttpRequestMessage, X509Certificate2?, X509Chain?, SslPolicyErrors, ValueTask\u003cbool\u003e\u003e? ServerCertificateCustomValidationAsyncCallback { get; set; }\r\n}\r\n```\r\n\r\n### API Usage\r\n\r\n```c#\r\nservices\r\n    .AddHttpClient(\"someEndpointClient\")\r\n    .ConfigureHttpMessageHandlerBuilder(builder =\u003e\r\n    {\r\n        var handler = (HttpClientHandler)builder.PrimaryHandler;\r\n        handler.ServerCertificateCustomValidationAsyncCallback = async (httpRequestMessage, certificate, chain, sslPolicyErrors) =\u003e\r\n        {\r\n            Task\u003cbool\u003e someValidationTask = ...;\r\n            return await someValidationTask.ConfigireAwait(false);\r\n        };\r\n    });\r\n```\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\nReplacing the current sync callback is a breaking change.\r\nBut introducing a new one and having 2 callbacks for the same reason is not a good solution either",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXZn30Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5QHRnL",
                                           "createdAt":  "2022-12-09T09:46:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nIt is currently possible to have a custom remote certificate validation using [ServerCertificateCustomValidationCallback](https://github.com/dotnet/runtime/blob/4cbe6f99d23e04c56a89251d49de1b0f14000427/src/libraries/System.Net.Http/src/System/Net/Http/HttpClientHandler.cs#L261) and [RemoteCertificateValidationCallback ](https://github.com/dotnet/runtime/blob/a5f3676cc71e176084f0f7f1f6beeecd86fbeafc/src/libraries/System.Net.Security/src/System/Net/Security/SslClientAuthenticationOptions.cs#L26).\r\nHowever, it is currently impossible to have async validation without sync-over-async, since the signature of the delegate is as below:\r\n`public delegate bool RemoteCertificateValidationCallback(object sender, X509Certificate? certificate, X509Chain? chain, SslPolicyErrors sslPolicyErrors);`\r\n\r\nI.e.\r\n```c#\r\nservices\r\n    .AddHttpClient(\"someEndpointClient\")\r\n    .ConfigureHttpMessageHandlerBuilder(builder =\u003e\r\n    {\r\n        var handler = (HttpClientHandler)builder.PrimaryHandler;\r\n        handler.ServerCertificateCustomValidationCallback = (httpRequestMessage, certificate, chain, sslPolicyErrors) =\u003e\r\n        {\r\n            Task\u003cbool\u003e someValidationTask = ...;\r\n            return someValidationTask.GetAwaiter().GetResult(); // sync-over-async\r\n        };\r\n    });\r\n```\r\n\r\nOriginal discussion: https://github.com/dotnet/runtime/discussions/78761\n\n### API Proposal\n\n```csharp\r\nnamespace System.Net.Security;\r\n\r\npublic delegate ValueTask\u003cbool\u003e RemoteCertificateValidationAsyncCallback(object sender, X509Certificate? certificate, X509Chain? chain, SslPolicyErrors sslPolicyErrors);\r\n```\r\n\r\n```csharp\r\nnamespace System.Net.Security\r\n\r\npublic class SslClientAuthenticationOptions\r\n{\r\n    ...\r\n\r\n    public RemoteCertificateValidationAsyncCallback? RemoteCertificateValidationAsyncCallback { get; set; }\r\n}\r\n```\r\n\r\n```csharp\r\nnamespace System.Net.Http\r\n\r\npublic partial class HttpClientHandler : HttpMessageHandler\r\n{\r\n    ...\r\n\r\n    public Func\u003cHttpRequestMessage, X509Certificate2?, X509Chain?, SslPolicyErrors, ValueTask\u003cbool\u003e\u003e? ServerCertificateCustomValidationAsyncCallback { get; set; }\r\n}\r\n```\n\n### API Usage\n\n```c#\r\nservices\r\n    .AddHttpClient(\"someEndpointClient\")\r\n    .ConfigureHttpMessageHandlerBuilder(builder =\u003e\r\n    {\r\n        var handler = (HttpClientHandler)builder.PrimaryHandler;\r\n        handler.ServerCertificateCustomValidationAsyncCallback = async (httpRequestMessage, certificate, chain, sslPolicyErrors) =\u003e\r\n        {\r\n            Task\u003cbool\u003e someValidationTask = ...;\r\n            return await someValidationTask.ConfigireAwait(false); // sync-over-async\r\n        };\r\n    });\r\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nReplacing the current sync callback is a breaking change.\r\nBut introducing a new one and having 2 callbacks for the same reason is not a good solution either\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emddddb\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Net.Http`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-09T09:46:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QJqm9",
                                           "createdAt":  "2022-12-09T19:34:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nIt is currently possible to have a custom remote certificate validation for HttpClient using https://github.com/dotnet/runtime/blob/4cbe6f99d23e04c56a89251d49de1b0f14000427/src/libraries/System.Net.Http/src/System/Net/Http/HttpClientHandler.cs#L261 and https://github.com/dotnet/runtime/blob/a5f3676cc71e176084f0f7f1f6beeecd86fbeafc/src/libraries/System.Net.Security/src/System/Net/Security/SslClientAuthenticationOptions.cs#L26\r\nHowever, it is currently impossible to have async validation without sync-over-async, since the signature of the delegate is as below:\r\n`public delegate bool RemoteCertificateValidationCallback(object sender, X509Certificate? certificate, X509Chain? chain, SslPolicyErrors sslPolicyErrors);`\r\n\r\nI.e.\r\n```c#\r\nservices\r\n    .AddHttpClient(\"someEndpointClient\")\r\n    .ConfigureHttpMessageHandlerBuilder(builder =\u003e\r\n    {\r\n        var handler = (HttpClientHandler)builder.PrimaryHandler;\r\n        handler.ServerCertificateCustomValidationCallback = (httpRequestMessage, certificate, chain, sslPolicyErrors) =\u003e\r\n        {\r\n            Task\u003cbool\u003e someValidationTask = ...;\r\n            return someValidationTask.GetAwaiter().GetResult(); // sync-over-async\r\n        };\r\n    });\r\n```\r\n\r\nOriginal discussion: https://github.com/dotnet/runtime/discussions/78761\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Net.Security;\r\n\r\npublic delegate ValueTask\u003cbool\u003e RemoteCertificateValidationAsyncCallback(object sender, X509Certificate? certificate, X509Chain? chain, SslPolicyErrors sslPolicyErrors);\r\n```\r\n\r\n```csharp\r\nnamespace System.Net.Security\r\n\r\npublic class SslClientAuthenticationOptions\r\n{\r\n    ...\r\n\r\n    public RemoteCertificateValidationAsyncCallback? RemoteCertificateValidationAsyncCallback { get; set; }\r\n}\r\n```\r\n\r\n```csharp\r\nnamespace System.Net.Http\r\n\r\npublic partial class HttpClientHandler : HttpMessageHandler\r\n{\r\n    ...\r\n\r\n    public Func\u003cHttpRequestMessage, X509Certificate2?, X509Chain?, SslPolicyErrors, ValueTask\u003cbool\u003e\u003e? ServerCertificateCustomValidationAsyncCallback { get; set; }\r\n}\r\n```\r\n\r\n### API Usage\r\n\r\n```c#\r\nservices\r\n    .AddHttpClient(\"someEndpointClient\")\r\n    .ConfigureHttpMessageHandlerBuilder(builder =\u003e\r\n    {\r\n        var handler = (HttpClientHandler)builder.PrimaryHandler;\r\n        handler.ServerCertificateCustomValidationAsyncCallback = async (httpRequestMessage, certificate, chain, sslPolicyErrors) =\u003e\r\n        {\r\n            Task\u003cbool\u003e someValidationTask = ...;\r\n            return await someValidationTask.ConfigireAwait(false); // sync-over-async\r\n        };\r\n    });\r\n```\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\nReplacing the current sync callback is a breaking change.\r\nBut introducing a new one and having 2 callbacks for the same reason is not a good solution either\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emddddb\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Net.Security`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-09T19:34:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RCunm",
                                           "createdAt":  "2022-12-20T16:24:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mddddb",
                                           "body":  "@karelz @wfurt @ManickaP ",
                                           "updatedAt":  "2022-12-20T16:24:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RlxmY",
                                           "createdAt":  "2023-01-02T11:17:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "API proposal LGTM, the only question is whether we want to have an async certificate selection callback as well, while we are at it. Thoughts? @wfurt.\r\n\r\nNot critical for 8.0, but would be nice to get it in an LTS release. Putting to Future for now.",
                                           "updatedAt":  "2023-01-02T11:17:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TNoBu",
                                           "createdAt":  "2023-01-18T21:00:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC0cD4Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mddddb",
                                                                               "createdAt":  "2023-01-19T06:22:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I think the changes in HttpClientHandler are possibly problematic. AFAIK we did not change the shape for long time for compat reasons. It would also expose it for all platform handlers and I\u0027m not sure if that really doable. \r\n\r\n`SocketsHttpHandler` already expose `SslClientAuthenticationOptions` so it can be used directly. \r\n\r\nHaving two almost same functions is not great. But we can make them mutual exclusive in validation. \r\n\r\nSimple workaround IMHO would be letting handshake always to continue and do extra validation after it is done. In practice, this what we do anyway (the callback runs after handshake is completed at TLS level) at the moment I would assume failure would be rare case (e.g. mostly you connecting to valid sites) \r\n\r\nNote that with 7.0 one can influence the default validation via CertificateChainPolicy e.g. disable all online check to avoid interference. \r\n",
                                           "updatedAt":  "2023-01-18T21:00:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TNzzt",
                                           "createdAt":  "2023-01-18T21:45:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "simonrozsival",
                                           "body":  "I don\u0027t think we would be able to implement the async callback in `AndroidMessageHandler` and `NSUrlSessionHandler` without blocking. I suggest making this API specific to `SocketsHttpHandler`.",
                                           "updatedAt":  "2023-01-18T21:46:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cIXtw",
                                           "createdAt":  "2023-05-12T12:52:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mddddb",
                                           "body":  "@karelz @wfurt @ManickaP, just curious, is there any update on the planning for this?",
                                           "updatedAt":  "2023-05-12T12:52:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dmffR",
                                           "createdAt":  "2023-05-31T14:42:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@mddddb we currently do not have plans for implementing it. It will not fit into 8.0 for sure. We can revisit it for 9.0+, however given the troubles it brings and the low demand (no upvotes on top post), I may be cut eventually.",
                                           "updatedAt":  "2023-05-31T14:42:04Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[API Proposal]: Provide async callback for Remote certification validation in HttpClient",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net.Security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81537",
        "createdAt":  "2023-02-02T13:48:14Z",
        "number":  81537,
        "author":  "Charlieface",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-02-09T00:56:14Z",
        "body":  "### Background and motivation\r\n\r\nNegotiateStream currently attempts Authentication using only the Negotiate protocol i.e. it will only (at least on Windows) select between Kerberos and NTLM, with no way to force only one, or to use any other package.  \r\n\r\nThe underlying SSPI provider does allow it though, and the internal [`System.Net.NTAuthentication`](https://github.com/dotnet/runtime/blob/7db1c3333302d4d5ac97a5cfb28e88e5c2cde968/src/libraries/Common/src/System/Net/NTAuthentication.Common.cs#L92) class is set up to do so, so it would be trivial to add such functionality by simply passing through another parameter from `AuthenticateAsClient` and `AuthenticateAsServer`.\r\n\r\nForcing Kerberos is something that may be essential for some applications, as NTLM has many known issues, such as Pass-the-Hash, replay attacks, and low hash cracking time. Many applications may want to disallow NTLM altogether.\r\n____\r\nWe may want to also add a static function that can retrieve a list of possible security packages, as well as making the `DefaultPackage` a `public readonly` property rather than a `private const`.\r\n\r\nMost of the work for this is done already.\r\n____\r\nAnother parameter that should be added is `CancellationToken`. There is currently no way to pass one through when authenticating, which means an authentication could block indefinitely. But the async work on `NegotiateStream` related to issue #36572 has now enabled this functionality on the internal [`A/SyncReadWriterAdapter`](https://github.com/dotnet/runtime/blob/56c84971041ae1debfa5ff360c547392d29f4cb3/src/libraries/System.Net.Security/src/System/Net/Security/ReadWriteAdapter.cs) classes. So again, this could be trivially solved by passing through an extra parameter.\r\n\r\n### API Proposal\r\n\r\nFor brevity I have not added the old APM Begin... functions.\r\n```csharp\r\nnamespace System.Net.Security\r\n\r\npublic partial class  NegotiateStream : AuthenticatedStream\r\n{\r\n    public string DefaultPackage =\u003e NegotiationInfoClass.Negotiate;\r\n\r\n\r\n    public virtual void AuthenticateAsServer(NetworkCredential credential, ExtendedProtectionPolicy? policy, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel requiredImpersonationLevel) =\u003e\r\n        AuthenticateAsServer(DefaultPackage, credential, policy, requiredProtectionLevel, requiredImpersonationLevel);\r\n\r\n    public virtual void AuthenticateAsServer(string packageName, NetworkCredential credential, ExtendedProtectionPolicy? policy, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel requiredImpersonationLevel, CancellationToken cancellationToken = default)\r\n    {\r\n        ValidateCreateContext(packageName, credential, string.Empty, policy, requiredProtectionLevel, requiredImpersonationLevel);\r\n        AuthenticateAsync\u003cSyncReadWriteAdapter\u003e(cancellationToken).GetAwaiter().GetResult();\r\n        // Is GetResult() safe, or is there a deadlock risk? What other options are there for sync-over-async?\r\n    }\r\n\r\n    public virtual void AuthenticateAsServerAsync(NetworkCredential credential, ExtendedProtectionPolicy? policy, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel requiredImpersonationLevel) =\u003e\r\n        AuthenticateAsServerAsync(DefaultPackage, credential, policy, requiredProtectionLevel, requiredImpersonationLevel);\r\n\r\n    public virtual async Task AuthenticateAsServerAsync(string packageName, NetworkCredential credential, ExtendedProtectionPolicy? policy, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel requiredImpersonationLevel, CancellationToken cancellationToken = default)\r\n    {\r\n        ValidateCreateContext(packageName, credential, string.Empty, policy, requiredProtectionLevel, requiredImpersonationLevel);\r\n        return AuthenticateAsync\u003cAsyncReadWriteAdapter\u003e(cancellationToken);\r\n    }\r\n\r\n\r\n    public virtual void AuthenticateAsClient(\r\n        NetworkCredential credential, ChannelBinding? binding, string targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel allowedImpersonationLevel) =\u003e\r\n        AuthenticateAsClient(DefaultPackage, credential, binding, targetName, requiredProtectionLevel, allowedImpersonationLevel);\r\n\r\n    public virtual void AuthenticateAsClient(\r\n        string packageName, NetworkCredential credential, ChannelBinding? binding, string targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel allowedImpersonationLevel, CancellationToken cancellationToken = default)\r\n    {\r\n        ValidateCreateContext(packageName, isServer: false, credential, targetName, binding, requiredProtectionLevel, allowedImpersonationLevel);\r\n        AuthenticateAsync\u003cSyncReadWriteAdapter\u003e(cancellationToken).GetAwaiter().GetResult();\r\n        // Is GetResult() safe, or is there a deadlock risk? What other options are there for sync-over-async?\r\n    }\r\n\r\n    public virtual void AuthenticateAsClientAsync(\r\n        NetworkCredential credential, ChannelBinding? binding, string targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel allowedImpersonationLevel) =\u003e\r\n        AuthenticateAsClientAsync(DefaultPackage, credential, binding, targetName, requiredProtectionLevel, allowedImpersonationLevel);\r\n\r\n    public virtual void AuthenticateAsClientAsync(\r\n        string packageName, NetworkCredential credential, ChannelBinding? binding, string targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel allowedImpersonationLevel, CancellationToken cancellationToken = default)\r\n    {\r\n        ValidateCreateContext(packageName, isServer: false, credential, targetName, binding, requiredProtectionLevel, allowedImpersonationLevel);\r\n        return AuthenticateAsync\u003cAsyncReadWriteAdapter\u003e(cancellationToken);\r\n    }\r\n}\r\n```\r\n____\r\nFor listing available packages, most of the work has already been done in [`Interop.SSPIWrapper`](https://github.com/dotnet/runtime/blob/cdb9f5f179db22745fbb2e878460662c0b21643e/src/libraries/Common/src/Interop/Windows/SspiCli/SSPIWrapper.cs). It\u0027s primarily a matter of exposing it, as well as the [`SecurityPackageInfoClass`](https://github.com/dotnet/runtime/blob/dfd618dc648ba9b11dd0f8034f78113d69f223cd/src/libraries/Common/src/Interop/Windows/SspiCli/SecurityPackageInfoClass.cs), in a public API. Do we want to just expose the names, or do we want to expose the other data also?\r\n\r\n### API Usage\r\n\r\nUsage should be pretty obvious.\r\n```csharp\r\nusing var ns = new NegotiateStream(someStream);\r\nawait ns.AuthenticateAsServerAsync(\r\n    \"Kerberos\",\r\n    CredentialCache.DefaultNetworkCredentials,\r\n    null,\r\n    ProtectionLevel.EncryptAndSign,\r\n    TokenImpersonationLevel.Identification,\r\n    myCancelToken);\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nThe number of overloads has now increased significantly, because both server and client have sync, async Task and async APM functions, and we have added two parameters.\r\n\r\nI have narrowed this down by using an optional parameter for `cancellationToken`, as this covers all cases in the smallest extra code. We could alternately do:\r\n* Optional parameter for `packageName` instead.\r\n  Needs thinking about which of them is more likely to be used.\r\n* Non-optional parameters only.\r\n* Overload for `packageName`, and overload for `packageName` and `cancellationToken`, alternately v.v.\r\n* Overloads for each possible combination (an extra three overloads), which seems excessive.\r\n* Cannot have two optional parameters, otherwise it will clash with existing oevrloads.\r\n* Break binary compatibility by refactoring into one big optional parameter list (best not because of breaking changes).\r\n\r\n### Risks\r\n\r\nDo we want to expose such functionality at all? Is a `NegotiateStream` by definition only able to use Negotiate?\r\n\r\nIt seems all of the code should be identical otherwise, so there is little risk in adding this. Perhaps we only want to allow Kerberos, NTLM and Negotiate as possible options.\r\n\r\nNeeds investigating: are there any packages we want to specifically disallow, because the responses they give or the way their state machine runs are not compatible with current code?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVNgq5g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5URHr7",
                                           "createdAt":  "2023-02-02T13:48:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2023-02-02T13:48:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5URVoq",
                                           "createdAt":  "2023-02-02T14:27:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nNegotiateStream currently attempts Authentication using only the Negotiate protocol i.e. it will only (at least on Windows) select between Kerberos and NTLM, with no way to force only one, or to use any other package.  \r\n\r\nThe underlying SSPI provider does allow it though, and the internal [`System.Net.NTAuthentication`](https://github.com/dotnet/runtime/blob/7db1c3333302d4d5ac97a5cfb28e88e5c2cde968/src/libraries/Common/src/System/Net/NTAuthentication.Common.cs#L92) class is set up to do so, so it would be trivial to add such functionality by simply passing through another parameter from `AuthenticateAsClient` and `AuthenticateAsServer`.\r\n\r\nForcing Kerberos is something that may be essential for some applications, as NTLM has many known issues, such as Pass-the-Hash, replay attacks, and low hash cracking time. Many applications may want to disallow NTLM altogether.\r\n____\r\nWe may want to also add a static function that can retrieve a list of possible security packages, as well as making the `DefaultPackage` a `public readonly` property rather than a `private const`.\r\n\r\nMost of the work for this is done already.\r\n____\r\nAnother parameter that should be added is `CancellationToken`. There is currently no way to pass one through when authenticating, which means an authentication could block indefinitely. But the async work on `NegotiateStream` related to issue #36572 has now enabled this functionality on the internal [`A/SyncReadWriterAdapter`](https://github.com/dotnet/runtime/blob/56c84971041ae1debfa5ff360c547392d29f4cb3/src/libraries/System.Net.Security/src/System/Net/Security/ReadWriteAdapter.cs) classes. So again, this could be trivially solved by passing through an extra parameter.\r\n\r\n### API Proposal\r\n\r\nFor brevity I have not added the old APM Begin... functions.\r\n```csharp\r\nnamespace System.Net.Security\r\n\r\npublic partial class  NegotiateStream : AuthenticatedStream\r\n{\r\n    public string DefaultPackage =\u003e NegotiationInfoClass.Negotiate;\r\n\r\n\r\n    public virtual void AuthenticateAsServer(NetworkCredential credential, ExtendedProtectionPolicy? policy, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel requiredImpersonationLevel) =\u003e\r\n        AuthenticateAsServer(DefaultPackage, credential, policy, requiredProtectionLevel, requiredImpersonationLevel);\r\n\r\n    public virtual void AuthenticateAsServer(string packageName, NetworkCredential credential, ExtendedProtectionPolicy? policy, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel requiredImpersonationLevel, CancellationToken cancellationToken = default)\r\n    {\r\n        ValidateCreateContext(packageName, credential, string.Empty, policy, requiredProtectionLevel, requiredImpersonationLevel);\r\n        AuthenticateAsync\u003cSyncReadWriteAdapter\u003e(cancellationToken).GetAwaiter().GetResult();\r\n        // Is GetResult() safe, or is there a deadlock risk? What other options are there for sync-over-async?\r\n    }\r\n\r\n    public virtual void AuthenticateAsServerAsync(NetworkCredential credential, ExtendedProtectionPolicy? policy, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel requiredImpersonationLevel) =\u003e\r\n        AuthenticateAsServerAsync(DefaultPackage, credential, policy, requiredProtectionLevel, requiredImpersonationLevel);\r\n\r\n    public virtual async Task AuthenticateAsServerAsync(string packageName, NetworkCredential credential, ExtendedProtectionPolicy? policy, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel requiredImpersonationLevel, CancellationToken cancellationToken = default)\r\n    {\r\n        ValidateCreateContext(packageName, credential, string.Empty, policy, requiredProtectionLevel, requiredImpersonationLevel);\r\n        return AuthenticateAsync\u003cAsyncReadWriteAdapter\u003e(cancellationToken);\r\n    }\r\n\r\n\r\n    public virtual void AuthenticateAsClient(\r\n        NetworkCredential credential, ChannelBinding? binding, string targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel allowedImpersonationLevel) =\u003e\r\n        AuthenticateAsClient(DefaultPackage, credential, binding, targetName, requiredProtectionLevel, allowedImpersonationLevel);\r\n\r\n    public virtual void AuthenticateAsClient(\r\n        string packageName, NetworkCredential credential, ChannelBinding? binding, string targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel allowedImpersonationLevel, CancellationToken cancellationToken = default)\r\n    {\r\n        ValidateCreateContext(packageName, isServer: false, credential, targetName, binding, requiredProtectionLevel, allowedImpersonationLevel);\r\n        AuthenticateAsync\u003cSyncReadWriteAdapter\u003e(cancellationToken).GetAwaiter().GetResult();\r\n        // Is GetResult() safe, or is there a deadlock risk? What other options are there for sync-over-async?\r\n    }\r\n\r\n    public virtual void AuthenticateAsClientAsync(\r\n        NetworkCredential credential, ChannelBinding? binding, string targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel allowedImpersonationLevel) =\u003e\r\n        AuthenticateAsClientAsync(DefaultPackage, credential, binding, targetName, requiredProtectionLevel, allowedImpersonationLevel);\r\n\r\n    public virtual void AuthenticateAsClientAsync(\r\n        string packageName, NetworkCredential credential, ChannelBinding? binding, string targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel allowedImpersonationLevel, CancellationToken cancellationToken = default)\r\n    {\r\n        ValidateCreateContext(packageName, isServer: false, credential, targetName, binding, requiredProtectionLevel, allowedImpersonationLevel);\r\n        return AuthenticateAsync\u003cAsyncReadWriteAdapter\u003e(cancellationToken);\r\n    }\r\n}\r\n```\r\n____\r\nFor listing available packages, most of the work has already been done in [`Interop.SSPIWrapper`](https://github.com/dotnet/runtime/blob/cdb9f5f179db22745fbb2e878460662c0b21643e/src/libraries/Common/src/Interop/Windows/SspiCli/SSPIWrapper.cs). It\u0027s primarily a matter of exposing it, as well as the [`SecurityPackageInfoClass`](https://github.com/dotnet/runtime/blob/dfd618dc648ba9b11dd0f8034f78113d69f223cd/src/libraries/Common/src/Interop/Windows/SspiCli/SecurityPackageInfoClass.cs), in a public API. Do we want to just expose the names, or do we want to expose the other data also?\r\n\r\n### API Usage\r\n\r\nUsage should be pretty obvious.\r\n```csharp\r\nusing var ns = new NegotiateStream(someStream);\r\nawait ns.AuthenticateAsServerAsync(\r\n    \"Kerberos\",\r\n    CredentialCache.DefaultNetworkCredentials,\r\n    null,\r\n    ProtectionLevel.EncryptAndSign,\r\n    TokenImpersonationLevel.Identification,\r\n    myCancelToken);\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nThe number of overloads has now increased significantly, because both server and client have sync, async Task and async APM functions, and we have added two parameters.\r\n\r\nI have narrowed this down by using an optional parameter for `cancellationToken`, as this covers all cases in the smallest extra code. We could alternately do:\r\n* Optional parameter for `packageName` instead.\r\n  Needs thinking about which of them is more likely to be used.\r\n* Non-optional parameters only.\r\n* Overload for `packageName`, and overload for `packageName` and `cancellationToken`, alternately v.v.\r\n* Overloads for each possible combination (an extra three overloads), which seems excessive.\r\n* Cannot have two optional parameters, otherwise it will clash with existing oevrloads.\r\n* Break binary compatibility by refactoring into one big optional parameter list (best not because of breaking changes).\r\n\r\n### Risks\r\n\r\nDo we want to expose such functionality at all? Is a `NegotiateStream` by definition only able to use Negotiate?\r\n\r\nIt seems all of the code should be identical otherwise, so there is little risk in adding this. Perhaps we only want to allow Kerberos, NTLM and Negotiate as possible options.\r\n\r\nNeeds investigating: are there any packages we want to specifically disallow, because the responses they give or the way their state machine runs are not compatible with current code?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eCharlieface\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Net.Security`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-02T14:27:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5USRWv",
                                           "createdAt":  "2023-02-02T17:05:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "ability to pin Kerberso seems reasonable to me. Any thoughts on this @filipnavara ? ",
                                           "updatedAt":  "2023-02-02T17:05:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5USR06",
                                           "createdAt":  "2023-02-02T17:06:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "One the cancellation, I\u0027m not sure if that is really doable. While waiting in GSSAPI call, I\u0027m not sure we have any good way how to interrupt it. So even if we add it it may do nothing as cancellation is best effort. ",
                                           "updatedAt":  "2023-02-02T17:06:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5USUdG",
                                           "createdAt":  "2023-02-02T17:13:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "What would you expect on the wire? Plain Kerberos or Kerberos wrapped in Negotiate? IIRC the first one would violate the specification for the wire format, in addition to being incompatible with older clients.\n\nWe currently don\u0027t have API to specify that you want Negotiate with specific algorithms. It may be a useful API request on its own.\n\nIf you want to use Kerberos directly and thus change the wire format then I would argue that using NegotiateStream in new software may not be the best option.\n\n",
                                           "updatedAt":  "2023-02-02T17:13:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5USWMU",
                                           "createdAt":  "2023-02-02T17:18:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Charlieface",
                                           "body":  "True you can\u0027t at the moment do an async Kerberos request but the actual negotiation between the parties is just a standard WriteAsync and ReadAsync, fully cancellable. Is it wrong to have a `CancellationToken` which only works partly? I recall `Dns.GetHostEntry` had a similar issue for a long time until it was fixed.\r\n\r\nLooking [at the code](https://github.com/dotnet/runtime/blob/26da83df77b2391d6a74a4f24b663dc2fb4eda3f/src/libraries/Common/src/System/Net/Security/NegotiateStreamPal.Windows.cs#L108), it seems it\u0027s using `InitializeSecurityContextAsyncW` instead of `SspiInitializeSecurityContextAsyncW`, the latter appears to be asynchronous, although there does not appear to be any cancellation function",
                                           "updatedAt":  "2023-02-02T17:18:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5USXVB",
                                           "createdAt":  "2023-02-02T17:21:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Charlieface",
                                           "body":  "\u003e What would you expect on the wire? Plain Kerberos or Kerberos wrapped in Negotiate? IIRC the first one would violate the specification for the wire format, in addition to being incompatible with older clients.\r\n\u003e \r\n\u003e We currently don\u0027t have API to specify that you want Negotiate with specific algorithms. It may be a useful API request on its own.\r\n\u003e \r\n\u003e If you want to use Kerberos directly and thus change the wire format then I would argue that using NegotiateStream in new software may not be the best option.\r\n\r\nDoes it actually change the wire format? Does it not just end up with Kerberos being negotiated as the only protocol?\r\n\r\nMy testing (using some rather nasty reflection to change the `packageName`) seems to work when one side specifies Kerberos and the other Negotiate. I can maybe put up a dotnetfiddle to show it.",
                                           "updatedAt":  "2023-02-02T17:21:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5USYb9",
                                           "createdAt":  "2023-02-02T17:24:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "In my opinion, supporting Negotiate w/ Kerberos (ie. explicitly disabling NTLM) would make sense but we currently lack the underlying API for that. That said, there is already system policy for disabling NTLM, and given how Windows Authentication is tied to deployment it seems that for most scenarios it may be good enough to disable NTLM through global policies.\r\n\r\n\u003e Does it actually change the wire format? Does it not just end up with Kerberos being negotiated as the only protocol?\r\n\r\nYes, it does. The old `NTAuthentication` and the new public `NegotiateAuthentication` can do Negotiate, raw Kerberos, or raw NTLM. It currently doesn\u0027t allow Negotiate with specific algorithm.\r\n\r\n\u003e My testing (using some rather nasty reflection to change the packageName) seems to work when one side specifies Kerberos and the other Negotiate.\r\n\r\nIt may work due to some compatibility hacks. For example, raw NTLM is often accepted in Negotiate contexts. It\u0027s still not ideal and probably violates the [on-the-wire specification](https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-nns/93df08eb-a6c4-4dff-81c3-519cf7236df4).\r\n\r\n",
                                           "updatedAt":  "2023-02-02T17:43:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UScoN",
                                           "createdAt":  "2023-02-02T17:38:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\r\n\u003e One the cancellation, I\u0027m not sure if that is really doable. While waiting in GSSAPI call, I\u0027m not sure we have any good way how to interrupt it.\r\n\r\nCorrect. The GSSAPI ticket acquisition is not really cancellable and can block for few seconds (depending on system settings).\r\n\r\n\u003e Looking [at the code](https://github.com/dotnet/runtime/blob/26da83df77b2391d6a74a4f24b663dc2fb4eda3f/src/libraries/Common/src/System/Net/Security/NegotiateStreamPal.Windows.cs#L108), it seems it\u0027s using `InitializeSecurityContextAsyncW` instead of `SspiInitializeSecurityContextAsyncW`, the latter appears to be asynchronous, although there does not appear to be any cancellation function\r\n\r\nSSPI (Windows) has async APIs, GSSAPI (Linux, macOS) does not. I never tried to work with them though.",
                                           "updatedAt":  "2023-02-02T17:38:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5USpUm",
                                           "createdAt":  "2023-02-02T18:21:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Charlieface",
                                           "body":  "The GSSAPI spec is actually quite vague as I recall. All of the packages are GSSAPI-compatible. Whereas SPNEGO is a specific package, which internally negotiates which one to use. So is there a blocking reason why not to make available a raw GSSAPI stream (i.e. where you can specify the package)? Putting it another way: `NegotiateStream` should have originally been designed to inherit from a generic `GssApiStream` anyway, as it\u0027s an outgrowth of that.\r\n\r\nAs far as the async APIs are concerned: currently a caller will expect ticket acquisition to happen asynchronously, as part of the whole `AuthenticateAs` but it does not. So essentially it\u0027s a bug. That we cannnot fix it in Linux shouldn\u0027t prevent fixing it in Windows to use the async APIs.",
                                           "updatedAt":  "2023-02-02T18:21:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UT4sC",
                                           "createdAt":  "2023-02-02T23:14:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SteveSyfuhs",
                                           "body":  "I\u0027m supportive of exposing a way to allow callers to choose which package they want to use for authentication, but I would caution you on using this as a mechanism for _excluding_ packages like NTLM by doing something like explicitly forcing Kerberos. The correct way to do that is to inform the negotiate package to behave as normal but exclude specific packages. This is done through the use of parameters on the credential when setting up the context, specifically with structures like `SEC_WINNT_AUTH_IDENTITY_EX2`: https://learn.microsoft.com/en-us/windows/win32/api/sspi/ns-sspi-sec_winnt_auth_identity_ex2\r\n\r\nIf you want to continue using negotiate (as one should in 95% of all cases) but want to exclude NTLM, you can pass `!NTLM` in the `PackageList**` fields.\r\n\r\nI would also recommend having a different class name. If you\u0027re specifying a package other than `negotiate`, by definition you aren\u0027t negotiating.",
                                           "updatedAt":  "2023-02-02T23:14:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UT5Cv",
                                           "createdAt":  "2023-02-02T23:16:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SteveSyfuhs",
                                           "body":  "Sorry for the double post, but also the usage of something like `SEC_WINNT_AUTH_IDENTITY_EX2` is not dependent on the usage of supplied credentials. You can pass this struct with null username/password/domain fields and it\u0027ll treat that as instructions to use the current SSO creds.",
                                           "updatedAt":  "2023-02-02T23:16:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UUA-I",
                                           "createdAt":  "2023-02-03T00:06:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Charlieface",
                                           "body":  "I admit it\u0027s much more appealing to have an exclusion rather than inclusion list, but the amount of engineering is going to be immense. We\u0027d need to change the following classes and interfaces to feed that data down to the PInvoke calls: `NTAuthentication`, `NegotiateStreamPal`, `SSPIAuthType`,  `ISSPIInterface` and `SafeFreeCredentials`. It may be worth it or it may not, Note that some of those classes have separate Windows, Unix and Managed implementations, complicating it even further.\r\n\r\nIf this is going to be too much effort then perhaps it would make sense to derive another class `KerberosStream`, with the only change being the package name. Maybe even split off a base abstract class below `NegotiateStream` and have both derive from that (I understand that shouldn\u0027t be a problem as far as breaking changes are concerned).\r\n____\r\nAs far as the `CancellationToken` is concerned, are there any other concerns beyond what is mentioned? I hadn\u0027t originally considered using the async SSPI functions, I was only considering the handshake between the parties, which is much more likely to be over a poor/unstable connection than a link to a DC, which is normally a short round-trip to a beefy server. But adding support for async SSPI sounds like a good idea also.",
                                           "updatedAt":  "2023-02-03T00:08:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UiD4Y",
                                           "createdAt":  "2023-02-05T18:40:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Charlieface",
                                           "body":  "I\u0027m thinking something like this:\r\n```csharp\r\n// rename current NegotiateStream class\r\npublic abstract class GssStream : AuthenticatedStream\r\n{\r\n    public abstract string DefaultPackage { get; }\r\n    // etc\r\n}\r\n\r\npublic class NegotiateStream : GssStream\r\n{\r\n    public override string DefaultPackage =\u003e NegotiationInfoClass.Negotiate;\r\n}\r\n\r\npublic class KerberosStream : GssStream\r\n{\r\n    public override string DefaultPackage =\u003e NegotiationInfoClass.Kerberos;\r\n}\r\n```",
                                           "updatedAt":  "2023-02-05T19:16:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UiSky",
                                           "createdAt":  "2023-02-05T21:57:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Charlieface",
                                           "body":  "An alternative might be to allow setting the value in the base class, and override it in `NegotiateStream`\r\n```cs\r\n// rename current NegotiateStream class\r\npublic class GssStream : AuthenticatedStream\r\n{\r\n    public string DefaultPackage { get; set; } = NegotiationInfoClass.Negotiate;\r\n    // etc\r\n}\r\n\r\npublic class NegotiateStream : GssStream\r\n{\r\n    public override string DefaultPackage\r\n    {\r\n        get =\u003e return NegotiationInfoClass.Negotiate;\r\n        set =\u003e throw new InvalidOperationException(\"Changing package not allowed\");\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2023-02-05T21:57:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UtaLv",
                                           "createdAt":  "2023-02-07T17:44:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Triage: not critical for 8.0, putting to future for now.",
                                           "updatedAt":  "2023-02-07T17:44:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ux6vn",
                                           "createdAt":  "2023-02-08T10:27:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Charlieface",
                                           "body":  "\u003e Triage: not critical for 8.0, putting to future for now.\r\n\r\nThe `cancellationToken` part seems to be pretty trivial, does it not make sense to prioritize just that part?",
                                           "updatedAt":  "2023-02-08T10:27:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Uybmi",
                                           "createdAt":  "2023-02-08T12:18:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "The networking team is a bit short-staffed atm. We might get to this in 8.0, but we are not committing to it. This may change depending on the demand for the feature.",
                                           "updatedAt":  "2023-02-08T12:18:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U0u-3",
                                           "createdAt":  "2023-02-08T19:11:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "Adding cancellation that only work on Windows seems weird to me. I feel that would send wrong message to developers who consume this x-plat. I feel we should investigate more before making decision and proposal for public API.",
                                           "updatedAt":  "2023-02-08T19:11:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U2Crm",
                                           "createdAt":  "2023-02-09T00:56:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Charlieface",
                                           "body":  "\u003e Adding cancellation that only work on Windows seems weird to me. I feel that would send wrong message to developers who consume this x-plat. I feel we should investigate more before making decision and proposal for public API.\r\n\r\nLike I said upthread: cancellation would work as far as cancelling the handshake is concerned, even on Linux. It only doesn\u0027t work for acquiring the token, which is less of a concern (because of fast Kerberos responses), and would need quite a bit of extra work even for Windows. Cancelling the handshake is a very easy win here because the token can be passed straight in, all the underlying code is there. Whether that is unexpected I don\u0027t know: we\u0027ve certainly had many async APIs in the past that have blocking sections, and we still do (`File.ReadAllBytesAsync` for example, which blocks on opening the file).\r\n\r\nAny case, a simple hack for cancelling token acquisition until a better option is available: just hand off the acquisition to the threadpool, and do a cancellable wait on it. Ugly but works.",
                                           "updatedAt":  "2023-02-09T00:56:14Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "[API Proposal]: Add support in NegotiateStream.AuthenticateAs for packageName and cancellationToken",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net.Security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/84202",
        "createdAt":  "2023-04-01T02:42:40Z",
        "number":  84202,
        "author":  "borrrden",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-16T14:28:51Z",
        "body":  "### Description\n\nI am using `SslStream` with a remote certificate validation callback on many platforms.  The only one that has an issue is .NET 6 Android (Xamarin Android is OK, FYI).  I am already painfully aware of [this issue](https://github.com/dotnet/runtime/issues/45741) which is currently kneecapping the custom certificate validation of our SDK, but I did find a way to work around that by forcing Android to trust my cert using network-security-config.\r\n\r\nThat being said, now that the callback is finally being called, the `chain` argument has 0 elements.  On .NET 6 Console, it is properly populated with 3 elements.  I also saw this happen on Xamarin / Mono back in the day but as a workaround I would take the received cert and use `X509Chain.Build()` to reconstruct the chain so that I could examine it.  The problem is that on .NET 6 Android this also does not work.  The resulting chain still has 0 elements.\n\n### Reproduction Steps\n\nI\u0027m unsure of how I could present this because it requires a server running https using a cert that is not trusted by stock Android,  but assuming that such a server is running these are the steps to take:\r\n\r\n0. Start server (In my case I have the server set up to serve the entire chain, but not sure if this is required or not)\r\n\r\n1. Create a maui project (or .NET 6 Android at least)\r\n2. Add the cert that the server is using (not sure if the whole chain is needed or not, but I used a PEM file with the three concatenated certificates inside) to `Resources/raw/cert.pem`\r\n3. Add the following as `Resources/xml/network_security_config.xml`\r\n\r\n```\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\r\n\u003cnetwork-security-config\u003e\r\n    \u003cbase-config\u003e\r\n        \u003ctrust-anchors\u003e\r\n            \u003ccertificates src=\"@raw/cert\"/\u003e\r\n            \u003ccertificates src=\"system\"/\u003e\r\n        \u003c/trust-anchors\u003e\r\n    \u003c/base-config\u003e\r\n\u003c/network-security-config\u003e\r\n```\r\n\r\n4. Annotate the MauiApplication with the following:  `[Application(NetworkSecurityConfig = \"@xml/network_security_config\")]`\r\n5. Open a `TcpClient` to the server in question (`_client.ConnectAsync(host, port)`)\r\n6. Wrap the TCP client in `SslStream` -\u003e `var sslStream = new SslStream(_client.GetStream(), false, ValidateServerCert);`\r\n7. Implement `ValidateServerCert` with simply `return true` or anything you want\r\n8. Call `sslStream.AuthenticateAsClientAsync(host, null, SslProtocols.Tls12, false)`\r\n9. Inspect the third argument of `ValidateServerCert`\n\n### Expected behavior\n\nThe `chain` passed into the validation callback with the proper `ChainElements`\n\n### Actual behavior\n\n`ChainElements` is length 0\n\n### Regression?\n\nNot sure how to categorize this but at least with the mono workaround in place this works on the following platforms:\r\n\r\n- .NET 6 Windows Console\r\n- .NET 6 WinUI\r\n- .NET 6 iOS\r\n- .NET 6 Mac Catalyst\r\n- Xamarin iOS\r\n- Xamarin Android\r\n- .NET Framework 4.6.2\n\n### Known Workarounds\n\nUnknown at this time\n\n### Configuration\n\n.NET 6 on Android API 26 x64 emulator\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiLXNBQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Y-mBQ",
                                           "createdAt":  "2023-04-01T02:42:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI am using `SslStream` with a remote certificate validation callback on many platforms.  The only one that has an issue is .NET 6 Android (Xamarin Android is OK, FYI).  I am already painfully aware of [this issue](https://github.com/dotnet/runtime/issues/45741) which is currently kneecapping the custom certificate validation of our SDK, but I did find a way to work around that by forcing Android to trust my cert using network-security-config.\r\n\r\nThat being said, now that the callback is finally being called, the `chain` argument has 0 elements.  On .NET 6 Console, it is properly populated with 3 elements.  I also saw this happen on Xamarin / Mono back in the day but as a workaround I would take the received cert and use `X509Chain.Build()` to reconstruct the chain so that I could examine it.  The problem is that on .NET 6 Android this also does not work.  The resulting chain still has 0 elements.\n\n### Reproduction Steps\n\nI\u0027m unsure of how I could present this because it requires a server running https using a cert that is not trusted by stock Android,  but assuming that such a server is running these are the steps to take:\r\n\r\n0. Start server (In my case I have the server set up to serve the entire chain, but not sure if this is required or not)\r\n\r\n1. Create a maui project (or .NET 6 Android at least)\r\n2. Add the cert that the server is using (not sure if the whole chain is needed or not, but I used a PEM file with the three concatenated certificates inside) to `Resources/raw/cert.pem`\r\n3. Add the following as `Resources/xml/network_security_config.xml`\r\n\r\n```\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\r\n\u003cnetwork-security-config\u003e\r\n    \u003cbase-config\u003e\r\n        \u003ctrust-anchors\u003e\r\n            \u003ccertificates src=\"@raw/cert\"/\u003e\r\n            \u003ccertificates src=\"system\"/\u003e\r\n        \u003c/trust-anchors\u003e\r\n    \u003c/base-config\u003e\r\n\u003c/network-security-config\u003e\r\n```\r\n\r\n4. Annotate the MauiApplication with the following:  `[Application(NetworkSecurityConfig = \"@xml/network_security_config\")]`\r\n5. Open a `TcpClient` to the server in question (`_client.ConnectAsync(host, port)`)\r\n6. Wrap the TCP client in `SslStream` -\u003e `var sslStream = new SslStream(_client.GetStream(), false, ValidateServerCert);`\r\n7. Implement `ValidateServerCert` with simply `return true` or anything you want\r\n8. Call `sslStream.AuthenticateAsClientAsync(host, null, SslProtocols.Tls12, false)`\r\n9. Inspect the third argument of `ValidateServerCert`\n\n### Expected behavior\n\nThe `chain` passed into the validation callback with the proper `ChainElements`\n\n### Actual behavior\n\n`ChainElements` is length 0\n\n### Regression?\n\nNot sure how to categorize this but at least with the mono workaround in place this works on the following platforms:\r\n\r\n- .NET 6 Windows Console\r\n- .NET 6 WinUI\r\n- .NET 6 iOS\r\n- .NET 6 Mac Catalyst\r\n- Xamarin iOS\r\n- Xamarin Android\r\n- .NET Framework 4.6.2\n\n### Known Workarounds\n\nUnknown at this time\n\n### Configuration\n\n.NET 6 on Android API 26 x64 emulator\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eborrrden\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Security`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-01T02:42:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Y-mX0",
                                           "createdAt":  "2023-04-01T02:50:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI am using `SslStream` with a remote certificate validation callback on many platforms.  The only one that has an issue is .NET 6 Android (Xamarin Android is OK, FYI).  I am already painfully aware of [this issue](https://github.com/dotnet/runtime/issues/45741) which is currently kneecapping the custom certificate validation of our SDK, but I did find a way to work around that by forcing Android to trust my cert using network-security-config.\r\n\r\nThat being said, now that the callback is finally being called, the `chain` argument has 0 elements.  On .NET 6 Console, it is properly populated with 3 elements.  I also saw this happen on Xamarin / Mono back in the day but as a workaround I would take the received cert and use `X509Chain.Build()` to reconstruct the chain so that I could examine it.  The problem is that on .NET 6 Android this also does not work.  The resulting chain still has 0 elements.\n\n### Reproduction Steps\n\nI\u0027m unsure of how I could present this because it requires a server running https using a cert that is not trusted by stock Android,  but assuming that such a server is running these are the steps to take:\r\n\r\n0. Start server (In my case I have the server set up to serve the entire chain, but not sure if this is required or not)\r\n\r\n1. Create a maui project (or .NET 6 Android at least)\r\n2. Add the cert that the server is using (not sure if the whole chain is needed or not, but I used a PEM file with the three concatenated certificates inside) to `Resources/raw/cert.pem`\r\n3. Add the following as `Resources/xml/network_security_config.xml`\r\n\r\n```\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\r\n\u003cnetwork-security-config\u003e\r\n    \u003cbase-config\u003e\r\n        \u003ctrust-anchors\u003e\r\n            \u003ccertificates src=\"@raw/cert\"/\u003e\r\n            \u003ccertificates src=\"system\"/\u003e\r\n        \u003c/trust-anchors\u003e\r\n    \u003c/base-config\u003e\r\n\u003c/network-security-config\u003e\r\n```\r\n\r\n4. Annotate the MauiApplication with the following:  `[Application(NetworkSecurityConfig = \"@xml/network_security_config\")]`\r\n5. Open a `TcpClient` to the server in question (`_client.ConnectAsync(host, port)`)\r\n6. Wrap the TCP client in `SslStream` -\u003e `var sslStream = new SslStream(_client.GetStream(), false, ValidateServerCert);`\r\n7. Implement `ValidateServerCert` with simply `return true` or anything you want\r\n8. Call `sslStream.AuthenticateAsClientAsync(host, null, SslProtocols.Tls12, false)`\r\n9. Inspect the third argument of `ValidateServerCert`\n\n### Expected behavior\n\nThe `chain` passed into the validation callback with the proper `ChainElements`\n\n### Actual behavior\n\n`ChainElements` is length 0\n\n### Regression?\n\nNot sure how to categorize this but at least with the mono workaround in place this works on the following platforms:\r\n\r\n- .NET 6 Windows Console\r\n- .NET 6 WinUI\r\n- .NET 6 iOS\r\n- .NET 6 Mac Catalyst\r\n- Xamarin iOS\r\n- Xamarin Android\r\n- .NET Framework 4.6.2\n\n### Known Workarounds\n\nUnknown at this time\n\n### Configuration\n\n.NET 6 on Android API 26 x64 emulator\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eborrrden\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Security`, `os-android`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-01T02:50:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Y-mZA",
                                           "createdAt":  "2023-04-01T02:51:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "cc: @simonrozsival \r\n",
                                           "updatedAt":  "2023-04-01T02:51:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Y-nnR",
                                           "createdAt":  "2023-04-01T03:03:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "borrrden",
                                           "body":  "I should also add that the .NET runtime does not seem aware of the network security config and still says that the result is \"PartialChain\".  For more insight to how I am actually trying to use this [here](https://github.com/couchbase/couchbase-lite-net/blob/a99a9fe30a354b8637093bbc3ce70af4d8cd2db3/src/Couchbase.Lite.Shared/Sync/WebSocketWrapper.cs#L898) is a link to the actual production validation function.\r\n\r\nGiven that it won\u0027t even make it here in the first place unless there are some Android workarounds, should I just not bother with the custom validation and just assume that the fact that it made it to the validation function at all means that the user wants to trust it?",
                                           "updatedAt":  "2023-04-01T03:04:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZDjgA",
                                           "createdAt":  "2023-04-03T10:55:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "simonrozsival",
                                           "body":  "@borrrden Hi, thanks for reporting this issue. We\u0027ve made some changes to how certificate validation works on Android and you won\u0027t need the workaround with the network security config in .NET 8 anymore and the validation callback will be called directly. The problem with X509Chain behaving differently from the other platforms hasn\u0027t been resolved so far though.\r\n\r\n@wfurt It doesn\u0027t seem it\u0027s currently possible to build an `X509Chain` when the certificate isn\u0027t trusted by the OS at the moment. I\u0027m not very familiar with the X509Chain class and I\u0027m not sure how exactly it should behave in this case so I don\u0027t have any suggestions how to improve it.\r\nhttps://github.com/dotnet/runtime/blob/24fa97ab99b4a63f638f63a90ae83c4b80772114/src/libraries/System.Security.Cryptography/src/System/Security/Cryptography/X509Certificates/ChainPal.Android.cs#L196-L213",
                                           "updatedAt":  "2023-04-03T10:55:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZE2Tw",
                                           "createdAt":  "2023-04-03T14:34:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "My understanding of Android is that `ChainElements` on `X509Chain` are _not_ populated _unless_ the chain is valid. Contrast this with other operating systems where the chain elements is usually populated, even for partial or incomplete chains.\r\n\r\nThis is reflected in our unit tests:\r\n\r\nhttps://github.com/dotnet/runtime/blob/7a4efb2a80083db1c1ee5d6f1ae1d0abc440a35e/src/libraries/System.Security.Cryptography/tests/X509Certificates/ChainTests.cs#L503-L504\r\n",
                                           "updatedAt":  "2023-04-03T14:34:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZHKz0",
                                           "createdAt":  "2023-04-03T22:09:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "borrrden",
                                           "body":  "In this case, due to the network security config, the chain should be valid but it still reports as partial chain.\r\n\r\n**EDIT** For informational purposes, the underlying Java API will validate the certificate correctly:\r\n\r\n```\r\n#if NET6_0_OR_GREATER \u0026\u0026 __ANDROID__\r\nvar tmf = Javax.Net.Ssl.TrustManagerFactory.GetInstance(Javax.Net.Ssl.TrustManagerFactory.DefaultAlgorithm);\r\ntmf.Init(default(Java.Security.KeyStore));\r\nJava.Security.Cert.CertificateFactory cf = Java.Security.Cert.CertificateFactory.GetInstance(\"X.509\");\r\nforeach (var tm in tmf.GetTrustManagers()) {\r\n    if(tm is Javax.Net.Ssl.IX509TrustManager x509tm) {\r\n        var javaCert = cf.GenerateCertificate(new MemoryStream(cert2.GetRawCertData())) as Java.Security.Cert.X509Certificate;\r\n        try { \r\n            x509tm.CheckServerTrusted(new[] { javaCert }, \"RSA\"); \r\n        } catch(Exception) {\r\n          continue;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n#endif\r\n```\r\n\r\n**FURTHER EDIT** I\u0027m trying to get a chain to function with cert pinning but it seems like the `ExtraStore` property of the chain policy is ignored?  Furthermore, add to `CustomTrustRoot` makes `Build` throw a puzzling Exception\r\n\r\n\u003e An empty custom trust store is not supported on this platform.\r\n\r\nWhich I\u0027ve learned is because the certificate I want to pin is not self-signed (I am trying to pin an intermediate cert)",
                                           "updatedAt":  "2023-04-04T02:02:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZTj-z",
                                           "createdAt":  "2023-04-05T23:54:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "borrrden",
                                           "body":  "\u003e My understanding of Android is that `ChainElements` on `X509Chain` are _not_ populated _unless_ the chain is valid.\r\n\r\nIs there an alternative way to construct the chain so that I can examine it then?  I\u0027m trying to figure out if a programmatically provided certificate matches any cert in the chain. ",
                                           "updatedAt":  "2023-04-05T23:54:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZZajP",
                                           "createdAt":  "2023-04-07T01:50:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "Can we get the certificates from the the security config @simonrozsival ? \r\nTraditionally, there is difference between being able to construct chain vs the chain is trusted. Browsers may present questions if to proceed or not. \r\nIf this does not work on Android because of platform limitations we should at least document it. \r\n\r\nNote that the chain is nullable https://learn.microsoft.com/en-us/dotnet/api/system.net.security.remotecertificatevalidationcallback?view=net-6.0\r\n\r\nWe may simply not pass it but I don\u0027t think that would improve the situation here.  ",
                                           "updatedAt":  "2023-04-07T01:50:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h6pXj",
                                           "createdAt":  "2023-07-19T21:10:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "\u003e Can we get the certificates from the the security config @simonrozsival ? Traditionally, there is difference between being able to construct chain vs the chain is trusted. Browsers may present questions if to proceed or not. If this does not work on Android because of platform limitations we should at least document it.\r\n\r\n@simonrozsival can you follow up on this when you have a moment?",
                                           "updatedAt":  "2023-07-19T21:10:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jaWho",
                                           "createdAt":  "2023-08-07T13:23:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "simonrozsival",
                                           "body":  "\u003e Can we get the certificates from the the security config?\r\n\r\n@wfurt My understanding is that certificates included via network security config should behave as if they were installed on the system and the certificate chain should be valid and the chain elements should be populated correctly. I\u0027m not sure why Android doesn\u0027t trust the certificate in this case (and we therefore don\u0027t populate the chain elements).\r\n\r\nI believe we\u0027ll need to revisit how the X509Chain is built on Android. It is one of the features of the PAL that\u0027s not fully implemented (see #45741). I\u0027ll move the issue now to the _Future_ milestone for now (same as #45741).",
                                           "updatedAt":  "2023-08-07T14:23:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jbSe4",
                                           "createdAt":  "2023-08-07T15:32:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "yes, that would be preferable IMHO  @simonrozsival. The question is if .NET has any access to those certificates.\r\nOt feel it may be best to experiment with X5089Chain directly. on Linux X509Stiores simple iterate through files in given directory. If there is API to retrieve certificates we can probably plug that in easily. ",
                                           "updatedAt":  "2023-08-07T15:32:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jbpSd",
                                           "createdAt":  "2023-08-07T16:21:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "simonrozsival",
                                           "body":  "Certificates that devs bundle in the app so that they can use them in the network_security_config.xml should be accessible in code as any other file AFAIK, so devs should be able to build the chain themselves 🤔 is that what you meant, @wfut?",
                                           "updatedAt":  "2023-08-07T16:21:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jb9dJ",
                                           "createdAt":  "2023-08-07T17:08:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "yes. What we would need is to get the content via API or we would need to parse it ourselves and extract the certificates. ",
                                           "updatedAt":  "2023-08-07T17:08:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Itc0F",
                                           "createdAt":  "2024-08-16T14:28:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sibl-SimonBlack",
                                           "body":  "I don\u0027t know if you found a workaround, and I am not sure if this applies to the exact same use case but here goes:\r\nI was having a similar issue with the build() returning false on Android and not Windows. I discovered the same that the ChainElements was length 0.\r\n\r\nThe use case is the service I call with the HttpClient, returns 2 certificates, one LeafCertificate and an Intermediary certificate, where I needed to verify these with a root certificate.\r\nAfter playing a bit around I found that the following worked for me when implementing the \r\n\r\n```csharp\r\nbool ServerCertificateCustomValidationCallback(HttpRequestMessage httpRequestMessage, X509Certificate? cert, X509Chain? cetChain, SslPolicyErrors sslPolicyErrors)\r\n```\r\nOn the HttpHandler.\r\n\r\nI implemented the following:\r\n\r\n```csharp\r\nif (cert == null) return false;\r\nif (cetChain == null) return false;\r\nvar RootCert = new System.Security.Cryptography.X509Certificates.X509Certificate2(CertResources.RootCert);\r\ncetChain.ChainPolicy.TrustMode = X509ChainTrustMode.CustomRootTrust;\r\ncetChain.ChainPolicy.RevocationMode = X509RevocationMode.NoCheck;\r\ncetChain.ChainPolicy.CustomTrustStore.AddRange(cetChain.ChainPolicy.ExtraStore);\r\ncetChain.ChainPolicy.CustomTrustStore.Add(RootCert);\r\nvar chainBuidlResult = cetChain.Build(cert);\r\n```\r\n\r\nwhere *CertResources* is a resource file containing the .PEM Root CA certificate.",
                                           "updatedAt":  "2024-08-16T14:28:49Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "X509Chain does not populate ChainElements (Android)",
        "labels":  [
                       "area-System.Net.Security",
                       "os-android"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/86003",
        "createdAt":  "2023-05-09T18:23:06Z",
        "number":  86003,
        "author":  "rzikm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-28T15:59:17Z",
        "body":  "New test introduced by https://github.com/dotnet/runtime/pull/84976\r\n\r\n```\r\nSystem.Security.Authentication.AuthenticationException : Authentication failed, see inner exception.\r\n---- Interop+AndroidCrypto+SslException : Exception of type \u0027Interop+AndroidCrypto+SslException\u0027 was thrown.\r\n   at System.Net.Security.SslStream.\u003cForceAuthenticationAsync\u003ed__149`1[[System.Net.Security.AsyncReadWriteAdapter, System.Net.Security, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext()\r\n   at System.Threading.Tasks.TaskTimeoutExtensions.GetRealException(Task task) in /_/src/libraries/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs:line 120\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks) in /_/src/libraries/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs:line 90\r\n   at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks, Int32 millisecondsTimeout) in /_/src/libraries/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs:line 55\r\n   at System.Net.Security.Tests.SslStreamSniTest.UnencodedHostName_ValidatesCertificate() in /_/src/libraries/System.Net.Security/tests/FunctionalTests/SslStreamSniTest.cs:line 266\r\n--- End of stack trace from previous location ---\r\n----- Inner Stack Trace -----\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYfnVFw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5b1Kyp",
                                           "createdAt":  "2023-05-09T18:23:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nNew test introduced by https://github.com/dotnet/runtime/pull/84976\r\n\r\n```\r\nSystem.Security.Authentication.AuthenticationException : Authentication failed, see inner exception.\r\n---- Interop+AndroidCrypto+SslException : Exception of type \u0027Interop+AndroidCrypto+SslException\u0027 was thrown.\r\n   at System.Net.Security.SslStream.\u003cForceAuthenticationAsync\u003ed__149`1[[System.Net.Security.AsyncReadWriteAdapter, System.Net.Security, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext()\r\n   at System.Threading.Tasks.TaskTimeoutExtensions.GetRealException(Task task) in /_/src/libraries/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs:line 120\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks) in /_/src/libraries/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs:line 90\r\n   at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks, Int32 millisecondsTimeout) in /_/src/libraries/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs:line 55\r\n   at System.Net.Security.Tests.SslStreamSniTest.UnencodedHostName_ValidatesCertificate() in /_/src/libraries/System.Net.Security/tests/FunctionalTests/SslStreamSniTest.cs:line 266\r\n--- End of stack trace from previous location ---\r\n----- Inner Stack Trace -----\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erzikm\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Security`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-09T18:23:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5b1K3J",
                                           "createdAt":  "2023-05-09T18:23:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nNew test introduced by https://github.com/dotnet/runtime/pull/84976\r\n\r\n```\r\nSystem.Security.Authentication.AuthenticationException : Authentication failed, see inner exception.\r\n---- Interop+AndroidCrypto+SslException : Exception of type \u0027Interop+AndroidCrypto+SslException\u0027 was thrown.\r\n   at System.Net.Security.SslStream.\u003cForceAuthenticationAsync\u003ed__149`1[[System.Net.Security.AsyncReadWriteAdapter, System.Net.Security, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext()\r\n   at System.Threading.Tasks.TaskTimeoutExtensions.GetRealException(Task task) in /_/src/libraries/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs:line 120\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks) in /_/src/libraries/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs:line 90\r\n   at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks, Int32 millisecondsTimeout) in /_/src/libraries/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs:line 55\r\n   at System.Net.Security.Tests.SslStreamSniTest.UnencodedHostName_ValidatesCertificate() in /_/src/libraries/System.Net.Security/tests/FunctionalTests/SslStreamSniTest.cs:line 266\r\n--- End of stack trace from previous location ---\r\n----- Inner Stack Trace -----\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erzikm\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Security`, `os-android`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-09T18:23:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5b12Ji",
                                           "createdAt":  "2023-05-09T20:23:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "Android SNI is more picky AFIK. We should perhaps disable that test. \r\n cc: @simonrozsival \r\n\r\nBTW it would be nice if the exception gives at least some clues. (assuming this is whole stack @rzkim)",
                                           "updatedAt":  "2023-05-09T20:23:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h-dUX",
                                           "createdAt":  "2023-07-20T11:34:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Test disabled by https://github.com/dotnet/runtime/pull/86241",
                                           "updatedAt":  "2023-07-20T11:34:46Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[Test Failure] System.Net.Security.Tests.SslStreamSniTest.UnencodedHostName_ValidatesCertificate on Android",
        "labels":  [
                       "area-System.Net.Security",
                       "disabled-test",
                       "help wanted",
                       "os-android"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98691",
        "createdAt":  "2024-02-20T11:18:49Z",
        "number":  98691,
        "author":  "davidkaya",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-18T11:46:42Z",
        "body":  "### Description\r\n\r\nHello, \r\n\r\nwe have encountered a weird behaviour where if we create a HttpClient and first send a request (e.g. using `HttpClient.GetAsync`) to `https://\u003credacted\u003e.com` and then to `https://\u003credacted\u003e.com:8000`, we get a `System.ComponentModel.Win32Exception (0x80090304): The Local Security Authority cannot be contacted`. But if we do it the other way around, i.e. sending the request first to `:8000` and then to uri without port (i.e. `:443`), it works just fine.\r\n\r\nIs this an expected behaviour?\r\n\r\n### Reproduction Steps\r\n\r\n```csharp\r\n// The FQDN is the same in all cases\r\n\r\n// Does not work (throws exception)\r\n/*\r\n * Unhandled exception. System.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception.\r\n ---\u003e System.Security.Authentication.AuthenticationException: Authentication failed, see inner exception.\r\n ---\u003e System.ComponentModel.Win32Exception (0x80090304): The Local Security Authority cannot be contacted\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Security.SslStream.ForceAuthenticationAsync[TIOAdapter](Boolean receiveFirst, Byte[] reAuthenticationData, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.EstablishSslConnectionAsync(SslClientAuthenticationOptions sslOptions, HttpRequestMessage request, Boolean async, Stream stream, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.EstablishSslConnectionAsync(SslClientAuthenticationOptions sslOptions, HttpRequestMessage request, Boolean async, Stream stream, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.AddHttp11ConnectionAsync(QueueItem queueItem)\r\n   at System.Threading.Tasks.TaskCompletionSourceWithCancellation`1.WaitWithCancellationAsync(CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithVersionDetectionAndRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.\u003cSendAsync\u003eg__Core|83_0(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationTokenSource cts, Boolean disposeCts, CancellationTokenSource pendingRequestsCts, CancellationToken originalCancellationToken)\r\n   at Program.\u003cMain\u003e$(String[] args) in C:\\workspace\\work\\temp\\ConsoleApp3\\ConsoleApp3\\Program.cs:line 5\r\n */\r\nvar firstHttpClient = new HttpClient();\r\nawait firstHttpClient.GetAsync(\"https://\u003credacted\u003e.com\");\r\nawait firstHttpClient.GetAsync(\"https://\u003credacted\u003e.com:8000\"); // \u003c- this call throws the exception above\r\n\r\n// Works (no exception)\r\nvar secondHttpClient = new HttpClient();\r\nawait secondHttpClient.GetAsync(\"https://\u003credacted\u003e.com:8000\");\r\nawait secondHttpClient.GetAsync(\"https://\u003credacted\u003e.com\");\r\n```\r\n\r\n### Expected behavior\r\n\r\nNo exception is thrown and it doesn\u0027t depend in which order we send requests.\r\n\r\n### Actual behavior\r\n\r\nAn exception is thrown (see reproduction steps).\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nThe workaround for us is to use separate `HttpClient` instances.\r\n\r\n### Configuration\r\n\r\nnet8 running on x64 Windows 11.\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdq6SCw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc50d6ut",
                                           "createdAt":  "2024-02-20T11:18:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nHello, \r\n\r\nwe have encountered a weird behaviour where if we create a HttpClient and first send a request (e.g. using `HttpClient.GetAsync`) to `https://\u003credacted\u003e.com` and then to `https://\u003credacted\u003e.com:8000`, we get a `System.ComponentModel.Win32Exception (0x80090304): The Local Security Authority cannot be contacted`. But if we do it the other way around, i.e. sending the request first to `:8000` and then to uri without port (i.e. `:443`), it works just fine.\r\n\r\nIs this an expected behaviour?\n\n### Reproduction Steps\n\n```csharp\r\n// The FQDN is the same in all cases\r\n\r\n// Does not work (throws exception)\r\n/*\r\n * Unhandled exception. System.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception.\r\n ---\u003e System.Security.Authentication.AuthenticationException: Authentication failed, see inner exception.\r\n ---\u003e System.ComponentModel.Win32Exception (0x80090304): The Local Security Authority cannot be contacted\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Security.SslStream.ForceAuthenticationAsync[TIOAdapter](Boolean receiveFirst, Byte[] reAuthenticationData, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.EstablishSslConnectionAsync(SslClientAuthenticationOptions sslOptions, HttpRequestMessage request, Boolean async, Stream stream, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.EstablishSslConnectionAsync(SslClientAuthenticationOptions sslOptions, HttpRequestMessage request, Boolean async, Stream stream, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.AddHttp11ConnectionAsync(QueueItem queueItem)\r\n   at System.Threading.Tasks.TaskCompletionSourceWithCancellation`1.WaitWithCancellationAsync(CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithVersionDetectionAndRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.\u003cSendAsync\u003eg__Core|83_0(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationTokenSource cts, Boolean disposeCts, CancellationTokenSource pendingRequestsCts, CancellationToken originalCancellationToken)\r\n   at Program.\u003cMain\u003e$(String[] args) in C:\\workspace\\work\\temp\\ConsoleApp3\\ConsoleApp3\\Program.cs:line 5\r\n */\r\nvar firstHttpClient = new HttpClient();\r\nawait firstHttpClient.GetAsync(\"https://\u003credacted\u003e.com\");\r\nawait firstHttpClient.GetAsync(\"https://\u003credacted\u003e:8000\"); // \u003c- this call throws the exception above\r\n\r\n// Works (no exception)\r\nvar secondHttpClient = new HttpClient();\r\nawait secondHttpClient.GetAsync(\"https://\u003credacted\u003e.com:8000\");\r\nawait secondHttpClient.GetAsync(\"https://\u003credacted\u003e.com\");\r\n```\n\n### Expected behavior\n\nNo exception is thrown and it doesn\u0027t depend in which order we send requests.\n\n### Actual behavior\n\nAn exception is thrown (see reproduction steps).\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nThe workaround for us is to use separate `HttpClient` instances.\n\n### Configuration\n\nnet8 running on x64 Windows 11.\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edavidkaya\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Http`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-20T11:18:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50k7eA",
                                           "createdAt":  "2024-02-21T03:49:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "Do you have same configuration on both @davidkaya? I suspect this is because cached credentials on Windows. The SNI e.g.the `TargetHostName` is same so picks same for both cases. If the configuration is different it may not work as expected. I run to something similar very long time ago. I think schannel has also cache.\r\n\r\n\r\nWe can inspect the packet captures. I would think we can reproduce it with simple SslStream app.",
                                           "updatedAt":  "2024-02-21T03:49:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50msAl",
                                           "createdAt":  "2024-02-21T10:05:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidkaya",
                                           "body":  "@wfurt If you by \"configuration\" mean the configuration of the HttpClient, then yes, I can reproduce it with the code in the Repro steps, which is a clean HttpClient. Both ports (443 and 8000) use the same SSL certificate.\r\n\r\nI just reproduced it also with a SslStream app (same output for two different colleagues):\r\n\r\n```csharp\r\nvar hostname = \"\u003credacted\u003e.com\";\r\n\r\n// Works\r\nConsole.WriteLine(\"---Connecting to 8000---\");\r\nRunClient(hostname, hostname, 8000);\r\nConsole.WriteLine(\"---Connecting to 443---\");\r\nRunClient(hostname, hostname, 443);\r\n\r\n// Throws\r\nConsole.WriteLine(\"---Connecting to 443---\");\r\nRunClient(hostname, hostname, 443);\r\nConsole.WriteLine(\"---Connecting to 8000---\");\r\nRunClient(hostname, hostname, 8000);\r\n\r\n\r\nstatic void RunClient(string machineName, string serverName, int port)\r\n{\r\n    var client = new TcpClient(machineName, port);\r\n    var sslStream = new SslStream(client.GetStream());\r\n    try\r\n    {\r\n        sslStream.AuthenticateAsClient(serverName);\r\n    }\r\n    catch (AuthenticationException e)\r\n    {\r\n        Console.WriteLine(e);\r\n        client.Close();\r\n        return;\r\n    }\r\n\r\n    sslStream.Write(Encoding.UTF8.GetBytes(string.Format(\"GET https://{0}/  HTTP/1.1\\r\\nHost: {0}\\r\\n\\r\\n\", serverName)));\r\n    sslStream.Flush();\r\n    var serverMessage = ReadMessage(sslStream);\r\n    Console.WriteLine(\r\n        $\"\"\"\r\n         Response:\r\n         -----------------\r\n         {serverMessage}\r\n         -----------------\r\n         \"\"\"\r\n    );\r\n    client.Close();\r\n    Console.WriteLine(\"Client closed.\");\r\n    Console.WriteLine();\r\n}\r\n\r\nstatic string ReadMessage(SslStream sslStream)\r\n{\r\n    var buffer = new byte[2048];\r\n    var bytes = sslStream.Read(buffer, 0, buffer.Length);\r\n    return Encoding.UTF8.GetString(buffer[..bytes]);\r\n}\r\n```\r\n\r\nand the output is\r\n\r\n```\r\n---Connecting to 8000---\r\nResponse:\r\n-----------------\r\nHTTP/1.1 404 Not Found\r\nContent-Length: 0\r\nDate: Wed, 21 Feb 2024 10:01:26 GMT\r\nServer: Kestrel\r\n\r\n\r\n-----------------\r\nClient closed.\r\n\r\n---Connecting to 443---\r\nResponse:\r\n-----------------\r\nHTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request\r\n-----------------\r\nClient closed.\r\n\r\n---Connecting to 443---\r\nResponse:\r\n-----------------\r\nHTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request\r\n-----------------\r\nClient closed.\r\n\r\n---Connecting to 8000---\r\nSystem.Security.Authentication.AuthenticationException: Authentication failed, see inner exception.\r\n ---\u003e System.ComponentModel.Win32Exception (0x80090304): The Local Security Authority cannot be contacted\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Security.SslStream.ForceAuthenticationAsync[TIOAdapter](Boolean receiveFirst, Byte[] reAuthenticationData, CancellationToken cancellationToken)\r\n   at System.Net.Security.SslStream.AuthenticateAsClient(SslClientAuthenticationOptions sslClientAuthenticationOptions)\r\n   at System.Net.Security.SslStream.AuthenticateAsClient(String targetHost)\r\n   at Program.\u003c\u003cMain\u003e$\u003eg__RunClient|0_0(String machineName, String serverName, Int32 port) in C:\\workspace\\work\\temp\\ConsoleApp3\\ConsoleApp3\\Program.cs:line 57\r\n\r\n\r\n```",
                                           "updatedAt":  "2024-02-21T11:36:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50-BMS",
                                           "createdAt":  "2024-02-24T16:23:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nHello, \r\n\r\nwe have encountered a weird behaviour where if we create a HttpClient and first send a request (e.g. using `HttpClient.GetAsync`) to `https://\u003credacted\u003e.com` and then to `https://\u003credacted\u003e.com:8000`, we get a `System.ComponentModel.Win32Exception (0x80090304): The Local Security Authority cannot be contacted`. But if we do it the other way around, i.e. sending the request first to `:8000` and then to uri without port (i.e. `:443`), it works just fine.\r\n\r\nIs this an expected behaviour?\r\n\r\n### Reproduction Steps\r\n\r\n```csharp\r\n// The FQDN is the same in all cases\r\n\r\n// Does not work (throws exception)\r\n/*\r\n * Unhandled exception. System.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception.\r\n ---\u003e System.Security.Authentication.AuthenticationException: Authentication failed, see inner exception.\r\n ---\u003e System.ComponentModel.Win32Exception (0x80090304): The Local Security Authority cannot be contacted\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Security.SslStream.ForceAuthenticationAsync[TIOAdapter](Boolean receiveFirst, Byte[] reAuthenticationData, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.EstablishSslConnectionAsync(SslClientAuthenticationOptions sslOptions, HttpRequestMessage request, Boolean async, Stream stream, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.EstablishSslConnectionAsync(SslClientAuthenticationOptions sslOptions, HttpRequestMessage request, Boolean async, Stream stream, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.AddHttp11ConnectionAsync(QueueItem queueItem)\r\n   at System.Threading.Tasks.TaskCompletionSourceWithCancellation`1.WaitWithCancellationAsync(CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithVersionDetectionAndRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.\u003cSendAsync\u003eg__Core|83_0(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationTokenSource cts, Boolean disposeCts, CancellationTokenSource pendingRequestsCts, CancellationToken originalCancellationToken)\r\n   at Program.\u003cMain\u003e$(String[] args) in C:\\workspace\\work\\temp\\ConsoleApp3\\ConsoleApp3\\Program.cs:line 5\r\n */\r\nvar firstHttpClient = new HttpClient();\r\nawait firstHttpClient.GetAsync(\"https://\u003credacted\u003e.com\");\r\nawait firstHttpClient.GetAsync(\"https://\u003credacted\u003e.com:8000\"); // \u003c- this call throws the exception above\r\n\r\n// Works (no exception)\r\nvar secondHttpClient = new HttpClient();\r\nawait secondHttpClient.GetAsync(\"https://\u003credacted\u003e.com:8000\");\r\nawait secondHttpClient.GetAsync(\"https://\u003credacted\u003e.com\");\r\n```\r\n\r\n### Expected behavior\r\n\r\nNo exception is thrown and it doesn\u0027t depend in which order we send requests.\r\n\r\n### Actual behavior\r\n\r\nAn exception is thrown (see reproduction steps).\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nThe workaround for us is to use separate `HttpClient` instances.\r\n\r\n### Configuration\r\n\r\nnet8 running on x64 Windows 11.\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edavidkaya\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Security`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-24T16:23:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50-BTc",
                                           "createdAt":  "2024-02-24T16:25:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "right, this is what I suspected. But I don\u0027t think we can make much progress without more details about the server or at least packet captures. If you do not want to share it publicly contact me or @rzikm privately. ",
                                           "updatedAt":  "2024-02-24T16:25:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51AbPs",
                                           "createdAt":  "2024-02-25T20:04:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "It is hard to see with the default TLS 1.3 but the the 443 site sends out only leaf cert while the 8000 site sends whole  chain as it should. \r\n\r\nport 443\r\n![image](https://github.com/dotnet/runtime/assets/14356188/9c4d4093-9085-49a1-ac76-335aac02cbdb)\r\n\r\nand port 8000\r\n![image](https://github.com/dotnet/runtime/assets/14356188/7aa3642e-177f-460e-a748-67a8849a74b3)\r\n\r\nYou can see that by forcing TLS 1.2 or something like `openssl s_client -tls1_2 -connect x.y.z:443` \r\nYou would see more of the handshake clearly and you can notice difference in size of the certificate chunk server sends back. \r\n\r\nSince .NET will cache intermediates (when it can) it will work if you connect first to the site that sends the chain @davidkaya. \r\n` HttpClient` (SslStream/X509Chain) _should_ try to fetch the missing intermediates. Either to download is blocked or something else is going on. It feel like the easiest fix is to update the 443 to send the chain as it should. \r\n\r\nlet us know.",
                                           "updatedAt":  "2024-02-25T20:04:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51AbQj",
                                           "createdAt":  "2024-02-25T20:05:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2024-02-25T20:05:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51ViwP",
                                           "createdAt":  "2024-02-28T09:35:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidkaya",
                                           "body":  "@wfurt We have tried to configure the service on :443 to send the full certificate chain but it still fails on the same error.\r\n\r\nPort 443 sends whole chain including root:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/3832960/fe455a4a-d7ef-478e-8c43-37da490452df)\r\n\r\nPort 8000 sends whole chain except root:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/3832960/c09be59f-3a0d-44dc-a563-fba950c99baa)\r\n\r\nThere is one thing that I\u0027ve noticed. When I forced SslStream to use TLS 1.2, I do not get the error anymore, so the error occurs only in the case of TLS 1.3:\r\n\r\nThis works:\r\n1. Send request to `:8000` (TLS 1.2)\r\n2. Send request to `:443` (TLS 1.2)\r\n\r\nThis works:\r\n1. Send request to `:443` (TLS 1.2)\r\n2. Send request to `:8000` (TLS 1.2)\r\n\r\nThis works:\r\n1. Send request to `:8000` (TLS 1.3)\r\n2. Send request to `:443` (TLS 1.3)\r\n\r\nThis fails:\r\n1. Send request to `:443` (TLS 1.3)\r\n2. Send request to `:8000` (TLS 1.3)",
                                           "updatedAt":  "2024-02-28T16:25:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52Q44i",
                                           "createdAt":  "2024-03-07T18:05:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Triage: we should have a look at 9.0 timeframe.",
                                           "updatedAt":  "2024-03-07T18:05:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52rpIL",
                                           "createdAt":  "2024-03-12T09:29:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIlwnQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidkaya",
                                                                               "createdAt":  "2024-03-12T14:10:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WeihanLi",
                                                                               "createdAt":  "2025-03-05T09:07:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Possible workaround for the issue is disabling TLS resume. Unfortunately, on Windows, this has to be done from code (on Linux we have an envvar switch, maybe we should port it to Windows as well?).\r\n\r\nCreating the HttpClient like this should workaround the issue\r\n\r\n```cs\r\nvar httpclient = new HttpClient(new SocketsHttpHandler\r\n{\r\n    SslOptions = new SslClientAuthenticationOptions\r\n    {\r\n        //\r\n        // either of the following options will avoid the issue\r\n        //\r\n        // AllowTlsResume = false // (available in .NET 8.0+ only)\r\n        // EnabledSslProtocols = SslProtocols.Tls12\r\n    }\r\n});\r\n```\r\n\r\nIt does not seem that we can do anything from .NET side, I have filed an issue with SChannel team so that they can investigate it.",
                                           "updatedAt":  "2024-03-12T09:29:40Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "HttpClient.GetAsync(...) throws Win32Exception when request sent first to https://FQDN and then to https://FQDN:8000",
        "labels":  [
                       "area-System.Net.Security",
                       "tracking-external-issue"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100231",
        "createdAt":  "2024-03-25T10:59:08Z",
        "number":  100231,
        "author":  "wimme",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_BSHA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "noltedennis",
                                            "createdAt":  "2025-02-12T14:23:35Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-10-05T13:55:05Z",
        "body":  "### Description\n\nWe\u0027re using NegotiateStream to authenticate clients on our server application. This works on Windows clients, but we would like to get it working on Linux clients as well.\n\n### Reproduction Steps\n\nThe server application always runs on a Windows Server OS and uses .NET Framework 4.6.2.\r\nIn this case, the Windows Server is part of a local domain (I didn\u0027t test it on a server that is not in a domain).\r\n\r\nThe client application makes use of a library dll that gets build in both .NET Framework 4.6.2 and .NET Standard 2.0.\r\n\r\nClients using the .NET Framework 4.6.2 library dll on Windows works.\r\nClients using the .NET Standard 2.0 library on .NET 8 applications on Windows works.\r\nClients using the .NET Standard 2.0 library on .NET 8 applications on Linux does not work.\r\n\r\nLinux clients are running:\r\n* Ubuntu Server 22.04 LTS\r\n* dotnet-runtime-8.0\r\n* aspnetcore-runtime-8.0\r\n\r\nServer implementation:\r\n\r\n```c#\r\n_authStream = new SSPIAuthStream();\r\n_negotiateStream = new NegotiateStream(_authStream);\r\n\r\nNegotiateStream stream = _negotiateStream;\r\nstream.AuthenticateAsServer(\r\n    (NetworkCredential)CredentialCache.DefaultCredentials,\r\n    ProtectionLevel.None,                               // min. protectionlevel required\r\n    TokenImpersonationLevel.Identification              // min. impersonationlevel required\r\n);\r\n\r\nif (stream.RemoteIdentity != null)\r\n    name = stream.RemoteIdentity.Name;\r\n\r\nauthenticated = stream.IsAuthenticated;\r\n```\r\n\r\nClient implementation:\r\n\r\n```c#\r\n_authStream = new SSPIAuthStream();\r\n_negotiateStream = new NegotiateStream(_authStream);\r\n\r\n// determine client credentials\r\nNetworkCredential credentials = null;\r\nif (String.IsNullOrEmpty(userName))\r\n    credentials = (NetworkCredential)CredentialCache.DefaultCredentials;\r\nelse\r\n    credentials = new NetworkCredential(userName, password, domainName);\r\n\r\n// launch client authentication process asynchronously.\r\n_arAuthenticateAsClient = _negotiateStream.BeginAuthenticateAsClient(\r\n    credentials,\r\n    String.Empty,                                       // target name\r\n    ProtectionLevel.None,                               // we don\u0027t need sign or encrypt since we\u0027ll ditch the stream once authenticated\r\n    TokenImpersonationLevel.Identification,             // we only need to identify ourselves\r\n    new AsyncCallback(callback_onAuthenticateComplete), // callback method when done\r\n    null\r\n    );\r\n```\n\n### Expected behavior\n\nI would expect when specifying a username/password that the authentication step works on Linux as well, just like on Windows.\n\n### Actual behavior\n\nWhen a client running on Linux connects, the following error gets thrown on the server:\r\n\r\n```\r\nSystem.Security.Authentication.AuthenticationException: Authentication failed on the remote side (the stream might still be available for additional authentication attempts). ---\u003e System.ComponentModel.Win32Exception: Unknown error (0xffffffff)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Security.NegoState.ProcessReceivedBlob(Byte[] message, LazyAsyncResult lazyResult)\r\n   at System.Net.Security.NegoState.ProcessAuthentication(LazyAsyncResult lazyResult)\r\n   at System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential credential, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel requiredImpersonationLevel)\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjsHSCQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc54UiBg",
                                           "createdAt":  "2024-03-25T18:30:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "It would help a lot if you could provide Wireshark captures, or otherwise capture the communication between the `NegotiateStream` instances (see #99227 for other diagnostic steps for a similar problem). Additionally, it\u0027s possible to enable .NET (https://github.com/filipnavara/httpclienttest/blob/9d3336a9aed944dbbdef8d0c4dc4007ea1163255/Program.cs#L33-L78) and Kerberos logs (`KRB5_TRACE` environment variable) for additional information. ",
                                           "updatedAt":  "2024-03-25T18:30:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54as2Z",
                                           "createdAt":  "2024-03-26T12:11:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wimme",
                                           "body":  "Wireshark will be difficult, it\u0027s being transferred over an encrypted gRPC connection.\r\n\r\nI added some logging inside the underlying stream used by the `NegotiateStream` that outputs the buffer when calling the read and write methods:\r\n\r\nClient:\r\n\r\n```txt\r\n3/26/2024 12:51:36 WRITE: byte[] { 21, 1, 0, 0, 8 }\r\n3/26/2024 12:51:36 WRITE: byte[] { 2, 3, 9, 128, 255, 255, 255, 255 }\r\n```\r\n\r\nServer:\r\n\r\n```txt\r\n03/26/2024 12:51:36 READ: byte[] { 21, 1, 0, 0, 8 }\r\n03/26/2024 12:51:36 READ: byte[] { 2, 3, 9, 128, 255, 255, 255, 255 }\r\n```\r\n\r\nThis means the connection works, we\u0027re getting the same data.\r\n\r\nComparing it with a Windows client, the 2nd line contains there a lot more data, and gets then followed by a WRITE on the server. Here with the Linux client, the server does not WRITE to the stream.\r\n\r\nSo I\u0027m guessing the Linux client should send some more data initially?\r\n\r\nDoes this help?",
                                           "updatedAt":  "2024-03-26T12:11:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54c3MV",
                                           "createdAt":  "2024-03-26T16:00:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SteveSyfuhs",
                                           "body":  "You\u0027re going to need traces from the auth stack. It\u0027s likely failing there before it writes anything to the stream. The messages written to the stream also don\u0027t make a ton of sense. They\u0027re too short to be negotiate messages themselves, so there is no token present.",
                                           "updatedAt":  "2024-03-26T16:00:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54iFUN",
                                           "createdAt":  "2024-03-27T08:30:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wimme",
                                           "body":  "How do I get these auth traces? I\u0027ve been trying with the `KRB5_TRACE` env variable, but it doesn\u0027t log anything when running our client .NET application.\r\n\r\nIf I run `kinit` with the env variable then it does output a lot of logging. (`kinit` works with our Windows domain accounts.)\r\nBut I\u0027m also trying to log in with a local Windows user, not necessarily a domain user (is Kerberos then even needed?).\r\n\r\nI think I\u0027m probably missing something obvious here, but I can\u0027t find any documentation on this...",
                                           "updatedAt":  "2024-03-27T08:31:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55Evby",
                                           "createdAt":  "2024-04-02T07:38:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODdG4lA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wimme",
                                                                               "createdAt":  "2024-04-05T07:18:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rzikm",
                                           "body":  "@filipnavara can you advise here please? I am not familiar with kerberos auth tracing",
                                           "updatedAt":  "2024-04-02T07:38:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55i2em",
                                           "createdAt":  "2024-04-05T07:52:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wimme",
                                           "body":  "Any information regarding how this works is also welcome.\r\n\r\nWe\u0027re having users with Windows domain accounts (if there is a Windows domain) and with local Windows accounts of the Windows Server (just like how it works with NegotiateStream from Windows client machines). I\u0027m hoping we don\u0027t need Kerberos with SPNs for this?\r\n\r\nAs a workaround we could transfer the credentials over our gRPC connection to the Windows Server and then verify these there. But ideally I\u0027d prefer using the same flow as Windows clients.",
                                           "updatedAt":  "2024-04-05T07:52:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55i65n",
                                           "createdAt":  "2024-04-05T08:01:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "`KRB5_TRACE` may not log anything if Kerberos is not used. I don\u0027t think that libgss (despite being part of the krb5 package) uses it for general tracing.\r\n\r\nIf NTLM is used then `gss-ntlmssp` package has to be installed on the system. It has its own logging capabilities by setting the `GSSNTLMSSP_DEBUG` environment variable and pointing it to a file. Notably some versions of Ubuntu shipped incompatible versions of OpenSSL (with disabled md4) and gss-ntlmssp, so just installing the package would not work out of the box. See https://github.com/dotnet/runtime/issues/67353#issuecomment-1085003764 for a workaround to that particular problem; it was fixed upstream, but I don\u0027t think Ubuntu ships the fixed packages.",
                                           "updatedAt":  "2024-04-05T08:02:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55j-x2",
                                           "createdAt":  "2024-04-05T10:45:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wimme",
                                           "body":  "I installed the `gss-ntlmssp` package and modified `/usr/lib/ssl/openssl.cnf` to enable the legacy provider.\r\n\r\nWith the `GSSNTLMSSP_DEBUG` environment variable I get the following:\r\n\r\n```\r\n[1712313101] ERROR: get_enterprise_name() @ src/gss_names.c:109 [1048576:0]\r\n[1712313101] ERROR: string_split() @ src/gss_names.c:47 [1048576:0]\r\n[1712313101] ERROR: string_split() @ src/gss_names.c:47 [1048576:0]\r\n[1712313101] ALLOK: gssntlm_acquire_cred_from() @ src/gss_creds.c:400 [0:0]\r\n[1712313101] ALLOK: gssntlm_release_name() @ src/gss_names.c:423 [0:0]\r\n```\r\n\r\nThe underlying stream of `NegotiateStream` on the Ubuntu client doesn\u0027t write anything anymore.",
                                           "updatedAt":  "2024-04-05T10:45:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55rlaL",
                                           "createdAt":  "2024-04-07T13:16:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "What is the version of the `gss-ntlmssp` package on your system? The `get_enterprise_name` method doesn\u0027t even exist in the latest version, so it\u0027s hard to interpret the line number without having the correct source version.",
                                           "updatedAt":  "2024-04-07T13:16:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc552oc6",
                                           "createdAt":  "2024-04-09T07:49:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wimme",
                                           "body":  "I\u0027m using Ubuntu Server 22.04 LTS, the version of `gss-ntlmssp` is `0.7.0-4build4`. From the source code it seems to fail on parsing the domain name, but I get this exception when trying it with a local user (empty domain name) and a domain user (\"company2\"). Since the code has been heavily changed, it might be fixed in newer version...",
                                           "updatedAt":  "2024-04-09T07:49:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc552p2r",
                                           "createdAt":  "2024-04-09T07:53:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e local user (empty domain name)\r\n\r\nFWIW the domain name is never really empty in NTLM. It\u0027s the machine name for local authentication. If you don\u0027t specify it explicitly during the initial authentication, then it\u0027s taken from the server\u0027s challenge message. You may want to try using different user name / domain combinations to see if it has any effect.",
                                           "updatedAt":  "2024-04-09T07:53:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc555Mgp",
                                           "createdAt":  "2024-04-09T12:19:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wimme",
                                           "body":  "If I\u0027m reading the code of `get_enterprise_name` in `gss_names.c` correctly then it seems like it expects a `username@domain.x` format. The `ERROR` lines go away when using `username@machine.domain.local` or `username@domain.local` (without providing a domain in `NetworkCredential`):\r\n\r\n```\r\n[1712671097] ALLOK: get_enterprise_name() @ src/gss_names.c:117 [0:0]\r\n[1712671097] ALLOK: gssntlm_acquire_cred_from() @ src/gss_creds.c:400 [0:0]\r\n[1712671097] ALLOK: gssntlm_release_name() @ src/gss_names.c:423 [0:0]\r\n```\r\n\r\nThis still doesn\u0027t result in any negotiate messages though...",
                                           "updatedAt":  "2024-04-09T14:30:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56KW-O",
                                           "createdAt":  "2024-04-11T11:57:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wimme",
                                           "body":  "Are there any next steps I could try?",
                                           "updatedAt":  "2024-04-11T11:57:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56KYSU",
                                           "createdAt":  "2024-04-11T12:01:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Are there any next steps I could try?\r\n\r\nWell, you can try to enable the System.Net.Security tracing (https://github.com/filipnavara/httpclienttest/blob/9d3336a9aed944dbbdef8d0c4dc4007ea1163255/Program.cs#L33-L78), and you can try how it behaves with the ManagedNtlm override (https://github.com/AlexanderUsmanov/WcfClientNet8-issue/blob/57f5fbf3228ac18cd57211c8c913d13876deae57/WcfClientNet8/Program.cs#L30)",
                                           "updatedAt":  "2024-04-11T12:01:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56Krp0",
                                           "createdAt":  "2024-04-11T12:48:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wimme",
                                           "body":  "I\u0027m not getting any logging with `HttpEventListener` (should I initialize this somewhere?), but the entire authentication flow fully works by using the ManagedNtlm override. I think we should make it configurable for end-users whether they want to use ManagedNtlm? Although I\u0027m not sure why the default doesn\u0027t work for me.",
                                           "updatedAt":  "2024-04-11T12:48:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56Ku67",
                                           "createdAt":  "2024-04-11T12:55:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e I\u0027m not getting any logging with HttpEventListener (should I initialize this somewhere?)\r\n\r\nYes, it needs to be initialized (and ideally disposed):\r\nhttps://github.com/filipnavara/httpclienttest/blob/9d3336a9aed944dbbdef8d0c4dc4007ea1163255/Program.cs#L15\r\n\r\n\u003e I think we should make it configurable for end-users whether they want to use ManagedNtlm?\r\n\r\nThe configuration property `_UseManagedNtlm` (in .csproj) was added in .NET 9. The whole support for managed NTLM code path on Linux/macOS landed very late in the .NET 8 release cycle. It didn\u0027t receive enough testing to be a regular part of the product. On .NET 9 it\u0027s the new default for macOS/iOS and opt-in for Linux.\r\n\r\n(The bar for backports to .NET 8 is set quite high, so not all the fixes for the managed NTLM code made it there yet; due to an unrelated bug on Apple platforms some backports may eventually be done, including the support for the .csproj switch.)",
                                           "updatedAt":  "2024-04-11T12:55:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56LGt0",
                                           "createdAt":  "2024-04-11T13:45:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wimme",
                                           "body":  "This generates indeed a lot of logging, it includes also our other https and grpc calls. I\u0027m not sure if it reveals any info why the NTLM authentication fails? https://pastebin.com/nhJZGDvx\r\n\r\nI\u0027m not sure if it\u0027s worth investigating this further if it works with ManagedNtlm.",
                                           "updatedAt":  "2024-04-11T13:45:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56LhC2",
                                           "createdAt":  "2024-04-11T14:34:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e I\u0027m not sure if it reveals any info why the NTLM authentication fails?\r\n\r\nI don\u0027t see any meaningful info, unfortunately. That suggests we likely have a gap in the logging messages. It shows that `InitializeSecurityContext` was called which calls into the native GSSAPI library but the trace is lost after that.\r\n\r\nThanks for the log, anyway.",
                                           "updatedAt":  "2024-04-11T14:34:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56nEIF",
                                           "createdAt":  "2024-04-15T14:55:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Triage: putting it to Future for now. We will most likely need some more data and help from filipnavara to investigate further.",
                                           "updatedAt":  "2024-04-15T14:55:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OwdIJ",
                                           "createdAt":  "2024-10-05T13:55:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "norey",
                                           "body":  "Hey all, has there been any updates on this problem?\r\n\r\nEssentially, I want to run the following snippet in Linux\r\n\r\n```c#\r\n...\r\n\r\nStream ret = client.GetStream();\r\n\r\nTokenImpersonationLevel tkn = TokenImpersonationLevel.Identification;\r\n\r\nNegotiateStream stm = new NegotiateStream(ret);\r\n\r\nNetworkCredential creds = CredentialCache.DefaultNetworkCredentials;\r\n\r\nstm.AuthenticateAsClient(creds, System.String.Empty, ProtectionLevel.EncryptAndSign, tkn);\r\n\r\nMemoryStream ms = new MemoryStream();\r\nBinaryWriter writer = new BinaryWriter(ms);\r\n\r\n\r\nstring data_stream = \"0001000000FFFFFFFF01000000000000000C02000000...\";\r\nbyte[] data = Convert.FromHexString(data_stream);\r\n\r\n\r\nwriter.Write(data);\r\n\r\nvar netWriter = new BinaryWriter(stm)\r\n\r\nnetWriter.Write(ms.ToArray());\r\n...\r\n```\r\n\r\nIt works fine on Windows, but fails on Linux (on the `stm.AuthenticateAsClient()` call ) as follows\r\n\r\n```\r\n$ dotnet --list-runtimes\r\nMicrosoft.AspNetCore.App 6.0.33 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 8.0.8 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.NETCore.App 6.0.33 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 8.0.8 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\n$ ./senddata\r\nUnhandled exception. System.Security.Authentication.AuthenticationException: Authentication failed, see inner exception.\r\n ---\u003e System.ComponentModel.Win32Exception (0x80090302): Unknown error -2146893054\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Security.NegotiateStream.SendAuthResetSignalAndThrowAsync[TIOAdapter](Byte[] message, Exception exception, CancellationToken cancellationToken)\r\n   at System.Net.Security.NegotiateStream.SendBlobAsync[TIOAdapter](Byte[] message, CancellationToken cancellationToken)\r\n   at System.Net.Security.NegotiateStream.AuthenticateAsync[TIOAdapter](CancellationToken cancellationToken)\r\n   at System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential credential, ChannelBinding binding, String targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel allowedImpersonationLevel)\r\n   at Program.\u003cMain\u003e$(String[] args) in C:\\Users\\Administrator\\source\\repos\\senddata\\Program.cs:line 24\r\nAborted\r\n```\r\n\r\nTarget framework for the project is .NET 8.0, compiled in visual studio 2022.",
                                           "updatedAt":  "2024-10-05T13:55:04Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "NegotiateStream fails when authenticating from linux client to windows server",
        "labels":  [
                       "area-System.Net.Security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102692",
        "createdAt":  "2024-05-25T21:38:56Z",
        "number":  102692,
        "author":  "davidterins",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-16T14:14:34Z",
        "body":  "### Description\r\n\r\nI want to run a process with a restricted set of SIDs and in that process/application use `HttpClient` configured with `UseDefaultCredentials` to do request to a backend web api with the following flow:\r\n\r\nFrom process 1\r\n1. Call method `CreateRestrictedToken` (provide a list a restricted sids as parameter)\r\n2. Call method `CreateProcessAsUser` providing the restricted token for the new process\r\n\r\nFrom Process 2 that was launched from process 1\u0027s step 2\r\n1. Use the `HttpClient` to call some backend web api using the Negotiate authentication scheme using the credentials of the process by configuring `HttpClient` with `UseDefaultCredentials: true`\r\n\r\n\r\n\r\n\r\n\r\n### Reproduction Steps\r\n\r\nCreate an application representing each process described and then...\r\nFrom process 1\r\n1. Call method `CreateRestrictedToken`\r\n```csharp\r\nCreateRestrictedToken(\r\n                    Token, // \u003c-- current token\r\n                    0,\r\n                    0, IntPtr.Zero,\r\n                    0, IntPtr.Zero,\r\n                    (uint)restrictedSidStrings.Count, restrictedSidsPtr,  // \u003c-- Provide some valid SID data to these two parameters\r\n                    out SafeTokenHandle restrictedToken))\r\n```\r\n2. Call method `CreateProcessAsUser` providing the restricted token for the new process providing the restricted token from step 1\r\n```csharp\r\nCreateProcessAsUser(\r\n                    restrictedToken,\r\n                    appToRun,\r\n                    IntPtr.Zero,\r\n                    IntPtr.Zero,\r\n                    false,\r\n                    0,\r\n                    IntPtr.Zero,\r\n                    startupFolder,\r\n                    ref startupInfo,\r\n                    out PROCESS_INFORMATION processInfo))\r\n```\r\n\r\nFrom Process 2 that was launched from process 1\u0027s step 2\r\n1. Use the `HttpClient` configured with `UseDefaultCredentials: true`\r\n```csharp\r\n    var handler = new HttpClientHandler();\r\n    var httpClient = new HttpClient(handler);\r\n    var result = await httpClient.GetAsync(url);\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe api request is successfully sent from the client.\r\n\r\n### Actual behavior\r\n\r\nWhen calling `httpClient.GetAsync(url)` the following exception + stacktrace is produced\r\n\r\nAttempting to do http request to endpoint: https://localhost:7254/weatherforecast\r\nSystem.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception.\r\n ---\u003e System.Security.Authentication.AuthenticationException: Authentication failed, see inner exception.\r\n ---\u003e System.ComponentModel.Win32Exception (0x8009030E): No credentials are available in the security package\r\n   at System.Net.SSPIWrapper.AcquireCredentialsHandle(ISSPIInterface secModule, String package, CredentialUse intent, SCH_CREDENTIALS* scc)\r\n   at System.Net.Security.SslStreamPal.AcquireCredentialsHandle(CredentialUse credUsage, SCH_CREDENTIALS* secureCredential)\r\n   at System.Net.Security.SslStreamPal.AcquireCredentialsHandleSchCredentials(SslAuthenticationOptions authOptions)\r\n   at System.Net.Security.SslStreamPal.AcquireCredentialsHandle(SslAuthenticationOptions sslAuthenticationOptions, Boolean newCredentialsRequested)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Security.SslStreamPal.AcquireCredentialsHandle(SslAuthenticationOptions sslAuthenticationOptions, Boolean newCredentialsRequested)\r\n   at System.Net.Security.SslStream.AcquireCredentialsHandle(SslAuthenticationOptions sslAuthenticationOptions, Boolean newCredentialsRequested)\r\n   at System.Net.Security.SslStream.AcquireClientCredentials(Byte[]\u0026 thumbPrint, Boolean newCredentialsRequested)\r\n   at System.Net.Security.SslStream.GenerateToken(ReadOnlySpan`1 inputBuffer, Byte[]\u0026 output)\r\n   at System.Net.Security.SslStream.NextMessage(ReadOnlySpan`1 incomingBuffer, ProtocolToken\u0026 token)\r\n   at System.Net.Security.SslStream.ForceAuthenticationAsync[TIOAdapter](Boolean receiveFirst, Byte[] reAuthenticationData, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.EstablishSslConnectionAsync(SslClientAuthenticationOptions sslOptions, HttpRequestMessage request, Boolean async, Stream stream, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.EstablishSslConnectionAsync(SslClientAuthenticationOptions sslOptions, HttpRequestMessage request, Boolean async, Stream stream, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.AddHttp11ConnectionAsync(QueueItem queueItem)\r\n   at System.Threading.Tasks.TaskCompletionSourceWithCancellation`1.WaitWithCancellationAsync(CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithVersionDetectionAndRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.AuthenticationHelper.SendWithAuthAsync(HttpRequestMessage request, Uri authUri, Boolean async, ICredentials credentials, Boolean preAuthenticate, Boolean isProxyAuth, Boolean doRequestAuth, HttpConnectionPool pool, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.\u003cSendAsync\u003eg__Core|83_0(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationTokenSource cts, Boolean disposeCts, CancellationTokenSource pendingRequestsCts, CancellationToken originalCancellationToken)\r\n\r\n### Regression?\r\n\r\nUnkown\r\n\r\n### Known Workarounds\r\n\r\nIf enough security for one\u0027s use case to just rely on disdabled sids (deny only attribute), then it is possible to not specify any restricted SIDs and just pass disabled sids to the parameters of `CreateRestrictedToken` \r\n```csharp\r\nCreateRestrictedToken(\r\n                    Token, // \u003c-- current token\r\n                    0,\r\n                    (uint)disabledSids.Count, disabledSidsPtr,  // \u003c-- Provide some valid SID data to these two parameters\r\n                    0, IntPtr.Zero,\r\n                    0, IntPtr.Zero, // \u003c-- Do not pass any restricted SIDs\r\n                    out SafeTokenHandle restrictedToken))\r\n```\r\n\r\n### Configuration\r\n\r\nWhich version of .NET is the code running on? - `net8 (net8-windows)`\r\nWhat OS and version, and what distro if applicable? - `Windows 11 - 10.0.22621 Build 22621`\r\nWhat is the architecture (x64, x86, ARM, ARM64)? - `x64`\r\nDo you know whether it is specific to that configuration? - No\r\nIf you\u0027re using Blazor, which web browser(s) do you see this issue in? - No\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiLVsZg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5_C_vf",
                                           "createdAt":  "2024-05-25T21:39:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-25T21:39:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_INsx",
                                           "createdAt":  "2024-05-27T07:48:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODjdYyQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wfurt",
                                                                               "createdAt":  "2024-05-28T04:12:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rzikm",
                                           "body":  "The callstack looks to be from SslStream, which handles SSL/TLS, not Negotiate. Did you try connecting to non-Negotiate endpoint?\r\n\r\nCan you also share a minimal self-contained repro example?",
                                           "updatedAt":  "2024-05-27T07:48:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_Nwkf",
                                           "createdAt":  "2024-05-28T04:12:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "and what .NET version do you use? In Windows the \"credentials\" usually build down to problem with certificates.\r\nDoes the TLS henshake work without the restricted token? ",
                                           "updatedAt":  "2024-05-28T04:12:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_omIv",
                                           "createdAt":  "2024-05-31T06:57:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidterins",
                                           "body":  "@rzikm here is a repo to reproduce the issue: https://github.com/davidterins/restricted-token-experiments. I am 99% sure it worked with a non-Negotiate endpoint, was a few days ago...\r\n\r\n@wfurt The issue does not seem to in the the restricted token per say, the issue only appears if providing \"restricted sids\" in the following parameter when creating a restricted token.\r\n![image](https://github.com/dotnet/runtime/assets/25159662/9ef25648-8ba0-4adf-9ef9-6ef4078d4d72)\r\n\r\n* project targets net8.0-windows\r\n* I build with sdk version 9.0.100-preview.3.24204.13\r\n",
                                           "updatedAt":  "2024-05-31T06:57:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ARqYM",
                                           "createdAt":  "2024-06-06T11:25:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODk-Ivg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidterins",
                                                                               "createdAt":  "2024-06-07T18:29:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rzikm",
                                           "body":  "I investigated a bit and can reproduce it with SslStream only, It\u0027s weird to me that a restricted token can\u0027t create anonymous credentials (since no client certificates are at play here). I need to investigate further.",
                                           "updatedAt":  "2024-06-06T11:25:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Buf28",
                                           "createdAt":  "2024-06-18T15:56:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnUJeQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidterins",
                                                                               "createdAt":  "2024-06-26T22:00:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Triage: needs further investigation, does not seem critical for 9.0",
                                           "updatedAt":  "2024-06-18T15:56:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ItWxm",
                                           "createdAt":  "2024-08-16T14:14:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODvOtIQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidterins",
                                                                               "createdAt":  "2024-08-22T04:34:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Support ticket opened for Schannel team to investigate",
                                           "updatedAt":  "2024-08-16T14:14:32Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Unable to use HttpClient configured with UseDefaultCredentials true when the process is running under a restricted token with restricted SIDs",
        "labels":  [
                       "area-System.Net.Security",
                       "tracking-external-issue"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103449",
        "createdAt":  "2024-06-13T22:09:21Z",
        "number":  103449,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T22:01:31Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=707064\r\nBuild error leg or test failing: System.Net.Security.Tests.SslStreamTlsResumeTests.ClientDisableTlsResume_Succeeds\r\nPull request: https://github.com/dotnet/runtime/pull/103309\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"ClientDisableTlsResume_Succeeds\",\r\n  \"ErrorPattern\": \"\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n```\r\n❌ System.Net.Security.Tests.SslStreamTlsResumeTests.ClientDisableTlsResume_Succeeds(testClient: True)\r\nException Message\r\nTLS session resumed in round $2\r\nStack Trace\r\n   at System.Net.Security.Tests.SslStreamTlsResumeTests.ClientDisableTlsResume_Succeeds(Boolean testClient) in /_/src/libraries/System.Net.Security/tests/FunctionalTests/SslStreamAllowTlsResumeTests.cs:line 99\r\n--- End of stack trace from previous location ---\r\n```\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=707064\r\n**Error message validated:** `[ClientDisableTlsResume_Succeeds`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 6/14/2024 11:26:27 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvGV_gg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6BJ-kl",
                                           "createdAt":  "2024-06-13T22:09:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-13T22:09:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Bul5U",
                                           "createdAt":  "2024-06-18T16:07:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODmRxAw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffschwMSFT",
                                                                               "createdAt":  "2024-06-19T17:19:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@rzikm, can we disable this test? It\u0027s failing a lot.",
                                           "updatedAt":  "2024-06-18T16:07:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ELK44",
                                           "createdAt":  "2024-07-09T12:24:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "The behavior seems to be flaky and seems to depend on timing, the bug has been passed to SChannel team for investigation.",
                                           "updatedAt":  "2024-07-09T12:24:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E0gzY",
                                           "createdAt":  "2024-07-15T12:12:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Removing from 9.0.0, as this is not critical for 9.0 and the SChannel team is currently busy with higher priority investigations.",
                                           "updatedAt":  "2024-07-15T12:12:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JZtp7",
                                           "createdAt":  "2024-08-22T16:52:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "removing blocking-clean-ci as it has not failed in 30 days\r\n\r\n24-Hour Hit Count | 7-Day Hit Count | 1-Month Count\r\n-- | -- | --\r\n0 | 0 | 0\r\n",
                                           "updatedAt":  "2024-08-22T16:52:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jVnQT",
                                           "createdAt":  "2025-03-20T12:49:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKxuqg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2025-03-20T14:30:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ViktorHofer",
                                                                               "createdAt":  "2025-03-20T20:07:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This failed again in #113416 windows-Debug-x64-coreclr_release-Windows.Amd64.Server2022.Open.\n\nFrom https://helixr1107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-113416-merge-2f216bd0c68a49be87/System.Net.Security.Tests/3/console.734dc56a.log?helixlogtype=result:\n```\n    System.Net.Security.Tests.SslStreamTlsResumeTests.ClientDisableTlsResume_Succeeds(testClient: True) [FAIL]\n      TLS session resumed in round $2\n      Stack Trace:\n        /_/src/libraries/System.Net.Security/tests/FunctionalTests/SslStreamAllowTlsResumeTests.cs(99,0): at System.Net.Security.Tests.SslStreamTlsResumeTests.ClientDisableTlsResume_Succeeds(Boolean testClient)\n        --- End of stack trace from previous location ---\n```",
                                           "updatedAt":  "2025-03-20T12:50:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68ZLrN",
                                           "createdAt":  "2025-08-06T15:52:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Fixed by https://github.com/dotnet/runtime/pull/113604",
                                           "updatedAt":  "2025-08-06T15:52:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68ZX-C",
                                           "createdAt":  "2025-08-06T16:09:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEdbosQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ManickaP",
                                                                               "createdAt":  "2025-08-07T07:52:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "liveans",
                                           "body":  "\u003e Fixed by [#113604](https://github.com/dotnet/runtime/pull/113604)\n\nThis test is still disabled\nhttps://github.com/dotnet/runtime/blob/3057101c0479ff67b389d5a578b3e25cc8b8512a/src/libraries/System.Net.Security/tests/FunctionalTests/SslStreamAllowTlsResumeTests.cs#L37-L38",
                                           "updatedAt":  "2025-08-06T16:09:29Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "SslStreamTlsResumeTests.ClientDisableTlsResume_Succeeds failed in CI",
        "labels":  [
                       "area-System.Net.Security",
                       "disabled-test",
                       "test-run-core",
                       "tracking-external-issue",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103536",
        "createdAt":  "2024-06-16T08:15:37Z",
        "number":  103536,
        "author":  "jborean93",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-25T17:58:46Z",
        "body":  "### Description\r\n\r\nCurrently the [NegotiateAuthentication](https://learn.microsoft.com/en-us/dotnet/api/system.net.security.negotiateauthentication?view=net-8.0) class reports errors behind a status code enum [NegotiateAuthenticationStatusCode](https://learn.microsoft.com/en-us/dotnet/api/system.net.security.negotiateauthenticationstatuscode?view=net-8.0). This might be ok for common errors like `InvalidCredential` but in the case of unknown errors it becomes `GenericFailure`.\r\n\r\nA specific example is when there is a clock skew that is too great for Kerberos, the call to `GetOutgoingBlob` returned a null byte array with a status code of `GenericFailure`. I had to resort to using Python to replicate the same call to retrieve the GSSAPI error details and figure out why it was failing\r\n\r\n```\r\nMajor (851968):  Miscellaneous failure (see text), Minor (2529638949): Clock skew too great\r\n```\r\n\r\nBeing able to get the major/minor error codes as well as their messages can provide a lot of context as to why authentication failed. Considering how opaque Kerberos can be when something goes wrong this would be very helpful for people trying to use it.\r\n\r\nI\u0027m unsure what this would look like as we cannot change `GetOutgoingBlob` to raise an exception normally but maybe a `GetLastError()` or a boolean overload that can be used to change it to raise an exception? Some thought into what the exception structure or error details would look like is needed as SSPI only has the 1 error code vs GSSAPI with a major and minor code.\r\n\r\n### Reproduction Steps\r\n\r\nI don\u0027t have a generic reproducer as this isn\u0027t a bug in the code, just what I see as something missing from the public API.\r\n\r\n### Expected behavior\r\n\r\nSee description\r\n\r\n### Actual behavior\r\n\r\nSee description\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Known Workarounds\r\n\r\nNothing I know off, maybe some hooking into the event source that logs the internal exceptions that are fired.\r\n\r\n### Configuration\r\n\r\nThis specific error is from macOS\u0027 GSS.Framework, I\u0027m unsure if Heimdal actual or MIT krb5 has another error code for the clock skew issue.\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgoMNKA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6BahIN",
                                           "createdAt":  "2024-06-16T08:16:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-16T08:16:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BdBVj",
                                           "createdAt":  "2024-06-16T20:28:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Two thoughts:\r\n- We can probably map this specific error code better.\r\n- There\u0027s a tracing log which can be [enabled](https://github.com/filipnavara/httpclienttest/blob/9d3336a9aed944dbbdef8d0c4dc4007ea1163255/Program.cs#L33-L78) and which should totally contain those details. Not sure how verbose it is today, so if something is missing we should fix it.\r\n\r\nThe current status codes roughly map to the major error codes in GSSAPI. The API design was driven by the idea that you would recognize some of the codes and possibly take a different code path. They are not very well suited for logging. Logging was intentionally done through tracing APIs because the current uses of `NegotiateAuthentication` are hidden behind other API layers (eg. `HttpClient`, `SmtpClient`, `NegotiateStream`). ",
                                           "updatedAt":  "2024-06-16T20:29:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BdSHy",
                                           "createdAt":  "2024-06-16T23:41:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jborean93",
                                           "body":  "Can the event details to track be documented on the class? I can understand that this might be low level for the typical use case but for people wanting to use it directly, not knowing the underlying error messages reported by the underlying library can be quite challenging when trying to figure out why.",
                                           "updatedAt":  "2024-06-16T23:41:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BuiHa",
                                           "createdAt":  "2024-06-18T16:01:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SteveSyfuhs",
                                           "body":  "This is more of an FYI to inform any API decisions, but Windows usage of `GetLastError` in SSPI code is explicitly undefined so there\u0027s no guarantee it returns anything meaningful. I bring this up as a warning that exposing a similar API here may be confusing. I recommend any error code be part of the call itself, as maybe an overloaded out param `GetOutgoingBlob(..., out int substatus)` and if absolutely necessary maybe keep a stack of the returned error tuples `stack\u003c(int result, int substatus)\u003e` or some similar mapping. Trying to reason about what \"last\" is, is super complicated out of context.\r\n\r\nEdit: and while I\u0027m here, the substatus is often something protocol-specific so it would be super helpful to tell what protocol negotiated that error in the first place.",
                                           "updatedAt":  "2024-06-18T16:02:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BvZpv",
                                           "createdAt":  "2024-06-18T18:10:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jborean93",
                                           "body":  "\u003e Trying to reason about what \"last\" is, is super complicated out of context.\r\n\r\nThat is a good point, this request was more of a request to get the native status code and message from the underlying native call. Which on SSPI would be the return value from AcquireCredentialsHandle/InitializeSecurityContext/AcceptSecurityContext/etc. For GSSAPI it would be the major and minor code with the GSSAPI provided message for those status codes. I\u0027m not the biggest fan of the get last model personally I was more spitballing a way to get that information considering the current code doesn\u0027t throw an exception but returns a generic enum value rather than the native details.",
                                           "updatedAt":  "2024-06-18T18:10:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cgw0o",
                                           "createdAt":  "2024-06-25T17:58:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Triage: there is a room for improvement, not critical for 9.0",
                                           "updatedAt":  "2024-06-25T17:58:28Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "NegotiateAuthentication - Provide method to get error messages",
        "labels":  [
                       "area-System.Net.Security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104385",
        "createdAt":  "2024-07-03T17:06:21Z",
        "number":  104385,
        "author":  "deryaza",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-10-31T20:29:37Z",
        "body":  "### Background and motivation\n\nFrom what I understand, the delegated credentials are retrieved in the last parameter of this invocation: \r\nhttps://github.com/dotnet/runtime/blob/main/src/native/libs/System.Net.Security.Native/pal_gssapi.c#L415C1-L426C1\r\n\r\nSo, as I can tell there is no way to use those since they are discarded.\n\n### API Proposal\n\nMake RemoteIdentity property return something like:\r\n\r\n```c#\r\nnamespace System.Security.Principal\r\n{\r\n    public class GssDelegatedIdentity : GenericIdentity\r\n    {\r\n        public GssDelegatedIdentity(string name, string type, SafeHandle credentialsHandle) : base(name, type)\r\n        {\r\n            CredentialsHandle = credentialsHandle;\r\n        }\r\n\r\n        public SafeHandle CredentialsHandle { get; }\r\n    }\r\n}\r\n```\r\n\r\nand options to accept:\r\n\r\n```diff\r\nnamespace System.Net.Security\r\n{\r\n    public class NegotiateAuthenticationClientOptions\r\n    {\r\n+        public IIdentity? DelegatedIdentity { get; set; }\r\n    }\r\n}\r\n```\n\n### API Usage\n\n```c#\r\n\r\nNegotiateAuthentication negotiateAuthentication = new(new NegotiateAuthenticationServerOptions()\r\n{\r\n    RequiredImpersonationLevel = TokenImpersonationLevel.Delegation,\r\n});\r\n\r\n// auth loop\r\n\r\nIIdentity negotiateAuthenticationRemoteIdentity = negotiateAuthentication.RemoteIdentity;\r\nif (negotiateAuthenticationRemoteIdentity is not GssDelegatedIdentity gssIdentity)\r\n{\r\n    throw new();\r\n}\r\n\r\nNegotiateAuthentication clientAuth = new(new NegotiateAuthenticationClientOptions()\r\n{\r\n    AllowedImpersonationLevel = TokenImpersonationLevel.Delegation,\r\n    TargetName = \"foo\",\r\n    DelegatedIdentity = gss\r\n});\r\n\r\n// auth loop\r\n\r\n```\n\n### Alternative Designs\n\nProbably instead of adding `NegotiateAuthenticationClientOptions.DelegatedIdentity`  `Thread.CurrentPrincipal` could be used, but I think it\u0027s not as good probably.\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkhOjvA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6DiVL9",
                                           "createdAt":  "2024-07-03T17:08:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-03T17:08:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E7gH2",
                                           "createdAt":  "2024-07-16T07:15:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Triage: we usually don\u0027t add features that are available only on particular platform unless we have a strong justification. I will tentatively put this to future for now, we might consider adding this if there are enough upvotes.",
                                           "updatedAt":  "2024-07-16T07:15:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E-yx2",
                                           "createdAt":  "2024-07-16T14:23:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODp-a4Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2024-07-16T14:43:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "deryaza",
                                           "body":  "This is sad :(\r\n\r\nWhile this API is designed for a specific platform, it will still offer functionality similar to WindowsIdentity on other platforms which still provides a bit more consistent experience across different environments. Plus, if we are talking about delegation, this API (that can be changed) will provide an abstract way of using WindowsIdentity delegation functionality abstracting it to IIdentity (because no need to cast it to WindowsIdentity and calling RunImpersonated method, just assigning it to DelegatedIdentity  in NegotiateAuthenticationClientOptions). @rzikm ",
                                           "updatedAt":  "2024-07-16T14:23:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6R8zpk",
                                           "createdAt":  "2024-10-30T23:06:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "It seems like only interesting part of the `IIdentity` is `Name`. Do you know if we can consistently get it across supported platforms @filipnavara ? I\u0027m not convinced we _should_ expose any of the internal handles. But maybe I misunderstood the ask. Certainly the `RunImpersonated` will not work on Unix AFAIK. ",
                                           "updatedAt":  "2024-10-30T23:06:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SEgdP",
                                           "createdAt":  "2024-10-31T19:23:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deryaza",
                                           "body":  "Perhaps me including ```GssDelegatedIdentity``` was a bit confusing. For my scenario, it\u0027s acceptable to make it internal to dotnet. My main request is to implement the capability to pass ```DelegatedIdentity```, enabling the use of a delegated handle for another authentication request. For instance, in npgsql, there currently isn\u0027t a way to pass client credentials (be it Linux, Windows, or other) that have been delegated to a server (Linux), which then authenticates to a PostgreSQL database on behalf of the client. For reference npgsql code: https://github.com/npgsql/npgsql/blob/main/src/Npgsql/Internal/NpgsqlConnector.Auth.cs#L332-L363",
                                           "updatedAt":  "2024-10-31T19:23:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SEptM",
                                           "createdAt":  "2024-10-31T19:47:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I\u0027m not sure we can produce something that can be used independently for another authentication. Can Kerberos.Net do something like that @SteveSyfuhs? (and if so would that also work for NTLM?)",
                                           "updatedAt":  "2024-10-31T19:47:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SE1Eh",
                                           "createdAt":  "2024-10-31T20:17:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SteveSyfuhs",
                                           "body":  "If I\u0027m understanding correctly the intent is to just make it so when a middlebox has received an authenticated context via Negotiate, let the stack then delegate that identity across the wire downstream. E.g. the canonical SQL Delegation model. I suspect you\u0027d want to hide all of the implementation details and very much make it something explicit like `[await] identity.RunImpersonated([async] () =\u003e { /* next hop off box as impersonated user */ })` otherwise this leads to some funny ASP.NET request lifetime behaviors.\n\nIncidentally, yes, Kerberos.NET does handle this but it needs to control the acceptance of the Kerberos AP-REQ, otherwise it can\u0027t get the necessary keys to trigger the delegation: https://github.com/dotnet/Kerberos.NET/blob/790b08f45e7c7cfd48f0e14cabe188f90825aa0d/Bruce/CommandLine/KerberosConstrainedDelegationCommand.cs#L77-L114\n\nThat makes it slightly less generic for things like third party APIs wanting to call into the core framework to do auth, unless the framework APIs expose some interfaces to BYO-auth.\n\nNTLM has never supported delegation (that\u0027s why back in the day you\u0027d get errors that anonymous auth failed when trying to connect to e.g. SQL, because browser-\u003eweb negotiated NTLM instead of Kerberos).",
                                           "updatedAt":  "2024-10-31T20:17:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SE3GZ",
                                           "createdAt":  "2024-10-31T20:22:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deryaza",
                                           "body":  "\u003e I suspect you\u0027d want to hide all of the implementation details and very much make it something explicit like `[await] identity.RunImpersonated([async] () =\u003e { /* next hop off box as impersonated user */ })` otherwise this leads to some funny ASP.NET request lifetime behaviors.\n\nThe thing is that linux can\u0027t impersonate user on level of a thread, so the only way to wire downstream is to pass delegated_cred_handle to gss_init_sec_context. (https://www.gnu.org/software/gss/reference/gss-api.html#gss-init-sec-context and last parameter of https://www.gnu.org/software/gss/reference/gss-api.html#gss-accept-sec-context)\n\n(identity.RunImpersonated is working now on windows if you upcast Identity to WindowsIdentity)",
                                           "updatedAt":  "2024-10-31T20:24:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SE6O8",
                                           "createdAt":  "2024-10-31T20:29:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD49X1w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "deryaza",
                                                                               "createdAt":  "2024-10-31T20:32:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "SteveSyfuhs",
                                           "body":  "Sure, I\u0027m being handwavy about the implementation specifically. My point was that API-wise it\u0027s probably unwise to build something that looks like it will have an unbounded lifetime. That\u0027s how the Windows implementation works today and in order to make that identity available across an entire session the token is bound to the TCP socket (or was, I don\u0027t know how ASP.NET handles it these days). That has big perf consequences so it\u0027s better to be explicit about scope. Alternatively, the Kerberos.NET library can be used such that any intermediate identity can be stored in an application session and be rehydrated as necessary for anything needed on the wire.",
                                           "updatedAt":  "2024-10-31T20:29:36Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "[API Proposal]: Provide a way to get delegated credentials handle (linux client -\u003e linux server scenario)",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net.Security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107695",
        "createdAt":  "2024-09-06T09:43:19Z",
        "number":  107695,
        "author":  "DmitryNikiforovCoherent",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-12T19:09:08Z",
        "body":  "### Description\r\n\r\nAdded ssl pinning using network-security-config\r\n\r\nFor test change one letter of base 64 pin, but SslClientAuthenticationOptions.RemoteCertificateValidationCallback still pass SslPolicyErrors.None\r\n\r\n### Steps to Reproduce\r\n\r\n-  Added network_security_config.xml as AndroidResource `\u003cnetwork-security-config\u003e\r\n    \u003cdomain-config\u003e\r\n        \u003cdomain includeSubdomains=\"true\"\u003e{host}\u003c/domain\u003e\r\n        \u003cpin-set expiration=\"2025-03-21\"\u003e\r\n            \u003cpin digest=\"SHA-256\"\u003epin\u003c/pin\u003e\r\n        \u003c/pin-set\u003e\r\n    \u003c/domain-config\u003e\r\n\u003c/network-security-config\u003e` \r\n\r\n- Added SocketsHttpHandler with SslClientAuthenticationOptions.RemoteCertificateValidationCallback\r\n- I expect, that if I change base64 pin to incorrect, RemoteCertificateValidationCallback will be called with RemoteCertificateNameMismatch, as for IOS, but receive SslPolicyErrors.None\r\n\r\n### Link to public reproduction project repository\r\n\r\n_No response_\r\n\r\n### Version with bug\r\n\r\n8.0.70 SR7\r\n\r\n### Is this a regression from previous behavior?\r\n\r\nNot sure, did not test other versions\r\n\r\n### Last version that worked well\r\n\r\nUnknown/Other\r\n\r\n### Affected platforms\r\n\r\nAndroid\r\n\r\n### Affected platform versions\r\n\r\nAny android version\r\n\r\n### Did you find any workaround?\r\n\r\n_No response_\r\n\r\n### Relevant log output\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOi-UKtQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6LuXs0",
                                           "createdAt":  "2024-09-06T09:43:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "github-actions",
                                           "body":  "Hi I\u0027m an AI powered bot that finds similar issues based off the issue title.\n\nPlease view the issues below to see if they solve your problem, and if the issue describes your problem please consider closing this one and thumbs upping the other issue to help us prioritize it. Thank you!\n\n### Open similar issues:\n\n- [Bypass the certificate security check for localhost makes calls to valid https host throw exception (#22029)](https://github.com/dotnet/maui/issues/22029),  similarity score: 0.70\n\n### Closed similar issues:\n- [Maui -Android certificate pinning is not kicking in.. but works in ios (#21396)](https://github.com/dotnet/maui/issues/21396),  similarity score: 0.84\n\n\u003e Note: You can give me feedback by thumbs upping or thumbs downing this comment.",
                                           "updatedAt":  "2024-09-06T09:43:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LuXs-",
                                           "createdAt":  "2024-09-09T06:41:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "QianaJiao",
                                           "body":  "@DmitryNikiforovCoherent Could you share us a repo, I\u0027d like to verify it.",
                                           "updatedAt":  "2024-09-09T06:41:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LuXtI",
                                           "createdAt":  "2024-09-09T10:55:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RobTF",
                                           "body":  "We have the thumbprint in app config and use [`ServerCertificateCustomValidationCallback`](https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclienthandler.servercertificatecustomvalidationcallback?view=net-8.0) and that seems to work on all platforms.\r\n\r\nIs there a reason certificate pinning has been special cased into a separate config file etc.?",
                                           "updatedAt":  "2024-09-09T10:55:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LuXtQ",
                                           "createdAt":  "2024-09-09T14:40:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DmitryNikiforovCoherent",
                                           "body":  "@QianaJiao try to prepare demo soon. Just one note:\r\nTrying 2 httpclient options\r\n\r\n1. HttpClientHandler with ServerCertificateCustomValidationCallback, any sha256 pin(even correct) throw RemoteCertificateChainErrors, for all chains(try first certificate, intermediate and CA)\r\n2. SocketsHttpHandler with SslClientAuthenticationOptions.RemoteCertificateValidationCallback always returns SslPolicyErrors.None, even if pin incorrect\r\nAt the same time, ios works correctly for both cases\r\nCould you verify, maybe I do smth wrong?\r\n```\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\r\n\u003cnetwork-security-config\u003e\r\n    \u003cdomain-config\u003e\r\n        \u003cdomain includeSubdomains=\"true\"\u003e{host}\u003c/domain\u003e\r\n        \u003cpin-set\u003e\r\n            \u003cpin digest=\"SHA-256\"\u003eBase 64 pin\u003c/pin\u003e\r\n        \u003c/pin-set\u003e\r\n    \u003c/domain-config\u003e\r\n\u003c/network-security-config\u003e\r\n\r\n```\r\nBase 64 pin I receive from [ssllabs](https://www.ssllabs.com/) for my host\r\n![image](https://github.com/user-attachments/assets/de019bc2-3bf2-432d-9503-41a3b4faad8e)\r\n\r\n",
                                           "updatedAt":  "2024-09-09T14:40:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LuXtZ",
                                           "createdAt":  "2024-09-10T05:28:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "QianaJiao",
                                           "body":  "Thank you for your reply. I will continue to investigate after I get your demo.\r\nIn addition, have you noticed these 2 points?\r\n\r\n1. Ensure that the build action of the network_security_config.xml file is set to AndroidResource\r\n![image](https://github.com/user-attachments/assets/039aca23-cf3a-463b-a2ae-f5742381826b)\r\n2. Configure the networkSecurityConfig property on the application node in the Platforms\\Android\\AndroidManifest.xml file in your .NET MAUI app project\r\n\r\nHere are some documents that may also be useful to you\r\nhttps://learn.microsoft.com/en-us/dotnet/maui/data-cloud/local-web-services?view=net-maui-8.0#enable-clear-text-network-traffic-for-the-localhost-domain\r\nhttps://developer.android.google.cn/privacy-and-security/security-config",
                                           "updatedAt":  "2024-09-10T05:28:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LuXtg",
                                           "createdAt":  "2024-09-10T08:58:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DmitryNikiforovCoherent",
                                           "body":  "@QianaJiao \r\nYes, Build action is AndroidResource, network_security_config is mentioned in AndroidManifest.\r\nCould you check this? HttpClientService contains both cases, with HttpClientHandler and SocketsHttpHandler\r\nnetwork_security_config.xml contains correct and incorrect pin, please comment what you need\r\nI use api from https://api-ninjas.com/api/exercises, receive pins from https://www.ssllabs.com/ssltest/analyze.html?d=api.api%2dninjas.com\u0026s=3.168.86.93\u0026latest\r\n\r\n[Archive.zip](https://github.com/user-attachments/files/16943858/Archive.zip)\r\n",
                                           "updatedAt":  "2024-09-10T11:09:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LuXtw",
                                           "createdAt":  "2024-09-11T06:27:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "QianaJiao",
                                           "body":  "I can repro this issue on both Android and iOS. No matter which `pin` I comment, it will return SslPolicyErrors.None. \r\nI\u0027m not confident about my verification results. Could anyone help to take a look？",
                                           "updatedAt":  "2024-09-11T06:27:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LuXt9",
                                           "createdAt":  "2024-09-11T08:11:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DmitryNikiforovCoherent",
                                           "body":  "@QianaJiao  Sorry, on ios I haven\u0027t added ssl pinning, just on android(As ios works correct for me, haven\u0027t touched in demo). On android have you checked both button clicks?\r\n\u003cimg width=\"401\" alt=\"image\" src=\"https://github.com/user-attachments/assets/fe7995a3-0748-4250-9a43-109bf9a69d0f\"\u003e\r\nSocket Handler always works successfully, Http Handler always returns error",
                                           "updatedAt":  "2024-09-11T08:11:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LuXuH",
                                           "createdAt":  "2024-09-11T12:37:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jfversluis",
                                           "body":  "@jonathanpeppers is this Android or even runtime?",
                                           "updatedAt":  "2024-09-11T12:37:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LuXuP",
                                           "createdAt":  "2024-09-11T13:24:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "There is a bit of confusion on this thread, so I\u0027m not sure I follow what the problem is. Is there a sample that displays a problem?\r\n\r\nOne note:\r\n* Using `AndroidMessageHandler` (default), probably no `RemoteCertificateValidationCallback` would ever be called. It would be using the native Android http stack in that case.\r\n* Using `SocketsHttpHandler` (you\u0027d have to set `UseNativeHttpHandler=false` in your `.csproj`), `RemoteCertificateValidationCallback` should get called\r\n\r\n@simonrozsival might be able to help, if we think there is a runtime issue here.",
                                           "updatedAt":  "2024-09-11T13:24:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LuYAW",
                                           "createdAt":  "2024-09-11T16:55:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-11T16:55:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LuboS",
                                           "createdAt":  "2024-09-11T16:59:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @vitek-karas, @simonrozsival, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-11T16:59:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Lub5w",
                                           "createdAt":  "2024-09-11T16:59:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-11T16:59:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6L0bUl",
                                           "createdAt":  "2024-09-12T09:42:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DmitryNikiforovCoherent",
                                           "body":  "\u003e There is a bit of confusion on this thread, so I\u0027m not sure I follow what the problem is. Is there a sample that displays a problem?\r\n\u003e \r\n\u003e One note:\r\n\u003e \r\n\u003e * Using `AndroidMessageHandler` (default), probably no `RemoteCertificateValidationCallback` would ever be called. It would be using the native Android http stack in that case.\r\n\u003e * Using `SocketsHttpHandler` (you\u0027d have to set `UseNativeHttpHandler=false` in your `.csproj`), `RemoteCertificateValidationCallback` should get called\r\n\u003e \r\n\u003e @simonrozsival might be able to help, if we think there is a runtime issue here.\r\n\r\nIn demo I used HttpClient Implementation: Managed(HttpClientHandler)\r\n\u003cimg width=\"498\" alt=\"image\" src=\"https://github.com/user-attachments/assets/e9dcc27d-5603-4998-bcc8-d4a689220113\"\u003e\r\n\r\nBoth SslClientAuthenticationOptions.RemoteCertificateValidationCallback and HttpClientHandler.ServerCertificateCustomValidationCallback called, if make a request via them\r\n\r\nDemo attached in this comment\r\nhttps://github.com/dotnet/runtime/issues/107695#issuecomment-2344188768",
                                           "updatedAt":  "2024-09-12T09:43:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6L5Qq1",
                                           "createdAt":  "2024-09-12T19:09:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "simonrozsival",
                                           "body":  "@DmitryNikiforovCoherent thanks for reporting this issue. I looked into it today and I think I have a rough idea where the problems in both the `HttpClientHandler`(internally implemented via `AndroidMessageHandler`) and `SocketsHttpHandler` originate.\r\n\r\nCurrently the only workaround is to manually check the certificate hash in the `ServerCertificateValidationCallback`/`RemoteCertificateValidationCallback` instead of using `network_security_config.xml`. I would point out that Google doesn\u0027t recommend using certificate pinning in Android apps (see https://developer.android.com/privacy-and-security/security-ssl#Pinning).",
                                           "updatedAt":  "2024-09-12T19:09:05Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "Maui -Android certificate pinning using network-security-config ignore incorrect pin",
        "labels":  [
                       "area-System.Net.Security",
                       "os-android"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109236",
        "createdAt":  "2024-10-25T17:50:22Z",
        "number":  109236,
        "author":  "RightFootConsulting",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC80E1Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2024-11-20T09:53:10Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-11-13T14:19:45Z",
        "body":  "### Description\n\nTesting out a new .Net web service and using Swagger to initiate a Post to an endpoint yields the error below.  The error contains no useful information to indicate what needs to be done to correct the issue and there seems to be no online resource with any hints that would help a developer to resolve the issue and become unblocked.\n\n```bash\nSystem.TypeInitializationException: The type initializer for \u0027NetSecurityNative\u0027 threw an exception.\n ---\u003e System.TypeInitializationException: The type initializer for \u0027GssInitializer\u0027 threw an exception.\n ---\u003e System.InvalidOperationException: Operation is not valid due to the current state of the object.\n   at Interop.NetSecurityNative.GssInitializer..cctor()\n   --- End of inner exception stack trace ---\n   at Interop.NetSecurityNative..cctor()\n   --- End of inner exception stack trace ---\n   at Interop.NetSecurityNative.AcquireAcceptorCred(Status\u0026 minorStatus, SafeGssCredHandle\u0026 outputCredHandle)\n   at Microsoft.Win32.SafeHandles.SafeGssCredHandle.CreateAcceptor()\n   at System.Net.NegotiateAuthenticationPal.UnixNegotiateAuthenticationPal..ctor(NegotiateAuthenticationServerOptions serverOptions)\n   at System.Net.NegotiateAuthenticationPal.Create(NegotiateAuthenticationServerOptions serverOptions)\n   at System.Net.Security.NegotiateAuthentication..ctor(NegotiateAuthenticationServerOptions serverOptions)\n   at Microsoft.AspNetCore.Authentication.Negotiate.NegotiateState..ctor()\n   at Microsoft.AspNetCore.Authentication.Negotiate.NegotiateStateFactory.CreateInstance()\n   at Microsoft.AspNetCore.Authentication.Negotiate.NegotiateHandler.HandleRequestAsync()\n   at Microsoft.AspNetCore.Authentication.Negotiate.NegotiateHandler.HandleRequestAsync()\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)\n\n```\n\n### Reproduction Steps\n\nFollow the steps in this tutorial\n\nhttps://learn.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-8.0\u0026tabs=visual-studio\n\n up to the point where it says to do the following:\n\n```bash\nThe Swagger page /swagger/index.html is displayed. Select GET \u003e Try it out \u003e Execute. The page displays:\n\nThe [Curl](https://curl.haxx.se/) command to test the WeatherForecast API.\nThe URL to test the WeatherForecast API.\nThe response code, body, and headers.\nA drop-down list box with media types and the example value and schema.\n```\nHit the execute button.\n\n### Expected behavior\n\nOne would expect the results that are documented in this Microsoft tutorial.\n\nIf there were an issue then the error message would be able to be mapped by Google to some sort of action plan for identifying what is needed to resolve the issue.\n\n### Actual behavior\n\nYou get a 500 internal server error, and a useless message that when you Google it, you end up with a closed issue that does not provide any insight into how to go about fixing such an issue.\n\n```bash\nSystem.TypeInitializationException: The type initializer for \u0027NetSecurityNative\u0027 threw an exception.\n ---\u003e System.TypeInitializationException: The type initializer for \u0027GssInitializer\u0027 threw an exception.\n ---\u003e System.InvalidOperationException: Operation is not valid due to the current state of the object.\n   at Interop.NetSecurityNative.GssInitializer..cctor()\n   --- End of inner exception stack trace ---\n   at Interop.NetSecurityNative..cctor()\n   --- End of inner exception stack trace ---\n   at Interop.NetSecurityNative.AcquireAcceptorCred(Status\u0026 minorStatus, SafeGssCredHandle\u0026 outputCredHandle)\n   at Microsoft.Win32.SafeHandles.SafeGssCredHandle.CreateAcceptor()\n   at System.Net.NegotiateAuthenticationPal.UnixNegotiateAuthenticationPal..ctor(NegotiateAuthenticationServerOptions serverOptions)\n   at System.Net.NegotiateAuthenticationPal.Create(NegotiateAuthenticationServerOptions serverOptions)\n   at System.Net.Security.NegotiateAuthentication..ctor(NegotiateAuthenticationServerOptions serverOptions)\n   at Microsoft.AspNetCore.Authentication.Negotiate.NegotiateState..ctor()\n   at Microsoft.AspNetCore.Authentication.Negotiate.NegotiateStateFactory.CreateInstance()\n   at Microsoft.AspNetCore.Authentication.Negotiate.NegotiateHandler.HandleRequestAsync()\n   at Microsoft.AspNetCore.Authentication.Negotiate.NegotiateHandler.HandleRequestAsync()\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)\n\nHEADERS\n=======\nAccept: text/plain\nConnection: keep-alive\nHost: localhost:33581\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36 Edg/130.0.0.0\nAccept-Encoding: gzip, deflate, br, zstd\nAccept-Language: en-US,en;q=0.9\nAuthorization: Negotiate YHkGBisGAQUFAqBvMG2gMDAuBgorBgEEAYI3AgIKBgkqhkiC9xIBAgIGCSqGSIb3EgECAgYKKwYBBAGCNwICHqI5BDdOVExNU1NQAAEAAACXsgjiCQAJAC4AAAAGAAYAKAAAAAoAXVgAAAAPVFJBREVSV09SS0dST1VQ\nReferer: https://localhost:33581/swagger/index.html\nsec-ch-ua-platform: \"Windows\"\nsec-ch-ua: \"Chromium\";v=\"130\", \"Microsoft Edge\";v=\"130\", \"Not?A_Brand\";v=\"99\"\nsec-ch-ua-mobile: ?0\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: cors\nSec-Fetch-Dest: empty\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nPick a different technology stack and don\u0027t use .Net\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOk3KMVw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Rmhvl",
                                           "createdAt":  "2024-10-28T22:30:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "There is not much info to start with @RightFootConsulting? What platform are you running on? There are hints of Windows (like the headers and VS)  but the code that fails would only run on Unix. \n\nThe GSSAP is conceptually part of OS so it is very difficult for .NET to suggest specific action. On Linux the implementation is provided as part of krb5 package. That should be installed if needed as part of dependency processing. On Windows that should just work as the requested libraries are always there. \n\nIf the problem persist you should share some sample code and repro steps so we can investigate. \n",
                                           "updatedAt":  "2024-10-28T22:30:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6S_flN",
                                           "createdAt":  "2024-11-09T08:30:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RightFootConsulting",
                                           "body":  "Running on Windows 11.  It turns out that installing Maui in the Visual Studio also requires you to install build tools, It doesn\u0027t automatically do that.",
                                           "updatedAt":  "2024-11-09T08:30:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TcoxX",
                                           "createdAt":  "2024-11-13T14:19:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I don\u0027t know much abut the Maui workflow. But it seems to me that you are trying to run wrong binaries on wrong OS. ",
                                           "updatedAt":  "2024-11-13T14:19:43Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "The type initializer for \u0027NetSecurityNative\u0027 throws meaningless exception rendering corrective action impossible.",
        "labels":  [
                       "area-System.Net.Security",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109569",
        "createdAt":  "2024-11-05T22:13:22Z",
        "number":  109569,
        "author":  "jsturtevant",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8b8Iw==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "pavelsavara",
                                            "createdAt":  "2024-11-06T08:35:05Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-05-28T17:52:46Z",
        "body":  "There is a proposal for adding [tls support in wasi-sockets](https://github.com/WebAssembly/wasi-sockets/pull/104).  After adding [socket support](https://github.com/dotnet/runtime/pull/106977) it makes sense to enable more scenarios with were tls is required.  One instance would be using SqlClient.\n\nWe\u0027ve done a few prototypes to figure out how this might work with dotnet:\n\n- The first was an implementation using the [public API but done out of tree](https://github.com/dicej/dotnet-wasi-tls/tree/main).  We used that to prove we could use it with [minimal changes](https://github.com/jsturtevant/wasi-sql/tree/master) to [SqlClient](https://github.com/jsturtevant/SqlClient/tree/wasi-sql).\n\n- The second is where I attempted to use the existing `SSLStream` design and [PAL layer with the wasi-tls interfaces](https://github.com/jsturtevant/runtime/tree/wasi-tls).  I was able to get it to successfully work but found several issues with the approach.  \n \nIn the second approach there is a mismatch between the level of the wasi-tls design and the existing `SslStream` implementation.  wasi-tls operates on a transparent stream delegating the handling to the Host.  In dotnet\u0027s `SslStream`  implementation, the `SslStream`  class handles all of the I/O, tls frame processing, and sends the frames one by one to the SSL context.  Since we don\u0027t have that level of the SSL context exposed via the wasi-tls interface, and all the processing is happening asynchronously on the host side there is an issue of knowing when all the content has been sent to the host a fully processed by the SSL context and sent back to the guest to be forwarded on the socket layer.\n\nI can think of a few of options to move forward (maybe more if I am missing something, which I might be):\n\n1. Make changes to the wasi-tls interface to expose a different type of interface that would support the current approach in dotnet\u0027s `SslStream` class.  The downside to this is that thee wasi-tls interface is simple and easy to understand as designed today.  It keeps the details out of the guest implementation and lets the host handle the complexity. \n2. Create a special case in the `SslStream` library for WASI that by-passes the current PAL abstraction around SSL and fills in the parts that make sense for wasi-tls in the public API.  This would be somewhat similar to the first prototype implementation and be similar to `httphandler`.\n3. Refactor parts of the current PAL SSL abstraction to support this SSL stream. Downside is that all of the PAL layer is sync and we also still have the challenge of know when we\u0027ve sent enough information to the underlying SSL context to get a response back.  \n\nLooking for some feedback on the various approaches.  \n\n/cc @pavelsavara @dicej ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOreA2kQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Shebb",
                                           "createdAt":  "2024-11-05T22:13:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-05T22:13:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Sh1Bi",
                                           "createdAt":  "2024-11-05T23:01:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dicej",
                                           "body":  "I\u0027m in favor of Option 2 since it allows us to keep `wasi:sockets/tls` high-level, giving us more flexibility to implement it efficiently and securely in the common case where the host is also managing the I/O.  That saves us from having to pipe both the ciphertext and the plaintext across the guest/host boundary, leaving the details of framing and (re)handshaking to the host.",
                                           "updatedAt":  "2024-11-05T23:01:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SkWzg",
                                           "createdAt":  "2024-11-06T08:36:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-06T08:36:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SvkNK",
                                           "createdAt":  "2024-11-07T11:03:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD56aUw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jsturtevant",
                                                                               "createdAt":  "2024-11-07T16:39:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dicej",
                                                                               "createdAt":  "2024-11-07T21:35:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "I also prefer option 2 but I would like to hear more about the gaps. \nWhich C# APIs are not possible or difficult to implement ?\nDoes SSLStream on Andoid have similar limitations ?\n\nI suggest that we have conf call about it in week of 17/11",
                                           "updatedAt":  "2024-11-07T11:03:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6V6qea",
                                           "createdAt":  "2024-12-03T17:32:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD9rBuA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pavelsavara",
                                                                               "createdAt":  "2024-12-03T18:12:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "maraf",
                                                                               "createdAt":  "2024-12-05T08:45:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jsturtevant",
                                           "body":  "I\u0027ve started to work on option 2 and will report back once I have something to look at",
                                           "updatedAt":  "2024-12-03T17:33:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XO91K",
                                           "createdAt":  "2024-12-11T21:59:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD-t2Tw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "pavelsavara",
                                                                               "createdAt":  "2024-12-12T09:57:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jsturtevant",
                                           "body":  "I\u0027ve got option 2, working on a branch: https://github.com/dotnet/runtime/compare/main...jsturtevant:runtime:wasi-tls-2.  \n\nI am not sure if its worth opening a PR for now since its using a custom [host implementation](https://github.com/jsturtevant/dotnet-wasi-tls/tree/passthrough) not wasmtime. \n\nI think the next steps would be to help [WebAssembly/wasi-sockets#100](https://github.com/WebAssembly/wasi-sockets/issues/100) move forward.",
                                           "updatedAt":  "2024-12-11T21:59:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6t3bse",
                                           "createdAt":  "2025-05-28T16:47:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "@pavelsavara, is this still planned for 10.0.0? ",
                                           "updatedAt":  "2025-05-28T16:47:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6t4DaR",
                                           "createdAt":  "2025-05-28T17:52:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e [@pavelsavara](https://github.com/pavelsavara), is this still planned for 10.0.0?\n\nno",
                                           "updatedAt":  "2025-05-28T17:52:45Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[WASI] Options for implementing wasi-tls proposal",
        "labels":  [
                       "arch-wasm",
                       "area-System.Net.Security",
                       "os-wasi"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111099",
        "createdAt":  "2025-01-05T18:23:49Z",
        "number":  111099,
        "author":  "jborean93",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC95gEA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "filipnavara",
                                            "createdAt":  "2025-01-06T09:12:54Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-02-28T01:10:46Z",
        "body":  "### Background and motivation\n\nThe [NegotiateAuthentication](https://learn.microsoft.com/en-us/dotnet/api/system.net.security.negotiateauthentication?view=net-9.0) class is a nice manager wrapper around SSPI/GSSAPI and deals with all the API differences and platform quirks to be able to authenticate using Negotiate/Kerberos/NTLM auth and also sign/seal messages after authentication. Some protocols do not use the builtin signing/sealing mechanisms that is done through SSPI/GSSAPI but instead uses the GSSAPI \"session key\". An example of this is SMB where after authenticating it derives the encryption/signing key from that key https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-smb2/7fd079ca-17e6-4f02-8449-46b606ea289c\n\n\u003e Session.SessionKey MUST be set to the first 16 bytes of the cryptographic key queried from the GSS protocol for this authenticated context. If the cryptographic key is less than 16 bytes, it is right-padded with zero bytes. If Connection.Dialect is “3.1.1” and Connection.CipherId is AES-256-CCM or AES-256-GCM, Session.FullSessionKey MUST be set to the cryptographic key as queried from the GSS protocol for this authenticated context. For information about how this is calculated for Kerberos authentication using Generic Security Service Application Programming Interface (GSS-API), see [[MS-KILE]](https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-kile/2a32282e-dd48-4ad9-a542-609804b02cc9) section [3.1.1.2](https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-kile/7a7b081d-c0c6-46f4-acbf-a439664270b8). For information about how this is calculated for NTLM authentication using GSS-API, see [[MS-NLMP]](https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-nlmp/b38c36ed-2804-4868-a9ff-8dd3182128e4) section [3.1.5.1](https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-nlmp/1f18ef3b-7d62-4e1a-a8a7-6bc0607fad70).\n\nIf I want to implement my own SMB, or other protocol, implementation that uses this key in .NET I cannot use `NegotiateAuthentication` because it doesn\u0027t expose any public way of retrieving the session key. I\u0027ll have to setup my own PInvokes and call GSSAPI/SSPI myself.\n\nTo retrieve this key on SSPI you would call [QueryContextAttributesW](https://learn.microsoft.com/en-us/windows/win32/api/sspi/nf-sspi-querycontextattributesw) with `ulAttribute` being `SECPKG_ATTR_SESSION_KEY` (`9`) and a `pBuffer` being a pointer to [SecPkgContext_SessionKey](https://learn.microsoft.com/en-us/windows/win32/api/sspi/ns-sspi-secpkgcontext_sessionkey). Once copied or no longer needed the `SecPkgContext_SessionKey.SessionKey` is passed to [FreeContextBuffer](https://learn.microsoft.com/en-us/windows/win32/api/sspi/nf-sspi-freecontextbuffer) to free the memory.\n\nTo retrieve this key on GSSAPI you would call [gss_inquire_sec_context_by_oid](https://github.com/krb5/krb5/blob/04b22c1c2dfbf7954b6cb114527a50a95ebccad3/src/lib/gssapi/generic/gssapi_ext.h#L154-L158) with the OID `GSS_C_INQ_SSPI_SESSION_KEY` (`1.2.840.113554.1.2.2.5.5`). Once copied or no longer needed the `data_set` is passed to [gss_release_buffer_set](https://github.com/krb5/krb5/blob/04b22c1c2dfbf7954b6cb114527a50a95ebccad3/src/lib/gssapi/generic/gssapi_ext.h#L150-L152) to free the memory. While `gss_inquire_sec_context_by_oid` is an extension method it has been part of the three major GSSAPI implementations since:\n\n+ MIT krb5 - since 1.7 in 2009\n+ Heimdal - since 1.5 in 2011\n+ GSS.Framework (macOS) - See above, was forked after Heimdal 1.5\n\n### API Proposal\n\n```csharp\npublic partial class NegotiateAuthentication\n{\n    // Original API here for historical purposes\n    // public byte[] GetSessionKey();\n\n    public void DeriveKeyFromSessionKey(Action\u003cReadOnlySpan\u003cbyte\u003e\u003e keyDerivationFunction);\n    public void DeriveKeyFromSessionKey\u003cTState\u003e(Action\u003cReadOnlySpan\u003cbyte\u003e, TState\u003e keyDerivationFunction, TState state);\n    public TReturn DeriveKeyFromSessionKey\u003cTReturn\u003e(Func\u003cReadOnlySpan\u003cbyte\u003e, TReturn\u003e keyDerivationFunction);\n    public TReturn DeriveKeyFromSessionKey\u003cTState, TReturn\u003e(Func\u003cReadOnlySpan\u003cbyte\u003e, TState, TReturn\u003e keyDerivationFunction, TState state);\n}\n```\n\n\n### API Usage\n\n```csharp\nvar a = new NegotiateAuthentication(new NegotiateAuthenticationClientOptions());\n\n// Perform authentication\nwhile (!a.IsAuthenticated)\n{\n    a.GetOutgoingBlob(...);\n    ...\n}\n\n// After authentication, retrieve session key\nbyte[] sessionKey = a.GetSessionKey();\n\n// Derive signing key from session key based on MS-SMB2\nSpan\u003cbyte\u003e signingKey = stackallock byte[16];\nusing SP800108HmacCounterKdf smb3kdf = new(key, HashAlgorithmName.SHA256);\nsmb3kdf.DeriveKey(\n    \"SMBSigningKey\\0\"u8,\n    preauthHash,  // Hash of preceding SMB messages\n    signingKey);\n```\n\n\n### Alternative Designs\n\nA potential alternative is to have the caller pass in a `Span\u003cbyte\u003e` and instead of returning the `byte[]` the code copies the session key to the provided span if large enough.\n\n```csharp\npublic partial class NegotiateAuthentication\n{\n    public void GetSessionKey(Span\u003cbyte\u003e destination);\n    public bool TryGetSessionKey(Span\u003cbyte\u003e destination, out int bytesWritten);\n}\n```\n\nA downside to this approach is that I\u0027m unsure if the key size can be queried from GSSAPI/SSPI and that the sizes may change depending on the environment/protocol used. For example NTLM will always stay at 16 bytes but Kerberos is based on the etype used, i.e 32 bytes for an AES256 based etype but 16 bytes for an AES128 based etype.\n\n### Risks\n\nThe main risk is really just expanding the support area of SSPI/GSSAPI. The documentation should stress that this key is not normally meant to be used directly and is exposed for compatibility with implementations that require this key like SMB.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoE4hCA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6ZSTOa",
                                           "createdAt":  "2025-01-05T18:24:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-security, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-05T18:24:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZSf_-",
                                           "createdAt":  "2025-01-05T21:58:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-05T21:58:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZV5GM",
                                           "createdAt":  "2025-01-06T09:20:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "The request generally sounds reasonable.\n\nIn the managed NTLM implementation we have the key calculated as `exportedSessionKey`  [here](https://github.com/dotnet/runtime/blob/dae890906431049d32e24d498a1d707a441a64a8/src/libraries/System.Net.Security/src/System/Net/NegotiateAuthenticationPal.ManagedNtlm.cs#L668-L675). We do not keep a copy around at the moment so a little refactoring would be necessary.",
                                           "updatedAt":  "2025-01-06T09:20:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Zdc1_",
                                           "createdAt":  "2025-01-07T08:11:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jborean93",
                                           "body":  "@filipnavara do you have any thoughts as to whether it should a `byte[]` or use the `Span\u003cbyte\u003e` destination example? I like the idea if avoiding an extra copy but not having a way to know the size of the key beforehand can potentially be problematic.",
                                           "updatedAt":  "2025-01-07T08:11:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Zduiu",
                                           "createdAt":  "2025-01-07T08:46:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEBULAg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jborean93",
                                                                               "createdAt":  "2025-01-07T10:10:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I generally prefer Spans. We already have some prior art in `NegotiateAuthentication` to use `IBufferWriter\u003cT\u003e` to solve the size issue. Unfortunately that\u0027s cumbersome to use for one-off calls.\n\nThere are two things we need to consider - performance and security.\n\nI am only concerned with the buffer reuse for repetitive calls. This one seems more like a one-off and saving a few allocations on this code path is not going to make a big difference.\n\nOn the other hand, the key is a sensitive material. With Spans you can place it in non-relocatable memory (such as `stackalloc`) and ensure that it gets zeroed after use. Such guarantee cannot be made about arrays which can get relocated by GC and leave a copy of the key in memory.\n\n(I wish we had `Secret\u003cT\u003e` that\u0027s still in limbo at draft specification stage)",
                                           "updatedAt":  "2025-01-07T08:49:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Zeetc",
                                           "createdAt":  "2025-01-07T10:15:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jborean93",
                                           "body":  "Could another option be something similar to the [string.Create with the SpanAction overload](https://learn.microsoft.com/en-us/dotnet/api/system.string.create?view=net-9.0#system-string-create-1(system-int32-0-system-buffers-spanaction((system-char-0)))), in this case providing a [ReadOnlySpanAction\u003cbyte\u003e](https://learn.microsoft.com/en-us/dotnet/api/system.buffers.readonlyspanaction-2?view=net-9.0). That way the action is provided with a `ReadOnlySpan\u003cbyte\u003e` the points to the SSPI/GSSAPI structure value. The delegate is responsible for copying or using the key for whatever purpose it has and after running it can be freed like normal. In the case of SMB the KDF function only needs a read only copy to generate the subkeys used for signing and encryption.\n\nI’m unsure if that’s overkill but it does seem like it solves the performance, secret, and not knowing the key size problem.",
                                           "updatedAt":  "2025-01-07T10:17:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Zehoz",
                                           "createdAt":  "2025-01-07T10:20:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEBUS7g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jborean93",
                                                                               "createdAt":  "2025-01-07T10:24:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Could another option be something similar to the [string.Create with the SpanAction overload](https://learn.microsoft.com/en-us/dotnet/api/system.string.create?view=net-9.0#system-string-create-1(system-int32-0-system-buffers-spanaction((system-char-0)))), in this case providing a [ReadOnlySpanAction](https://learn.microsoft.com/en-us/dotnet/api/system.buffers.readonlyspanaction-2?view=net-9.0).\n\nI am not sure I like it from API design standpoint (delegate overhead, etc.). Perhaps @bartonjs can point us to some guidance.\n\nFrom the security point of view it\u0027s tempting though. We can avoid copying the key around and we can enforce that the memory gets cleared after use.",
                                           "updatedAt":  "2025-01-07T10:20:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZiLZM",
                                           "createdAt":  "2025-01-07T17:37:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "Logically it seems like the \"I\u0027ll let you see a ReadOnlySpan of my data\" Encode overload we added to AsnWriter: https://github.com/dotnet/runtime/issues/75759\n\nHere it\u0027d probably be something like\n\n```C#\npublic TReturn DeriveKeyFromSessionKey\u003cTReturn\u003e(Func\u003cReadOnlySpan\u003cbyte\u003e, TReturn\u003e keyDerivationFunction);\npublic TReturn DeriveKeyFromSessionKey\u003cTState, TReturn\u003e(Func\u003cReadOnlySpan\u003cbyte\u003e, TState, TReturn\u003e keyDerivationFunction, TState state);\n```\n\nmight need some sort of `HasSessionKey` to go with it?",
                                           "updatedAt":  "2025-01-07T17:37:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZiUyR",
                                           "createdAt":  "2025-01-07T17:58:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jborean93",
                                           "body":  "Just in case I\u0027m wrong is the main difference between [ReadOnlySpanAction](https://learn.microsoft.com/en-us/dotnet/api/system.buffers.readonlyspanaction-2?view=net-9.0) and what you are proposing is that yours allows a return value from the delegate?\n\n\u003e might need some sort of HasSessionKey to go with it?\n\nAFAIK all the implemented negotiate protocols and C APIs support this functionality so I don\u0027t think it would add too much benefit.",
                                           "updatedAt":  "2025-01-07T18:29:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Zj-rT",
                                           "createdAt":  "2025-01-07T22:26:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "`ReadOnlySpanAction` is a legacy from when ReadOnlySpan couldn\u0027t be used in generics.  Otherwise, it\u0027s just the difference between Func and Action... mine allows a return, and ReadOnlySpanAction wouldn\u0027t.\n\nIt looked like the SMB thing would be something like\n\n```C#\nusing SP800108HmacCounterKdf smb3kdf = a.DeriveKeyFromSessionKey(key =\u003e new(key, HashAlgorithmName.SHA256));\n\nSpan\u003cbyte\u003e signingKey = stackallock byte[16];\n\nsmb3kdf.DeriveKey(\n    \"SMBSigningKey\\0\"u8,\n    preauthHash,  // Hash of preceding SMB messages\n    signingKey);\n```\n\nOr to keep it more enclosed:\n\n```C#\nSpan\u003cbyte\u003e signingKey = stackallock byte[16];\na.DeriveKeyFromSessionKey(\n  static (key, state) =\u003e\n  {\n    using SP800108HmacCounterKdf smb3kdf = a.DeriveKeyFromSessionKey(key, HashAlgorithmName.SHA256);\n    smb3Kdf.DeriveKey(\"SMBSigningKey\\0\"u8, state.Item1, state.Item2);\n    return 0;\n  },\n  (preauthHash, signingKey));\n```\n\nFor the later, Action would be nicer, so maybe you want to overload it for both Func and Action.",
                                           "updatedAt":  "2025-01-07T22:26:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZkSvV",
                                           "createdAt":  "2025-01-07T23:37:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jborean93",
                                           "body":  "Yea in the SMB case I think having the `Action` overload would be nicer so both would be good. It\u0027s technically more complex as there are 4 keys to derive (depending on the SMB dialect negotiated) and session key could potentially be truncated/padded to 16 bytes depending on the SMB cipher negotiated. But either a Func or Action would still fit the requirements here.\n\nJust for clarity the proposal would be to add the following?\n\n```csharp\npublic void DeriveKeyFromSessionKey(Action\u003cReadOnlySpan\u003cbyte\u003e\u003e keyDerivationFunction);\npublic void DeriveKeyFromSessionKey\u003cTState\u003e(Action\u003cReadOnlySpan\u003cbyte\u003e, TState\u003e keyDerivationFunction, TState state);\npublic TReturn DeriveKeyFromSessionKey\u003cTReturn\u003e(Func\u003cReadOnlySpan\u003cbyte\u003e, TReturn\u003e keyDerivationFunction);\npublic TReturn DeriveKeyFromSessionKey\u003cTState, TReturn\u003e(Func\u003cReadOnlySpan\u003cbyte\u003e, TState, TReturn\u003e keyDerivationFunction, TState state);\n```\n\nDoes it make sense to have the first overload, Action without a `TState` argument?",
                                           "updatedAt":  "2025-01-07T23:38:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZkbUS",
                                           "createdAt":  "2025-01-08T00:15:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEBa59A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jborean93",
                                                                               "createdAt":  "2025-01-08T00:23:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "\u003e Does it make sense to have the first overload, Action without a TState argument?\n\nI can certainly imagine people using it with captures... `a.DeriveKeyFromSessionKey(key =\u003e other.SetKey(key))`, and they\u0027d be better off as `a.DeriveKeyFromSessionKey(static (key, state) =\u003e state.SetKey(key), other)`... but it\u0027s not like it really hurts.  They\u0027re all the same in the end.\n\n```C#\npublic void DeriveKeyFromSessionKey(Action\u003cReadOnlySpan\u003cbyte\u003e\u003e keyDerivationFunction) =\u003e\n  DeriveKeyFromSessionKey(static (key, state) =\u003e state(key), keyDerivationFunction);\n\npublic void DeriveKeyFromSessionKey\u003cTState\u003e(Action\u003cReadOnlySpan\u003cbyte\u003e, TState\u003e keyDerivationFunction, TState state) =\u003e\n  DeriveKeyFromSessionKey(\n    static (key, state)\n    {\n      state.Kdf(key, state.State);\n      return 0;\n    },\n    (Kdf: keyDerivationFunction, State: state));\n\npublic TReturn DeriveKeyFromSessionKey\u003cTReturn\u003e(Func\u003cReadOnlySpan\u003cbyte\u003e, TReturn\u003e keyDerivationFunction) =\u003e\n  DeriveKeyFromSessionKey(static (key, state) =\u003e state(key), keyDerivationFunction);\n\npublic TReturn DeriveKeyFromSessionKey\u003cTState, TReturn\u003e(Func\u003cReadOnlySpan\u003cbyte\u003e, TState, TReturn\u003e keyDerivationFunction, TState state)\n{\n   // OK, this one needs to do something :)\n}\n```",
                                           "updatedAt":  "2025-01-08T00:17:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Zkdcp",
                                           "createdAt":  "2025-01-08T00:24:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOECaeUQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-01-08T05:36:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "wfurt",
                                                                               "createdAt":  "2025-01-14T16:29:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jborean93",
                                           "body":  "Cool, I\u0027ll update the original post with that proposal. I\u0027m also happy to try and look at implementing this unless @filipnavara or anything else wants to hold off or do it themselves.",
                                           "updatedAt":  "2025-01-08T00:24:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aZ48J",
                                           "createdAt":  "2025-01-14T16:31:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I\u0027m fine with the proposal assuming we can get it working on at least Windows \u0026 Linux without much hassle. Once we agree on the shape I can push it through the review process. ",
                                           "updatedAt":  "2025-01-14T16:31:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gTiEI",
                                           "createdAt":  "2025-02-28T01:10:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jborean93",
                                           "body":  "Looks like I jumped the gun and opened a PR https://github.com/dotnet/runtime/pull/113003 as I assumed this was approved but was not so sorry about that. Is there anything I need to do to start that review process or is it just wait until it comes up?",
                                           "updatedAt":  "2025-02-28T01:10:44Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "[API Proposal]: Expose SessionKey on NegotiateAuthentication",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net.Security",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111639",
        "createdAt":  "2025-01-20T20:22:07Z",
        "number":  111639,
        "author":  "tarekgh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-28T17:14:57Z",
        "body":  "### Description\n\nhttps://github.com/dotnet/runtime/pull/111504/checks?check_run_id=35807668189\nhttps://helixr18s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-111504-merge-1928f94a14a8400bac/System.Net.Security.Unit.Tests/3/console.992e600c.log?helixlogtype=result\n\nFailing Configuration\n[Ubuntu.2410.Arm64.Open](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=921621\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=24372348\u0026resultId=159226)\n\n```\nException Message\nAssert.Equal() Failure: Values differ\nExpected: Unsupported\nActual:   ContinueNeeded\nCallStack\n   at System.Net.Security.Tests.NegotiateAuthenticationTests.Package_Unsupported_NTLM() in /_/src/libraries/System.Net.Security/tests/UnitTests/NegotiateAuthenticationTests.cs:line 94\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/mono/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.Mono.cs:line 22\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```\n\n\n\n### Reproduction Steps\n\nEnable the test on CI and watch the Ubuntu 24 leg test results.\n\n### Expected behavior\n\nThe test should pass on Ubuntu 24.\n\n### Actual behavior\n\nThe test is failing.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOm0rYFw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6bKWQ0",
                                           "createdAt":  "2025-01-20T20:22:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-20T20:22:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bKY5K",
                                           "createdAt":  "2025-01-20T20:32:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "whit run is that @tarekgh ? I don\u0027t see such queue in runtime ....",
                                           "updatedAt":  "2025-01-20T20:32:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bKavC",
                                           "createdAt":  "2025-01-20T20:39:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEDXI0A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-01-20T20:59:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2025-01-21T07:55:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I think the problem is here: https://github.com/dotnet/runtime/blob/4c224ab16d287c17dbc54236638db91266071465/src/libraries/Common/tests/System/Net/Capability.Security.Unix.cs#L21\n\nIn NTLM used to be broken with OpenSSL 3.x but I guess it is fixed e.g. https://github.com/gssapi/gss-ntlmssp/pull/72 finally rolled in. (or there is some other fix to make it work) \n\noriginal runtime issue was https://github.com/dotnet/runtime/issues/67353",
                                           "updatedAt":  "2025-01-20T20:41:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bKbua",
                                           "createdAt":  "2025-01-20T20:42:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e whit run is that @tarekgh ? I don\u0027t see such queue in runtime ....\n\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=921621\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=24372348\u0026resultId=159226\nhttps://github.com/dotnet/runtime/pull/111504",
                                           "updatedAt":  "2025-01-20T20:43:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bStNt",
                                           "createdAt":  "2025-01-21T17:43:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027linkable-framework\u0027: @eerhardt, @vitek-karas, @LakshanF, @sbomer, @joperezr, @marek-safar\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-21T17:43:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bStgX",
                                           "createdAt":  "2025-01-21T17:44:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "Ubuntu 24 is now in main. We should investigate as time permits. ",
                                           "updatedAt":  "2025-01-21T17:44:08Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "System.Net.Security.Tests.NegotiateAuthenticationTests.Package_Unsupported_NTLM fails on Ubuntu 24 arm64",
        "labels":  [
                       "area-System.Net.Security",
                       "disabled-test"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111902",
        "createdAt":  "2025-01-28T13:47:46Z",
        "number":  111902,
        "author":  "simonrozsival",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-iN-g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "matouskozak",
                                            "createdAt":  "2025-01-28T13:49:06Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-16T12:19:05Z",
        "body":  "This is a follow-up to https://github.com/dotnet/runtime/pull/111858 and #111312 \nPossibly related to https://github.com/dotnet/runtime/pull/104726\n\nThe `System.Net.Security.Tests.SslStreamNetworkStreamTest.SslStream_RandomSizeWrites_OK` test timeouts with all inputs when tested on Android API levels 21-27 for some reason. The test succeeds with all inputs on Android API levels 28-34.\n\n/cc @matouskozak @wfurt @rzikm ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnBuiYQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6cG6AZ",
                                           "createdAt":  "2025-01-28T13:47:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @vitek-karas, @simonrozsival, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-28T13:47:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cG6Jh",
                                           "createdAt":  "2025-01-28T13:48:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-28T13:48:09Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[Android] Investigate SslStream_RandomSizeWrites_OK test timeouts on Android API levels 21-27",
        "labels":  [
                       "area-System.Net.Security",
                       "os-android"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112529",
        "createdAt":  "2025-02-13T16:36:30Z",
        "number":  112529,
        "author":  "alanssitis",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODD_lcQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alanssitis",
                                            "createdAt":  "2025-06-16T14:43:11Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-28T20:17:24Z",
        "body":  "### Background and motivation\n\nAdd an API that exposes the functionality outlined in [RFC 5705: Keying Material Exporters](https://datatracker.ietf.org/doc/html/rfc5705).\n\nThis is useful as it will allow my company to drop an external library to use this functionality.\n\n### API Proposal\n\nupdated by @rzikm\n\n```csharp\nnamespace System.Net.Security;\n\npublic partial class SslStream {\n    public void ExportKeyingMaterial(string label, Span\u003cbyte\u003eoutput);\n\n    public void ExportKeyingMaterial(string label, ReadOnlySpan\u003cbyte\u003e context, Span\u003cbyte\u003e output);\n}\n```\n\n### API Usage\n\n```csharp\nawait using var sslStream = new SslStream(someStream, true);\n\n// Initialize and finish SSL handshake\nawait sslStream.AuthenticateAsServerAsync(...);\n// or as client\n// await sslStream.AuthenticateAsClientAsync(...);\n\n// Use the export keying material API\nbyte[] keyingMaterial = new byte[128];\nsslStream.ExportKeyingMaterial(\"showcase key\", keyingMaterial);\nConsole.WriteLine(Convert.ToHexString(keyingMaterial));\n```\n\n### Alternative proposal\n\nUnless I am mistaken, the `label` string is supposed to be an ASCII string, so we can accept it as ROS\u003cbyte\u003e\n\n```csharp\nnamespace System.Net.Security;\n\npublic partial class SslStream {\n    public void ExportKeyingMaterial(ReadOnlySpan\u003cbyte\u003e label, Span\u003cbyte\u003eoutput);\n\n    public void ExportKeyingMaterial(ReadOnlySpan\u003cbyte\u003e label, ReadOnlySpan\u003cbyte\u003e context, Span\u003cbyte\u003e output);\n}\n```\n\n#### API Usage\n\nsince labels are usually literal constants in code, UTF-8 string literals can be used\n\n```csharp\nbyte[] keyingMaterial = new byte[128];\nsslStream.ExportKeyingMaterial(\"showcase key\"u8, keyingMaterial);\nConsole.WriteLine(Convert.ToHexString(keyingMaterial));\n```\n\n### Risks\n\nPlatform support:\n- Windows - needs verification (should be implementable as per \nhttps://learn.microsoft.com/en-us/windows/win32/api/schannel/ns-schannel-secpkgcontext_keyingmaterialinfo, https://learn.microsoft.com/en-us/windows/win32/secauthn/querycontextattributes--schannel, see SECPKG_ATTR_KEYING_MATERIAL)\n- Linux - implementable (https://docs.openssl.org/master/man3/SSL_export_keying_material/)\n- OSX - Not implemented for Secure Transport (package used to back SslStream implementaion)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuocv4Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6eYSVT",
                                           "createdAt":  "2025-02-13T16:39:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-13T16:39:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eYkkS",
                                           "createdAt":  "2025-02-13T17:08:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "AFAIK this is not feasible on Windows at this moment. ",
                                           "updatedAt":  "2025-02-13T17:08:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eZ2U3",
                                           "createdAt":  "2025-02-13T19:53:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "We should also add these APIs:\n\n```csharp\nnamespace System.Net.Security;\n\npublic partial class SslStream {\n    public void ExportKeyingMaterial(string label, Span\u003cbyte\u003e output);\n\n    public void ExportKeyingMaterial(string label, ReadOnlySpan\u003cbyte\u003e context, Span\u003cbyte\u003e output);\n}\n```",
                                           "updatedAt":  "2025-02-13T19:53:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ed08a",
                                           "createdAt":  "2025-02-14T08:40:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGbh-A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wfurt",
                                                                               "createdAt":  "2025-02-14T18:03:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rzikm",
                                           "body":  "It seems this might be viable on Windows as well, see\n\nhttps://learn.microsoft.com/en-us/windows/win32/api/schannel/ns-schannel-secpkgcontext_keyingmaterialinfo\n\nWe should test it out before proceeding, but the docs mention the specific RFC so I am hopeful.\n\nOpenSSL is more straightforward:\n\nOpenSSL: https://docs.openssl.org/master/man3/SSL_export_keying_material/\n\nThere seem to be similar functions on Apple crypto (but not in Secure Transport package we are currently using), not sure how feasible this is for Android\n\nFrom API perspective, the RFC specifies\n\n      \n         The exporter takes three input values:\n      \n         o  a disambiguating label string,\n      \n         o  a per-association context value provided by the application using\n            the exporter, and\n      \n         o  a length value.\n\nIn general, we tend to prefer Span-based APIs now as they are more flexible, so proposition from `teo-tsirpanis` seems like the better choice.",
                                           "updatedAt":  "2025-02-14T09:12:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6i1FOV",
                                           "createdAt":  "2025-03-18T06:29:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcScuw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2025-07-29T07:58:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "skizzerz",
                                           "body":  "Having this feature would be useful for me as well. Right now I\u0027m trying to work around it with P/Invoke but having an API baked in would be nicer, especially due to the libssl naming mess for linux support.\n\nAndroid: https://developer.android.com/reference/android/net/ssl/SSLEngines#exportKeyingMaterial(javax.net.ssl.SSLEngine,%20java.lang.String,%20byte[],%20int) is available in API levels 31+ (seems coreclr targets 21 as the minimum SDK version, however, based on the documentation I found)\n\nmacOS: https://developer.apple.com/documentation/security/sec_protocol_metadata_create_secret_with_context(_:_:_:_:_:_:) although as noted above, this is using different APIs than the Secure Transport package. #1979 seems relevant here, since moving to the Network API would allow use of the `sec_protocol_metadata_create_secret_with_context()` function needed for this feature.",
                                           "updatedAt":  "2025-03-18T06:29:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64cMAc",
                                           "createdAt":  "2025-07-20T09:39:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neustradamus",
                                           "body":  "Any progress on it?",
                                           "updatedAt":  "2025-07-20T09:39:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66hy_h",
                                           "createdAt":  "2025-07-28T20:17:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "no, but it should be doable in 11.0 if we get API approved. ",
                                           "updatedAt":  "2025-07-28T20:17:23Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[API Proposal]: Export Keying Material for TLS sessions",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net.Security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113729",
        "createdAt":  "2025-03-20T14:14:25Z",
        "number":  113729,
        "author":  "DeagleGross",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-30T09:33:40Z",
        "body":  "### Background and motivation\n\nThere is an effort to expose TLS client hello message in ASP.NET: see [API Proposal: Expose TLS client hello message](https://github.com/dotnet/aspnetcore/issues/60805?reload=1). We have already figured out the implementation for HTTP.SYS as underlying server (see [feat: fetch TLS client hello message from HTTP.SYS](https://github.com/dotnet/aspnetcore/pull/60806).\n\nThe ask here is to have a similar API to fetch this data from SslStream in case ASP.NET uses Kestrel server.\n\n### API Proposal\n\nIs should be a method / property to fetch the raw bytes of the tls client hello message.\n\n```diff\npublic partial class SslStream\n{\n+    public ReadOnlySpan\u003cbyte\u003e GetTlsClientHelloBytes();\n}\n```\n\nor since we probably dont want to keep the data increasing the memory footprint, we can introduce a callback, which will be invoked during SslStream TLS client hello message processing:\n\n```diff\n\n+public delegate void TlsHelloMessageCallback(object sender, ReadOnlyMemory\u003cbuffer\u003e);\n\npublic partial class SslClientAuthenticationOptions\n{\n+    TlsHelloMessageCallback ClientHelloBytesCallback { get; set; };\n\n+    TlsHelloMessageCallback ServerHelloBytesCallback { get; set; };\n}\n\npublic partial class SslServerAuthenticationOptions\n{\n+    TlsHelloMessageCallback ClientHelloBytesCallback { get; set; };\n\n+    TlsHelloMessageCallback ServerHelloBytesCallback { get; set; };\n}\n\n```\n\n\n### API Usage\n\n```csharp\nSslStream sslStream = ...;\nvar tlsClientHelloBytes = sslStream.GetTlsClientHelloBytes();\n```\n\nin case of callback:\n```csharp\nvoid Configure(SslServerAuthenticationOptions options)\n{\n   options.ClientHelloBytesCallback += bytes =\u003e ParseAndValidate(bytes);\n}\n```\n\n### Risks\n\nthere is no risk here - it is just an accessor to underlying data if needed for the user.\n\nAPI probably will not be used by majority, and it will not be increasing costs of standard use cases, since users will not be passing a callback to invoke.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqVwIUQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6jWkyf",
                                           "createdAt":  "2025-03-20T14:14:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-20T14:14:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jXztd",
                                           "createdAt":  "2025-03-20T15:50:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKwVZg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DeagleGross",
                                                                               "createdAt":  "2025-03-20T17:11:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rzikm",
                                           "body":  "I don\u0027t think we want an API which would require us to store the hello message bytes internally, thus increasing the memory footprint for all users, regardless of whether they would use the feature or not. Moreso if the target audience of the feature is very narrow.\n\nThe approach I would find more permissible is some sort of callback registered in Ssl(Server/Client)AuthenticationOptions that would give you the message as ReadOnlyMemory\u003cbyte\u003e (or ReadOnlySpan\u003cbyte\u003e). The buffer would be valid only during the callback so you can copy the data out if you need.\n\nSimilarly, we might want to also expose the TLS ServerHello message to be symmetric.\n\nWould something like below also work for your scenario?\n\n```diff\n\n+public delegate void TlsHelloMessageCallback(object sender, ReadOnlyMemory\u003cbyte\u003e);\n\npublic partial class SslClientAuthenticationOptions\n{\n+    TlsHelloMessageCallback ClientHelloBytesCallback { get; set; };\n\n+    TlsHelloMessageCallback ServerHelloBytesCallback { get; set; };\n}\n\npublic partial class SslServerAuthenticationOptions\n{\n+    TlsHelloMessageCallback ClientHelloBytesCallback { get; set; };\n\n+    TlsHelloMessageCallback ServerHelloBytesCallback { get; set; };\n}\n\n```\n\nThe only downside I see in the above might be that we need to figure out how those should behave for QUIC, I don\u0027t think MsQuic API gives access to those, so we might have to leave them unimplemented until they do :/",
                                           "updatedAt":  "2025-03-24T15:51:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jYHn2",
                                           "createdAt":  "2025-03-20T16:18:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "What would the behavior of these APIs be in the case of renegotiation? Would the callbacks fire for the initial handshake or also renegotiations?",
                                           "updatedAt":  "2025-03-20T16:18:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jYVOi",
                                           "createdAt":  "2025-03-20T16:39:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "\u003eI don\u0027t think we want an API which would require us to store the hello message bytes internally,\n\nAlso bear in mind that PQC handshakes are much larger and will, eventually, start getting traction soon. X25519MLKEM-Hybrid Hellos are going to be kilobytes in size. This is another point in making it pay to play with callbacks.",
                                           "updatedAt":  "2025-03-20T16:39:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jYgGt",
                                           "createdAt":  "2025-03-20T16:55:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "What are the expected use cases for this (especially in the context of Kestrel)?\nIt sounds like every user would need to have a parser to interpret the bytes anyway.\n\nFor example one use case I know of is to parse the hellos in order to reject/ratelimit connections before performing the handshake. In that case you want to know it before you call into `SslStream`.\nYARP does ship a `TlsFrameHelper` utility for this (\"borrowed\" from this repo):\nhttps://github.com/dotnet/yarp/blob/main/src/ReverseProxy/Utilities/TlsFrameHelper.cs\nwhere you can plug that into a connection middleware in ASP.NET and short-circuit before the TLS middleware.",
                                           "updatedAt":  "2025-03-20T16:55:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jY5V6",
                                           "createdAt":  "2025-03-20T17:37:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DeagleGross",
                                           "body":  "\u003e What are the expected use cases for this (especially in the context of Kestrel)?\n\nIn case of kestrel we know that users **at least** want to have a raw byte data of the tls client hello message.\n\n\u003e What would the behavior of these APIs be in the case of renegotiation\n\nI suspect it should be called for renegotiation as well.\n\n\u003e you can plug that into a connection middleware in ASP.NET and short-circuit before the TLS middleware\n\nMiha, it makes sense, but does it listen to any data on the wire (not only tls)? \nIf we decide to go this route, we should probably expose `TlsFrameHelper` because it does not make sense to have a similar or identical parsers in 3 different places (runtime / YARP / aspnetcore)",
                                           "updatedAt":  "2025-03-20T17:39:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jZLCS",
                                           "createdAt":  "2025-03-20T18:08:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEK1KAA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2025-03-21T07:30:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "\u003e In case of kestrel we know that users at least want to have a raw byte data of the tls client hello message.\n\nWhat I was curious about is the why. What are they expected to do with it. Log it? Throw to stop the handshake?\nYou\u0027d presumably also need something like the API YARP already ships to interpret it.\n\n\u003e does it listen to any data on the wire (not only tls)?\n\nThe idea is that you do something like this\n```c#\noptions.ListenAnyIP(443, listenOptions =\u003e\n{\n    listenOptions.Use(async (context, next) =\u003e\n    {\n        // Read context.Transport.Input\n        // Call TlsFrameHelper.TryGetFrameInfo\n        // Do whatever you want with the info, short-circuit, log, etc.\n        // Advance the context.Transport.Input pipe (not consuming anything)\n\n        // Call next middleware (https)\n        await next();\n    });\n\n    listenOptions.UseHttps();\n});\n```\nThere\u0027s no extra overhead after reading that first client hello frame.\n\n---\n\nWe could also make this simpler to consume on the YARP side, such that you\u0027d end up with something as simple as\n```diff\noptions.ListenAnyIP(443, listenOptions =\u003e\n{\n+   listenOptions.Use(async (context, next) =\u003e\n+   {\n+       var hello = await context.ParseClientHelloAsync(... more options ...);\n+       Console.WriteLine($\"SNI: {hello.TargetName}\");\n+       await next();\n+   });\n\n    listenOptions.UseHttps();\n});\n```\nOr similar.\nTracking issue on the YARP side for this: https://github.com/dotnet/yarp/issues/2128",
                                           "updatedAt":  "2025-03-21T13:18:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jsZzK",
                                           "createdAt":  "2025-03-23T17:31:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOELLRQw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DeagleGross",
                                                                               "createdAt":  "2025-03-24T12:10:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "fbrosseau",
                                           "body":  "\u003e the why\n\nServers are starting to implement this for in-depth defense against threats. [here is a nice blog post from cloudflare folks](https://blog.cloudflare.com/ja4-signals/)",
                                           "updatedAt":  "2025-03-23T17:33:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jyeZt",
                                           "createdAt":  "2025-03-24T12:11:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DeagleGross",
                                           "body":  "@MihaZupan the purpose of API is to have a view into TLS client hello and analyze the data anyhow. The use case we (ASP.NET team) are aware of would be solvable without a strongly-typed representation of the data: \"raw bytes\" would be sufficient enough and will be a good starting point (basically any user could use it to their desires). We dont want something like YARP\u0027s `TlsFrameHelper` yet (maybe later we will extend it).\n\nI think this is much more straightforward to have an API exposed where SslStream invokes a callback (for instance) when the TLS client hello message is detected, instead of building a separate middleware which will try to parse every single packet / data if SslStream internals is anyway doing the same job (it can simply invoke a callback if setup). Let me know if you think this is a non-convenient way to proceed.",
                                           "updatedAt":  "2025-03-24T12:11:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jz1vE",
                                           "createdAt":  "2025-03-24T14:12:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOELYJGA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2025-03-25T16:13:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I much prefer the approach YARP took and don’t think the SslStream should store anything. Providing the parser / and a callback seems like a much more performant approach.",
                                           "updatedAt":  "2025-03-24T14:12:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6j0Y0G",
                                           "createdAt":  "2025-03-24T14:57:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DeagleGross",
                                           "body":  "talked to @rzikm more (thanks!), and I added the proposed callback to the original description of issue.",
                                           "updatedAt":  "2025-03-24T14:57:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kau_L",
                                           "createdAt":  "2025-03-27T15:27:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEL-Wlw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "quixoticaxis",
                                                                               "createdAt":  "2025-03-27T23:37:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kevbry",
                                                                               "createdAt":  "2025-03-29T03:07:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "rzikm",
                                           "body":  "We have discussed this within the team and @MihaZupan has made a very good point, that if anyone would want to use the ClientHello message to do any kind of decision regarding whether to let the connection continue (i.e. mentioned fingerprint-based DOS protection), SslStream is too late for that and is unnecessarily inefficient (by the time we get to the calling the callback, we already allocated quite some memory both Managed and native)\n\nFurthermore, the callback does not give an opportunity to reject the connection (other than throwing exception), which could be fixed, but the above mentioned drawbacks still apply. So, for example, even such addition would not make it usable for YARP for any sort of TLS filtering.\n\nFrom what @MihaZupan posted, intercepting the ClientHello before passing it to SslStream is rather easy via the ASP.NET\u0027s Middleware model.\n\n\u003e  instead of building a separate middleware which will try to parse every single packet / data if SslStream internals is anyway doing the same job\n\nOut of curiosity, do subsequent ClientHello from renegotiation or ClientHelloRequest also enter the fingerprint calculation? If not, then only the first ever frame (or first few frames) needs to be parsed, not every frame in the connection.\n\nIf there are concerns about duplicating the TlsFrameHelper code, we can add it to the list of shared sources between runtime and ASP.NET (as we share e.g. HTTP header encoding/decoding code), but for your simple use case (just having the raw message bytes), the header is not too difficult to parse to identify the ClientHello portion. @MihaZupan also had an idea to make a TLS-filtering middleware as a shippable package in the future if it would be of any use.",
                                           "updatedAt":  "2025-03-27T15:27:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6k3gIU",
                                           "createdAt":  "2025-03-31T12:01:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DeagleGross",
                                           "body":  "thanks for your input @rzikm and @MihaZupan; updated [aspnetcore proposal](https://github.com/dotnet/aspnetcore/issues/60805) - I will come back here with the results of decision if we would need dotnet/runtime changes at all.\n\nPersonally, I think you are right and we can support it fully on aspnetcore side, but I still think once we would need to have a strongly-typed TLS client hello message representation, we will need to expose `TlsFrameHelper`. But that can come later.",
                                           "updatedAt":  "2025-03-31T12:01:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6pXAhR",
                                           "createdAt":  "2025-04-30T09:33:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Given the recent discussion above, I think this is no longer necessary to do this in .NET 10. Bumping down the priority until there is bigger demand",
                                           "updatedAt":  "2025-04-30T09:33:32Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "[API Proposal]: expose TLS client hello message in SslStream",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net.Security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114640",
        "createdAt":  "2025-04-14T17:37:13Z",
        "number":  114640,
        "author":  "rmannibucau",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-28T15:09:54Z",
        "body":  "### Description\n\nSame issue than https://github.com/dotnet/runtime/issues/103101\n\n### Reproduction Steps\n\nSee https://github.com/dotnet/runtime/issues/103101\n\n### Expected behavior\n\nIt just works since code is there (`new X509Certificate2(current.Export(X509ContentType.Pkcs12))` makes it working)\n\n### Actual behavior\n\nIt fails as in Same issue than https://github.com/dotnet/runtime/issues/103101\n\n### Regression?\n\nI do not know\n\n### Known Workarounds\n\nUsing `new X509Certificate2(current.Export(X509ContentType.Pkcs12))`  but it relies on obsolete code which is undesired\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqVwXRQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6nCYsj",
                                           "createdAt":  "2025-04-14T17:37:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-security, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-14T17:37:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nCaZ9",
                                           "createdAt":  "2025-04-14T17:40:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "As discussed in the linked issue #103101, this ephemeral key restriction comes from Windows, not .NET.\n\n\u003e Using `new X509Certificate2(current.Export(X509ContentType.Pkcs12))` but it relies on obsolete code which is undesired\n\nThe obsoletion message should direct you towards using the non-obsolete API. It should look something like this:\n\n```C#\nX509CertificateLoader.LoadPkcs12(current.Export(X509ContentType.Pkcs12), null);\n```",
                                           "updatedAt":  "2025-04-14T17:40:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nCdjt",
                                           "createdAt":  "2025-04-14T17:46:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rmannibucau",
                                           "body":  "@vcsjones \n\n\u003e The obsoletion message should direct you towards ...\n\nThanks, will check that!\n\n\u003e As discussed in the linked issue https://github.com/dotnet/runtime/issues/103101, this ephemeral key restriction comes from Windows, not .NET.\n\nI get it but there are two issues in .NET there:\n\n- if it can work it should be tried to cover more - for example when this exeption is thrown from a ssl handshake the conversion is worth a try as a fallback if you do not want to parse the cert upfront to try to do it upfront (which can be justified)\n- it is unlikely the `X509Certificate2.CreateFromPem*` doesn\u0027t throw any exception but it fails at handshake time (http client) if it is really not supported\n\nIndeed I\u0027d prefer to fix it with the fallback mode since it would make it more widely adopted. For example this case happens with minikube.\n\n\n\n",
                                           "updatedAt":  "2025-04-14T17:46:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nFKkO",
                                           "createdAt":  "2025-04-14T22:05:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-14T22:05:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6pXBdF",
                                           "createdAt":  "2025-04-30T09:34:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "There might be a way to make this work in more recent Windows versions, but it will require some investigation. I will see if we can do something in .NET 10",
                                           "updatedAt":  "2025-04-30T09:34:41Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "SslStream not working with ephemeral keys",
        "labels":  [
                       "area-System.Net.Security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115467",
        "createdAt":  "2025-05-12T06:57:53Z",
        "number":  115467,
        "author":  "rzikm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCQ8vg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "simonrozsival",
                                            "createdAt":  "2025-05-12T06:59:22Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-09-20T22:03:34Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=1034085\nBuild error leg or test failing: System.Net.Security.Tests.ClientAsyncAuthenticateTest.ClientAsyncAuthenticate_ConnectionInfoInCallback_DoesNotThrow\nPull request:\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md#how-to-create-a-known-issue-step-by-step).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": \"[FAIL] System.Net.Security.Tests.ClientAsyncAuthenticateTest.ClientAsyncAuthenticate_ConnectionInfoInCallback_DoesNotThrow\",\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1034085\r\n**Error message validated:** `[[FAIL] System.Net.Security.Tests.ClientAsyncAuthenticateTest.ClientAsyncAuthenticate_ConnectionInfoInCallback_DoesNotThrow`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 5/12/2025 6:58:52 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsXmHdg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6rIaaC",
                                           "createdAt":  "2025-05-12T06:58:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @vitek-karas, @simonrozsival, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-12T06:58:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rIaqi",
                                           "createdAt":  "2025-05-12T06:58:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-12T06:58:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rIbLv",
                                           "createdAt":  "2025-05-12T06:59:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "simonrozsival",
                                           "body":  "/cc @BrzVlad ",
                                           "updatedAt":  "2025-05-12T06:59:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rY8BD",
                                           "createdAt":  "2025-05-13T07:58:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrzVlad",
                                           "body":  "For future reference, started failing after https://github.com/dotnet/runtime/pull/115186. Failure example:\n\n```\nFailed tests:\n 05-08 18:42:34.963  2577  8178 I DOTNET  : 1) \t[FAIL] System.Net.Security.Tests.ClientAsyncAuthenticateTest.ClientAsyncAuthenticate_ConnectionInfoInCallback_DoesNotThrow   Test name: System.Net.Security.Tests.ClientAsyncAuthenticateTest.ClientAsyncAuthenticate_ConnectionInfoInCallback_DoesNotThrow\n 05-08 18:42:34.963  2577  8178 I DOTNET  :    Assembly:  [System.Net.Security.Tests, Version=10.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]\n 05-08 18:42:34.963  2577  8178 I DOTNET  :    Exception messages: System.Security.Authentication.AuthenticationException : Authentication failed, see inner exception.\n 05-08 18:42:34.963  2577  8178 I DOTNET  : ---- System.InvalidOperationException : This operation is only allowed using a successfully authenticated context.   Exception stack traces:    at System.Net.Security.SslStream.\u003cForceAuthenticationAsync\u003ed__157`1[[System.Net.Security.AsyncReadWriteAdapter, System.Net.Security, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext()\n 05-08 18:42:34.963  2577  8178 I DOTNET  :    at System.Net.Security.Tests.ClientAsyncAuthenticateTest.ClientAsyncSslHelper(EncryptionPolicy encryptionPolicy, SslProtocols clientSslProtocols, SslProtocols serverSslProtocols, RemoteCertificateValidationCallback certificateCallback) in /_/src/libraries/System.Net.Security/tests/FunctionalTests/ClientAsyncAuthenticateTest.cs:line 159\n 05-08 18:42:34.963  2577  8178 I DOTNET  :    at System.Net.Security.Tests.ClientAsyncAuthenticateTest.ClientAsyncSslHelper(EncryptionPolicy encryptionPolicy, SslProtocols clientSslProtocols, SslProtocols serverSslProtocols, RemoteCertificateValidationCallback certificateCallback) in /_/src/libraries/System.Net.Security/tests/FunctionalTests/ClientAsyncAuthenticateTest.cs:line 180\n 05-08 18:42:34.963  2577  8178 I DOTNET  :    at System.Net.Security.Tests.ClientAsyncAuthenticateTest.ClientAsyncAuthenticate_ConnectionInfoInCallback_DoesNotThrow() in /_/src/libraries/System.Net.Security/tests/FunctionalTests/ClientAsyncAuthenticateTest.cs:line 33\n 05-08 18:42:34.963  2577  8178 I DOTNET  : --- End of stack trace from previous location ---\n 05-08 18:42:34.963  2577  8178 I DOTNET  : ----- Inner Stack Trace -----\n 05-08 18:42:34.963  2577  8178 I DOTNET  :    at System.Net.Security.SslStream.ThrowNotAuthenticated()\n 05-08 18:42:34.963  2577  8178 I DOTNET  :    at System.Net.Security.SslStream.get_SslProtocol()\n 05-08 18:42:34.963  2577  8178 I DOTNET  :    at System.Net.Security.Tests.ClientAsyncAuthenticateTest.AllowAnyServerCertificateAndVerifyConnectionInfo(Object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) in /_/src/libraries/System.Net.Security/tests/FunctionalTests/ClientAsyncAuthenticateTest.cs:line 203\n 05-08 18:42:34.963  2577  8178 I DOTNET  :    at System.Net.Security.SslStream.VerifyRemoteCertificate(RemoteCertificateValidationCallback remoteCertValidationCallback, SslCertificateTrust trust, ProtocolToken\u0026 alertToken, SslPolicyErrors\u0026 sslPolicyErrors, X509ChainStatusFlags\u0026 chainStatus)\n 05-08 18:42:34.963  2577  8178 I DOTNET  :    at System.Net.Security.SslStream.VerifyRemoteCertificate()\n 05-08 18:42:34.963  2577  8178 I DOTNET  :    at System.Net.Security.SslStream.JavaProxy.VerifyRemoteCertificate(IntPtr sslStreamProxyHandle)\n```",
                                           "updatedAt":  "2025-05-13T07:58:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xeYd2",
                                           "createdAt":  "2025-06-16T17:59:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "removing blocking-clean-ci as it has not failed in 30 days\n\n24-Hour Hit Count | 7-Day Hit Count | 1-Month Count\n-- | -- | --\n0 | 0 | 0",
                                           "updatedAt":  "2025-06-16T17:59:25Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[Test failure] ClientAsyncAuthenticate_ConnectionInfoInCallback_DoesNotThrow on android",
        "labels":  [
                       "area-System.Net.Security",
                       "disabled-test",
                       "os-android",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116305",
        "createdAt":  "2025-06-04T14:56:50Z",
        "number":  116305,
        "author":  "rzikm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-04T17:37:17Z",
        "body":  "Following code\n\nhttps://github.com/dotnet/runtime/blob/49399d99e11d356c412c9fd2e25af3435abe2e13/src/libraries/System.Net.Security/src/System/Net/Security/SslStream.IO.cs#L341-L345\n\nwill make sure we send out a TLS alert when handshake fails to complete, however, (at least on Windows), this leads to indiscriminately sending out ProtocolVersion alerts even for other cases of errors, such as when the two parties cannot communicate because they don\u0027t possess a common cipher/sigalg, or because an invalid message was received. This may be misleading when attempting to debug TLS handshake errors.\n\nWe should attempt to reply with an alert that most closely resembles the type of error encountered.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOr0njCA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6vQnj6",
                                           "createdAt":  "2025-06-04T14:57:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-04T14:57:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vSeMI",
                                           "createdAt":  "2025-06-04T17:37:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEVZ-ow==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2025-06-05T06:09:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I wish we can ask schannel to do it. This was really just a quick plug to send _something_.  We could get smarter based on error code but that may need to go to Windows PAL....? ",
                                           "updatedAt":  "2025-06-04T17:37:16Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "SslStream indiscriminately uses ProtocolVersion TLS Alert for handshake failures",
        "labels":  [
                       "area-System.Net.Security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116365",
        "createdAt":  "2025-06-06T07:40:38Z",
        "number":  116365,
        "author":  "rzikm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODN5YiQ==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "Copilot",
                                            "createdAt":  "2025-09-02T13:14:29Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-09-02T13:14:26Z",
        "body":  "Suggested by bartonjs in https://github.com/dotnet/runtime/pull/116098#discussion_r2129309947\n\nWhen no keyFactory is provided, BuildPrivatePki hashes all the inputs to create a stable offset against whatever algorithms are available\n\nAssuming the problem is just that RSA-1024 was too small, we could change the size used in CertificateAuthority to use a preprocessor directive to know if it\u0027s the crypto tests (where we want smaller so it\u0027s faster) or networking (where you need a larger smallest size).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOr7y_cQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6vvL9x",
                                           "createdAt":  "2025-06-06T07:41:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-06T07:41:23Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Use different certificate types in Networking tests with dynamically generated certificates.",
        "labels":  [
                       "area-System.Net.Security",
                       "test-enhancement"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116473",
        "createdAt":  "2025-06-10T12:00:26Z",
        "number":  116473,
        "author":  "rokonec",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-06T14:27:12Z",
        "body":  "OpenSSL 3.5.0 supports SSLKEYLOGFILE with just an environment variable, which is less strict than .NET\u0027s requirements. There\u0027s no way to check if this feature is enabled in the OpenSSL library, so we should disable the test based on the OpenSSL version for now.\n\nAs we are disabling SslStreamRemoteExecutorTestsOpenSSL  for now.\n\nLets revisit it in future and either:\n- reenable it in particular versions, if OpenSLL decide to revert this\n- delete it if it seems that it will be stable behavior in OpenSSL, since it will make this test permanently disabled\n- change SSLKEYLOG implementation, for example we can consider to use our own env var as oppose to overloaded SSLKEYLOGFILE\n\nTest disabled in https://github.com/dotnet/runtime/pull/116474",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsF3-hA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6wXbwn",
                                           "createdAt":  "2025-06-10T12:01:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-10T12:01:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wXf6E",
                                           "createdAt":  "2025-06-10T12:06:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Can we link the OpenSSL issue here as well?",
                                           "updatedAt":  "2025-06-10T12:06:36Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Revisit and decide about SSLKEYLOG tests",
        "labels":  [
                       "area-System.Net.Security",
                       "disabled-test"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119214",
        "createdAt":  "2025-08-29T22:38:38Z",
        "number":  119214,
        "author":  "ScotMac",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-17T07:37:44Z",
        "body":  "### Description\n\nSSLStream does not support a non-blocking way to determine if you currently have read data available. Here are the normal Network ways of determining this, and why they don\u0027t work for SSLStream:\n\n* Use read event (Poll): doesn\u0027t work for SSLStream, since it has the base TCP stream and the upper SSLStream, and a read event on the TCP stream does not mean there is necessarily data to read on the SSLStream (may just be meta data).\n* Call non-blocking Read or Peek on SSLStream: not supported on SSLStream.\n* Use very small timeout for timed SSLStream.Read: SSLStream will blow up (error out) the connection if it receives a timeout exception.\n\nThere is one way to get around this for Framework (doesn\u0027t work for Core). You can put a dummy stream on top of the low level TCP stream used with the SSLStream, and then set the TCP stream ReadTimeout to 1ms (smallest value). Then when the TCP stream throws a timeout exception, handle the exception and instead return 0 bytes, instead of the timeout exception that causes the SSLStream to blow up the connection.\n\nThis doesn\u0027t work for Core, because it interprets the stream 0 length receive as an EOF (like a zero length socket read). Framework instead just interprets it as zero bytes received and lets the SSLStream continue.\n\n### Reproduction Steps\n\nJust create an SSLStream, which will have no non-blocking way to determine if you have read data.\n\n### Expected behavior\nHave any non-blocking way of showing that the SSLStread has read data.\n\n### Actual behavior\n\nNo non-blocking way of determining if you have read data.\n\n### Regression?\n\nNo, i believe .NET has always has this problem.\n\n### Known Workarounds\n\nOne for framework (see the description).\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxMuE5w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7BB6C_",
                                           "createdAt":  "2025-08-29T22:42:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "I\u0027m a bot. Here is a possible related and/or duplicate issue (I may be wrong):\n- https://github.com/dotnet/runtime/issues/22497",
                                           "updatedAt":  "2025-08-29T22:42:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BB9Q-",
                                           "createdAt":  "2025-08-29T22:45:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-29T22:45:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BCANC",
                                           "createdAt":  "2025-08-29T22:48:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "What are you looking to do with the information?\n\nA method that works with all streams is to have a pending read operation and check if it\u0027s already completed.\nWith some streams (including SslStream), you can even do a zero-byte read.",
                                           "updatedAt":  "2025-08-29T22:48:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BC28r",
                                           "createdAt":  "2025-08-30T00:19:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ScotMac",
                                           "body":  "@MihaZupan, we are using blocking I/O for normal reads, not an async or threaded read. We are not looking to add a bunch of infrastructure around a threaded or async read.\n\nWhy would a zero-byte read be useful here? You mean to determine if the connection is still alive? We want to know if we have pending read data in a non-blocking manner, not whether we have \"zero-bytes\".\n\nBasically,  when a connection is checked into the connection pool, we need a *non-blocking* way to determine if their is pending read data.\n\n\n",
                                           "updatedAt":  "2025-08-30T00:24:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BC6Is",
                                           "createdAt":  "2025-08-30T00:34:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "\u003e Why would a zero-byte read be useful here? You mean to determine if the connection is still alive?\n\nNo, the zero-byte read there means you don\u0027t need to keep another buffer around while waiting for data.\nThe read itself will complete when a) there\u0027s any data available, or b) if you hit EOF.\nIf the stream is just reading metadata internally, the zero-byte read won\u0027t complete.\n`SocketsHttpHandler`\u0027s HTTP/1.1 connection pool [uses this](https://github.com/dotnet/runtime/blob/47b35bc47e2cf8f43b2cc7f09463b1ec5c0ca7e9/src/libraries/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnection.cs#L255) to detect pending data on idle connections.\n\nUnless you actually issue a full read on the stream, how would you know that there is any data available?\nE.g. if `SslStream` had a `DataAvailable` property, that would only tell you if there was leftover data available from the last time you\u0027ve read anything in `SslStream`\u0027s buffers.\nIf the underlying transport (e.g. network stream) had data available in kernel buffers, you wouldn\u0027t know unless the stream actually did a read.",
                                           "updatedAt":  "2025-08-30T00:34:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BC8NC",
                                           "createdAt":  "2025-08-30T00:45:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ScotMac",
                                           "body":  "@MihaZupan, this is not a buffering issue. Nor are we looking for a zero-byte *blocking* read. We are instead looking for a *non-blocking* way to determine if we currently have pending data, like Poll.\n\n",
                                           "updatedAt":  "2025-08-30T00:45:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BC-v1",
                                           "createdAt":  "2025-08-30T00:58:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ScotMac",
                                           "body":  "Note, it shouldn\u0027t be hard for the SSLStream combined with underlying (eg, TCP) stream to determine if there is pending data. \n\n```\nbool SSLStream.CheckForData()\n{\n  if ( \u003cCan return data on SSLStream\u003e ) return true;\n  while ( stream.Poll(0, SelectMode.SelectRead) ) // non-blocking poll on internal stream\n  {\n     \u003cRead once off the internal stream\u003e\n     \u003cProcess above read data\u003e\n     if ( \u003cCan return data on SSLStream\u003e ) return true;\n  }\n  return false;\n}\n```\nAnd YES, we are fine w/ the check incurring a possible Read on the internal stream (see code), if necessary.",
                                           "updatedAt":  "2025-08-30T01:08:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BDGeu",
                                           "createdAt":  "2025-08-30T01:14:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ScotMac",
                                           "body":  "Is the reason that this has not been done in the past because the internal stream isn\u0027t necessarily a tcp stream, and thus it might not be poll\u0027able?\n\nProbably 99% of the SSLStream\u0027s are associated with TCP streams. So, make the \"CheckForData\" only be supported for poll\u0027able streams, like a TCP stream. \n\nThat way you fix the issue for 99% of the users of SSLStream.",
                                           "updatedAt":  "2025-08-30T01:14:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BDowz",
                                           "createdAt":  "2025-08-30T05:08:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e That way you fix the issue for 99% of the users of SSLStream.\n\n99% of the users are likely using `async` code, because it _is_ a TCP stream, thus network I/O, and thus inherently `async`.\n\nThat\u0027s if they\u0027re even doing it \"manually\", as opposed to any of the higher-level APIs that handle TCP as just part of whatever operation they\u0027re doing - in ASP.NET Core, or with things like `HttpClient.PostAsJsonAsync(...)`.  Because if you can abstract those details it makes your life way easier.",
                                           "updatedAt":  "2025-08-30T05:08:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BM5CD",
                                           "createdAt":  "2025-09-01T08:26:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "This would be more of a feature request on the base Stream class. Since SslStream is just a wrapper around another stream (not necessarily NetworkStream) we cannot realiably implement this feature unless all streams expose the data available check.\n\nI don\u0027t think we should implement new API on SslStream that would only work with one specific inner stream type. Maybe if there is sufficient demand, but you are the first to ask for such a feature in a long time.\n\nThe workaround suggested by mihazupan should work for you in the meantime. Keep pending zero-byte async read on the stream and check whether the task has completed (completed == data available, issue another zero-byte async read after you finish (synchronously) reading from the stream).",
                                           "updatedAt":  "2025-09-01T08:26:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BT-5m",
                                           "createdAt":  "2025-09-01T20:53:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I would tend to agree with @rzikm. This is somewhat more complicated as `SslStream` takes `Stream` as input and there is no `Poll` on that. And there may be data decrypted in inside buffers, there may be encrypted chunks that may or may not produce application data and there may be data in underlying stream or kernel buffer.  To make this work reasonably well across different situations is going to be tricky. \n\nI was proposing to have something that can combine networking and security functionality on https://github.com/dotnet/runtime/issues/63162 e.g. create something similar to Apple\u0027s Network Framework.\n\nAside from the specific ask, what problem are you trying to solve @ScotMac ? Understanding the use may help us to find some other way how to solve it.  \n\n",
                                           "updatedAt":  "2025-09-01T20:53:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BiJ84",
                                           "createdAt":  "2025-09-02T22:13:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgwYcg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ScotMac",
                                                                               "createdAt":  "2025-09-03T23:48:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ScotMac",
                                           "body":  "Hi Tomas (@wfurt), pretty much exactly what i specified in the description. ie, we are looking for a non-blocking way of checking if there is read data on the SSLStream (not the stream underlying the SSLStream, since as we all know, data on the underlying stream does not necessarily mean data on the top level SSLStream).\n\nie, something like a Poll(fReadEvent), but on the SSLStream. ",
                                           "updatedAt":  "2025-09-02T22:13:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BkjKi",
                                           "createdAt":  "2025-09-03T03:45:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgtebw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wfurt",
                                                                               "createdAt":  "2025-09-03T17:12:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "@ScotMac - That\u0027s not the underlying problem; you\u0027re describing the solution you\u0027ve chosen to implement.  The question is more along the lines of \"_why_ have you decided to attempt to manually check if there\u0027s data?\".  What larger picture (potentially completely non-technical) problem are you trying to solve that even necessitated this work?\n\n - Why aren\u0027t you just reading from the stream \"normally\" (`async` read to end) in the first place?\n - Why aren\u0027t you reading into a domain object, if you\u0027re dealing with discrete messages?  (eg, `GetAsJsonAsync(...)`)\n - If you\u0027re doing something like streaming, should you be using [pipelines](https://learn.microsoft.com/en-us/dotnet/standard/io/pipelines#pipe), which would handle at least some of this management for you.  Which, if you _really_ need to break things apart, could be used on each stream in the chain.",
                                           "updatedAt":  "2025-09-03T03:45:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7ByHSM",
                                           "createdAt":  "2025-09-03T23:41:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgwYHg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ScotMac",
                                                                               "createdAt":  "2025-09-03T23:47:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ScotMac",
                                           "body":  "Yes, this is NOT part of the normal reading on the stream, but is instead a CHECK if we got a notification from the server side of the connection while the connection is idle. These notifications are like meta data on TCP. This is typically done in the connection pool, where we are checking for this meta data on possibly hundreds of connections, hence the need to be a non-blocking way to check and not some type of thread per connection solution. ",
                                           "updatedAt":  "2025-09-03T23:51:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7ByHqc",
                                           "createdAt":  "2025-09-03T23:42:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgwYIA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ScotMac",
                                                                               "createdAt":  "2025-09-03T23:47:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ScotMac",
                                           "body":  "It is key to note, that this type of CHECKING ON THE STREAM in a NON-BLOCKING manner is fairly standard in networking. Hence the need for Poll/Select and nonblocking read or peek that are ALL supported for normal TCP sockets, but i don\u0027t see anything of the sort for SSLStream.",
                                           "updatedAt":  "2025-09-03T23:44:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7B0d5x",
                                           "createdAt":  "2025-09-04T04:10:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhHkUg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "ScotMac",
                                                                               "createdAt":  "2025-09-05T21:18:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e hence the need to be a non-blocking way to check and not some type of thread per connection solution.\n\nSo, `async` code in C# is non-blocking, and doesn\u0027t consume a thread per connection.\n\nThat said... \n\n\u003e Yes, this is NOT part of the normal reading on the stream, but is instead a CHECK if we got a notification from the server side of the connection while the connection is idle.\n\n.... And why is this important?  What are you planning on _doing_ with this information?  This is still somewhat you describing your solution.\n\nIf your answer is \"read data from a filled buffer\", that\u0027s essentially what most of the streams will handle _for you_.\nNote that there are a lot of instrumented metrics for the built-in networking streams and other classes, which may be sufficient for you.\n\nIf you\u0027re writing a specialized server, the modern recommendation would probably be to use pipelines, as I mentioned earlier, just `async` reading/writing as required.",
                                           "updatedAt":  "2025-09-04T04:10:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CTDDA",
                                           "createdAt":  "2025-09-05T21:17:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhHlCg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ScotMac",
                                                                               "createdAt":  "2025-09-05T21:20:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ScotMac",
                                           "body":  "We are not looking to add the non-trivial of amount of complexity required to switch from blocking IO to an async solution.\n\n\u003e And why is this important? What are you planning on doing with this information? This is still somewhat you describing your solution\n\nNot really, I described WHY we wanted to check if the connection/session/stream, in order to recieve non-payload meta data. Because this is not payload data, and because we are doing this check in the connection pool, where we can have hundreds of connections, we need to be able to do this check for non-payload meta data in a non-blocking manner.\n\nBut to further elaborate, the non-payload meta can be various things:\n* notification to shutdown the pooled session\n* notification that the server has a planned maintenance\n* notification that the server has migrated\n...\n",
                                           "updatedAt":  "2025-09-05T21:17:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CTEwb",
                                           "createdAt":  "2025-09-05T21:20:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhHlDw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ScotMac",
                                                                               "createdAt":  "2025-09-05T21:20:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ScotMac",
                                           "body":  "And, again, it is key to note, that this type of CHECKING ON THE STREAM in a NON-BLOCKING manner is fairly standard in networking. Hence the need for Poll/Select and nonblocking read or peek that are ALL supported for normal TCP sockets, but i don\u0027t see anything of the sort for SSLStream.\n\nMy point being, I am asking for something that is standard for a network connections, not something totally out of the ordinary. \n\n",
                                           "updatedAt":  "2025-09-05T21:20:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CTLfa",
                                           "createdAt":  "2025-09-05T21:31:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhHo_g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ScotMac",
                                                                               "createdAt":  "2025-09-05T21:31:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ScotMac",
                                           "body":  "This has nothing to do with \"instrumented metrics\".  This is a non-blocking check if the local endpoint of SSLStream currently has \"read data\" to be consumed. \n\nAs i mentioned, one solution is a SSLStream that is tied to a TCP Socket (instead of a generic stream), and thus easily able to check for data on the underlying socket, and process it, until Poll(Read), for exmple, says there is no more data, using a non-blocking Poll(). At which point, the SSLStream would return to the caller whether the handling of the data from the underlying TCP Socket resulted in payload data for the caller.\n\nTheir is various functionality not able to be supported, due to the fact that the underlying transport is a generic stream, whereas the huge majority of the users of SSL/TLS will be using it on top of TCP socket. ",
                                           "updatedAt":  "2025-09-05T21:31:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CTS2J",
                                           "createdAt":  "2025-09-05T21:47:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhHt0A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ScotMac",
                                                                               "createdAt":  "2025-09-05T21:47:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ScotMac",
                                           "body":  "As i said previously: We are not looking to add the non-trivial of amount of complexity required to switch from blocking IO to an async solution.\n\nBut to further expand on that, it makes no sense whatsoever for a connection pool to have hundreds of async operations pending on idle pool connections.  We strongly believe that a non-blocking model is inherently a much better solution, where ONE THREAD can simple traverse the idle connections checking for any read data in a non-blocking manner. This one thread would, for the most part, not even be operating for possibly DAYS/WEEKS/MONTHS at a time. While the threads associated with the async operations would be sitting there continuously consuming memory/resources.\n\n",
                                           "updatedAt":  "2025-09-05T21:47:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CT9OY",
                                           "createdAt":  "2025-09-05T23:15:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aromaa",
                                           "body":  "There are no \"associated threads\" with async operations, the kernel notifies the application when there is work to be done. Pending I/O operations do have some associated memory overhead because the kernel has to know who to notify but that is relatively nothing. The application can stay fully idle meanwhile.\n\nThis model works great and scales well, the application just has to wait for the kernel to notify it has received data. What does not scale is the application constantly asking the kernel whatever there is more work to be done. This requires constantly iterating the list of available connections and crossing that kernel space, which does consume resources. The application can\u0027t stay idle with this approach.",
                                           "updatedAt":  "2025-09-05T23:15:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CV7ns",
                                           "createdAt":  "2025-09-06T04:23:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e There are no \"associated threads\" with async operations, the kernel notifies the application when there is work to be done.\n\nSee, for example, [There is no thread](https://blog.stephencleary.com/2013/11/there-is-no-thread.html).\n\nAgain, this feature request seems predicated on the mistaken belief that `async` operations are somehow blocking.  This is incorrect, and in fact is the complete opposite case.  The OS/runtime/task system are doing the hard work of managing the data throughput for you, and in many cases you may very well only be using a single thread.\n\nNote too that many of the apparently blocking methods on SSLStream are internally implemented on top of async methods (usually `ValueTask` returning), so you\u0027re still using the async model....\n",
                                           "updatedAt":  "2025-09-06T04:23:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CbxMg",
                                           "createdAt":  "2025-09-06T12:28:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ScotMac",
                                           "body":  "\"There are no \"associated threads\" with async operations, the kernel notifies the application when there is work to be done\"\n\nYes, if the O/S has such primitives, supporting async *completion notification* (say callbacks), then there can be threadless async. On windows for example.\n\nHowever, we have done the performance testing,  IF you do an async operations on a particular net socket, the underlying .NET/WinOS code will turn the connection into non-blocking. The .NET code written to work with these non-blocking sockets is hugely inefficient (the underlying logic/events/etc). Specifically, the model is much less efficient (CPU-wise) than keeping the connection in blocking mode. \n\n",
                                           "updatedAt":  "2025-09-06T12:55:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Cb2k5",
                                           "createdAt":  "2025-09-06T12:43:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ScotMac",
                                           "body":  "If you have access to Microsoft SR database, you can look at the following one, where the Microsoft .NET team has admitted to the performance points above (we showed them our testing results, AND the huge amount of logging data showing exactly what was going on):\n\nTrackingID#2410150040001666",
                                           "updatedAt":  "2025-09-06T13:38:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EM5vR",
                                           "createdAt":  "2025-09-15T11:35:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiUVgQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2025-09-15T11:50:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "liveans",
                                                                               "createdAt":  "2025-09-15T11:55:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2025-09-15T11:58:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ManickaP",
                                                                               "createdAt":  "2025-09-15T12:01:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wfurt",
                                                                               "createdAt":  "2025-09-15T17:13:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "karelz",
                                           "body":  "External contributors do not have access to internal servicing cases. We should refrain from referring information which is not accessible to everyone.\n\n\u003e where the Microsoft .NET team has admitted to the performance points above (we showed them our testing results, AND the huge amount of logging data showing exactly what was going on)\n\nJust want to clarify -- what we confirmed is that .NET is NOT designed and currently has NO intention to support high performance of sync operations on socket when the socket used at least one async operation earlier (aka mix of sync and async operations).\nWe recommend customers to NOT mix sync and async operations on a socket to achieve good performance -- either everything synchronous, or everything asynchronous.\n\nWe do not believe a sync/async mixing scenario is a common scenario -- we haven\u0027t heard about it so far except your report. We are open to hear from more customers that it is something they care about.\nMoreover, it seems to stem from a bug in the Linux OS (which forces your scenario to mix sync and async as a workaround of the Linux OS bug in the first place).\nAlso, there are reasonable workarounds to get yourself unblocked in such situations -- either private reflection, or PInvoke to achieve good performance when working around the Linux OS bug.\n\nThe key problem of this report (in this GitHub issue) is that it talks about solution(s), but lacks scenario description to let everyone understand. It is super confusing to us (.NET Networking team) and to external contributors and experts in the space (see above comments). We have to fill the gaps, provide our understanding then learn it is not what we think it is. It is highly inefficient way of collaboration.\nTherefore, we should STOP discussion on this issue.\n\nIf you believe my above description of the sync/async is not motivating this GitHub issue, I would recommend to create a gist / PR in your repo, describing your SCENARIO. Leave out ALL solutions, just focus on scenario and its motivation and its boundaries. Once we have mutual understanding of that (via review, questions, and back and forth), we can turn it into a bug and start discussing workarounds and solutions.",
                                           "updatedAt":  "2025-09-15T11:35:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EXhEU",
                                           "createdAt":  "2025-09-16T01:16:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ScotMac",
                                           "body":  "\u003e Just want to clarify -- what we confirmed is that .NET is NOT designed and currently has NO intention to support high performance of sync operations on socket when the socket used at least one async operation earlier (aka mix of sync and async operations).\n\nWe are NOT attempting to mix the operations. We are doing a timeout based connection establishment, following by STRICTLY synchronous operations. \n",
                                           "updatedAt":  "2025-09-16T01:16:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EXh5i",
                                           "createdAt":  "2025-09-16T01:17:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ScotMac",
                                           "body":  "Note, also, that an unmanaged solution via PInvoke is not a viable solution for a all manager libary.",
                                           "updatedAt":  "2025-09-16T01:17:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EfOc-",
                                           "createdAt":  "2025-09-16T08:20:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "\u003e We are NOT attempting to mix the operations. We are doing a timeout based connection establishment, following by STRICTLY synchronous operations.\n\nIf the connection establishment is async, then you ARE mixing operations. That\u0027s what you described in the case. Is that incorrect information?\n\n\u003e Note, also, that an unmanaged solution via PInvoke is not a viable solution for a all manager libary.\n\nLibraries can multi-target and don\u0027t have to be necessarily \"all managed\" (as in platform agnostic). If you strongly prefer a library without multi-targeting for simplicity, then one can also rely on runtime platform detection to call into the right PInvoke, or use dynamic code generation (used less AFAIK). This is common practice used, especially when working around problems (like a Linux OS bug in this case).",
                                           "updatedAt":  "2025-09-16T08:29:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Euobo",
                                           "createdAt":  "2025-09-16T22:36:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ScotMac",
                                           "body":  "This is fully managed library solution. Both our customers and MICROSOFT (Azure) require our library to be fully managed.\n\nYes, we are not trying to mix async and sync operations. Since we are doing sync I/O, we want the CHECK for read data to be sync also.\n",
                                           "updatedAt":  "2025-09-16T22:39:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EusP2",
                                           "createdAt":  "2025-09-16T22:42:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ScotMac",
                                           "body":  "And sorry, you are right. Because of the problems .NET has with mixing async and sync operations. we ARE attempting to do a completely sync solution. Hence the desire for the CHECK for read data to be sync.",
                                           "updatedAt":  "2025-09-16T22:42:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Ey4Tn",
                                           "createdAt":  "2025-09-17T07:30:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEinSDA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rokonec",
                                                                               "createdAt":  "2025-09-17T07:54:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ManickaP",
                                                                               "createdAt":  "2025-09-17T07:57:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "liveans",
                                                                               "createdAt":  "2025-09-17T09:25:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "karelz",
                                           "body":  "\u003e This is fully managed library solution. Both our customers and MICROSOFT (Azure) require our library to be fully managed.\n\nPlatform agnostic assembly/library is implementation detail, not a requirement from customers or Azure. Let\u0027s agree to disagree, it is not worth repeating the same arguments over and over again.\n\n\u003e Yes, we are not trying to mix async and sync operations. Since we are doing sync I/O, we want the CHECK for read data to be sync also.\n\nIf you are not mixing sync and async, then you don\u0027t need PInvoke - why do we have the above conversation at all then?\nIf you have truly fully sync scenario, then please start a gist with your SCENARIO description from scratch as pointed out in https://github.com/dotnet/runtime/issues/119214#issuecomment-3291716561\nFurther discussion here is not productive as we are mixing many problems and not converging on even understanding the problem you are trying to solve.\n\n\u003e Because of the problems .NET has with mixing async and sync operations. we ARE attempting to do a completely sync solution. Hence the desire for the CHECK for read data to be sync.\n\nFor purely synchronous code paths - the only thought that comes to mind is that you are basically creating a pool of connections and polling them. Please make sure you describe it in SCENARIO doc as asked above.",
                                           "updatedAt":  "2025-09-17T07:37:44Z"
                                       }
                                   ],
                         "totalCount":  31
                     },
        "title":  "No non-blocking way to determine if you have data to read on SSLStream",
        "labels":  [
                       "area-System.Net.Security",
                       "untriaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119573",
        "createdAt":  "2025-09-11T11:44:11Z",
        "number":  119573,
        "author":  "rzikm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-12T13:30:18Z",
        "body":  "Attempts to use SLH-DSA-* certificates will cause SslStream handshake attempts to fail with \n\n```\n      ---- System.Security.Authentication.AuthenticationException : Authentication failed, see inner exception.\n      -------- Interop+OpenSsl+SslException : Using SSL certificate failed with OpenSSL error - unknown certificate type.\n```\n\nThe reason seems to be because OpenSSL common provider does not advertise for the SLH-DSA-* signature schemes in its TLS-SIGALG capability\n\nhttps://github.com/openssl/openssl/blob/0c679f556669e32499a827a081afe3bcf973c9ad/providers/common/capabilities.c#L315-L320\n\nSince the [Relevant RFC](https://datatracker.ietf.org/doc/draft-reddy-tls-slhdsa/) is still in draft state, this is not unexpected, but until OpenSSL introduces these, it is not going to be possible to use these certs with SslStream.\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw9HqKA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7Dg0X6",
                                           "createdAt":  "2025-09-11T11:45:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-security, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-11T11:45:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DhQdX",
                                           "createdAt":  "2025-09-11T12:08:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @bartonjs, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-11T12:08:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7D0eoo",
                                           "createdAt":  "2025-09-12T13:30:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "tracked by OpenSSL issue https://github.com/openssl/openssl/issues/28026",
                                           "updatedAt":  "2025-09-12T13:30:18Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "OpenSSL error - unknown certificate type when using SLH-DSA-* certificates",
        "labels":  [
                       "area-System.Net.Security",
                       "tracking-external-issue"
                   ]
    }
]
