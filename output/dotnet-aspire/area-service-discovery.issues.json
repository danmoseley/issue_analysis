[
    {
        "url":  "https://github.com/dotnet/aspire/issues/170",
        "createdAt":  "2023-10-02T19:40:29Z",
        "number":  170,
        "author":  "danmoseley",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-15T08:01:55Z",
        "body":  "",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOes4RaA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOKYQzfc5ojPN1",
                                           "createdAt":  "2023-10-02T19:41:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@ReubenBond what is your thinking here -- and timeframe? \ncc @joperezr \n\nthe repo will ship stable (and preview) packages every month which gives us flexibility...",
                                           "updatedAt":  "2023-10-02T19:41:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5ojPN3",
                                           "createdAt":  "2023-10-07T04:43:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I think we should move it when we ship v1 of aspire. ",
                                           "updatedAt":  "2023-10-07T04:43:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc56zhFo",
                                           "createdAt":  "2024-04-17T04:33:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gdantuono",
                                           "body":  "@danmoseley I hope you can move in new repository before Aspire GA",
                                           "updatedAt":  "2024-04-17T04:33:39Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Move Service Discovery into dotnet/extensions after Aspire v1",
        "labels":  [
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/293",
        "createdAt":  "2023-10-14T20:24:12Z",
        "number":  293,
        "author":  "davidfowl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCzTB3g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ReubenBond",
                                            "createdAt":  "2023-10-14T22:21:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DamianEdwards",
                                            "createdAt":  "2023-10-15T03:37:56Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-10-16T08:04:05Z",
        "body":  "When looking at traces, it\u0027s hard to back track to the original information when trying to track down a potential problem:\r\n\r\n\u003cimg width=\"614\" alt=\"image\" src=\"https://github.com/dotnet/aspire/assets/95136/dc6c52d7-9715-4c44-b167-d3ddecbdd722\"\u003e\r\n\r\nThis is because HTTP client is the one creating the activity and the service discovery system\u0027s information is after resolution of the underlying address information. We should enrich the outgoing telemetry context with tags that say what the service name was for a particular request.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjCFj8w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOKYQzfc5pNpVO",
                                           "createdAt":  "2023-10-16T20:02:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@ReubenBond we\u0027re assuming you\u0027re doing this next, per backlog review\n\nplease also update dashboard to display it meaningfully",
                                           "updatedAt":  "2023-10-16T20:02:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5pNq28",
                                           "createdAt":  "2023-10-16T20:06:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "If we invent new activity tags we should follow the https://opentelemetry.io/docs/specs/otel/trace/semantic_conventions/. \r\n\r\ncc @noahfalk ",
                                           "updatedAt":  "2023-10-16T20:06:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5pNuwM",
                                           "createdAt":  "2023-10-16T20:19:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "Perhaps `server.address` is what it should be adding (from https://opentelemetry.io/docs/specs/otel/trace/semantic_conventions/span-general/#serveraddress).",
                                           "updatedAt":  "2023-10-16T20:20:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5pNwFx",
                                           "createdAt":  "2023-10-16T20:23:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Wouldn\u0027t that overwrite the real address?",
                                           "updatedAt":  "2023-10-16T20:23:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5pNwmD",
                                           "createdAt":  "2023-10-16T20:24:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "It\u0027s described as representing the \"logical server hostname\" and doesn\u0027t seem to be populated at all right now.",
                                           "updatedAt":  "2023-10-16T20:24:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5pPBjk",
                                           "createdAt":  "2023-10-17T02:13:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@noahfalk is there a way to enrich the outgoing activity without creating a new one? ",
                                           "updatedAt":  "2023-10-17T02:13:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5pW25w",
                                           "createdAt":  "2023-10-18T04:00:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e It\u0027s described as representing the \"logical server hostname\"\r\n\r\nI think there are different ways you could interpret \u0027logical\u0027, but OTel\u0027s interpretation is `request.RequestUri.Host`\r\n\r\n\u003e doesn\u0027t seem to be populated at all right now.\r\n\r\nIt is populated if folks use OpenTelemetry\u0027s instrumentation:\r\nhttps://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Instrumentation.Http/Implementation/HttpHandlerDiagnosticListener.cs#L189\r\n\r\nEventually we probably want to absorb that into HttpClient so I\u0027d be cautious about doing anything that conflicts.\r\n\r\n\u003e @noahfalk is there a way to enrich the outgoing activity without creating a new one?\r\n\r\nSure.\r\n```C#\r\nActivity.Current.SetTag(\"MyCoolTag\", \"ReallyImportantData\");\r\n```\r\nThis assumes that your service discovery code is running while HttpClient\u0027s activity is the current one. I\u0027m not sure where it actually runs?",
                                           "updatedAt":  "2023-10-18T04:00:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5p3Tzf",
                                           "createdAt":  "2023-10-23T22:15:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ReubenBond",
                                           "body":  "If the `Host` header is that, is that enough, or does it have to be the `Uri.Host` value?",
                                           "updatedAt":  "2023-10-23T22:15:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5p3lAk",
                                           "createdAt":  "2023-10-23T23:20:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "\u003e It is populated if folks use OpenTelemetry\u0027s instrumentation:\r\nhttps://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Instrumentation.Http/Implementation/HttpHandlerDiagnosticListener.cs#L189\r\n\r\nShould we be updating our ServiceDefaults project template to use this then?",
                                           "updatedAt":  "2023-10-23T23:20:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5p3lg_",
                                           "createdAt":  "2023-10-23T23:22:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e If the Host header is that, is that enough, or does it have to be the Uri.Host value?\r\n\r\nOh with your latest change, will this just work? ",
                                           "updatedAt":  "2023-10-23T23:22:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5p44G7",
                                           "createdAt":  "2023-10-24T04:21:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "With [this change](https://github.com/dotnet/aspire/pull/460) we get \"net.host.name\" in the traces.\r\n\r\n\u003cimg width=\"768\" alt=\"image\" src=\"https://github.com/dotnet/aspire/assets/95136/cb4776a7-5a7c-457d-ae7a-f032a156a5af\"\u003e\r\n",
                                           "updatedAt":  "2023-10-24T04:21:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5p48gS",
                                           "createdAt":  "2023-10-24T04:51:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Nope, I was wrong, this is the server span, not the client span. We want to see the outbound activity with this.",
                                           "updatedAt":  "2023-10-24T04:51:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5p4_h9",
                                           "createdAt":  "2023-10-24T05:10:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "yea, so I finally re-read this and we need to update our service defaults. I\u0027ll get on that.",
                                           "updatedAt":  "2023-10-24T05:10:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5qc1BH",
                                           "createdAt":  "2023-10-30T19:57:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@davidfowl @ReubenBond can you update here, is the work left all on David?",
                                           "updatedAt":  "2023-10-30T19:57:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5qe2qF",
                                           "createdAt":  "2023-10-31T05:28:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Setting the host name seems to break everything (even on ACA) and we turned it off by default so AFAIK, nothing has changed here. We have no trace of what the original service name was once service discovery has run",
                                           "updatedAt":  "2023-10-31T05:28:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5qe3Ok",
                                           "createdAt":  "2023-10-31T05:31:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODLye6w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ReubenBond",
                                                                               "createdAt":  "2023-11-03T21:23:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@ReubenBond  I updated this issue to only be about the outgoing activity, that is the high order bit. Since the host name plan was a bust, I suggest we attempt to do this finding a way to mutate the outgoing activity (if possible).",
                                           "updatedAt":  "2023-10-31T05:31:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5qe3zA",
                                           "createdAt":  "2023-10-31T05:34:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@noahfalk After a cursory glance, I can\u0027t see an obvious way to get in between here and add extra state to the outgoing activity. Worst case scenarios it looks like we would need to do some kinda of otel specific trace enrichment? Is that right?",
                                           "updatedAt":  "2023-10-31T05:34:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5qe-FC",
                                           "createdAt":  "2023-10-31T06:02:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e I can\u0027t see an obvious way to get in between here ...\r\n\r\nYou mean the point in time where your code runs doesn\u0027t overlap the time period where the Activity you want to modify is active? Various options:\r\n- An ActivityListener can hook the ActivityStarted callback and do arbitrary modification to an Activity. You would have to stash the state somewhere earlier so that you can retrieve it, likely in an AsyncLocal.\r\n- Similar to the ActivityListener you could also use an OTel specific processor. Downside is it takes an explicit dependency on OTel library, upside is it runs with predictable ordering relative to whatever inspection/modification of the Activity OTel is going to do.\r\n- Engineer a way for the component creating the data to flow it to the HttpClient handler component that is creating the Activity. This is similar in principle to the enrichment for metrics, except now it is enrichment for Activity.\r\n\r\nIts possible there are more scenario specific options but at this point I only have a very cursory understanding of how service discovery is hooked up. Above are the generic options that could be used for any two components.",
                                           "updatedAt":  "2023-10-31T06:06:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5qfF1o",
                                           "createdAt":  "2023-10-31T06:34:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e An ActivityListener can hook the ActivityStarted callback and do arbitrary modification to an Activity. You would have to stash the state somewhere earlier so that you can retrieve it, likely in an AsyncLocal.\r\n\r\nThe static wire up of this bugs me. I wouldn\u0027t want this in library code. It\u0027s it ironic that we have to set state on an async local to propagate that state to another async local 😄. \r\n\r\n\u003e Similar to the ActivityListener you could also use an OTel specific processor. Downside is it takes an explicit dependency on OTel library, upside is it runs with predictable ordering relative to whatever inspection/modification of the Activity OTel is going to do.\r\n\r\nThis might be OK for now. We can build a ServiceDiscovery.Otel package that could wire this up. It\u0027s a little unfortunate we can\u0027t do this out of the box yet but by .NET 9, we should hopefully have something more convenient. \r\n\r\n\u003e Engineer a way for the component creating the data to flow it to the HttpClient handler component that is creating the Activity. This is similar in principle to the enrichment for metrics, except now it is enrichment for Activity.\r\n\r\nThe code here is pretty much the outermost HttpMessageHandler, AFAIK DiagnosticsHandler is the inner most handler. There\u0027s no real easy way to run another handler at that layer. If we could control the creation of it, we could write up it manually in the right order so that we could run while the activity was active. This is much like how the incoming ASP.NET Core activity works.\r\n",
                                           "updatedAt":  "2023-10-31T06:34:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5qmcsm",
                                           "createdAt":  "2023-11-01T06:09:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@noahfalk I think the cleanest solution would be to expose the DiagnosticHandler and allow it to be added to the pipeline earlier so that other delegating handlers can see the outgoing activity. We\u0027d also need a local way to disable the inner SocketsHttpHandler creating one... I\u0027ll need to think about it some more.\r\n\r\nI experimented with an otel processor but I also need to expose an async local that stores the state from the service discovery system... which is not ideal.",
                                           "updatedAt":  "2023-11-01T06:15:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5ulJkX",
                                           "createdAt":  "2023-12-14T06:37:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODPjd5w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2023-12-14T06:38:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "An alternative solution is a way to add a callback to a `HttpRequestMessage` that `DiaganosticHandler` runs. It would be responsible for enriching the activity. This approach is what was added for metrics in .NET 8.",
                                           "updatedAt":  "2023-12-14T06:37:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5ulKOc",
                                           "createdAt":  "2023-12-14T06:40:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@JamesNK did some magic here in the dashboard specifically to reverse engineer server names from the outgoing address:\r\n\r\n\u003cimg width=\"1046\" alt=\"image\" src=\"https://github.com/dotnet/aspire/assets/95136/d7adc2ba-d212-4b01-955c-b2f9599f31cb\"\u003e\r\n\r\n",
                                           "updatedAt":  "2023-12-14T06:40:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5yCrmH",
                                           "createdAt":  "2024-01-27T19:33:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@ReubenBond do you want to punt this until later or do you want to produce a ServiceDiscovery.Otel pacakge that adds data to the outgoing span using enrichment?",
                                           "updatedAt":  "2024-01-27T19:33:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6MH2Ky",
                                           "createdAt":  "2024-09-14T06:12:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@noahfalk @tarekgh is this possible in .NET 9?",
                                           "updatedAt":  "2024-09-14T06:12:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6MIWPz",
                                           "createdAt":  "2024-09-14T13:49:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODyPjQg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2024-09-14T14:16:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "No. Request to support adding tags to HttpClient activities: https://github.com/dotnet/runtime/issues/96263",
                                           "updatedAt":  "2024-09-14T13:49:39Z"
                                       }
                                   ],
                         "totalCount":  25
                     },
        "title":  "Service discovery should enrich activity with incoming service name before resolution",
        "labels":  [
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/898",
        "createdAt":  "2023-11-17T01:30:39Z",
        "number":  898,
        "author":  "DamianEdwards",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-10-16T08:03:47Z",
        "body":  "The [eShopLite sample](https://github.com/dotnet/aspire-samples/tree/main/samples/eShopLite) includes a [set of extension methods](https://github.com/dotnet/aspire-samples/blob/main/samples/eShopLite/eShopLite.ServiceDefaults/ServiceReferenceExtensions.cs) intended to make it easier to add HTTP and gRPC service references to service projects and optionally adding health checks for those services too.\r\n\r\nHere\u0027s how they look in the WebFrontend\u0027s *Program.cs* file where the clients are being configured in the app\u0027s DI:\r\n\r\n```csharp\r\nbuilder.Services.AddHttpServiceReference\u003cCatalogServiceClient\u003e(\"http://catalogservice\", healthRelativePath: \"readiness\");\r\n\r\nbuilder.Services.AddSingleton\u003cBasketServiceClient\u003e()\r\n    .AddGrpcServiceReference\u003cBasket.BasketClient\u003e(\"http://basketservice\", failureStatus: HealthStatus.Degraded);\r\n```\r\n\r\nThese methods currently:\r\n- Accept the URL directly as a `string` parameter, so that a client-accepting callback does not need to be passed just to set the base URL\r\n- Optionally accept parameters related to configuring a URI health check for the service, so that the app\u0027s health is tied to the service\u0027s availability\r\n\r\nWe could also consider having these methods automate the selection of an appropriate scheme to use for the service, but that might very likely be better handled by a [feature in Service Discovery](https://github.com/dotnet/aspire/issues/381).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcgsEkA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOKYQzfc5yCwSQ",
                                           "createdAt":  "2024-01-27T20:17:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Related to https://github.com/dotnet/aspire/issues/186",
                                           "updatedAt":  "2024-01-27T20:17:03Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Add extension methods to make adding HTTP \u0026 gRPC service references + optionally health checks easier",
        "labels":  [
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/1356",
        "createdAt":  "2023-12-12T14:26:17Z",
        "number":  1356,
        "author":  "victorverdoodt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODQMkvQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "svause-stryker",
                                            "createdAt":  "2024-04-17T21:57:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andi0b",
                                            "createdAt":  "2024-10-11T18:33:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Lorefist5",
                                            "createdAt":  "2024-11-14T20:35:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Norvand",
                                            "createdAt":  "2024-11-20T15:58:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "matt-goldman",
                                            "createdAt":  "2024-12-12T03:28:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alsprow",
                                            "createdAt":  "2025-02-05T18:51:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dronkoff",
                                            "createdAt":  "2025-02-25T22:29:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Sme-Vis",
                                            "createdAt":  "2025-03-05T17:20:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "markti",
                                            "createdAt":  "2025-05-04T21:13:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "manutiedra",
                                            "createdAt":  "2025-05-06T21:08:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "normandev92",
                                            "createdAt":  "2025-05-15T00:00:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "imfanchen",
                                            "createdAt":  "2025-09-12T19:10:07Z"
                                        }
                                    ],
                          "totalCount":  12
                      },
        "updatedAt":  "2025-04-14T22:16:14Z",
        "body":  "Hello,\r\n\r\nI am working on a project integrating SignalR with .NET Aspire and have encountered a specific challenge related to automatic address resolution for connections.\r\n\r\nWe are using SignalR Client for real-time communication, and currently, the configuration of the SignalR hub connection address is done manually in the appsettings.json.\r\n\r\nSpecific Challenge:\r\nWhile in HttpClient, using a generic address like http://apiservice automatically resolves the correct address, this approach does not work with the SignalR client. When attempting to use http://apiservice or ws://apiservice with the SignalR client, the connection fails to establish, indicating an issue with automatic address resolution.\r\n\r\nIs there a way to configure the SignalR client in .NET Aspire to automatically resolve the connection address, similar to what happens with HttpClient?\r\nIf so, what are the steps to implement this functionality, or where can I find relevant documentation?\r\nI would greatly appreciate any guidance, suggestions, or code examples that could help resolve this issue. Thank you very much for your assistance!",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpxUHaQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOKYQzfc5ubjjT",
                                           "createdAt":  "2023-12-12T20:00:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KSemenenko",
                                           "body":  "maybe yarp can solve this?",
                                           "updatedAt":  "2023-12-12T20:00:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5udPL-",
                                           "createdAt":  "2023-12-13T02:13:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODPaSBA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KSemenenko",
                                                                               "createdAt":  "2023-12-13T08:30:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "victorverdoodt",
                                           "body":  "I tried using YARP, but I couldn\u0027t succeed. I managed to find a workaround using var resolve = _configuration.GetValue\u003cstring\u003e(\"services:apiservice:1\");\".",
                                           "updatedAt":  "2023-12-13T02:13:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5x7VCK",
                                           "createdAt":  "2024-01-26T03:24:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DylanPMunyard",
                                           "body":  "I also came into the same issue - and was interested to try and use service discovery for SignalR clients. I ended up pinching the same code from `UseServiceDiscovery` . \r\n\r\nThis is in a Razor page, I had to inject IConfiguration, so that service resolving can presumably look up the service env vars:\r\n\r\n```csharp\r\n@inject IConfiguration Configuration;\r\n\r\nvar hubBuilder = new HubConnectionBuilder()\r\n    .WithUrl(\"http://apiservice/eventhub\");\r\n\r\nhubBuilder.Services.AddSingleton(Configuration);\r\nhubBuilder.Services.AddServiceDiscovery();\r\nhubBuilder.Services.AddSingleton\u003cIConfigureOptions\u003cHttpConnectionOptions\u003e, ServiceDiscoveryHttpOptionsConfigurer\u003e(provider =\u003e\r\n{\r\n    var timeProvider = provider.GetService\u003cTimeProvider\u003e() ?? TimeProvider.System;\r\n    var selectorProvider = provider.GetRequiredService\u003cIServiceEndPointSelectorProvider\u003e();\r\n    var resolverProvider = provider.GetRequiredService\u003cServiceEndPointResolverFactory\u003e();\r\n    var registry = new HttpServiceEndPointResolver(resolverProvider, selectorProvider, timeProvider);\r\n    \r\n    return new ServiceDiscoveryHttpOptionsConfigurer(registry);\r\n});\r\n\r\n_hubConnection = hubBuilder.Build();\r\n\r\npublic class ServiceDiscoveryHttpOptionsConfigurer : IConfigureOptions\u003cHttpConnectionOptions\u003e\r\n{\r\n    private readonly HttpServiceEndPointResolver _registry;\r\n\r\n    public ServiceDiscoveryHttpOptionsConfigurer(HttpServiceEndPointResolver registry)\r\n    {\r\n        _registry = registry;\r\n    }\r\n    \r\n    public void Configure(HttpConnectionOptions options)\r\n    {\r\n        options.HttpMessageHandlerFactory = handler =\u003e new ResolvingHttpDelegatingHandler(_registry, handler);\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2024-01-26T03:24:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5x7c6w",
                                           "createdAt":  "2024-01-26T03:36:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "cc @BrennanConroy ",
                                           "updatedAt":  "2024-01-26T03:36:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5yCZ1h",
                                           "createdAt":  "2024-01-27T16:17:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEQvPdQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "victorverdoodt",
                                                                               "createdAt":  "2024-01-27T19:36:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "mohdali",
                                                                               "createdAt":  "2024-01-28T06:10:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "DylanPMunyard",
                                                                               "createdAt":  "2024-01-28T11:52:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "kudima03",
                                                                               "createdAt":  "2024-04-15T18:50:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "svause-stryker",
                                                                               "createdAt":  "2024-04-17T22:08:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "sonicjoy",
                                                                               "createdAt":  "2024-05-15T12:28:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Lindsay-Mathieson",
                                                                               "createdAt":  "2024-06-01T14:11:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "AgentFire",
                                                                               "createdAt":  "2024-07-30T18:57:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "dcuccia",
                                                                               "createdAt":  "2024-09-01T00:21:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "stuartleaver",
                                                                               "createdAt":  "2024-09-16T18:55:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "ShodytheWolf",
                                                                               "createdAt":  "2024-11-18T19:04:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "maxgattringer",
                                                                               "createdAt":  "2024-12-07T12:08:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "gisaac85",
                                                                               "createdAt":  "2025-03-04T09:57:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "markti",
                                                                               "createdAt":  "2025-05-04T21:13:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  14
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "The easier way to wire this up assuming you have access to the client factory would be something like this:\r\n\r\n```C#\r\npublic static class HubConnectionExtensions\r\n{\r\n    public static IHubConnectionBuilder WithUrl(this IHubConnectionBuilder builder, string url, IHttpMessageHandlerFactory clientFactory)\r\n    {\r\n        return builder.WithUrl(url, options =\u003e\r\n        {\r\n            options.HttpMessageHandlerFactory = _ =\u003e clientFactory.CreateHandler();\r\n        });\r\n    }\r\n}\r\n```\r\n\r\nYou need to inject the `IHttpMessageHandlerFactory` into your code and pass it into the WithUrl call above.",
                                           "updatedAt":  "2024-01-27T16:17:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5yC0nD",
                                           "createdAt":  "2024-01-27T21:37:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODwlKsg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DamianEdwards",
                                                                               "createdAt":  "2024-01-27T21:38:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "IEvangelist",
                                                                               "createdAt":  "2024-02-05T12:30:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "swegele",
                                                                               "createdAt":  "2024-05-09T15:46:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dcuccia",
                                                                               "createdAt":  "2024-09-01T00:21:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@ReubenBond we have to clean up the service discovery API and make it easy to get to wire it up.\r\n\r\n@IEvangelist I think we should document using the Http client factory interfaces to get either an HttpClient or an HttpMessageHandler as the first-class way to do integration with libraries that have not been SD enlightened.\r\n",
                                           "updatedAt":  "2024-01-27T21:37:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc59Ps2j",
                                           "createdAt":  "2024-05-08T19:19:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tthiery",
                                           "body":  "I see similar behavior for the WebSockets (blazor, interactiveserver connecting to apiserver for update notification). I get a name on the wss protocol resolution error (and a delay of 2s). I tried to replace the web socket factory but I am not understanding how to change the name resolver there. When I change the transport to LongPolling and use @davidfowl hack of above, it works smooth as expected.",
                                           "updatedAt":  "2024-05-08T19:19:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5_wqd0",
                                           "createdAt":  "2024-06-01T14:12:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Lindsay-Mathieson",
                                           "body":  "\u003e The easier way to wire this up assuming you have access to the client factory would be something like this:\r\n\r\nThanks, took me a bit to figure out, but it worked.\r\n",
                                           "updatedAt":  "2024-06-01T14:12:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6FKN_q",
                                           "createdAt":  "2024-07-17T19:08:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "varndellwagglebee",
                                           "body":  "I\u0027m having the same problem between react (send/receive), .net 8(signalr here) and aspire, where the api is using signalr stand alone",
                                           "updatedAt":  "2024-07-17T19:08:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6Pg-qP",
                                           "createdAt":  "2024-10-11T16:50:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD-rHXw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KSemenenko",
                                                                               "createdAt":  "2024-10-16T18:34:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Plasmadog",
                                                                               "createdAt":  "2024-10-21T20:04:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matt-goldman",
                                                                               "createdAt":  "2024-12-12T03:31:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "andi0b",
                                           "body":  "I\u0027m currently struggling with service discovery for ClientWebSocket (non-SignalR websocket communication). It would be great to get an API for resolving service discovery on demand. There are probably many cases service discovery needs to be used without HttpClient, HttpMessageHandler, etc.\n\nsomething like `.GetRequiredService\u003cServiceDiscoverySomething\u003e().ResolveUrl(url)`\n\n**Edit:** After some digging I found out that `ClientWebSocket` takes a ` HttpMessageInvoker` on the `ConnectAsync` method instead of the Options where I looked for it. So Service discovery does work with `ClientWebSocket`. Let\u0027s hope this snipped goes into Copilot/etcs training data set :D\n\n```csharp\nvar httpClient = scope.ServiceProvider.GetRequiredService\u003cIHttpClientFactory\u003e().CreateClient(\"named-client\");\nvar client = new ClientWebSocket();\nawait client.ConnectAsync(new Uri($\"ws://service/something/somethingelse\"), httpClient);\n```\n```csharp\n// AppHost Program.cs\n// ws:// needs to be an endpoint on a service though, didn\u0027t work with a http:// endpoint\nvar container = builder.AddContainer(\"service\", ...)\n   .WithHttpEndpoint(targetPort: 80)\n   .WithEndpoint(targetPort: 80, scheme: \"ws\");\n\nvar project = builder.AddProject\u003c...\u003e(\"...\")\n   .WithReference(container.GetEndpoint(\"http\"))\n   .WithReference(container.GetEndpoint(\"ws\"));\n```",
                                           "updatedAt":  "2024-10-11T20:43:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6QsqL4",
                                           "createdAt":  "2024-10-21T20:11:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD-rHXA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matt-goldman",
                                                                               "createdAt":  "2024-12-12T03:31:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Plasmadog",
                                           "body":  "\u003e I\u0027m currently struggling with service discovery for ClientWebSocket (non-SignalR websocket communication). It would be great to get an API for resolving service discovery on demand. There are probably many cases service discovery needs to be used without HttpClient, HttpMessageHandler, etc.\n\u003e \n\u003e something like `.GetRequiredService\u003cServiceDiscoverySomething\u003e().ResolveUrl(url)`\n\u003e \n\nI can suggest one such use case; constructing a hyperlink to an endpoint on one of those services. I have a service that sends emails to users, and those emails need to include links to various parts of our platform. Some of those links are to services that are configured via service discovery, but there does not seem to be an easy way of getting that URL except by trying to send something to it.",
                                           "updatedAt":  "2024-10-21T20:11:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6nFQdp",
                                           "createdAt":  "2025-04-14T22:16:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOERCz3Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "manutiedra",
                                                                               "createdAt":  "2025-05-06T21:11:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wxwyz",
                                           "body":  "Using @davidfowl hack above, cookies included on the HttpConnectionOptions are not being sent along with the request.",
                                           "updatedAt":  "2025-04-14T22:16:14Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "SignalR client address resolution",
        "labels":  [
                       "documentation",
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/1536",
        "createdAt":  "2024-01-03T16:54:42Z",
        "number":  1536,
        "author":  "paule96",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODGO32g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "IvanFeric",
                                            "createdAt":  "2024-05-27T10:56:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jimitndiaye",
                                            "createdAt":  "2024-06-03T21:08:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BenjaminCharlton",
                                            "createdAt":  "2024-12-19T12:50:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RobertWeaver",
                                            "createdAt":  "2025-03-30T08:44:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ryanspain",
                                            "createdAt":  "2025-07-08T17:30:04Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2025-06-04T18:49:03Z",
        "body":  "Hi aspire team,\r\n\r\nin my last try to use aspire I tried to add a blazor webassembly app to my project. \r\n\r\nWhat I did so far is the following:\r\n\r\nAdd the blazor project to the aspire host with a reference to the backend:\r\n\r\n```csharp\r\nusing Aspire.Hosting;\r\nvar builder = DistributedApplication.CreateBuilder(args);\r\n\r\nvar server = builder.AddProject\u003cProjects.ElsaServer\u003e(\"elsaServer\");\r\nvar webApp = builder.AddProject\u003cProjects.ElsaStudio\u003e(\"elsaStudio\")\r\n    .WithReference(server);\r\n\r\nvar app = builder.Build();\r\nawait app.RunAsync();\r\n```\r\n\r\nNow I added the required packages to get service discovery to my blazor project\r\n\r\n```xml\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Http.Resilience\" Version=\"8.0.0\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.ServiceDiscovery\" Version=\"8.0.0-preview.3.24052.7\" /\u003e\r\n```\r\n\r\nThen I added in my `Program.cs` of my blazor project the following lines:\r\n\r\n```csharp\r\nbuilder.Services.AddServiceDiscovery();\r\nbuilder.Services.ConfigureHttpClientDefaults(http =\u003e\r\n{\r\n    // Turn on resilience by default\r\n    http.AddStandardResilienceHandler();\r\n\r\n    // Turn on service discovery by default\r\n    http.UseServiceDiscovery();\r\n});\r\n```\r\n\r\nThen I use as `BaseAddress` for my `httpClient` `http://elsaServer/elsa/api`\r\n\r\nBut when I run my blazor application I always get a HTTP Request from the browser on `http://elsaServer/elsa/api` and not on `http://localhost:43432/elsa/api`.\r\n\r\nSomething seems to not work here. And I don\u0027t know how to fix it. \r\n\r\nSo what I would wish to do is something like:\r\n\r\n```csharp\r\nbuilder.Services.AddServiceDiscovery(\"http://aspireHost/serviceDiscovery\");\r\n```\r\n\r\nSo you can specify in you client apps where aspire lives and provide an API that the clients can use to discover the services",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmzGXOw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOKYQzfc5wp_C5",
                                           "createdAt":  "2024-01-12T22:16:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEZzwdw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ReubenBond",
                                                                               "createdAt":  "2024-01-19T00:08:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RobertWeaver",
                                                                               "createdAt":  "2024-02-23T08:29:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fdugdale112",
                                                                               "createdAt":  "2024-05-18T13:52:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "BenjaminCharlton",
                                                                               "createdAt":  "2024-09-15T19:19:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Allann",
                                                                               "createdAt":  "2025-02-09T22:53:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ryanspain",
                                                                               "createdAt":  "2025-07-08T17:29:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "The service discovery system requires configuration to have the service name mapped to the actual underlying endpoint address. For server apps composed into the Aspire AppHost project, this happens automatically by injecting environment variables into the processes when they start, that have names that follow the service discovery system\u0027s configuration-based provider (and because ASP.NET Core configuration defaults to reading from environment variables, it works).\r\n\r\nFor browser apps, there\u0027s no such automatic flowing of configuration for service discovery. You\u0027ll need to somehow flow the configuration details to the browser. If the HTML is initially server-rendered, you could emit the details there into the page in some format, e.g. `data-` attributes on the `\u003cbody\u003e` tag, etc., and then author a custom implementation of `IServiceDiscoveryEndPointResolver` in your Blazor client app that reads from wherever you injected the data to. You could instead host an endpoint yourself that the implementation calls to from the browser to resolve addresses.\r\n\r\nI might have a go at putting together a sample as this question has come up a few times and it would be good to have something to point at.",
                                           "updatedAt":  "2024-01-12T22:16:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5wz2kM",
                                           "createdAt":  "2024-01-15T18:47:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "paule96",
                                           "body":  "@DamianEdwards maybe it would be nice to have a example how to host static content in aspire. Or what is the best way. I mean you can always deploy some kind of static website server but there are so many options out there that it could be a bit overwhelming to choose and also to build a good integration for it to aspire.\n",
                                           "updatedAt":  "2024-01-15T18:47:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5xNtzd",
                                           "createdAt":  "2024-01-19T00:12:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODzQnjw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "paule96",
                                                                               "createdAt":  "2024-01-20T12:25:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vicperdana",
                                                                               "createdAt":  "2024-04-23T11:11:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JakobFerdinand",
                                                                               "createdAt":  "2024-09-23T17:46:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "ReubenBond",
                                           "body":  "Service Discovery does not support client-side apps today since, as @DamianEdwards said, there is no automatic flowing of configuration from the host to the client application. In the eShop sample, we use YARP to act as a proxy when the client needs to contact another service. In particular, loading images from the catalog: https://github.com/dotnet/eShop/blob/3b49f61a888656b038b5f044b0d4c5096fc9f073/src/WebApp/Program.cs#L29\r\n\r\nFor the MAUI frontend, we map each API which is needed by the app using a similar strategy here: https://github.com/dotnet/eShop/blob/3b49f61a888656b038b5f044b0d4c5096fc9f073/src/Mobile.Bff.Shopping/Program.cs#L12-L36\r\n\r\nEDIT to clarify: in the eShop sample, instead of the clients communicating directly with backend API services, they only communicate directly with the service which the app is hosted on. That service proxies communication to the correct backend, using service discovery.",
                                           "updatedAt":  "2024-01-19T00:27:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5xaJbw",
                                           "createdAt":  "2024-01-21T16:01:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yarseyah",
                                           "body":  "Is anything special needed to be done for the forwarder to make it work with Aspire\u0027s service discovery, e.g. I have added the following forwarder to Wasm Server:\r\n\r\n`app.MapForwarder(\"/api/weatherforecast\", \"http://apiservice\", \"/weatherforecast\");`\r\n\r\nbut I get the following error:\r\n\r\n`System.Net.Http.HttpRequestException: nodename nor servname provided, or not known (apiservice:80)`\r\n\r\nIf I implement a new API in the server, and use `HttpClient` to manually make a call to the microservice, using the same `http://apiservice` it correctly communicates, so the service resolution works in the server, but not as part of the Yarp `MapForwarder`.",
                                           "updatedAt":  "2024-01-21T16:01:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5xaKMB",
                                           "createdAt":  "2024-01-21T16:12:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODme-sw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yarseyah",
                                                                               "createdAt":  "2024-01-21T16:20:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "geloidA",
                                                                               "createdAt":  "2024-06-21T04:41:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@yarseyah yes, add a reference to [Microsoft.Extensions.ServiceDiscovery.Yarp](https://www.nuget.org/packages/Microsoft.Extensions.ServiceDiscovery.Yarp/), and call `AddHttpForwarderWithServiceDiscovery`.",
                                           "updatedAt":  "2024-01-21T16:12:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6Fq_BM",
                                           "createdAt":  "2024-07-22T10:35:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "1iveowl",
                                           "body":  "\u003e @yarseyah yes, add a reference to [Microsoft.Extensions.ServiceDiscovery.Yarp](https://www.nuget.org/packages/Microsoft.Extensions.ServiceDiscovery.Yarp/), and call `AddHttpForwarderWithServiceDiscovery`.\r\n\r\n@davidfowl, as far as I can tell, adding a reference to `Microsoft.Extensions.ServiceDiscovery.Yarp` will not work for blazor webassembly clients, because `Microsoft.Extensions.ServiceDiscovery.Yarp` has a dependency to `Microsoft.AspNetCore.App`. \r\n\r\nTrying to add `Microsoft.Extensions.ServiceDiscovery.Yarp` results in:\r\n\r\n`Severity | Code | Description | Project | File | Line | Suppression State\r\n-- | -- | -- | -- | -- | -- | --\r\nError (active) | NETSDK1082 | There was no runtime pack for Microsoft.AspNetCore.App available for the specified RuntimeIdentifier \u0027browser-wasm\u0027. | MyBlazor.Client | C:\\Program Files\\dotnet\\sdk\\8.0.303\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets | 491 |  \r\n`",
                                           "updatedAt":  "2024-07-22T10:36:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6K5dYB",
                                           "createdAt":  "2024-09-04T23:28:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "@1iveowl that package would be added to the server project in the case of an ASP.NET Core hosted Blazor WASM project, if using YARP to forward requests from the Blazor WASM app to another backend service.",
                                           "updatedAt":  "2024-09-04T23:28:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6bMZc7",
                                           "createdAt":  "2025-01-21T05:52:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEZzxiQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "paule96",
                                                                               "createdAt":  "2025-01-21T06:02:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ryanspain",
                                                                               "createdAt":  "2025-07-08T17:32:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "BenjaminCharlton",
                                           "body":  "I believe [this pull request](https://github.com/dotnet/aspire/pull/7162) (if it gets accepted) will do what you need with service discovery, @paule96.\n\nIn the meantime, [this Nuget package](https://www.nuget.org/packages/Aspire4Wasm/) does exactly the same thing for you. It doesn\u0027t make the Aspire developer experience with Blazor totally seamless, but it does overcome your particular problem. I\u0027d be glad of feedback [on the repo](https://github.com/BenjaminCharlton/Aspire4Wasm) if you decide to try it.",
                                           "updatedAt":  "2025-01-21T05:52:57Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Is there any way to use ServiceDiscovery for client (aka browser) apps?",
        "labels":  [
                       "area-samples",
                       "area-service-discovery",
                       "blazor-wasm"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/2515",
        "createdAt":  "2024-02-28T12:18:03Z",
        "number":  2515,
        "author":  "Dona278",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-10-16T08:03:40Z",
        "body":  "Preamble:\r\nIn kubernetes we can communicate between services according to the [DNS name](https://kubernetes.io/docs/concepts/services-networking/service/#dns) and [(specification)](https://github.com/kubernetes/dns/blob/master/docs/specification.md).\r\nWith service discovery named endpoints in Aspire we can use the \"http://_{endpointName}.{serviceName}\" uri in order to work, awesome! \r\nSo in production within a kubernetes cluster, in which we have namespaces, I thought it was normal to add the namespace after the service name, in case of communication between services of two different namespaces, as described in the kubernetes service dns concepts.\r\nUnfortunately the service discovery works only between services of the same namespace and without declaring anything after the service name.\r\nSo I though it was an issue with our services configuration but after follow the [debug instruction for CoreDNS](https://kubernetes.io/docs/tasks/administer-cluster/dns-debugging-resolution) I have not found any sort of issue.\r\n\r\nIssue:\r\nHttpClient with service discovery enabled which make request to named endpoint of a service which belong to a different namespace returns always `The endpoint collection contains no endpoints`.\r\nAfter debugging service discovery implementation I found that the srv query made contains the current namespace instead of the provided one within the service name (e.g. with `http://_grpc.service-name.default`).\r\nThe namespace is returned from the `DnsSrvServiceEndPointResolverProvider.ReadQualifiedNamespaceFromResolvConf` method which return the second result of the `search` line split by space (e.g. `search test.svc.cluster.local svc.cluster.local cluster.local` return `test.svc.cluster.local`) which is then appended to the srv query which result in `http://_grpc._tcp.service-name.default.test.svc.cluster.local`.\r\n\r\nWorkaround:\r\nWe can use the `QuerySuffix` option to hard code `svc.cluster.local` which is then appended to the srv query instead of using the  `DnsSrvServiceEndPointResolverProvider.ReadQualifiedNamespaceFromResolvConf` method, which result in `http://_grpc._tcp.service-name.default.svc.cluster.local` which works perfectly.\r\n\r\nSuggestion;\r\nIt might be good to avoid query suffix and instead take the third value of the `search` line split operation within `DnsSrvServiceEndPointResolverProvider.ReadQualifiedNamespaceFromResolvConf` in case of namespace already declared in serviceName parameter.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdWbHUQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOKYQzfc51ZHtc",
                                           "createdAt":  "2024-02-28T17:46:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ReubenBond",
                                           "body":  "Hi @Dona278, thanks for the writeup. Indeed, Service Discovery makes the (over-)simplifying assumption that all of the services for your app live within a single namespace. One issue with adding the namespace to the service name is that it won\u0027t work at dev time out-of-the-box. That is my concern. Do you have a suggestion for how this could work in a way which is portable across dev \u0026 prod?\r\n\r\nIf there was a delegate to map a service name to a query, would that be sufficient?",
                                           "updatedAt":  "2024-02-28T17:46:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc51ZsdR",
                                           "createdAt":  "2024-02-28T19:09:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dona278",
                                           "body":  "\"won\u0027t work at dev time\" is what I said just after open the issue!\n\nIn our context we only have two namespaces in which the second one there are \"worker service\" (keda scaled object spawned based on azure queue), so for these services only we use the \"namespace\" behavior and only in \"Production\" environment.\nHowever I think that a delegate might be sufficent and maybe could be only part of the DnsSrv service discovery implementation, during services registration? \nAnd provide a sort of token replacement of a query instead of create a new one from zero? In order to allow only the add of the namespace leaving the kubernetes cluster hostname as it was read from cfg file.",
                                           "updatedAt":  "2024-02-28T19:09:55Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Kubernetes DnsSrv service discovery across namespace",
        "labels":  [
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/2549",
        "createdAt":  "2024-02-29T21:53:18Z",
        "number":  2549,
        "author":  "IEvangelist",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4qXyA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "StevenTCramer",
                                            "createdAt":  "2024-05-21T08:01:11Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "StevenTCramer",
                                            "createdAt":  "2024-05-21T08:01:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "marinasundstrom",
                                            "createdAt":  "2024-06-16T10:59:34Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "marinasundstrom",
                                            "createdAt":  "2024-06-16T10:59:35Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2024-10-16T08:03:38Z",
        "body":  "It would be really nice if Aspire added some extension methods on `IConfiguration` that allow for convenience-based APIs for getting values.\r\n\r\nFor example, it\u0027s ugly to ask the config for `\"services__serviceName__0\"`. Something like this might be really useful:\r\n\r\n```csharp\r\npublic static class ConfigurationExtensions\r\n{\r\n    public static Uri GetServiceHttpUri(this IConfiguration config, string name) =\u003e\r\n        config.GetServiceUri(name, 0);\r\n\r\n    public static Uri GetServiceHttpsUri(this IConfiguration config, string name) =\u003e\r\n        config.GetServiceUri(name, 1);\r\n\r\n    private static Uri GetServiceUri(this IConfiguration config, string name, int index)\r\n    {\r\n        ArgumentException.ThrowIfNull(name);\r\n\r\n        var url = config[$\"services:{name}:{index}\"];\r\n\r\n        return new(url);\r\n    }\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfqKCmQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOKYQzfc51iyQA",
                                           "createdAt":  "2024-02-29T22:08:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "cc @ReubenBond ",
                                           "updatedAt":  "2024-02-29T22:08:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc53FyEM",
                                           "createdAt":  "2024-03-14T17:44:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODao22g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IEvangelist",
                                                                               "createdAt":  "2024-03-14T23:04:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ReubenBond",
                                           "body":  "This can be useful. We added something similar in the Aspire.Hosting.Testing package as an extension on DistributedApplication.\r\nThe API would need to take an optional endpoint name. I would prefer it returns HTTP only if HTTPS is not available.",
                                           "updatedAt":  "2024-03-14T17:47:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc53IPWr",
                                           "createdAt":  "2024-03-14T23:34:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IEvangelist",
                                           "body":  "Where is that, I just looked and can\u0027t seem to find what you\u0027re describing?",
                                           "updatedAt":  "2024-03-14T23:34:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5-ooKZ",
                                           "createdAt":  "2024-05-22T11:37:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IEvangelist",
                                           "body":  "I also recently stumbled upon these, that are similar by don\u0027t expand the config names: [`dotnet/aspire/blob/main/src/Shared/IConfigurationExtensions.cs`](https://github.com/dotnet/aspire/blob/main/src/Shared/IConfigurationExtensions.cs).",
                                           "updatedAt":  "2024-05-22T11:37:45Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Create `IConfiguration` extension methods to get Aspire convention-based values ",
        "labels":  [
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/2896",
        "createdAt":  "2024-03-14T18:03:29Z",
        "number":  2896,
        "author":  "DamianEdwards",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6cYvg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "abbottdev",
                                            "createdAt":  "2024-08-23T10:40:01Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-07T16:45:02Z",
        "body":  "The format used to support URI scheme resolution recently added to service discovery (e.g. `https+http://`) does not work with the gRPC client stack. The [`GrpcChannel` class](https://github.com/grpc/grpc-dotnet/blob/933023b6f818ec54dfe84e7d31ec50dfe5044c13/src/Grpc.Net.Client/GrpcChannel.cs#L105) does a lot of initialization in its constructor based on the scheme of the address and special-cases `https://` and `http://` for numerous operations including `ResolverFactory` resolution and credential selection.\r\n\r\n@JamesNK interested in your thoughts on how we might go about fixing this. I messed about a bit with a custom `ResolverFactory` and got further but seems we\u0027d have to integrate more deeply to make the syntax work or update `GrpcChannel` to tolerate it some other way.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvKEUYg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOKYQzfc53IOgK",
                                           "createdAt":  "2024-03-14T23:31:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "HttpClient happily sends HTTP requests to different hosts over https or http, and you can completely change a request as it goes through the handler pipeline.\r\n\r\nGrpcChannel is different in that you specify the scheme + host, and then it only sends request to that address. Because of this, the channel has logic in it that knows whether it is https or http, and makes decisions based on that.\r\n\r\nMaybe something could be done in Grpc.Net.Client. But GrpcChannel wasn\u0027t designed to work like this. It really wants to know what its scheme is when it\u0027s created, not when it is sending a gRPC call.",
                                           "updatedAt":  "2024-03-14T23:31:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc53IP_x",
                                           "createdAt":  "2024-03-14T23:38:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "Can we integrate Service Discovery into the gRPC client in a different way, such that the address is fully resolved by the time the `GrpcChannel` is being created?",
                                           "updatedAt":  "2024-03-14T23:38:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc530zEL",
                                           "createdAt":  "2024-03-20T18:33:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "Ultimately the address needs to be resolved before the gRPC client is configured, as `GrpcChannel` performs specific logic at creation time (literally in the constructor) based on the scheme. The following \"works\" but has a huge issue of sync-over-async as it has to be done in an options delegate:\r\n\r\n```csharp\r\nbuilder.Services.AddSingleton\u003cBasketServiceClient\u003e()\r\n                .AddGrpcClient\u003cBasket.BasketClient\u003e((sp, o) =\u003e\r\n                {\r\n                    var resolver = sp.GetRequiredService\u003cServiceEndPointResolver\u003e();\r\n                    var endpoints = resolver.GetEndPointsAsync(\"https+http://basketservice\", default).AsTask().GetAwaiter().GetResult();\r\n                    var address = endpoints.Where(e =\u003e e.EndPoint is UriEndPoint uriEndpoint)\r\n                                           .Select(e =\u003e ((UriEndPoint)e.EndPoint).Uri)\r\n                                           .First();\r\n                    o.Address = address;\r\n                });\r\n```",
                                           "updatedAt":  "2024-03-20T18:33:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc532a5C",
                                           "createdAt":  "2024-03-20T22:24:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "Next steps are to experiment with bringing back a gRPC resolver but this time for the \"https+http\" scheme (or whatever combination the user wants) and see how far we get with that approach.",
                                           "updatedAt":  "2024-03-20T22:24:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc5455yI",
                                           "createdAt":  "2024-03-30T19:07:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Moving to p6, unclear if it meets the bar though",
                                           "updatedAt":  "2024-03-30T19:07:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6Bl895",
                                           "createdAt":  "2024-06-17T18:56:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "Is this something we want to fix 8.1 @ReubenBond?",
                                           "updatedAt":  "2024-06-17T18:56:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6Bl-hp",
                                           "createdAt":  "2024-06-17T19:00:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "No we can move it out.",
                                           "updatedAt":  "2024-06-17T19:00:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6GgsEs",
                                           "createdAt":  "2024-07-29T19:18:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODturJg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ReubenBond",
                                                                               "createdAt":  "2024-08-12T19:44:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "We should consider moving this to the backlog until we get user feedback that it\u0027s worth investigating.",
                                           "updatedAt":  "2024-07-29T19:18:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6Pb7D_",
                                           "createdAt":  "2024-10-11T03:00:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1yhiA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "andi0b",
                                                                               "createdAt":  "2024-10-11T18:59:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "gabynevada",
                                           "body":  "What kind of feedback is needed for this? We\u0027re using grpc for some services and would love to see a solution for service discovery.",
                                           "updatedAt":  "2024-10-11T03:00:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6PgpOE",
                                           "createdAt":  "2024-10-11T15:56:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1xbJw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gabynevada",
                                                                               "createdAt":  "2024-10-11T16:10:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "@gabynevada TBC, service discovery of the hostname/addresses does work right now, it\u0027s just the multi-scheme format fallback feature that doesn\u0027t work with gRPC, e.g. `https+http://my-service`. Do you have a specific need for that support?",
                                           "updatedAt":  "2024-10-11T15:56:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6PgwUG",
                                           "createdAt":  "2024-10-11T16:13:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1zyYw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DamianEdwards",
                                                                               "createdAt":  "2024-10-11T23:18:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "gabynevada",
                                           "body":  "@DamianEdwards Understood! We were using multi-scheme format but changed to a single scheme and it works fine. Don\u0027t have a need for multt-scheme for the moment, thanks!",
                                           "updatedAt":  "2024-10-11T16:13:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6cwSo7",
                                           "createdAt":  "2025-02-03T04:44:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "omarceloribeiro",
                                           "body":  "it not worked for me in .net 8 even using https://myservice",
                                           "updatedAt":  "2025-02-03T04:44:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6c3MRF",
                                           "createdAt":  "2025-02-03T18:08:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "@omarceloribeiro are you getting any errors? Have you ensured that service discovery is configured for `HttpClient` correctly? The [Aspire Shop sample](https://github.com/dotnet/aspire-samples/tree/main/samples/AspireShop) includes a gRPC service (BasketService) and is targeting `net8.0`. Can you verify that you can run that sample successfully locally? If so, can you compare your code to what the sample is doing?",
                                           "updatedAt":  "2025-02-03T18:08:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6c-8Ew",
                                           "createdAt":  "2025-02-04T12:20:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "omarceloribeiro",
                                           "body":  "found the difference. I was setting a new HttpHandler on channelOptions in a code to configure an authentication token. but that was uncessary because in fact the credential was setting in channelOptions.Credentials.\n\n\n```\n//channelOptions.HttpHandler = new HttpClientHandler\n//{\n\n//};\n```\n\n```\nchannelOptions.Credentials = ChannelCredentials.Create(new SslCredentials(), CallCredentials.FromInterceptor((context, metadata) =\u003e\n    {\n        return AddAppCallCredentials(context, metadata, serviceProvider);\n    }));\n```\n\nso removing the code that was replacing the existing HttpHandler the service discovery started to work.\n\n\n\nthank you!",
                                           "updatedAt":  "2025-02-04T21:00:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6knA1t",
                                           "createdAt":  "2025-03-28T15:26:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikeleigh1010",
                                           "body":  "@DamianEdwards interestingly coming against something similar\n\nCurrent docs suggest (perhaps changed in .NET 9?) doing it slightly differently to as is in the eshop example:\n\n```csharp\nvar isHttps = builder.Configuration[\"DOTNET_LAUNCH_PROFILE\"] == \"https\";\nbuilder.Services.AddGrpcClient\u003cDiscountProtoService.DiscountProtoServiceClient\u003e(options =\u003e\n    {\n        // options.Address = new Uri($\"{(isHttps ? \"https\" : \"http\")}://discountgrpcservice\");\n        options.Address = new Uri(\"https+http://discountgrpcservice\");\n```\n\nCommented out way (like eshop) works fine, whereas the current docs way (of being agnostic of http protocol does not work and returns\n\n```json\n{\n    \"title\": \"InvalidOperationException\",\n    \"status\": 500,\n    \"detail\": \"No address resolver configured for the scheme \u0027https+http\u0027.\",\n    \"instance\": \"/basket\",\n    \"traceId\": \"0HNBE1GV4T8GA:00000001\"\n}\n```\n\nDoc in question: https://learn.microsoft.com/en-us/dotnet/aspire/get-started/build-your-first-aspire-app?tabs=dotnet-cli\u0026pivots=dotnet-cli#:%7E:text=builder.Services.AddHttpClient%3CWeatherApiClient%3E(%0A%20%20%20%20static%20client%3D%3E%20client.BaseAddress%20%3D%20new(%22http%3A//apiservice%22))%3B",
                                           "updatedAt":  "2025-03-28T18:09:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6koi_V",
                                           "createdAt":  "2025-03-28T18:11:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEOXaJA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mikeleigh1010",
                                                                               "createdAt":  "2025-04-03T14:55:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KuraiAndras",
                                                                               "createdAt":  "2025-04-15T11:37:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "@mikeleigh1010 yes this is exactly what this issue is about. The doc you\u0027re pointing at is using the `https+http` syntax for a standard `HttpClient` instance, not for a gRPC client. The gRPC client does not support the `https+http` syntax (this issue).",
                                           "updatedAt":  "2025-03-28T18:11:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc68oRRi",
                                           "createdAt":  "2025-08-07T15:24:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AlgorithmsAreCool",
                                           "body":  "~This issue causes an additional allergic reaction to the way service discovery URLs are interpreted in a Kubernetes environment.~\n\n~When in Kubernetes, the DSN SRV service discovery provider [uses the URI scheme as the portname](https://github.com/dotnet/aspire/blob/75fdcff28495bdd643f6323133a7d411df71ab70/src/Microsoft.Extensions.ServiceDiscovery.Dns/DnsSrvServiceEndpointProviderFactory.cs#L32) when looking up SRV record, but since we can\u0027t currently use non-standard schemes (`grpc://` in my case) the service discovery provider doesn\u0027t work correctly.~\n\nAfter digging in the code more i have found that your can specify the port of a service by prefixingg the service discovery uri hostname with a `_\u003cportname\u003e.` segment.\n\ne.g. if your desired portname is `abcd` and your service\u0027s name if `foo` you can specify the service discovery uri as `_abcd.foo` and it will work.\n\nI believee the above linked comment in the code that indicates the scheme is to be used as the portname is incorrect.\n\nBut my above complaint is not actually valid.",
                                           "updatedAt":  "2025-08-07T16:45:02Z"
                                       }
                                   ],
                         "totalCount":  17
                     },
        "title":  "gRPC client doesn\u0027t work with Service Discovery scheme resolution syntax",
        "labels":  [
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/3479",
        "createdAt":  "2024-04-08T08:28:20Z",
        "number":  3479,
        "author":  "Dona278",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-21T16:46:38Z",
        "body":  "Since the preview4 (ignored thinking of a temporary issue), now with the 8.0.0-preview.5.24163.6 (the version used in our last deployment) we encountered a huge amount of timout from service discovery internal refresh.\r\n\r\n```\r\n[08:18:00 ERR] Error resolving endpoints for service \u0027http://_grpc.registry-service\u0027.\r\nDnsClient.DnsResponseException: Query 28796 =\u003e _grpc._tcp.registry-service.default.svc.cluster.local IN SRV on 11.0.0.10:53 timed out or is a transient error.\r\n---\u003e System.OperationCanceledException: The operation was canceled.\r\nat System.Threading.CancellationToken.ThrowOperationCanceledException()\r\nat DnsClient.LookupClient.ResolveQueryAsync(IReadOnlyList`1 servers, DnsQuerySettings settings, DnsMessageHandler handler, DnsRequestMessage request, LookupClientAudit audit, CancellationToken cancellationToken)\r\n--- End of inner exception stack trace ---\r\nat DnsClient.LookupClient.ResolveQueryAsync(IReadOnlyList`1 servers, DnsQuerySettings settings, DnsMessageHandler handler, DnsRequestMessage request, LookupClientAudit audit, CancellationToken cancellationToken)\r\nat DnsClient.LookupClient.QueryInternalAsync(DnsQuestion question, DnsQuerySettings queryOptions, IReadOnlyCollection`1 servers, CancellationToken cancellationToken)\r\nat Microsoft.Extensions.ServiceDiscovery.Dns.DnsSrvServiceEndPointResolver.ResolveAsyncCore() in /_/src/Microsoft.Extensions.ServiceDiscovery.Dns/DnsSrvServiceEndPointResolver.cs:line 39\r\nat Microsoft.Extensions.ServiceDiscovery.Dns.DnsServiceEndPointResolverBase.ResolveAsyncInternal() in /_/src/Microsoft.Extensions.ServiceDiscovery.Dns/DnsServiceEndPointResolverBase.cs:line 110\r\nat Microsoft.Extensions.ServiceDiscovery.Dns.DnsServiceEndPointResolverBase.ResolveAsync(ServiceEndPointCollectionSource endPoints, CancellationToken cancellationToken) in /_/src/Microsoft.Extensions.ServiceDiscovery.Dns/DnsServiceEndPointResolverBase.cs:line 84\r\nat Microsoft.Extensions.ServiceDiscovery.ServiceEndPointWatcher.RefreshAsyncInternal() in /_/src/Microsoft.Extensions.ServiceDiscovery/ServiceEndPointWatcher.cs:line 141\r\nat Microsoft.Extensions.ServiceDiscovery.ServiceEndPointWatcher.RefreshAsyncInternal() in /_/src/Microsoft.Extensions.ServiceDiscovery/ServiceEndPointWatcher.cs:line 235\r\n```\r\n\r\nThe strange thing is that the communication works fine!\r\nOnly the last week we got two times the \"The endpoint collection contains no endpoints\" error message in production, and this was the reason of why this issue was opened.\r\n\r\nIf can help the environment is an AKS with kubernetes v1.28.3.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Service discovery refresh query timeout",
        "labels":  [
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/3746",
        "createdAt":  "2024-04-17T04:48:59Z",
        "number":  3746,
        "author":  "gdantuono",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-21T16:47:44Z",
        "body":  "Package: Microsoft.Extentions.ServiceDiscovery 8 preview 5\r\n\r\nI would like to use the ServiceDiscovery library to be able to retrieve the Endpoint of a WCF service with net.tcp protocol.\r\n\r\nBut this code return null:\r\n\r\n```cs\r\nvar endPointResolver = serviceProvider.GetRequiredService\u003cServiceEndPointResolver\u003e();\r\nvar result = await endPointResolver.GetEndPointAsync(\"net.tcp://basket\", default).ConfigureAwait(false);\r\nAssert.IsNull(result);\r\n```\r\n\r\nConfiguration appSettings.json:\r\n\r\n```json\r\n{\r\n  \"Services\": {\r\n    \"basket\": {\r\n      \"net.tcp\": \"net.tcp://localhost:82378\"\r\n    }\r\n  }\r\n}\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOes7fxw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOKYQzfc56zt_H",
                                           "createdAt":  "2024-04-17T05:24:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gdantuono",
                                           "body":  "I found that by mistake in configuration I set an invalid port.\r\n\r\nWhen the port exceeds 65535 (by configuration error), the GetEndPointsAsync method returns null.\r\n\r\nPerhaps it would be better to raise an exception when loading the configuration? ",
                                           "updatedAt":  "2024-04-17T05:24:55Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ServiceEndPointResolver.GetEndPointsAsync not work with net.tcp scheme",
        "labels":  [
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/3783",
        "createdAt":  "2024-04-17T20:14:00Z",
        "number":  3783,
        "author":  "oising",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-10-16T08:03:00Z",
        "body":  "Problem:\r\n\r\nTo use private azure resources in Aspire [from outside of Azure,i.e. on-prem], it\u0027s necessary to use a VPN (unavoidable) and additions to your local hosts file (avoidable -- see below.) The latter requires elevation/local admin also. \r\n\r\nSolution:\r\n\r\nImplement an abstraction that can resolve non-http and http resources using the following SDK within Aspire:\r\n\r\nhttps://learn.microsoft.com/en-us/dotnet/api/overview/azure/resourcemanager.dnsresolver-readme?view=azure-dotnet\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOe0P7oQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOKYQzfc568so1",
                                           "createdAt":  "2024-04-17T23:55:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "oising",
                                           "body":  "(hosting your own bind or other flavour of dns server in a container that spans your on prem and private vnets as a forwarder for the private zone is of course possible, but arguably more expensive and messy as a solution.)",
                                           "updatedAt":  "2024-04-17T23:55:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc57Q_uh",
                                           "createdAt":  "2024-04-21T13:54:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "oising",
                                           "body":  "Even a component that detected privatelink usage on referenced resources and synced to your hosts file would be good enough. Setting up a local forwarder would be nice, but I don\u0027t know if the windows client supports that. ",
                                           "updatedAt":  "2024-04-21T13:54:53Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Consider adding Azure Private Dns Zone resolver functionality for http and non-http Service Discovery",
        "labels":  [
                       "area-service-discovery",
                       "azure"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/3987",
        "createdAt":  "2024-04-27T13:05:16Z",
        "number":  3987,
        "author":  "thompson-tomo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-14T05:55:08Z",
        "body":  "To facilitate a rich eco system which provides developers with a large amount of flexibility we should be releasing a service registration packages with the key ones being.\r\n- Microsoft.Extensions.ServiceRegistration.Abstraction provides an interface for application to register themselves\r\n- Microsoft.Extensions.ServiceRegistration.Aspire allows for applications to register with Aspire and provides the AddAspireRegistry method\r\n\r\nA potential usage would be as follows:\r\n\r\n```C#\r\nvar builder = DistributedApplication.CreateBuilder(args).**AddAspireRegistry()**;\r\n\r\nvar cache = builder.AddRedis(\"cache\");\r\n\r\nvar apiservice = builder.AddProject\u003cProjects.AspireApp_ApiService\u003e(\"apiservice\");\r\n\r\nbuilder.AddProject\u003cProjects.AspireApp_Web\u003e(\"webfrontend\")\r\n       .WithReference(cache)\r\n       .WithReference(apiservice);\r\n\r\nbuilder.Build()**.RegisterToRegistry()**.Run();\r\n```\r\n\r\nWith this approach we can easily use aspire registry for local development \u0026 switch to alternative in production ie Kubernetes.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfA3LZw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOKYQzfc58DTcS",
                                           "createdAt":  "2024-04-27T23:29:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This API proposal is a little bit light on details for something that you\u0027d like to see changed before GA @thompson-tomo . Unfortunately, I don\u0027t think we\u0027d be making any huge changes this late without fully understanding the details and implications. \r\n\r\nCan you help us by explaining in more details what this change would look like and what it would affect?",
                                           "updatedAt":  "2024-04-27T23:29:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc58DbdS",
                                           "createdAt":  "2024-04-28T01:12:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "thompson-tomo",
                                           "body":  "The key thing is the 2 additions to the code snippet above which was taken directly from the docs:\r\n\r\n- AddAspireRegistry() -\u003e Indicates the registrations are to be sent to Aspire and provided by Microsoft.Extensions.ServiceRegistration.Aspire. It is Foreseeable, that the community integrates other Registry\u0027s\r\n- RegisterToRegistry() -\u003e Is used at the end of the build process to indicate that everything is registered. It is at this point in time which the services provided/needed are transferred to the registry in a bulk action. This would effectively going through and for the registration\u0027s actually performing the registration ie for AddRedis(\"\")\r\n- ",
                                           "updatedAt":  "2024-04-28T01:12:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc58Dcao",
                                           "createdAt":  "2024-04-28T01:17:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODfyj1w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "thompson-tomo",
                                                                               "createdAt":  "2024-04-28T01:24:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This sounds like a cool idea that needs some more design and iteration. It\u0027s not something we will add at this point without going through those design rounds.",
                                           "updatedAt":  "2024-04-28T01:17:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc58Dctn",
                                           "createdAt":  "2024-04-28T01:24:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "thompson-tomo",
                                           "body":  "Agree, it is not something for initial release given timeline and it would need detailed design in terms of interface shape etc with implications for a number of libraries.",
                                           "updatedAt":  "2024-04-28T01:24:46Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Introduction of Microsoft.Extensions.ServiceRegistration.* packages",
        "labels":  [
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/4224",
        "createdAt":  "2024-05-18T08:55:38Z",
        "number":  4224,
        "author":  "thompson-tomo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODPUOSg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wertzui",
                                            "createdAt":  "2024-06-02T19:30:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EmmittJ",
                                            "createdAt":  "2024-06-03T20:21:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pfeigl",
                                            "createdAt":  "2024-07-06T22:56:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "elementum",
                                            "createdAt":  "2024-07-07T04:18:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kongxy10",
                                            "createdAt":  "2024-07-07T16:43:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Plasmadog",
                                            "createdAt":  "2024-10-22T02:44:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danbopes",
                                            "createdAt":  "2025-02-07T00:21:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bart-vmware",
                                            "createdAt":  "2025-09-09T11:18:39Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2025-05-12T11:03:00Z",
        "body":  "I am using the endpoint resolver to obtain my endpoints however i do not have the option of obtaining a structured uri for my endpoint due to the UriEndpointClass being internal. As such i am needing to cast the endpoint to a string and then construct a new URI using the string. This double conversion should not be necessary given that the URI Endpoint already contains the uri.\r\n\r\nThe reason which i am needing it as a Uri is so that i can get the path string.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOg-Apww==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOKYQzfc6D2QNC",
                                           "createdAt":  "2024-07-06T23:04:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pfeigl",
                                           "body":  "I ran into this also today and I\u0027m wondering whether my (our) whole approach is wrong?\r\n\r\nI\u0027m having two projects. One hosts a NON http service. I mark the port I\u0027m using here as Endpoint in the AppHost.\r\nThe other project wants to consume this service and is marked with the relevant reference to the former resource.\r\n\r\nAgain, this is not http based and thus the ServiceDiscovery on the http message handler wont work here.\r\nTherefor I fell back to use the normal `ServiceEndpointResolver`.\r\n\r\nHowever calling `GetEndpointsAsync` returns `UriEndPoints`. These are as @thompson-tomo outlined internal and even do not implement the `Serialize` method.\r\n\r\nI kind of have the feeling I\u0027m doing something completely wrong. Perhaps someone can shed some light on this area, where non HTTP traffic is in the play.",
                                           "updatedAt":  "2024-07-06T23:04:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6D4CnD",
                                           "createdAt":  "2024-07-07T16:48:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kongxy10",
                                           "body":  "Agreed. I\u0027m unable to implement a ```IServiceEndpointProvider``` that can resolve a ```UriEndPoint```.",
                                           "updatedAt":  "2024-07-07T16:48:16Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Make Microsoft.Extensions.ServiceDiscovery.UriEndpoint class Public",
        "labels":  [
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/4229",
        "createdAt":  "2024-05-19T01:03:13Z",
        "number":  4229,
        "author":  "thompson-tomo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-21T16:50:43Z",
        "body":  "### Details of issue\r\nIn my aspnet core application I am utilising dependency injection to provide ServiceEndpointResolver in the constructor of my controllers which works as expected for my application. However now that I am reviewing my unit tests, all the controllers which utilise ServiceEndpointResolver as an argument are failing even after using Moq to create the parameter for the constructor.\r\n\r\nusing the mock repository results in the below error\r\n` System.NotSupportedException: Type to Mock (ServiceEndpointResolver) must be an interface, a delegate or a non-sealed, non-static class.`\r\n\r\nAttempting to use Nsubsitute results in the below error\r\n` System.NotSupportedException: Parent does not have a default constructore. The default constructor must be explicitly defined.`\r\n\r\nWhat i would like to make it easier for developers is if ServiceEndpointResolver was an implementation of IServiceEndpointResolver to allow for test cases to easily be implemented and pass.\r\n\r\n### Workaround available\r\nImplementation of a dedicated constructor without ServiceEndpointResolver and additional code in class to handle the null case.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Have ServiceEndpointResolver implement an interface",
        "labels":  [
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/4423",
        "createdAt":  "2024-06-08T04:18:48Z",
        "number":  4423,
        "author":  "thompson-tomo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-21T16:56:39Z",
        "body":  "Upon an analysis of my application i have observed that \"Microsoft.Extensions.ServiceDiscovery.ServiceEndpointWatcher\" is not having trace/transactions ids.\r\n\r\nAs such i would like that all methods generating logs are wrapped in activities to enabled distributed tracing and at the same time all log events have a trace/transaction id.\r\n\r\nAt the same time it should be checked if any other methods are not covered",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgdl35g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOKYQzfc6Afv0x",
                                           "createdAt":  "2024-06-08T04:41:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Why would it create an activity?",
                                           "updatedAt":  "2024-06-08T04:41:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6A_GVb",
                                           "createdAt":  "2024-06-12T22:51:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "thompson-tomo",
                                           "body":  "@davidfowl when i look at my logs i am getting the following log messages:\r\n```\r\n{\"@timestamp\":\"2024-06-13T08:39:05.4832113+10:00\",\"log.level\":\"Debug\",\"message\":\"Resolving endpoints for service \\u0027http://localhost:8761\\u0027.\",\"log\":{\"logger\":\"Microsoft.Extensions.ServiceDiscovery.ServiceEndpointWatcher\"},\"labels\":{\"EventName\":\"ResolvingEndpoints\"},\"event\":{\"code\":\"1\",\"created\":\"2024-06-13T08:39:05.4832113+10:00\",\"severity\":7,\"timezone\":\"AUS Eastern Standard Time\"}\"service\":{\"name\":\"http://localhost:8761\",\"node.name\":\"\",\"version\":\"2.3.1-beta-241610955\\u002B81e61e0e20f6b035dc1bb7e4e91442759b37c0b3\"},\"metadata\":{\"EventId\":1},\"MessageTemplate\":\"Resolving endpoints for service \\u0027{ServiceName}\\u0027.\"}\r\n{\"@timestamp\":\"2024-06-13T08:39:05.4832113+10:00\",\"log.level\":\"Debug\",\"message\":\"No valid endpoint configuration was found for service \\u0027localhost\\u0027 from path \\u0027Services:localhost\\u0027.\",\"log\":{\"logger\":\"Microsoft.Extensions.ServiceDiscovery.Configuration.ConfigurationServiceEndpointProvider\"},\"labels\":{\"Path\":\"Services:localhost\",\"EventName\":\"ServiceConfigurationNotFound\"},\"event\":{\"code\":\"3\",\"created\":\"2024-06-13T08:39:05.4832113+10:00\",\"severity\":7,\"timezone\":\"AUS Eastern Standard Time\"},\"service\":{\"name\":\"localhost\",\"node.name\":\"\",\"version\":\"2.3.1-beta-241610955\\u002B81e61e0e20f6b035dc1bb7e4e91442759b37c0b3\"},\"metadata\":{\"EventId\":3},\"MessageTemplate\":\"No valid endpoint configuration was found for service \\u0027{ServiceName}\\u0027 from path \\u0027{Path}\\u0027.\"}\r\n{\"@timestamp\":\"2024-06-13T08:39:05.493175+10:00\",\"log.level\":\"Debug\",\"message\":\"No valid endpoint configuration was found for service \\u0027localhost\\u0027 from path \\u0027Services:localhost\\u0027.\",\"log\":{\"logger\":\"Microsoft.Extensions.ServiceDiscovery.Configuration.ConfigurationServiceEndpointProvider\"},\"labels\":{\"Path\":\"Services:localhost\",\"EventName\":\"ServiceConfigurationNotFound\"},\"event\":{\"code\":\"3\",\"created\":\"2024-06-13T08:39:05.493175+10:00\",\"severity\":7,\"timezone\":\"AUS Eastern Standard Time\"},\"service\":{\"name\":\"localhost\",\"node.name\":\"\",\"version\":\"2.3.1-beta-241610955\\u002B81e61e0e20f6b035dc1bb7e4e91442759b37c0b3\"},\"metadata\":{\"EventId\":3},\"MessageTemplate\":\"No valid endpoint configuration was found for service \\u0027{ServiceName}\\u0027 from path \\u0027{Path}\\u0027.\"}\r\n{\"@timestamp\":\"2024-06-13T08:39:05.493175+10:00\",\"log.level\":\"Debug\",\"message\":\"Using pass-through service endpoint provider for service \\u0027http://localhost:8761\\u0027.\",\"log\":{\"logger\":\"Microsoft.Extensions.ServiceDiscovery.PassThrough.PassThroughServiceEndpointProvider\"},\"labels\":{\"EventName\":\"UsingPassThrough\"},\"event\":{\"code\":\"1\",\"created\":\"2024-06-13T08:39:05.493175+10:00\",\"severity\":7,\"timezone\":\"AUS Eastern Standard Time\"},\"service\":{\"name\":\"http://localhost:8761\",\"node.name\":\"\",\"version\":\"2.3.1-beta-241610955\\u002B81e61e0e20f6b035dc1bb7e4e91442759b37c0b3\"},\"metadata\":{\"EventId\":1},\"MessageTemplate\":\"Using pass-through service endpoint provider for service \\u0027{ServiceName}\\u0027.\"}\r\n{\"@timestamp\":\"2024-06-13T08:39:05.5097284+10:00\",\"log.level\":\"Debug\",\"message\":\"Resolved 1 endpoints for service \\u0027http://localhost:8761\\u0027: localhost:8761 (Pass-through).\",\"log\":{\"logger\":\"Microsoft.Extensions.ServiceDiscovery.ServiceEndpointWatcher\"},\"labels\":{\"Endpoints\":\"localhost:8761 (Pass-through)\",\"EventName\":\"ResolutionSucceeded\"},\"event\":{\"code\":\"3\",\"created\":\"2024-06-13T08:39:05.5097284+10:00\",\"severity\":7,\"timezone\":\"AUS Eastern Standard Time\"},\"service\":{\"name\":\"http://localhost:8761\",\"node.name\":\"\",\"version\":\"2.3.1-beta-241610955\\u002B81e61e0e20f6b035dc1bb7e4e91442759b37c0b3\"},\"metadata\":{\"Count\":1,\"EventId\":3},\"MessageTemplate\":\"Resolved {Count} endpoints for service \\u0027{ServiceName}\\u0027: {Endpoints}.\"}\r\n\r\n``` \r\n\r\nan activity  should be being created so that it is easy to associate the \"Resolving endpoints for service \" to the final message which indicates it has been resolved via pass through \"Resolved 1 endpoints for service \\u0027http://localhost:8761\\u0027: localhost:8761 (Pass-through).\"",
                                           "updatedAt":  "2024-06-12T22:51:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6B2Xfm",
                                           "createdAt":  "2024-06-19T11:56:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mitchdenny",
                                           "body":  "adding @ReubenBond and @JamesNK given it spans service discovery and telemetry.",
                                           "updatedAt":  "2024-06-19T11:56:26Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "ServiceEndpointWatcher should be creating activities",
        "labels":  [
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/4431",
        "createdAt":  "2024-06-09T10:58:01Z",
        "number":  4431,
        "author":  "robertcoltheart",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-21T16:52:03Z",
        "body":  "When using AutoFac as a DI container, the following error is encountered when using `.AddDnsSrvServiceEndpointProvider()`:\r\n\r\n```\r\nAutofac.Core.DependencyResolutionException: Cannot choose between multiple constructors with equal length 1 on type \u0027DnsClient.LookupClient\u0027. Select the constructor explicitly, with the UsingConstructor() configuration method, when the component is registered.\r\n   at Autofac.Core.Activators.Reflection.MostParametersConstructorSelector.SelectConstructorBinding(BoundConstructor[] constructorBindings, IEnumerable`1 parameters)\r\n   at Autofac.Core.Activators.Reflection.ReflectionActivator.ActivateInstance(IComponentContext context, IEnumerable`1 parameters)\r\n   at Autofac.Core.Activators.Reflection.ReflectionActivator.\u003cConfigurePipeline\u003eb__13_0(ResolveRequestContext context, Action`1 next)\r\n   at Autofac.Core.Resolving.Middleware.DelegateMiddleware.Execute(ResolveRequestContext context, Action`1 next)\r\n   at Autofac.Core.Resolving.Middleware.DisposalTrackingMiddleware.Execute(ResolveRequestContext context, Action`1 next)\r\n```\r\n\r\nThe workaround is to re-register the `LookupClient` as below:\r\n\r\n`.AddSingleton\u003cIDnsQuery\u003e(_ =\u003e new LookupClient())`\r\n\r\nhowever this should work out-of-the box without resorting to this workaround.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Service discovery with DNS SRV is broken when using AutoFac",
        "labels":  [
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/4785",
        "createdAt":  "2024-07-03T19:22:05Z",
        "number":  4785,
        "author":  "Regestea",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCXEBA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "flotoz",
                                            "createdAt":  "2025-01-31T16:03:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RobertWeaver",
                                            "createdAt":  "2025-03-30T08:45:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Misiu",
                                            "createdAt":  "2025-05-14T08:59:37Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-06-11T03:36:17Z",
        "body":  "### Describe the bug\r\n\r\ni referenced the blazor project to Aspire app host so this is my aspire app host code\r\n\r\n\r\n```\r\nusing AnswerMe.Aspire.AppHost;\r\n    \r\n    var builder = DistributedApplication.CreateBuilder(args);\r\n    \r\n    var identityServerDb=builder.AddPostgres(\"identityserver\", password: builder.CreateStablePassword(\"AnswerMeDB-password\"))\r\n        .WithDataVolume()\r\n        .WithPgAdmin()\r\n        .AddDatabase(\"IdentityServerDb\");\r\n    \r\n    var identityServerApi = builder.AddProject\u003cProjects.IdentityServer_Api\u003e(\"identityserverapi\")\r\n        .WithReference(identityServerDb);\r\n    \r\n    var client = builder.AddProject\u003cProjects.AnswerMe_Client\u003e(\"answermeclient\")\r\n        .WithReference(identityServerApi);\r\n    \r\n    builder. Build().Run();\r\n```\r\nand this is my blazor code to add HTTP client \r\n\r\n    builder.Services.AddHttpClient(nameof(HttpClients.IdentityServer),\r\n        client =\u003e { client.BaseAddress = new(\"http://identityserverapi\"); });\r\n\r\n\r\nso as you can see in the result it doesn\u0027t replace the `http://identityserverapi` with the actual address\r\n\u003cimg width=\"569\" alt=\"file\" src=\"https://github.com/dotnet/aspire/assets/53250527/2747091e-6af0-442f-9255-6df05f3c5b49\"\u003e\r\n\r\nand also i found the `builder.Configuration.GetConnectionString(\"identityserverapi\");` doesn\u0027t work because we don\u0027t have `appsettings.json` in blazor wasm so i think Aspire doesn\u0027t work fo the blazor wasm ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsH92aw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOKYQzfc6DwFai",
                                           "createdAt":  "2024-07-05T08:19:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKgwRA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Regestea",
                                                                               "createdAt":  "2024-07-05T16:39:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Bohirjon",
                                                                               "createdAt":  "2025-03-19T10:26:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "yarseyah",
                                           "body":  "Have you added `builder.AddServiceDefaults()` and `app.MapDefaultEndpoints()` to ensure the service discovery is included in your web application?\r\n\r\nService discovery doesn\u0027t work on the Wasm side, you need to look into `Yarp` on the web-server side of the Blazor solution and redirect to the API.",
                                           "updatedAt":  "2024-07-05T08:19:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6Dy4Xg",
                                           "createdAt":  "2024-07-05T16:38:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Regestea",
                                           "body":  "@yarseyah I tried to add `builder.AddServiceDefaults()` in Wasm project `program.cs` file but it gave me a lot of error, and also we don\u0027t have `app` in Blazor Web assembly standalone  so I can\u0027t use `app.MapDefaultEndpoints()`and also I take looked at builder.Configuration of my blazor project and it\u0027s almost empty \r\n\u003cimg width=\"749\" alt=\"image\" src=\"https://github.com/dotnet/aspire/assets/53250527/e33a5698-b8e6-4332-9329-ba9b2945cc83\"\u003e\r\n",
                                           "updatedAt":  "2024-07-05T16:38:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6Dy485",
                                           "createdAt":  "2024-07-05T16:42:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yarseyah",
                                           "body":  "I\u0027m not sure there are any Aspire components that make sense for the Blazor Wasm. You can add service discovery, etc., to the Blazor Server, but your client is entirely standalone—you want to send your API calls to the server and have the server, via Yarp, redirect your requests to the API. ",
                                           "updatedAt":  "2024-07-05T16:42:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6UxXjq",
                                           "createdAt":  "2024-11-24T12:14:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD8RGGA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Regestea",
                                                                               "createdAt":  "2024-11-24T12:39:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "fgilde",
                                           "body":  "If your client project is still `\u003cProject Sdk=\"Microsoft.NET.Sdk.BlazorWebAssembly\"\u003e` you need to change this to `\u003cProject Sdk=\"Microsoft.NET.Sdk.Web\"\u003e` and then you need to use the `WebApplicationBuilder` instead of the `WebAssemblyHostBuilder` \nI tried this in my project as well and I was able to compile and run it but with many many problems later on. Like Authentication and so on. So my Client Project wasnt working anymore so I rollback my changes\n\nIf you want to try it on your project https://learn.microsoft.com/de-de/aspnet/core/migration/70-80?view=aspnetcore-9.0\u0026tabs=visual-studio",
                                           "updatedAt":  "2024-11-24T12:15:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6XPYTo",
                                           "createdAt":  "2024-12-11T23:12:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD-4Q7w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yarseyah",
                                                                               "createdAt":  "2024-12-13T10:39:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ixAtomic",
                                           "body":  "\u003e If your client project is still `\u003cProject Sdk=\"Microsoft.NET.Sdk.BlazorWebAssembly\"\u003e` you need to change this to `\u003cProject Sdk=\"Microsoft.NET.Sdk.Web\"\u003e` and then you need to use the `WebApplicationBuilder` instead of the `WebAssemblyHostBuilder` I tried this in my project as well and I was able to compile and run it but with many many problems later on. Like Authentication and so on. So my Client Project wasnt working anymore so I rollback my changes\n\u003e \n\u003e If you want to try it on your project https://learn.microsoft.com/de-de/aspnet/core/migration/70-80?view=aspnetcore-9.0\u0026tabs=visual-studio\n\nDoesnt that just make the application run server side?",
                                           "updatedAt":  "2024-12-11T23:12:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6ZBoLk",
                                           "createdAt":  "2025-01-02T06:44:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOECo52Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "Regestea",
                                                                               "createdAt":  "2025-01-02T08:35:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "hjrb",
                                                                               "createdAt":  "2025-01-15T20:09:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "BenjaminCharlton",
                                           "body":  "I had the same requirement as described above.\n\nYes, you can add the URLs to web APIs that your Blazor WebAssembly (client) app needs to call in the client\u0027s appsettings.json files, and that works ok. You can even specify different URLs in for different environments in appSettings.{environmentName}.json and that works fine too. However, you\u0027ll have to remember to maintain the endpoints in the client app if they change in the distributed app, and that\u0027s exactly the pain-point that Aspire is designed to address.\n\nI made a Nuget package that expands the existing functionality of Aspire to work for Blazor WebAssembly (client) apps:\n* https://www.nuget.org/packages/Aspire4Wasm/\n* https://github.com/BenjaminCharlton/Aspire4Wasm\n\nIf you install the Nuget package in your AppHost project and follow the instructions in the README.md then your distributed application host will put the service discovery information in the appropriate appsettings.{environment}.json file of the Blazor WebAssembly (client) app. I\u0027ve targeted .NET 8 and 9.\n\nIt\u0027s only five more classes and it doesn\u0027t change any of the existing codebase of Aspire.\n\nPlease can you let me know if you like the implementation and contribute improvements on GitHub if you wish?\nI would like to submit this as a pull request for the Aspire team to (hopefully) merge.\n\nIt\u0027s as simple as the below (in Program.cs of your AppHost project)\n```\nvar builder = DistributedApplication.CreateBuilder(args);\n\nvar inventoryApi = builder.AddProject\u003cProjects.AspNetCoreWebApi\u003e(\"inventoryapi\");\nvar billingApi = builder.AddProject\u003cProjects.SomeOtherWebApi\u003e(\"billingapi\");\n\nbuilder.AddProject\u003cProjects.Blazor\u003e(\"blazorserverapp\")\n    .AddWebAssemblyClient\u003cProjects.Blazor_Client\u003e(\"blazorwasmclient\")\n    .WithReference(inventoryApi)\n    .WithReference(billingApi);\n\nbuilder.Build().Run();\n```\n\nThen in Program.cs of the client app:\n\n```\nbuilder.Services.AddServiceDiscovery();\nbuilder.Services.ConfigureHttpClientDefaults(static http =\u003e\n{\n    http.AddServiceDiscovery();\n});\n\nbuilder.Services.AddHttpClient\u003cIInventoryService, InventoryService\u003e(\n    client =\u003e\n    {\n        client.BaseAddress = new Uri(\"https+http://inventoryapi\");\n    });\n\n    builder.Services.AddHttpClient\u003cIBillingService, BillingService\u003e(\n    client =\u003e\n    {\n        client.BaseAddress = new Uri(\"https+http://billingapi\");\n    });\n```",
                                           "updatedAt":  "2025-01-02T06:47:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6bEx8z",
                                           "createdAt":  "2025-01-20T08:21:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESELfA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "MatthijsvanderPlas",
                                                                               "createdAt":  "2025-03-29T10:11:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "Regestea",
                                                                               "createdAt":  "2025-05-14T10:09:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "BenjaminCharlton",
                                           "body":  "I\u0027ve just sent a pull request to the Aspire team to integrate the Aspire4Wasm functionality into the framework. It\u0027s here: https://github.com/dotnet/aspire/pull/7162\n\nI said:\n\n\u003e These changes allow Aspire service discovery to work in a hosted Blazor WebAssembly app. It basically integrates my Nuget package Aspire4Wasm into Aspire (with the addition of a few classes and changing none of the existing ones). The changes allow an Aspire `AppHost` to define the web API (or APIs) that a Blazor app should access, and to pass that service discovery information to the app by writing to its `appsettings.json` files.\n\u003e \n\u003e It does not make the developer experience with Blazor in Aspire totally seamless. For example, I\u0027m still having difficulty with stand-alone Blazor WebAssembly apps, and I haven\u0027t figured out how to stop the app launching on a random port as well as the one specified in `launchsettings.json`. However, it is a big step in the right direction. If you want to see what it does before accepting the changes, please try the Nuget package Aspire4Wasm (version 3.0.0 at the time of writing).\n\nMaybe this will get accepted and prompt further improvements for Blazor developers working with Aspire. I believe Aspire makes perfect sense for Blazor Wasm and the two technologies could work very well together given the chance.\n",
                                           "updatedAt":  "2025-01-20T08:22:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6rfdNb",
                                           "createdAt":  "2025-05-13T16:11:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattleibow",
                                           "body":  "I am also hitting this issue and it would be nice to be able to get my endpoints into the app.\n",
                                           "updatedAt":  "2025-05-13T16:11:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6wdncu",
                                           "createdAt":  "2025-06-10T20:52:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozsefcsontos",
                                           "body":  "\u003e I had the same requirement as described above.\n\u003e \n\u003e Yes, you can add the URLs to web APIs that your Blazor WebAssembly (client) app needs to call in the client\u0027s appsettings.json files, and that works ok. You can even specify different URLs in for different environments in appSettings.{environmentName}.json and that works fine too. However, you\u0027ll have to remember to maintain the endpoints in the client app if they change in the distributed app, and that\u0027s exactly the pain-point that Aspire is designed to address.\n\u003e \n\u003e I made a Nuget package that expands the existing functionality of Aspire to work for Blazor WebAssembly (client) apps:\n\u003e \n\u003e * https://www.nuget.org/packages/Aspire4Wasm/\n\u003e * https://github.com/BenjaminCharlton/Aspire4Wasm\n\u003e \n\u003e If you install the Nuget package in your AppHost project and follow the instructions in the README.md then your distributed application host will put the service discovery information in the appropriate appsettings.{environment}.json file of the Blazor WebAssembly (client) app. I\u0027ve targeted .NET 8 and 9.\n\u003e \n\u003e It\u0027s only five more classes and it doesn\u0027t change any of the existing codebase of Aspire.\n\u003e \n\u003e Please can you let me know if you like the implementation and contribute improvements on GitHub if you wish? I would like to submit this as a pull request for the Aspire team to (hopefully) merge.\n\u003e \n\u003e It\u0027s as simple as the below (in Program.cs of your AppHost project)\n\u003e \n\u003e ```\n\u003e var builder = DistributedApplication.CreateBuilder(args);\n\u003e \n\u003e var inventoryApi = builder.AddProject\u003cProjects.AspNetCoreWebApi\u003e(\"inventoryapi\");\n\u003e var billingApi = builder.AddProject\u003cProjects.SomeOtherWebApi\u003e(\"billingapi\");\n\u003e \n\u003e builder.AddProject\u003cProjects.Blazor\u003e(\"blazorserverapp\")\n\u003e     .AddWebAssemblyClient\u003cProjects.Blazor_Client\u003e(\"blazorwasmclient\")\n\u003e     .WithReference(inventoryApi)\n\u003e     .WithReference(billingApi);\n\u003e \n\u003e builder.Build().Run();\n\u003e ```\n\u003e \n\u003e Then in Program.cs of the client app:\n\u003e \n\u003e ```\n\u003e builder.Services.AddServiceDiscovery();\n\u003e builder.Services.ConfigureHttpClientDefaults(static http =\u003e\n\u003e {\n\u003e     http.AddServiceDiscovery();\n\u003e });\n\u003e \n\u003e builder.Services.AddHttpClient\u003cIInventoryService, InventoryService\u003e(\n\u003e     client =\u003e\n\u003e     {\n\u003e         client.BaseAddress = new Uri(\"https+http://inventoryapi\");\n\u003e     });\n\u003e \n\u003e     builder.Services.AddHttpClient\u003cIBillingService, BillingService\u003e(\n\u003e     client =\u003e\n\u003e     {\n\u003e         client.BaseAddress = new Uri(\"https+http://billingapi\");\n\u003e     });\n\u003e ```\n\n\n\n\u003e I had the same requirement as described above.\n\u003e \n\u003e Yes, you can add the URLs to web APIs that your Blazor WebAssembly (client) app needs to call in the client\u0027s appsettings.json files, and that works ok. You can even specify different URLs in for different environments in appSettings.{environmentName}.json and that works fine too. However, you\u0027ll have to remember to maintain the endpoints in the client app if they change in the distributed app, and that\u0027s exactly the pain-point that Aspire is designed to address.\n\u003e \n\u003e I made a Nuget package that expands the existing functionality of Aspire to work for Blazor WebAssembly (client) apps:\n\u003e \n\u003e * https://www.nuget.org/packages/Aspire4Wasm/\n\u003e * https://github.com/BenjaminCharlton/Aspire4Wasm\n\u003e \n\u003e If you install the Nuget package in your AppHost project and follow the instructions in the README.md then your distributed application host will put the service discovery information in the appropriate appsettings.{environment}.json file of the Blazor WebAssembly (client) app. I\u0027ve targeted .NET 8 and 9.\n\u003e \n\u003e It\u0027s only five more classes and it doesn\u0027t change any of the existing codebase of Aspire.\n\u003e \n\u003e Please can you let me know if you like the implementation and contribute improvements on GitHub if you wish? I would like to submit this as a pull request for the Aspire team to (hopefully) merge.\n\u003e \n\u003e It\u0027s as simple as the below (in Program.cs of your AppHost project)\n\u003e \n\u003e ```\n\u003e var builder = DistributedApplication.CreateBuilder(args);\n\u003e \n\u003e var inventoryApi = builder.AddProject\u003cProjects.AspNetCoreWebApi\u003e(\"inventoryapi\");\n\u003e var billingApi = builder.AddProject\u003cProjects.SomeOtherWebApi\u003e(\"billingapi\");\n\u003e \n\u003e builder.AddProject\u003cProjects.Blazor\u003e(\"blazorserverapp\")\n\u003e     .AddWebAssemblyClient\u003cProjects.Blazor_Client\u003e(\"blazorwasmclient\")\n\u003e     .WithReference(inventoryApi)\n\u003e     .WithReference(billingApi);\n\u003e \n\u003e builder.Build().Run();\n\u003e ```\n\u003e \n\u003e Then in Program.cs of the client app:\n\u003e \n\u003e ```\n\u003e builder.Services.AddServiceDiscovery();\n\u003e builder.Services.ConfigureHttpClientDefaults(static http =\u003e\n\u003e {\n\u003e     http.AddServiceDiscovery();\n\u003e });\n\u003e \n\u003e builder.Services.AddHttpClient\u003cIInventoryService, InventoryService\u003e(\n\u003e     client =\u003e\n\u003e     {\n\u003e         client.BaseAddress = new Uri(\"https+http://inventoryapi\");\n\u003e     });\n\u003e \n\u003e     builder.Services.AddHttpClient\u003cIBillingService, BillingService\u003e(\n\u003e     client =\u003e\n\u003e     {\n\u003e         client.BaseAddress = new Uri(\"https+http://billingapi\");\n\u003e     });\n\u003e ```\n\nPlease create a fully working example code in your repo, especially for the blazorserverapp usage. I assume that project hosts the wasm based client.",
                                           "updatedAt":  "2025-06-10T20:52:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6wf3Zr",
                                           "createdAt":  "2025-06-11T03:35:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEY6ydA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jozsefcsontos",
                                                                               "createdAt":  "2025-06-11T07:46:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Regestea",
                                                                               "createdAt":  "2025-07-02T17:13:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "BenjaminCharlton",
                                           "body":  "Thank you for your interest. I had a working example in the `/tests` folder. I have moved it to its own folder now so it should be easy to clone just the demo from the /[demo](https://github.com/BenjaminCharlton/Aspire4Wasm/tree/master/demo) folder.\n\nIf CORS was the problem, that could have been due to an error in my [README.md](https://github.com/BenjaminCharlton/Aspire4Wasm/blob/master/README.md) which I\u0027ve also fixed.\n\nHope it helps.",
                                           "updatedAt":  "2025-06-11T03:36:17Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Aspire doesn\u0027t replace http client Uri with actual address in blazor webassembly standalone app because it don\u0027t have appsettings.json",
        "labels":  [
                       "area-service-discovery",
                       "blazor-wasm"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/4890",
        "createdAt":  "2024-07-15T01:59:24Z",
        "number":  4890,
        "author":  "ROMYIM",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODNujEA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "janssensjeroen",
                                            "createdAt":  "2025-02-10T15:28:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rem-coding",
                                            "createdAt":  "2025-03-01T00:58:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ingevarr",
                                            "createdAt":  "2025-09-01T15:58:15Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-09-01T16:02:44Z",
        "body":  "## Background and Motivation\r\n\r\n`RoundRobinServiceEndpointSelector` is too simple to select a true endpoint.\r\nFor example:\r\nA service instance usually listens multipart ports for many schemes, such as http, https, and so on.\r\nNot only http but also grpc request was sent to service B by service A.\r\nMy custom `IServiceEndpointProvider` provides many service endpoints with multipart schemes by the same service name, but the `RoundRobinServiceEndpointSelector` can not select a true endpoint according to the URI scheme.\r\nIt is necessary to make `IServiceEndpointSelector` interface public\r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace Microsoft.Extensions.ServiceDiscovery.LoadBalance;\r\n\r\npublic interface IServiceEndpointProvider\r\n{\r\n......\r\n}\r\n```\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwUmZwQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOKYQzfc68Bl4i",
                                           "createdAt":  "2025-08-05T10:06:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chuanboz",
                                           "body":  "I see this is also raised in https://github.com/dotnet/aspire/discussions/3640 by @vipwan and @rem-coding.\n\nI also need this interface to be public to support my scenario customization to select endpoint per tenant. I\u0027m thinking to add a HybridServiceEndpointSelector with following logic: \n1. Get tenant-id from request context, and compare with pre-configured tenant-id lists, if matched then select endpoint that exposed through dev tunnel.\n2. Otherwise, chained to rest of service endpoint selector.\n\nI\u0027m using this customization to support hybrid testing of local service connect with real Azure microservices deployed as dependency, and allow the Azure microservices to callback to local service via dev tunnel.",
                                           "updatedAt":  "2025-08-05T10:06:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc7BSZnB",
                                           "createdAt":  "2025-09-01T16:02:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ingevarr",
                                           "body":  "I need this feature too. + another vote.",
                                           "updatedAt":  "2025-09-01T16:02:44Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Please open the internal interface Microsoft.Extensions.ServiceDiscovery.LoadBalance.IServiceEndPointSelector",
        "labels":  [
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/5096",
        "createdAt":  "2024-07-28T19:09:53Z",
        "number":  5096,
        "author":  "julioct",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODD0f_w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tormodfj",
                                            "createdAt":  "2025-06-13T08:32:00Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-06-13T11:45:48Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI\u0027m trying to enable a setup where I can run my frontend and my backend API in my box, which live in different repos, without Aspire orchestration if needed. For this I\u0027m using the standard configuration based service discovery mechanism enabled in .NET via `Microsoft.Extensions.ServiceDiscovery`.\r\n\r\nHowever I noticed that once I enable service discovery via appsettings.json, and later run frontend and backend with Aspire orchestration, the Aspire orchestrator will not override appsettings.json configuration with environment variables, but instead will honor appsettings.json, which is unexpected.\n\n### Expected Behavior\n\nEndpoint environment variables used in service discovery set by Aspire orchestration should always be prioritized over appsettings.json settings defined by any of the orchestrated projects.\n\n### Steps To Reproduce\n\n1. Enable a frontend project to discover the backend service url via a configuration like this:\r\n\r\n```json\r\n  \"Services\": {\r\n    \"catalog-service\": {\r\n      \"https\": [\r\n        \"http://localhost:5274\"\r\n      ]\r\n    }\r\n  }  \r\n```\r\n\r\n2. Configure the frontend\u0027s HttpClient like this:\r\n\r\n```csharp\r\nbuilder.Services.AddHttpClient\u003cGamesClient\u003e(\r\n    client =\u003e client.BaseAddress = new Uri(\"https+http://catalog-service\"))\r\n```\r\n\r\n3. Also ensure the frontend is enabling service discovery via the standard ServiceDefaults mechanism like this:\r\n\r\n```csharp\r\nbuilder.AddServiceDefaults();\r\n```\r\n\r\n4. Run backend and frontend independently, without Aspire\u0027s orchestration, and confirm frontend can discover backend\u0027s endpoint without issues.\r\n\r\n5. Next enable standard Aspire service discovery in AppHost Program.cs file like this:\r\n\r\n```csharp\r\nvar catalogService = builder.AddProject\u003cProjects.Catalog_Service\u003e(\"catalog-service\");\r\n\r\nbuilder.AddProject\u003cProjects.GameStore_Frontend\u003e(\"gamestore-frontend\")\r\n       .WithReference(catalogService)\r\n```\r\n\r\n7. Run AppHost, browse to frontend and confirm frontend can still discover backend\u0027s endpoint without issues.\r\n\r\n8. Now update appsetting.json in Frontend to an invalid backend discovery address:\r\n\r\n```json\r\n  \"Services\": {\r\n    \"catalog-service\": {\r\n      \"https\": [\r\n        \"http://WRONG-HOST:9999\"\r\n      ]\r\n    }\r\n  }  \r\n```\r\n\r\n9. Run AppHost and browse to frontend.\r\n\r\n10. Frontend throws exception complaining it can\u0027t find the backend host:\r\n\r\nwarn: Polly[3]\r\n      Execution attempt. Source: \u0027-standard//Standard-Retry\u0027, Operation Key: \u0027\u0027, Result: \u0027No such host is known. (wrong-host:9999)\u0027, Handled: \u0027True\u0027, Attempt: \u00270\u0027, Execution Time: \u00272711.9191\u0027\r\n      System.Net.Http.HttpRequestException: No such host is known. (wrong-host:9999)\r\n       ---\u003e System.Net.Sockets.SocketException (11001): No such host is known.\r\n         at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n\r\nOn top of that the frontend\u0027s env var clearly points to the correct backend host, but somehow it is not used:\r\n\r\n![image](https://github.com/user-attachments/assets/703dc579-3722-4dc9-88c0-09e3d5549290)\r\n\n\n### Exceptions (if any)\n\nwarn: Polly[3]\r\n      Execution attempt. Source: \u0027-standard//Standard-Retry\u0027, Operation Key: \u0027\u0027, Result: \u0027No such host is known. (wrong-host:9999)\u0027, Handled: \u0027True\u0027, Attempt: \u00270\u0027, Execution Time: \u00272711.9191\u0027\r\n      System.Net.Http.HttpRequestException: No such host is known. (wrong-host:9999)\r\n       ---\u003e System.Net.Sockets.SocketException (11001): No such host is known.\r\n         at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n         at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n         at System.Net.Sockets.Socket.\u003cConnectAsync\u003eg__WaitForConnectWithCancellation|285_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n         at System.Net.Http.HttpConnectionPool.ConnectToTcpHostAsync(String host, Int32 port, HttpRequestMessage initialRequest, Boolean async, CancellationToken cancellationToken)\r\n         --- End of inner exception stack trace ---\r\n         at System.Net.Http.HttpConnectionPool.ConnectToTcpHostAsync(String host, Int32 port, HttpRequestMessage initialRequest, Boolean async, CancellationToken cancellationToken)\r\n         at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n         at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n         at System.Net.Http.HttpConnectionPool.AddHttp11ConnectionAsync(QueueItem queueItem)\r\n         at System.Threading.Tasks.TaskCompletionSourceWithCancellation`1.WaitWithCancellationAsync(CancellationToken cancellationToken)\r\n         at System.Net.Http.HttpConnectionPool.HttpConnectionWaiter`1.WaitForConnectionWithTelemetryAsync(HttpRequestMessage request, HttpConnectionPool pool, Boolean async, CancellationToken requestCancellationToken)\r\n         at System.Net.Http.HttpConnectionPool.SendWithVersionDetectionAndRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n         at System.Net.Http.DiagnosticsHandler.SendAsyncCore(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n         at System.Net.Http.Metrics.MetricsHandler.SendAsyncWithMetrics(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n         at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n         at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.\u003cSendCoreAsync\u003eg__Core|5_0(HttpRequestMessage request, Boolean useAsync, CancellationToken cancellationToken)\r\n         at GameStore.Frontend.Authorization.AuthorizationHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in D:\\projects\\GameStore\\frontend\\src\\GameStore.Frontend\\Authorization\\AuthorizationHandler.cs:line 20\r\n         at Microsoft.Extensions.ServiceDiscovery.Http.ResolvingHttpDelegatingHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /_/src/Microsoft.Extensions.ServiceDiscovery/Http/ResolvingHttpDelegatingHandler.cs:line 53\n\n### .NET Version info\n\n.NET SDK:\r\n Version:           8.0.303\r\n Commit:            29ab8e3268\r\n Workload version:  8.0.300-manifests.d7126b9e\r\n MSBuild version:   17.10.4+10fbfbf2e\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22631\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.303\\\r\n\r\n.NET workloads installed:\r\n [aspire]\r\n   Installation Source: SDK 8.0.300\r\n   Manifest Version:    8.1.0/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.aspire\\8.1.0\\WorkloadManifest.json\r\n   Install Type:              Msi\r\n\r\n\r\nHost:\r\n  Version:      8.0.7\r\n  Architecture: x64\r\n  Commit:       2aade6beb0\r\n\r\n.NET SDKs installed:\r\n  8.0.107 [C:\\Program Files\\dotnet\\sdk]\r\n  8.0.200 [C:\\Program Files\\dotnet\\sdk]\r\n  8.0.206 [C:\\Program Files\\dotnet\\sdk]\r\n  8.0.303 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 8.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 8.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 8.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\n\n### Anything else?\n\nVersions: .NET 8 and .NET Aspire 8.1\r\nIDE: VS Code",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsQi-ew==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOKYQzfc6MLMJP",
                                           "createdAt":  "2024-09-15T18:49:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I believe this has to do with array merging behavior of IConfiguration.",
                                           "updatedAt":  "2024-09-15T18:49:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6bSSIR",
                                           "createdAt":  "2025-01-21T16:53:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEWfQaQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "tormodfj",
                                                                               "createdAt":  "2025-06-13T08:45:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Unclear if we can do anything here.",
                                           "updatedAt":  "2025-01-21T16:53:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6xCL57",
                                           "createdAt":  "2025-06-13T11:45:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEWhQjw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "henriksen",
                                                                               "createdAt":  "2025-06-13T13:16:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tormodfj",
                                           "body":  "One slightly hacky workaround is to exploit the fact that Service Discovery allows you to assign a simple `string` as the value of `\"https\"` if you only need to configure a single endpoint:\n\n```json\n  \"Services\": {\n    \"catalog-service\": {\n      \"https\": \"http://WRONG-HOST:9999\"\n    }\n  }  \n```\n\nThis circumvents the array-merging issue which @davidfowl [mentions](#issuecomment-2351743567). It does, however, require you to call the following method before calling  `Configuration.AddEnvironmentVariables()`:\n\n```csharp\nprivate static void ApplyAspireServiceDiscoveryWorkaround()\n{\n\tforeach (DictionaryEntry entry in Environment.GetEnvironmentVariables())\n\t{\n\t\tif (entry is not { Key: string key, Value: string value }) { continue; }\n\t\tif (!key.StartsWith(\"services__\") || !key.EndsWith(\"__0\")) { continue; }\n\n\t\t// At this point, we have encountered a variable looking like this:\n\t\t// Key: \"services__catalog-service__https__0\"\n\t\t// Value: \"https://localhost:5274\"\n\n\t\t// Trim the trailing \"__0\" from the end\n\t\tvar newKey = key[..^3];\n\t\tEnvironment.SetEnvironmentVariable(newKey, value);\n\t}\n}\n```\n\nIt\u0027s neither particularly pretty nor elegant, but serves as a Temporary™ workaround :shipit:",
                                           "updatedAt":  "2025-06-13T11:45:47Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Service discovery endpoint env vars won\u0027t override appsettings.json",
        "labels":  [
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/5162",
        "createdAt":  "2024-08-02T17:45:17Z",
        "number":  5162,
        "author":  "jim-noble-milliman",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-27T20:44:45Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWhen a service is configured for service discovery with only an `http` config slice, then consumed with an `HttpClient` that specifies a URL starting with `https+http://...`, the client appears to try to connect to the HTTP-only service using HTTPS protocol, which then fails with the error:\r\n```\r\nSystem.Net.Http.HttpRequestException: \u0027The SSL connection could not be established, see inner exception.\u0027\r\nAuthenticationException: Cannot determine the frame size or a corrupted frame was received.\r\n```\r\nSince only `http` is provided in the config, SSL should not be in use, and certainly will not succeed.\r\n\r\n### Expected Behavior\r\n\r\nSince the only scheme provided in the config is `http`, and a request URL of `https+http://...` indicates a _preference_ for HTTPS but not a requirement, I would expect the request to be issued to the HTTP endpoint specified without the use of SSL/HTTPS, so that the request can succeed.\r\n\r\n### Steps To Reproduce\r\n\r\nhttps://github.com/jimnoble/ServiceDiscoverySchemeDefect\r\n\r\n1. Create a simple HTTP-only service, e.g. the weather forecast asp.net template.\r\n2. Create a console application to act as a client to the service. Arrange things like this:\r\n```cs\r\nvar url = \"https+http://myservice/weatherforecast\";\r\n\r\nvar configuration = new ConfigurationBuilder()\r\n    .AddInMemoryCollection(new Dictionary\u003cstring, string?\u003e\r\n    {\r\n        [\"Services:myservice:http:0\"] = $\"localhost:5083\" // your port here\r\n    })\r\n    .Build();\r\n\r\nvar serviceProvider = new ServiceCollection()\r\n    .AddSingleton\u003cIConfiguration\u003e(configuration)\r\n    .AddHttpClient()\r\n    .AddServiceDiscovery()\r\n    .ConfigureHttpClientDefaults(http =\u003e\r\n    {\r\n        http.AddServiceDiscovery();\r\n    })\r\n    .BuildServiceProvider();\r\n\r\nvar httpClient = serviceProvider\r\n    .GetRequiredService\u003cIHttpClientFactory\u003e()\r\n    .CreateClient();\r\n\r\nvar response = await httpClient.GetAsync(url);\r\n```\r\nRun both projects and have the client consume the service, whereupon it should produce the exception.\r\n\r\n### Exceptions (if any)\r\n\r\nSystem.Net.Http.HttpRequestException: \u0027The SSL connection could not be established, see inner exception.\u0027\r\nAuthenticationException: Cannot determine the frame size or a corrupted frame was received.\r\n\r\n### .NET Version info\r\n\r\n```\r\n.NET SDK:\r\n Version:           8.0.303\r\n Commit:            29ab8e3268\r\n Workload version:  8.0.300-manifests.34944930\r\n MSBuild version:   17.10.4+10fbfbf2e\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22631\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.303\\\r\n\r\n.NET workloads installed:\r\n [android]\r\n   Installation Source: VS 17.10.35027.167\r\n   Manifest Version:    34.0.95/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.android\\34.0.95\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n [maccatalyst]\r\n   Installation Source: VS 17.10.35027.167\r\n   Manifest Version:    17.2.8053/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.maccatalyst\\17.2.8053\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n [ios]\r\n   Installation Source: VS 17.10.35027.167\r\n   Manifest Version:    17.2.8053/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.ios\\17.2.8053\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n [maui-windows]\r\n   Installation Source: VS 17.10.35027.167\r\n   Manifest Version:    8.0.61/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.maui\\8.0.61\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n [aspire]\r\n   Installation Source: VS 17.10.35027.167\r\n   Manifest Version:    8.0.0/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.aspire\\8.0.0\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n\r\nHost:\r\n  Version:      8.0.7\r\n  Architecture: x64\r\n  Commit:       2aade6beb0\r\n\r\n.NET SDKs installed:\r\n  8.0.303 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 6.0.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n```\r\n\r\n### Anything else?\r\n\r\nMicrosoft.Extensions.Configuration 8.0.0\r\nMicrosoft.Extensions.DependencyInjection 8.0.0\r\nMicrosoft.Extensions.Http 8.0.0\r\nMicrosoft.Extensions.ServiceDiscovery 8.1.0\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Service Discovery Erroneously Calling HTTP-Only Endpoints Using HTTPS Protocol",
        "labels":  [
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/6859",
        "createdAt":  "2024-12-04T05:40:01Z",
        "number":  6859,
        "author":  "kongxy10",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-21T16:54:48Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI am trying to use customized service discovery logic by implementing my own `IServiceEndpointProviderFactory`, but I find that the service name used to consturct the `ServiceEndpointQuery` parameter to pass into `IServiceEndpointProviderFactory.TryCreateProvider()` method is always in lower case.\nIn some scenarios user might want to perform case-sensitive service endpoint lookup, so maybe we should somehow preserve the original string of the service name.\n\nFor example, the user may specify request url \"https://Service-A/resource/{id}\" and expecting \"Service-A\" as the endpoint key name. But with current implementation, the endpoint key name will become \"service-a\" because of\n\nhttps://github.com/dotnet/aspire/blob/d9a982622c937f67ef805bf8c2142ecea1e7531a/src/Microsoft.Extensions.ServiceDiscovery/Http/HttpServiceEndpointResolver.cs#L42\n\n\n\n### Describe the solution you\u0027d like\n\nPreserve case sensitivity of the target service name when resolving service endpoint, or at least make the original url string consumable somewhere downstream the `HttpServiceEndpointResolver`\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Preserve endpoint name case sensitivity in Microsoft.Extensions.ServiceDiscovery",
        "labels":  [
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/7307",
        "createdAt":  "2025-01-28T22:34:01Z",
        "number":  7307,
        "author":  "GeertHuls",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-19T22:17:13Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nHi,\n\nI\u0027m having trouble applying service discovery to my BFF app running inside a docker container in an azure app service, using yarp to connect to a remote api, \n\nLocally everything is working fine though, using an aspire app host project. However, when running it inside a docker container within an azure app service, I get an error message, stating that there is something wrong with the SSL connection.\n\n### Expected Behavior\n\nI expected the remote api url to be accessible through Service discovery.\n\n### Steps To Reproduce\n\nIn the BFF app, the following configuration in the appsettings.json exists:\n\n```\n  \"ReverseProxy\": {\n    \"Routes\": {\n      \"remoteapiexample\": {\n        \"ClusterId\": \"remoteapiexample\",\n        \"Match\": {\n          \"Path\": \"/api/{**catch-all}\"\n        }\n      }\n    },\n\n    \"Clusters\": {\n      \"remoteapiexample\": {\n        \"Destinations\": {\n          \"remote\": {\n            \"Address\": \"https+http://remoteapiurl\"\n          }\n        }\n      }\n    }\n```\n\nAnd loading it in code as such:\n\n```\n        var reverseProxyBuilder = builder.Services.AddReverseProxy()\n            .AddTransforms\u003cAccessTokenTransformProvider\u003e(); // This is from the Duende.Bff.Yarp package.\n\n        reverseProxyBuilder\n            .LoadFromConfig(builder.Configuration.GetSection(\"ReverseProxy\"))\n            .AddServiceDiscoveryDestinationResolver();\n```\n\nFinally to configure the real remote endpoint, this is configured with an environment setting:\nservices__remoteapiurl__https__0: https://remoteapiexample.azurewebsites.net\n\n\n### Exceptions (if any)\n\nThe error log in the azure app service:\n\n```\n2025-01-22T20:41:33.7358732Z [20:41:33 INF] Proxying to https://remoteapiexample.azurewebsites.net/api/profile HTTP/2 RequestVersionOrLower\n2025-01-22T20:41:35.4101773Z [20:41:34 WRN] Request: An error was encountered before receiving a response.\n2025-01-22T20:41:35.4102279Z System.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception.\n2025-01-22T20:41:35.4102310Z  ---\u003e System.Security.Authentication.AuthenticationException: The remote certificate is invalid according to the validation procedure: RemoteCertificateNameMismatch\n2025-01-22T20:41:35.4102332Z    at System.Net.Security.SslStream.SendAuthResetSignal(ReadOnlySpan`1 alert, ExceptionDispatchInfo exception)\n2025-01-22T20:41:35.4102352Z    at System.Net.Security.SslStream.CompleteHandshake(SslAuthenticationOptions sslAuthenticationOptions)\n2025-01-22T20:41:35.4102375Z    at System.Net.Security.SslStream.ForceAuthenticationAsync[TIOAdapter](Boolean receiveFirst, Byte[] reAuthenticationData, CancellationToken cancellationToken)\n2025-01-22T20:41:35.4102404Z    at System.Net.Http.ConnectHelper.EstablishSslConnectionAsync(SslClientAuthenticationOptions sslOptions, HttpRequestMessage request, Boolean async, Stream stream, CancellationToken cancellationToken)\n2025-01-22T20:41:35.4102474Z    --- End of inner exception stack trace ---\n2025-01-22T20:41:35.4102500Z    at System.Net.Http.ConnectHelper.EstablishSslConnectionAsync(SslClientAuthenticationOptions sslOptions, HttpRequestMessage request, Boolean async, Stream stream, CancellationToken cancellationToken)\n2025-01-22T20:41:35.4102521Z    at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\n2025-01-22T20:41:35.4102542Z    at System.Net.Http.HttpConnectionPool.InjectNewHttp2ConnectionAsync(QueueItem queueItem)\n2025-01-22T20:41:35.4102563Z    at System.Threading.Tasks.TaskCompletionSourceWithCancellation`1.WaitWithCancellationAsync(CancellationToken cancellationToken)\n2025-01-22T20:41:35.4102587Z    at System.Net.Http.HttpConnectionWaiter`1.WaitForConnectionWithTelemetryAsync(HttpRequestMessage request, HttpConnectionPool pool, Boolean async, CancellationToken requestCancellationToken)\n2025-01-22T20:41:35.4102610Z    at System.Net.Http.HttpConnectionPool.SendWithVersionDetectionAndRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\n2025-01-22T20:41:35.4102657Z    at System.Net.Http.DiagnosticsHandler.SendAsyncCore(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\n2025-01-22T20:41:35.4102684Z    at Yarp.ReverseProxy.Forwarder.HttpForwarder.SendAsync(HttpContext context, String destinationPrefix, HttpMessageInvoker httpClient, ForwarderRequestConfig requestConfig, HttpTransformer transformer, CancellationToken cancellationToken)\n2025-01-22T20:41:35.4432113Z [20:41:35 INF] Executed endpoint \u0027remoteapiurl\u0027\n```\n\n### .NET Version info\n\nUsing dotnet version 9.0.102.\n\n### Anything else?\n\nCurrently my app is working fine without service discovery, by passing down the remote api endpoint address to the in-memory yarp configuration directly though.\n\nHowever, I\u0027m trying to understand why this doesn\u0027t work using service discovery, and why the SSL connection error is thrown.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvuD3BA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOKYQzfc638Ysv",
                                           "createdAt":  "2025-07-18T00:26:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maddymontaquila",
                                           "body":  "@eerhardt any idea if this is fixed w the YARP integration? ",
                                           "updatedAt":  "2025-07-18T00:26:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6-4PcE",
                                           "createdAt":  "2025-08-19T22:17:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "@benjaminpetit - thoughts?",
                                           "updatedAt":  "2025-08-19T22:17:13Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Yarp ServiceDiscovery not working in azure app service",
        "labels":  [
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/7534",
        "createdAt":  "2025-02-11T15:55:03Z",
        "number":  7534,
        "author":  "Dona278",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-14T06:12:32Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nWe have a local development with Aspire which works well with service discovery.\nIn production we have a k8s cluster with headless gRPC (code first) services and named \"grpc\" port with service discovery registered with `AddDnsSrvServiceEndpointProvider()`.\nOn k8s for unknow reasons even without changes we have a lot of error \"No DNS records were found for service\" (pods have no restarts or any sort of updates).\nNormally it works well but each time the workload increase this error occur often and 5 / 10 seconds after the error the gRPC call returns to work, and then, the error occurr again.\nI don\u0027t know if it is generate due to race condition, new httpclient instances creation, concurrency requests or something else.\nNow I hard-code the url with service name and port, and the services return \"ClusterIP\" but if I can do some steps to find the \"issue\" I will try.\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version info\n\n_No response_\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "ServiceDiscover - No DNS records were found for service",
        "labels":  [
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/8559",
        "createdAt":  "2025-04-04T18:43:54Z",
        "number":  8559,
        "author":  "paulirwin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-04T18:44:10Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nI am attempting to use Microsoft.Extensions.ServiceDiscovery without an Aspire app host or service defaults. The NuGet package linked here for the source repo, so I assume this is the correct place to post this issue.\n\nI have a Refit client that I\u0027ve configured to use Service Discovery:\n```c#\nservices.AddRefitClient\u003cIMyApiClient\u003e()\n            .AddServiceDiscovery()\n            .ConfigureHttpClient(c =\u003e\n            {\n                c.BaseAddress = new Uri(\"https+http://my-api\");\n            });\n```\n\nThis service is running locally HTTP only on port 5100 (as a Python Flask API, if that matters). I configured my appsettings json as such:\n```json\n  \"Services\": {\n    \"my-api\": {\n      \"http\": [\n        \"localhost:5100\"\n      ]\n    }\n  }\n```\n\nI want to use HTTPS when running in the cloud, so I used the `https+http` scheme when configuring the HttpClient, but I want to use HTTP locally, hence my JSON config. This invokes service discovery and translates `https+http://my-api` to `localhost:5100`, but the problem is that it is using `https` instead of `http`. This causes errors because it\u0027s not a valid TLS endpoint. \n\nI would have expected service discovery to look in my config for `Services:my-api:https`, not found that, then looked for `Services:my-api:http`, found that value, and used `http://localhost:5100` as the resolved URL.\n\nPerhaps I\u0027m using the API/configuration wrong... is there a way to prevent it from trying https locally without i.e. making the base address an IConfiguration value? I\u0027ve tried disallowing the https scheme when the environment is development, but then it errors because the service discovery url includes https.\n\n### Expected Behavior\n\nService Discovery should have resolved the URL to `http://localhost:5100` as that is what was configured.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version info\n\n_No response_\n\n### Anything else?\n\nMicrosoft.Extensions.ServiceDiscovery version 9.1.0",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Service Discovery doesn\u0027t resolve http endpoints correctly",
        "labels":  [
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/9248",
        "createdAt":  "2025-05-12T11:26:18Z",
        "number":  9248,
        "author":  "thompson-tomo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-14T08:19:57Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI would like to be able to use service discovery to find the connection strings necessary to connect to non http services ie RabbitMQ. This would be just like we have for http client.\n\n### Describe the solution you\u0027d like\n\nDocumentation/example preparred showing/explaing what should be done. \nAny necessary interfaces/base classes are public.\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Use service discovery for connection strimgs",
        "labels":  [
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/9708",
        "createdAt":  "2025-06-05T15:09:59Z",
        "number":  9708,
        "author":  "mmaideveloper",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODODuyQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "crazyfox55",
                                            "createdAt":  "2025-09-03T04:30:18Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-06-06T01:52:19Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nHi,\n\nI am not able for http client set timeout, however client.Timeout is  120 sec. \nI tried direct change timeout, over  timeout policy, nothing works.\nAs soo as I remove  .AddServiceDiscovery() from http client setup and user hardcoded url, all works fine\nand timeout was accepted.\n\nexample:\n\nbuilder.Services.AddHttpClient(\"documentprocessingapi\",\n    client =\u003e\n    {\n        var url = config.GetValue\u003cstring\u003e(\"Api\");\n        client.BaseAddress = new Uri(url);\n        client.Timeout = TimeSpan.FromSeconds(2000);\n        Log.Logger.Information(\"Set timeout to 120 sec\");\n    })\n//.AddPolicyHandler(timeoutPolicy)\n.AddServiceDiscovery()\n.ConfigurePrimaryHttpMessageHandler(() =\u003e\n{\n    var handler = new HttpClientHandler();\n    handler.ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;\n    return handler;\n})\n.ConfigureHttpClient(client =\u003e\n{\n    client.Timeout = Timeout.InfiniteTimeSpan; // ⏳ Force unlimited timeout at HttpClient level\n});\n\n\nI am getting error:\n\n2025-06-05 09:23:26.915 +02:00 [ERR] Resilience event occurred. EventName: \u0027OnTimeout\u0027, Source: \u0027-standard//Standard-AttemptTimeout\u0027, Operation Key: \u0027null\u0027, Result: \u0027null\u0027\n2025-06-05 09:23:26.973 +02:00 [WRN] Execution attempt. Source: \u0027-standard//Standard-Retry\u0027, Operation Key: \u0027null\u0027, Result: \u0027The operation didn\u0027t complete within the allowed timeout of \u002700:00:10\u0027.\u0027, Handled: \u0027true\u0027, Attempt: \u00270\u0027, Execution Time: 10062.9676ms\nPolly.Timeout.TimeoutRejectedException: The operation didn\u0027t complete within the allowed timeout of \u002700:00:10\u0027.\n ---\u003e System.Threading.Tasks.TaskCanceledException: The operation was canceled.\n ---\u003e System.IO.IOException: Unable to read data from the transport connection: The I/O operation has been aborted because of either a thread exit or an application request..\n ---\u003e System.Net.Sockets.SocketException (995): The I/O operation has been aborted because of either a thread exit or an application request.\n   --- End of inner exception stack trace ---\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource\u003cSystem.Int32\u003e.GetResult(Int16 token)\n   at System.Net.Security.SslStream.EnsureFullTlsFrameAsync[TIOAdapter](CancellationToken cancellationToken, Int32 estimatedSize)\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource\u003cTResult\u003e.GetResult(Int16 token)\n   at System.Net.Security.SslStream.ReadAsyncInternal[TIOAdapter](Memory`1 buffer, CancellationToken cancellationToken)\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource\u003cTResult\u003e.GetResult(Int16 token)\n   at System.Net.Http.HttpConnection.InitialFillAsync(Boolean async)\n   at System.Net.Http.HttpConnection.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\n\n\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version info\n\n_No response_\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  ".AddServiceDiscovery override any  http client timeouts",
        "labels":  [
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/9957",
        "createdAt":  "2025-06-19T16:45:37Z",
        "number":  9957,
        "author":  "sbaldwin621",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODPVqXg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "artemkuzmyk",
                                            "createdAt":  "2025-09-09T13:08:03Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-09-09T07:39:08Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nA deadlock can occur between `Microsoft.Extensions.ServiceDiscovery.dll!Microsoft.Extensions.ServiceDiscovery.ServiceEndpointWatcher.RefreshAsyncInternal() Line 141` and `Microsoft.Extensions.ServiceDiscovery.dll!Microsoft.Extensions.ServiceDiscovery.ServiceEndpointWatcher.RefreshAsync(bool force) Line 96`, leading to thread pool starvation.\n\nOn 5/30, we noticed that one of our reverse proxy application nodes had stopped servicing requests. This application uses YARP to route traffic to our backend and apply some custom authentication logic (among other things). We’re using Aspire for local development, and in production we have an explicit `Services` section in our appsettings.json file to configure service discovery using `Microsoft.Extensions.ServiceDiscovery`.\n\nWe took a memory dump before restarting. This dump shows 4435 worker threads sitting at `Microsoft.Extensions.ServiceDiscovery.dll!Microsoft.Extensions.ServiceDiscovery.ServiceEndpointWatcher.RefreshAsync` and 1 worker thread at `Microsoft.Extensions.ServiceDiscovery.dll!Microsoft.Extensions.ServiceDiscovery.ServiceEndpointWatcher.RefreshAsyncInternal`.\n\nMy analysis: For the worker thread at RefreshAsyncInternal, it is stuck on [line 141](https://github.com/dotnet/aspire/blob/2a8f48ea5811f317a26405eb315aa315cc9e3cea/src/Microsoft.Extensions.ServiceDiscovery/ServiceEndpointWatcher.cs#L141), blocking inside of a lock waiting on `_changeTokenRegistration?.Dispose()` to complete. On [line 162](https://github.com/dotnet/aspire/blob/2a8f48ea5811f317a26405eb315aa315cc9e3cea/src/Microsoft.Extensions.ServiceDiscovery/ServiceEndpointWatcher.cs#L162), you can see that `_changeTokenRegistration` is given a value of a change callback registration which itself calls `RefreshAsync`, so I suspect that there is a race condition here where [the lock on line 138](https://github.com/dotnet/aspire/blob/2a8f48ea5811f317a26405eb315aa315cc9e3cea/src/Microsoft.Extensions.ServiceDiscovery/ServiceEndpointWatcher.cs#L138) was entered just before the lock was entered inside of that callback, and now `_changeTokenRegistration.Dispose()` is waiting for that callback to complete before continuing, which will never happen. I’m not sure how to track down which exact task is blocking the dispose.\n\nI can’t provide the memory dump itself as it was taken from a production environment but I am happy to answer questions or whatever else is needed.\n\n### Expected Behavior\n\nNo deadlock.\n\n### Steps To Reproduce\n\nUnsure how to reproduce, seems to be a race condition that is unlikely to come up. Have only had it happen once over the course of a few months.\n\n### Exceptions (if any)\n\nNone.\n\n### .NET Version info\n\nHere’s the output of dotnet --info from today. At the time of the bug, we were still running .NET 9.0.4.\n\n```\nHost:\n  Version:      9.0.5\n  Architecture: x64\n  Commit:       e36e4d1a8f\n  RID:          win-x64\n\n.NET SDKs installed:\n  No SDKs were found.\n\n.NET runtimes installed:\n  Microsoft.AspNetCore.App 8.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 9.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 8.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 9.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n\nOther architectures found:\n  x86   [C:\\Program Files (x86)\\dotnet]\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\n\nEnvironment variables:\n  Not set\n\nglobal.json file:\n  Not found\n\nLearn more:\nhttps://aka.ms/dotnet/info\n\nDownload .NET:\nhttps://aka.ms/dotnet/download\n```\n\n### Anything else?\n\nAt the time of the issue, we were running .NET 9.0.4 and [ASP.NET](http://asp.net/) Core 9.0.4, confirmed in the module list in the memory dump.\n\nThe version of Microsoft.Extensions.ServiceDiscovery we have installed is 9.1.0. An excerpt from our Directory.Packages.props file:\n\n```xml\n\u003cPackageVersion Include=\"Aspire.Hosting.AppHost\" Version=\"9.1.0\" /\u003e\n\u003cPackageVersion Include=\"Aspire.Hosting.RabbitMQ\" Version=\"9.1.0\" /\u003e\n\u003cPackageVersion Include=\"Aspire.Hosting.SqlServer\" Version=\"9.1.0\" /\u003e\n\u003cPackageVersion Include=\"Aspire.Hosting.Testing\" Version=\"9.1.0\" /\u003e\n\u003cPackageVersion Include=\"Aspire.Microsoft.Data.SqlClient\" Version=\"9.1.0\" /\u003e\n\u003cPackageVersion Include=\"Microsoft.Extensions.ServiceDiscovery\" Version=\"9.1.0\" /\u003e\n\u003cPackageVersion Include=\"Microsoft.Extensions.ServiceDiscovery.Yarp\" Version=\"9.1.0\" /\u003e\n\u003cPackageVersion Include=\"Yarp.ReverseProxy\" Version=\"2.2.0\" /\u003e\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwr_csg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOKYQzfc6yJLu8",
                                           "createdAt":  "2025-06-19T17:17:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@ReubenBond does this analysis seem correct? I think you authored this.",
                                           "updatedAt":  "2025-06-19T17:17:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc7Cv9yy",
                                           "createdAt":  "2025-09-08T18:04:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "loat-km",
                                           "body":  "Hi all,\n\nWe\u0027re experiencing the exact same deadlock pattern described in this issue on version `9.4.1`.\n\n### Environment:\n\n  - .NET 9.0.8\n  - `Microsoft.Extensions.ServiceDiscovery.Yarp` version `9.4.1` (and dependencies)\n  - YARP gateway application running in Kubernetes using DNS SRV\n      -  used to resolve destinations from the same Kubernetes cluster using headless k8s services\n\n###  Thread Dump Analysis:\n\n##### Memory dump confirms identical deadlock pattern:\n  - 1 thread stuck in `RefreshAsyncInternal` at `WaitForCallbackToComplete`\n  - multiple threads stuck trying to acquire lock in `RefreshAsync` (line 96)\n\n##### Thread **holding** the lock:\n```\nSystem.Threading.CancellationTokenSource+Registrations.WaitForCallbackToComplete(Int64) [CancellationTokenSource.cs @ 1145]\nMicrosoft.Extensions.ServiceDiscovery.ServiceEndpointWatcher+\u003cRefreshAsyncInternal\u003ed__23.MoveNext() [ServiceEndpointWatcher.cs @ 142]\n```\n##### Threads **blocked** on lock:\n```\nSystem.Threading.Monitor.ReliableEnter(System.Object, Boolean ByRef)\nMicrosoft.Extensions.ServiceDiscovery.ServiceEndpointWatcher.RefreshAsync(Boolean) [ServiceEndpointWatcher.cs @ 96]\nMicrosoft.Extensions.ServiceDiscovery.ServiceEndpointWatcher+\u003c\u003ec.\u003cRefreshAsyncInternal\u003eb__23_0(System.Object) [ServiceEndpointWatcher.cs @ 162]\n```\n\nAre there any plans to address this? Happy to assist in testing any proposed fixes.",
                                           "updatedAt":  "2025-09-09T07:39:08Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Deadlock in ServiceDiscovery library leading to thread pool starvation",
        "labels":  [
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/10098",
        "createdAt":  "2025-06-27T23:37:10Z",
        "number":  10098,
        "author":  "radical",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-30T22:26:32Z",
        "body":  "## Build Information\nBuild: https://github.com/dotnet/aspire/actions/runs/15937073176\nBuild error leg or test failing: Microsoft.Extensions.ServiceDiscovery.Dns.Resolver.Tests.TcpFailoverTests.TcpFailover_Simple_Success\nPull request: \n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": \"\",\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n\n```\nAssert.Single() Failure: The collection was empty   at Microsoft.Extensions.ServiceDiscovery.Dns.Resolver.Tests.TcpFailoverTests.TcpFailover_Simple_Success() in /_/tests/Microsoft.Extensions.ServiceDiscovery.Dns.Tests/Resolver/TcpFailoverTests.cs:line 36\r\n--- End of stack trace from previous location ---\n```\n\n\u003cdiv\u003e\n\n## Stdout\n\n\u003cdetails\u003e\u003csummary\u003eDetails\u003c/b\u003e\u003c/summary\u003e\n\n\n```yml\n\n| [2025-06-27T22:28:57] Microsoft.Extensions.ServiceDiscovery.Dns.Resolver.DnsResolver Warning: Query A tcp-simple.test on 127.0.0.1:52756 attempt 1 failed due to a network error.\r\n| System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.\r\n|    at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n|    at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n|    at System.Net.Sockets.Socket.\u003cConnectAsync\u003eg__WaitForConnectWithCancellation|285_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n|    at Microsoft.Extensions.ServiceDiscovery.Dns.Resolver.DnsResolver.SendDnsQueryCoreTcpAsync(IPEndPoint serverEndPoint, EncodedDomainName dnsSafeName, QueryType queryType, CancellationToken cancellationToken) in /_/src/Microsoft.Extensions.ServiceDiscovery.Dns/Resolver/DnsResolver.cs:line 777\r\n|    at Microsoft.Extensions.ServiceDiscovery.Dns.Resolver.DnsResolver.SendQueryToServerAsync(IPEndPoint serverEndPoint, String name, EncodedDomainName dnsSafeName, QueryType queryType, Int32 attempt, CancellationToken cancellationToken) in /_/src/Microsoft.Extensions.ServiceDiscovery.Dns/Resolver/DnsResolver.cs:line 523\r\n|    at Microsoft.Extensions.ServiceDiscovery.Dns.Resolver.DnsResolver.SendQueryToServerWithTimeoutAsync(IPEndPoint serverEndPoint, String name, EncodedDomainName dnsSafeName, QueryType queryType, Int32 attempt, CancellationToken cancellationToken) in /_/src/Microsoft.Extensions.ServiceDiscovery.Dns/Resolver/DnsResolver.cs:line 472\r\n|    at Microsoft.Extensions.ServiceDiscovery.Dns.Resolver.DnsResolver.SendQueryWithRetriesAsync[TResult](String name, EncodedDomainName dnsSafeName, QueryType queryType, Func`4 processResponseFunc, CancellationToken cancellationToken) in /_/src/Microsoft.Extensions.ServiceDiscovery.Dns/Resolver/DnsResolver.cs:line 377\r\n\n```\n\n\u003c/div\u003e\n\n\u003c!-- BEGIN: Github workflow runs test report --\u003e\n\n### Last 10 failures:\n| Run date | Test Name |\n| --------- | ---- |\n| Jun 27 10 PM | [windows] [Microsoft.Extensions.ServiceDiscovery.Dns.Resolver.Tests.TcpFailoverTests.TcpFailover_Simple_Success](https://github.com/dotnet/aspire/actions/runs/15937073176) |\n\n### Summary of the failures\n\n| Last 24 hrs | Last 7 days | Last 30 days |\n| --- | --- | --- |\n| 1 | 1 | 1 |\n\n\n-- Updated on 6/27/2025 11:37:09 PM UTC\n\n\u003c!-- END: Github workflow runs test report --\u003e\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtBD1SA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOKYQzfc6zsAOp",
                                           "createdAt":  "2025-06-27T23:40:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "radical",
                                           "body":  "cc @joperezr ",
                                           "updatedAt":  "2025-06-27T23:40:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc60EPVI",
                                           "createdAt":  "2025-06-30T22:26:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "\u003e cc [@joperezr](https://github.com/joperezr)\n\nDo we think this is related to the new SDK?",
                                           "updatedAt":  "2025-06-30T22:26:32Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Failing test: Microsoft.Extensions.ServiceDiscovery.Dns.Resolver.Tests.TcpFailoverTests.TcpFailover_Simple_Success",
        "labels":  [
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/10099",
        "createdAt":  "2025-06-27T23:39:03Z",
        "number":  10099,
        "author":  "radical",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-27T23:40:47Z",
        "body":  "## Build Information\nBuild: https://github.com/dotnet/aspire/actions/runs/15937073176\nBuild error leg or test failing: Microsoft.Extensions.ServiceDiscovery.Dns.Resolver.Tests.TcpFailoverTests.TcpFailover_ServerClosesWithoutData_EmptyResult\nPull request: \n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": \"\",\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n\n```\nAssert.Throws() Failure: Exception type was not an exact match\r\nExpected: typeof(System.InvalidOperationException)\r\nActual:   typeof(System.Net.Sockets.SocketException)\r\n---- System.Net.Sockets.SocketException : An attempt was made to access a socket in a way forbidden by its access permissions.   at Microsoft.Extensions.ServiceDiscovery.Dns.Resolver.Tests.TcpFailoverTests.TcpFailover_ServerClosesWithoutData_EmptyResult() in /_/tests/Microsoft.Extensions.ServiceDiscovery.Dns.Tests/Resolver/TcpFailoverTests.cs:line 62\r\n--- End of stack trace from previous location ---\r\n----- Inner Stack Trace -----\r\n   at System.Net.Sockets.Socket.UpdateStatusAfterSocketErrorAndThrowException(SocketError error, Boolean disconnectOnFailure, String callerName)\r\n   at System.Net.Sockets.Socket.DoBind(EndPoint endPointSnapshot, SocketAddress socketAddress)\r\n   at System.Net.Sockets.Socket.Bind(EndPoint localEP)\r\n   at Microsoft.Extensions.ServiceDiscovery.Dns.Resolver.Tests.LoopbackDnsServer.ProcessTcpRequest(Func`3 action) in /_/tests/Microsoft.Extensions.ServiceDiscovery.Dns.Tests/Resolver/LoopbackDnsServer.cs:line 80\n```\n\n\u003cdiv\u003e\n\n## Stdout\n\n\u003cdetails\u003e\u003csummary\u003eDetails\u003c/b\u003e\u003c/summary\u003e\n\n\n```yml\n\n| [2025-06-27T22:28:59] Microsoft.Extensions.ServiceDiscovery.Dns.Resolver.DnsResolver Warning: Query A tcp-server-closes.test on 127.0.0.1:52763 attempt 1 failed due to a network error.\r\n| System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.\r\n|    at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n|    at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n|    at System.Net.Sockets.Socket.\u003cConnectAsync\u003eg__WaitForConnectWithCancellation|285_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)\r\n|    at Microsoft.Extensions.ServiceDiscovery.Dns.Resolver.DnsResolver.SendDnsQueryCoreTcpAsync(IPEndPoint serverEndPoint, EncodedDomainName dnsSafeName, QueryType queryType, CancellationToken cancellationToken) in /_/src/Microsoft.Extensions.ServiceDiscovery.Dns/Resolver/DnsResolver.cs:line 777\r\n|    at Microsoft.Extensions.ServiceDiscovery.Dns.Resolver.DnsResolver.SendQueryToServerAsync(IPEndPoint serverEndPoint, String name, EncodedDomainName dnsSafeName, QueryType queryType, Int32 attempt, CancellationToken cancellationToken) in /_/src/Microsoft.Extensions.ServiceDiscovery.Dns/Resolver/DnsResolver.cs:line 523\r\n|    at Microsoft.Extensions.ServiceDiscovery.Dns.Resolver.DnsResolver.SendQueryToServerWithTimeoutAsync(IPEndPoint serverEndPoint, String name, EncodedDomainName dnsSafeName, QueryType queryType, Int32 attempt, CancellationToken cancellationToken) in /_/src/Microsoft.Extensions.ServiceDiscovery.Dns/Resolver/DnsResolver.cs:line 472\r\n|    at Microsoft.Extensions.ServiceDiscovery.Dns.Resolver.DnsResolver.SendQueryWithRetriesAsync[TResult](String name, EncodedDomainName dnsSafeName, QueryType queryType, Func`4 processResponseFunc, CancellationToken cancellationToken) in /_/src/Microsoft.Extensions.ServiceDiscovery.Dns/Resolver/DnsResolver.cs:line 377\r\n\n```\n\n\u003c/div\u003e\n\n\u003c!-- BEGIN: Github workflow runs test report --\u003e\n\n### Last 10 failures:\n| Run date | Test Name |\n| --------- | ---- |\n| Jun 27 10 PM | [windows] [Microsoft.Extensions.ServiceDiscovery.Dns.Resolver.Tests.TcpFailoverTests.TcpFailover_ServerClosesWithoutData_EmptyResult](https://github.com/dotnet/aspire/actions/runs/15937073176) |\n\n### Summary of the failures\n\n| Last 24 hrs | Last 7 days | Last 30 days |\n| --- | --- | --- |\n| 1 | 1 | 1 |\n\n\n-- Updated on 6/27/2025 11:39:02 PM UTC\n\n\u003c!-- END: Github workflow runs test report --\u003e\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOs7AECQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOKYQzfc6zsAQJ",
                                           "createdAt":  "2025-06-27T23:40:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "radical",
                                           "body":  "cc @joperezr ",
                                           "updatedAt":  "2025-06-27T23:40:47Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Failing test: Microsoft.Extensions.ServiceDiscovery.Dns.Resolver.Tests.TcpFailoverTests.TcpFailover_ServerClosesWithoutData_EmptyResult",
        "labels":  [
                       "area-service-discovery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspire/issues/10996",
        "createdAt":  "2025-08-17T19:42:32Z",
        "number":  10996,
        "author":  "julealgon",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-19T06:31:58Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nWe have a ~190 project monorepo today containing a mix of `.NET9` and `.NET472` projects (and many `netstandard2.0` libraries). I was reading on the `Microsoft.Extensions.ServiceDiscovery` library and I could see that being quite useful for us even without the full Aspire integration.\n\nHowever, I immediately noticed that the package is limited to .NET8+ today, which would make it unusable for us in cases where there is anything shared with our `.NET472` projects.\n\nIt would be very nice if the library supported either `netstandard2.0` or at least `net472` directly (which would allow us to at the very least switch to multi-targeting in a few cases).\n\n### Describe the solution you\u0027d like\n\nWe would like for `Microsoft.Extensions.ServiceDiscovery` to also support `netstandard2.0` or `net472` targets so that we could use it in more of our projects.\n\n### Additional context\n\nWe rely _heavily_ on other `Microsoft.Extensions.*` packages even in our .NET Framework projects. We\u0027ve migrated fully to using dependency injection, `IConfiguration`, `IOptions`, and even partially use `HostApplicationBuilder` for legacy projects, including many things built on top of those abstractions, such as `OpenTelemetry.Hosting.Extensions`.\n\nFrom what I can see, `Microsoft.Extensions.ServiceDiscovery` only depends on those core abstractions which all already support `.netstandard` and `net461`+. Feels unusual to see this one _only_ targeting `.net8`+ based on that.\n\nI understand this was implemented as part of Aspire, but it can _clearly_ be used independently from that framework.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvonY7w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOKYQzfc6-cVGJ",
                                           "createdAt":  "2025-08-18T04:55:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "https://github.com/dotnet/aspire/pull/10470",
                                           "updatedAt":  "2025-08-18T04:55:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDOKYQzfc6-idjv",
                                           "createdAt":  "2025-08-18T12:58:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e [#10470](https://github.com/dotnet/aspire/pull/10470)\n\n![Image](https://github.com/user-attachments/assets/d8c3a807-21e5-4fa6-aca8-509135ad9af0)\n\nThank you David! Looking forward to that being merged and released.",
                                           "updatedAt":  "2025-08-18T12:58:57Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Support either `netstandard` or `net472` on `Microsoft.Extensions.ServiceDiscovery`",
        "labels":  [
                       "area-service-discovery"
                   ]
    }
]
