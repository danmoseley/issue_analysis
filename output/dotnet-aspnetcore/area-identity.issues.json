[
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5716",
        "createdAt":  "2014-05-28T17:32:23Z",
        "number":  5716,
        "author":  "HaoK",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC1vVHg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YZahringer",
                                            "createdAt":  "2024-02-08T15:22:29Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-11-07T20:08:34Z",
        "body":  "",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONpdfaw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE4NjE3Mzk5NA==",
                                           "createdAt":  "2016-02-19T11:07:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "techyian",
                                           "body":  "Hey,\n\nAny news on this one guys? Would be a great feature to include.\n",
                                           "updatedAt":  "2016-02-19T11:07:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MTY2Mjg2Ng==",
                                           "createdAt":  "2016-11-18T22:50:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "@blowdart thoughts?\n",
                                           "updatedAt":  "2016-11-18T22:50:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MTk5NDgyNQ==",
                                           "createdAt":  "2016-11-21T16:47:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Yea, we ought to, it\u0027ll need template support as well, so, 1.2?",
                                           "updatedAt":  "2016-11-21T16:47:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3Mzg4MDc2Mw==",
                                           "createdAt":  "2017-01-19T19:55:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "@blowdart @divega what kind of password expiration do we want to support.  Cheapest would be just adding a UserManager API to force expire passwords, and a new method to query for expired passwords.\r\n\r\nOr we could go for something more involved like automatic password expiration policies, involving last password change dates etc.  If we are going to be updating the schema with things like CreatedDate/LastSignInDate, LastPasswordChangeDate isn\u0027t the worst to add at this time either.",
                                           "updatedAt":  "2017-01-19T19:55:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3Mzg4MTM2NQ==",
                                           "createdAt":  "2017-01-19T19:57:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "christophermllr",
                                           "body":  "FWIW, a client of mine required this feature and I ended up extending the data model exactly as you mentioned in your second recommendation above.",
                                           "updatedAt":  "2017-01-19T19:57:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3NTIzOTcxNQ==",
                                           "createdAt":  "2017-01-25T21:33:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "@blowdart @divega should we continue to add optional interfaces to add these features in a non breaking way, or can we update our existing interfaces to require this functionality in stores for 2.0?",
                                           "updatedAt":  "2017-01-25T21:33:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3NTI0Mjc4MA==",
                                           "createdAt":  "2017-01-25T21:46:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "This boils down to if we are going to add IUserLastPasswordChangeStore vs adding the methods to IUserPasswordStore, and similarly for CreatedDate/SignInDate with new stores or updating any existing interface",
                                           "updatedAt":  "2017-01-25T21:46:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3NTI0MzA0Mg==",
                                           "createdAt":  "2017-01-25T21:47:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Non breaking. Probably need some other infrastructure too, like password history.",
                                           "updatedAt":  "2017-01-25T21:47:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3NTI1MTYyMA==",
                                           "createdAt":  "2017-01-25T22:21:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brockallen",
                                           "body":  "Good thing your password validator accepts the user as a param and not just the password :P",
                                           "updatedAt":  "2017-01-25T22:21:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3NTI2ODk4OA==",
                                           "createdAt":  "2017-01-25T23:46:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAGWpdA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cwishva",
                                                                               "createdAt":  "2017-01-27T06:09:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "blowdart",
                                           "body":  "See, we planned ahead. Genius!",
                                           "updatedAt":  "2017-01-25T23:46:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1MzMyMjQxNg==",
                                           "createdAt":  "2017-12-21T10:58:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VitaliiVlasovDevPro",
                                           "body":  "Hi! \r\nIs there any news about this feature? ",
                                           "updatedAt":  "2017-12-21T10:58:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NDMzNTc2Nw==",
                                           "createdAt":  "2017-12-28T18:48:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "This is unlikely to be coming in 2.1 since this requires scheme changes to implement",
                                           "updatedAt":  "2017-12-28T18:48:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NDM1MDkxMQ==",
                                           "createdAt":  "2017-12-28T20:09:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gamerwalt",
                                           "body":  "Password expiration is mostly a custom thing. I\u0027m doing one right now and\nit\u0027s pretty easy. Override the functions that save and sign in user and\ncheck if password is expired, if it is, just return with a bad identity\nresult.\n\nAdewoyin Olawale Bañez\nWinnipeg, Manitoba,\nCanada\n\ngamerwalt@gmail.com\ngamerwalt@hotmail.com\n\n\nOn Thu, Dec 28, 2017 at 12:49 PM, Hao Kung \u003cnotifications@github.com\u003e wrote:\n\n\u003e This is unlikely to be coming in 2.1 since this requires scheme changes to\n\u003e implement\n\u003e\n\u003e —\n\u003e You are receiving this because you are subscribed to this thread.\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/aspnet/Identity/issues/99#issuecomment-354335767\u003e, or mute\n\u003e the thread\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AEWDIlwj75xOt_ZbfvVRAhSASmqGXwVvks5tE-KegaJpZM4B_EGG\u003e\n\u003e .\n\u003e\n",
                                           "updatedAt":  "2017-12-28T20:09:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1ODEzMDc3MA==",
                                           "createdAt":  "2018-01-16T22:34:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "@blowdart punt to backlog or 2.2?",
                                           "updatedAt":  "2018-01-16T22:34:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1ODEzMDgxOA==",
                                           "createdAt":  "2018-01-16T22:35:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "Requires more schema changes",
                                           "updatedAt":  "2018-01-16T22:35:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1ODEzMTAyNw==",
                                           "createdAt":  "2018-01-16T22:35:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "If we ever add this feature, we should probably support using it as part of the default UI as well.",
                                           "updatedAt":  "2018-01-16T22:35:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1ODEzMjEyMg==",
                                           "createdAt":  "2018-01-16T22:40:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAfk6iQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "chaim1221",
                                                                               "createdAt":  "2018-11-28T13:57:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "blowdart",
                                           "body":  "2.2",
                                           "updatedAt":  "2018-01-16T22:40:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2NjIxNzM3OA==",
                                           "createdAt":  "2018-02-16T11:58:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAcpMtQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Misiu",
                                                                               "createdAt":  "2018-03-29T09:04:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cleftheris",
                                                                               "createdAt":  "2018-09-27T09:09:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "TechSavvySam",
                                           "body":  "I had to extend the code to support password force change so IMO this would be a great one to add.  The logic to support force password change is fairly simple.  Certainly the complexity comes in when you want to add tunable expiration logic and password history (which could be added later).\r\n\r\nI\u0027m actually using external logic in a scheduled task to figure out when to expire users\u0027 passwords.   My current iteration of expiring passwords is because we made the password rules more complex and wanted to force all users to update to the more complex passwords",
                                           "updatedAt":  "2018-02-16T12:00:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyNjYyNDIxMg==",
                                           "createdAt":  "2018-10-03T12:45:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cleftheris",
                                           "body":  "It seems to me this is quite handy and especially regarding the Dates involved (LastSigninDate etc.) there is no easy way to implement this as a consumer of the library without overriding everything from the UserManager, SigninManager, UserStore, CustomApplcationUser\r\n\r\nCould this potentially be done in two phases so we can build on top. First part could be included into 2.2 and have only containing the changes around `IUserActivityStore\u003cTUser\u003e`.",
                                           "updatedAt":  "2018-10-03T12:45:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MDU0MTcxMg==",
                                           "createdAt":  "2018-12-30T06:17:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "harishakim",
                                           "body":  "Hi,Everybody \r\nplease give more details about password expired date ",
                                           "updatedAt":  "2018-12-30T06:17:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MzcyMjg2Ng==",
                                           "createdAt":  "2019-03-17T22:43:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jmatheti",
                                           "body":  "PCI demands users to update the password and also its a best practice being enforced in most of the enterprise systems. Regardless of the business requirement, I guess this is most wanted feature for an identity framework. \r\n\r\nAny update please?\r\n\r\nDoes not want to duplicate code. ( which I already have two-factor implemented prior release). \r\n\r\nI did a quick implementation i.e.  `UserManager` - `CreateAsync` to add `PasswordExpiryEnabled` and `PasswordEnd` as per the configuration to AspNetUser. Then on login `signInManager.CheckPasswordSignInAsync` following a conditional check before `signInManager.SignInAsync`. \r\n\r\nThis seems to work however its good to have this included in the framework.",
                                           "updatedAt":  "2019-03-17T22:43:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NTEwMTE5Nw==",
                                           "createdAt":  "2019-03-21T03:15:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jmatheti",
                                           "body":  "There is another problem with the above approach mentioned to handle password expiration. \r\n The problem is we can not have two-factor authentication. Because when we do a check on the VerifyCode page using the below , user always returns null. \r\n\r\n`var user = await signInManager.GetTwoFactorAuthenticationUserAsync();`\r\nThats because the user signin but not for twofactor signin. \r\nThe method unfortunately private, and can\u0027t think of any work around.  \r\n` private async Task\u003cSignInResult\u003e SignInOrTwoFactorAsync(TUser user, bool isPersistent, string loginProvider = null, bool bypassTwoFactor = false)`\r\n\r\nSo I guess we need the framework to have this functionality built in. ",
                                           "updatedAt":  "2019-03-21T03:15:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NTEwNzYwMw==",
                                           "createdAt":  "2019-03-21T04:05:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jmatheti",
                                           "body":  "in the interim as a work around, I\u0027m using the below (it seems to work for now)\r\n````\r\n  //handle two-factor authentication\r\n                    if (user.TwoFactorEnabled )\r\n                    {\r\n                        await signInManager.PasswordSignInAsync(user, model.NewPassword, model.IsPersistent, true);\r\n                        return await TwoFactorAuthenticationHandler(user, model.IsPersistent, model.ReturnUrl);\r\n                    }\r\n                    else {\r\n\r\n                        await signInManager.SignInAsync(user, model.IsPersistent);\r\n                        await appUserService.ManagePasswordExpiryAsync(user);                     \r\n\r\n                        return RedirectToLocal(model.ReturnUrl);\r\n                    }`\r\n```",
                                           "updatedAt":  "2019-03-21T04:05:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MTIyOTExOA==",
                                           "createdAt":  "2019-05-10T09:44:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "valeriob",
                                           "body":  "Hi @blowdart ! Is there something in 3.0 preview already ?",
                                           "updatedAt":  "2019-05-10T09:44:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5Mjc1MjI1OA==",
                                           "createdAt":  "2019-05-15T17:39:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "No, other things took precedence, and identity gets no extra features for 3.0, hence it going to backlog for now.",
                                           "updatedAt":  "2019-05-15T17:39:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NjE5OTUxNQ==",
                                           "createdAt":  "2019-12-16T19:10:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA3cpLw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mv10-work",
                                                                               "createdAt":  "2019-12-17T11:54:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "fabich",
                                           "body":  "\u003e PCI demands users to update the password and also its a best practice being enforced in most of the enterprise systems. Regardless of the business requirement, I guess this is most wanted feature for an identity framework.\r\n\u003e \r\n\u003e Any update please?\r\n\r\n@Janidbest there are more and more security papers and best-practice recommendations to no longer enforce password expiration.\r\ne.g. https://www.sans.org/security-awareness-training/blog/time-password-expiration-die\r\nor directly from Microsoft:\r\nhttps://www.microsoft.com/en-us/research/publication/password-guidance",
                                           "updatedAt":  "2019-12-16T19:10:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NjE3MTkxNA==",
                                           "createdAt":  "2020-09-03T01:10:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stenionobres",
                                           "body":  "Hi! Is there any news about this feature?",
                                           "updatedAt":  "2020-09-03T01:10:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MDA3MzEyNQ==",
                                           "createdAt":  "2021-06-28T22:00:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Xyncgas",
                                           "body":  "as the last issue currently standing in the repository, I press F for condolences",
                                           "updatedAt":  "2021-06-28T22:00:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MDA3NDA2NQ==",
                                           "createdAt":  "2021-06-28T22:01:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCD0oyA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SonNg2k",
                                                                               "createdAt":  "2021-11-24T04:43:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Xyncgas",
                                           "body":  "IMO, this feature can be implemented by an intern taking minimum wage at a high school relationship tech company, under 30 min",
                                           "updatedAt":  "2021-06-28T22:01:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde842l19r",
                                           "createdAt":  "2021-09-09T08:49:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODcE2pw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "digrizzz",
                                                                               "createdAt":  "2024-03-27T14:26:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Jack-S-Jenkins",
                                           "body":  "+1! The feature would be nice for those who need a quick way to expire a user password after having an admin manually reset it to \"Password\" or some other simple one. At least it will be some modicum of security for low-level non-critical apps.",
                                           "updatedAt":  "2021-09-09T08:49:05Z"
                                       }
                                   ],
                         "totalCount":  30
                     },
        "title":  "Support password expiration",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "affected-few",
                       "severity-minor"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5720",
        "createdAt":  "2016-03-08T07:24:33Z",
        "number":  5720,
        "author":  "markusvt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2020-10-06T18:36:37Z",
        "body":  "Hello, i spent the last day to figure out how to do it, but it seems with the given functions of UserManager and RoleManager, the only possible way to achieve this is to enumerate all Users and check if the user has specified role.\n\nIs there a way to do this better than enumerate over all user?\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHWTHJw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE5NDUzMTE5Mw==",
                                           "createdAt":  "2016-03-09T22:07:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "What is your scenario here? An admin panel or dashboard? This has a performance cost. What we could do is give you the user IDs in a role, and then you need to resolve those to a user, using the UserStore.\n",
                                           "updatedAt":  "2016-03-09T22:07:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE5NDczNDQ0Mw==",
                                           "createdAt":  "2016-03-10T08:35:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markusvt",
                                           "body":  "Yes it is an admin panel in which one can manage the roles and their assigned users.\nI just wondered that the functionality does not exist as I could imagine that this scenario appears quite often. I guess a list of UserIds is sufficient.\n\nBy the way, in my specific scenario (I use EF7 and a SQL Server) I solved the whole problem by developing a database-join between the User, UserRole and Role Table\n",
                                           "updatedAt":  "2016-03-10T08:35:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE5NTAxNDQ1Nw==",
                                           "createdAt":  "2016-03-10T19:41:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Ah good, at least you\u0027re not blocked. Yes, we\u0027re not aiming identity at admin panel scenarios. We figure that if you\u0027re writing an admin panel you can do this for yourself. There are somewhat interesting performance hits in this sort of link, because you can end up loading the entire database.\n\nWe\u0027ll look at the user ID link.\n",
                                           "updatedAt":  "2016-03-10T19:41:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIwOTY4NDk5NQ==",
                                           "createdAt":  "2016-04-13T23:06:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "@blowdart @divega is this something for the backlog or 1.0?\n",
                                           "updatedAt":  "2016-04-13T23:06:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMDIzNDg2NQ==",
                                           "createdAt":  "2016-04-15T01:15:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "1.0\n",
                                           "updatedAt":  "2016-04-15T01:15:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMDMwMzc3Ng==",
                                           "createdAt":  "2016-04-15T06:26:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "divega",
                                           "body":  ":+1:\n",
                                           "updatedAt":  "2016-04-15T06:26:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MzE0Mzg0Nw==",
                                           "createdAt":  "2019-05-16T16:42:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyButts",
                                           "body":  "Don\u0027t know if this is the correct area, but could you guys add skip and take to the GetUsersInRoleAsync method in the IUserRoleStore interface?",
                                           "updatedAt":  "2019-05-16T16:42:38Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Show all Users from a given Role (and all related query scenarios)",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "affected-few",
                       "severity-minor"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5723",
        "createdAt":  "2016-08-03T19:52:56Z",
        "number":  5723,
        "author":  "ghost",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2020-10-06T18:46:27Z",
        "body":  "This is among the most simple of Use-Cases and yet does not appear to be allowed. When administering my site\u0027s users I need to be able to get a complete list of my users with their basic properties, one of which is the collection of roles assigned to the user. Using the  ApplicationUser and UserManager \"out of the box\" and this code: _(ok, yes, mgr and org represent properties which have been added to ApplicationUser, but they don\u0027t change the present case)_\n\n`var results = UserManager.Users.Where(u =\u003e u.mgr == appUser.org || appUser.org == \"corp\");`\n\nI get all of the expected users ... but their \"role\" property only gives me the \"RoleId\" (and UserId) NOT the role\u0027s name. Since the database does enforce referential integrity between AspNetUserRoles and AspNetRoles it really SHOULD be a simple matter of including role names as part of this query...but does not appear to be so. \n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOE1m7vA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIzNzQwNjUzOA==",
                                           "createdAt":  "2016-08-03T23:28:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gdoron",
                                           "body":  "Did you try adding `.Include` to your query?\nI guess you\u0027re using EF, right?\n",
                                           "updatedAt":  "2016-08-03T23:28:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIzNzUzMjMyNA==",
                                           "createdAt":  "2016-08-04T11:57:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOADW-Dw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Qszer94",
                                                                               "createdAt":  "2016-09-13T19:29:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  null,
                                           "body":  "Yes, `.Include(...)`\\* with many variations could only get me as far as the RoleId... I have received some help from [Stack Overflow](http://stackoverflow.com/a/38746024/681009) on how to custom configure Identity, and while this \u0027works\u0027 I find it very dissatisfactory as it is overly complicated for what should, provided the db schema that is initialized with Identity, should be a simple relationship. \n\n*I may well have not used \u0027the right\u0027 include parameter...so I am open to believing this might well be user error. \n",
                                           "updatedAt":  "2016-08-04T11:59:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI0MDU1MzM1NQ==",
                                           "createdAt":  "2016-08-17T21:24:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "@divega \n",
                                           "updatedAt":  "2016-08-17T21:24:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI0NjkyMjQ3NA==",
                                           "createdAt":  "2016-09-14T06:53:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Qszer94",
                                           "body":  "I\u0027m also having a hard time trying to get collection of users with collection of their IdentityRoles.\nAs @coscallis said we can simply access only IdentityUserRole (RoleId, UserId) with EF.\nIt\u0027s a bit confusing cause we can get all Users of IdentityRole but not vice versa.\n",
                                           "updatedAt":  "2016-09-14T06:53:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1NTQzMjcxMg==",
                                           "createdAt":  "2016-10-21T17:47:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LorenDorez",
                                           "body":  "I request the Asp.Net Team to just add a Navigation Property for Role to the Default IdentityUserRole class\nThis would save a lot of issues the come up from trying to customize the entire Identity stack and Store to accommodate this, and IMHO should have always been there\n",
                                           "updatedAt":  "2016-10-21T17:47:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMTIxNzYzMQ==",
                                           "createdAt":  "2017-08-09T10:31:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "flatproject",
                                           "body":  "Sorry for digging out this but since it\u0027s not closed I would like to ask if we will be able to get a list of users with their roles by default at any of the forthcoming versions? \r\nAn official example of how to get a list of all users with all their role names would be great whether the above functionality requested is implemented or not.",
                                           "updatedAt":  "2017-08-09T10:31:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyNDY0Nzg2OA==",
                                           "createdAt":  "2017-08-24T14:15:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "J0nKn1ght",
                                           "body":  "I\u0027d add to the previous posts in reiterating that this feature is a necessity if Identity is to be usable in anything but the most trivial of applications.\r\nWe\u0027ve just started a major new project, and decided to switch from MVC5 to ASP.Net Core MVC.  However, I\u0027ve now started on the User Administration part of the site, and found that it\u0027s currently not possible to query the users by role.  The site developing could potentially grow to 10,000s of users, so querying users first and then stitching in their roles is not an option - it has to be done at the DB query level.\r\nThis was possible in ASP.Net Identity 2.0, so presumably someone decided not to implement the navigation properties on the base entities in Core?\r\nAs an aside, we were also attempting to follow the advice that seems to be coming out of Microsoft to use Clean Architecture (or Onion Architecture) in our application, but again the implementation of Identity makes that impossible.\r\nDon\u0027t get me wrong, I\u0027ve been consistently impressed by MVCs development over the years, but Core seems to have taken a number of steps backwards that are not immediately obvious until you try to use it for real development projects.  The tools and libraries need to be up to real-world scenarios, not just tutorials.",
                                           "updatedAt":  "2017-08-24T14:15:11Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Give me all users and all of their roles...BY NAME",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "affected-few",
                       "severity-minor"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5725",
        "createdAt":  "2016-10-29T20:07:15Z",
        "number":  5725,
        "author":  "natelaff",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2020-10-06T18:34:41Z",
        "body":  "I would like to see UserManager.GetValidTwoFactorProvidersAsync return more detail about the providers so that in the select list we can easily show an obfuscated version of where the message will be delivered.\r\n\r\nI.e. \r\n\r\nEmail (txxxxxt@outlook.com)\r\nText (xxx-xxx-5555)\r\n\r\nEDIT: GitHub formatted my asterisk, but you get the idea.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOG0KtIw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1OTQ4ODU4NA==",
                                           "createdAt":  "2016-11-09T18:32:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "This is a reasonable request. It\u0027ll take a new API, which means it won\u0027t be quick, but we\u0027re making some changes to templates for TOTP, so we can bundle it with that. \n\nSo it\u0027ll come, just not in the immediate next version.\n",
                                           "updatedAt":  "2016-11-09T18:32:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1ODA5NDM5OA==",
                                           "createdAt":  "2018-01-16T20:28:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "@blowdart punt to 2.2?",
                                           "updatedAt":  "2018-01-16T20:28:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1ODEyNjg5NA==",
                                           "createdAt":  "2018-01-16T22:19:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Ugh, if we have to.",
                                           "updatedAt":  "2018-01-16T22:19:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1ODEyNzk1Nw==",
                                           "createdAt":  "2018-01-16T22:23:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "Well from your comments earlier: \"It\u0027ll take a new API, which means it won\u0027t be quick\" given how this is low pri since we don\u0027t need this for any of the features we currently are targetting, seems very unlikely we are going to even look at this for 2.1",
                                           "updatedAt":  "2018-01-16T22:23:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1ODEyODE4OA==",
                                           "createdAt":  "2018-01-16T22:24:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "I\u0027m just trying to clean up my plate and get rid of all the issues that are still in 2.1 but clearly not going to be done for 2.1",
                                           "updatedAt":  "2018-01-16T22:24:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1ODEyODcyNw==",
                                           "createdAt":  "2018-01-16T22:26:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Sure. But let\u0027s not put it off to 2.3 when the time comes :D",
                                           "updatedAt":  "2018-01-16T22:26:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1ODEyOTk5Mg==",
                                           "createdAt":  "2018-01-16T22:31:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "Well, aren\u0027t you the one who\u0027s setting priorities as the PM? :)  Moving to 2.2",
                                           "updatedAt":  "2018-01-16T22:31:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NzM1NDUzMQ==",
                                           "createdAt":  "2019-01-24T21:00:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mwoffenden",
                                           "body":  "Just wondering, has this been implemented?",
                                           "updatedAt":  "2019-01-24T21:00:23Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Return more detail in UserManager.GetValidTwoFactorProvidersAsync()",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "affected-few",
                       "severity-major"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5726",
        "createdAt":  "2016-12-07T06:01:02Z",
        "number":  5726,
        "author":  "zhng66",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-12T15:22:05Z",
        "body":  "why there is some method about email like **FindByEmailAsync** **GenerateEmailConfirmationTokenAsync**  but non the same method about phonenumber ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORnJI2A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NTU2MTk3NQ==",
                                           "createdAt":  "2016-12-07T20:20:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Because people don\u0027t login with their phone numbers",
                                           "updatedAt":  "2016-12-07T20:20:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NTYyMjg3OA==",
                                           "createdAt":  "2016-12-08T01:03:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zhng66",
                                           "body":  "oh,got it. everyone has a mobile phone number, but not everyone has an email in china. forgive my poor english",
                                           "updatedAt":  "2016-12-08T01:03:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NzE0ODU1MQ==",
                                           "createdAt":  "2016-12-14T20:34:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "This isn\u0027t currently supported. We\u0027ll put it on the backlog.",
                                           "updatedAt":  "2016-12-14T20:34:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3ODk4MTA1Nw==",
                                           "createdAt":  "2017-02-10T15:52:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "divega",
                                           "body":  "Reopening because I think we actually wanted to have this in the backlog.",
                                           "updatedAt":  "2017-02-10T15:52:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNjk2MjQzNQ==",
                                           "createdAt":  "2017-07-21T10:07:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalibGao",
                                           "body":  "With time goes by , cellphone  is more and more frequently used in daily life . \r\nAnd I bet that asp.net core identity framework will largely used in Apps . Every country include EU , Telecom organizations managed well with the unique phone numbers ,\r\nAt global view sight, what we can do is only append one more property  named [\u0027CountryCode\u0027 or `AreaCode\u0027](https://en.wikipedia.org/wiki/List_of_country_calling_codes) co-work with PhoneNumber ",
                                           "updatedAt":  "2017-07-21T10:19:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0ODA0MTY0Mg==",
                                           "createdAt":  "2020-12-18T11:43:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kinosang",
                                           "body":  "@KalibGao I think there\u0027s no need for addational property to store Country Code, just format phonenumbers as E-164.",
                                           "updatedAt":  "2020-12-18T11:43:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85GckjY",
                                           "createdAt":  "2022-07-12T15:18:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "prince272",
                                           "body":  "Well, I\u0027m disappointed about the fact that most social media platforms are considering phone numbers for authentication yet identity doesn\u0027t.\r\nFor anyone that may be looking for a workaround. Please visit:\r\nhttps://stackoverflow.com/questions/32546797/custom-function-to-retrieve-data-from-user-table",
                                           "updatedAt":  "2022-07-12T15:22:05Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "something about phone number when identify ",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "affected-few",
                       "severity-minor"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5731",
        "createdAt":  "2017-04-06T02:08:39Z",
        "number":  5731,
        "author":  "xinunix",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7aKaw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mohaaron",
                                            "createdAt":  "2024-09-29T19:51:35Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-04-08T19:24:01Z",
        "body":  "Wondering if there is a way (via an option in startup or something) to prefetch claims when you retrieve a user via the UserManager.FindUserByXXXAsync methods?  We have a scenario where when we fetch a user we always want to get their claims back as well.  I read in another post that the User.Claims navigation property can\u0027t be trusted to consistently be populated and I think I understand that it is done automatically for the currently logged in principal but what options are available to get the claims for a user when they are looked up via a one of the UserManager find functions?  I know I can make a second call to UserManager.GetClaimsAsync(user) to get an `IList\u003cClaim\u003e ` but there doesn\u0027t seem to be an obvious way to then associate those with the ApplicationUser b/c the type of the claims collection on ApplicationUser is `Microsoft.AspNet.Identity.EntityFrameworkCore.IdentityUserClaim\u003cstring\u003e` but the` IList\u003cClaim\u003e`\r\n returned by GetClaimsAsync is System.Security.Claims.Claim.  It seems like there should be a way to do this cleanly and maybe there is and we are just missing it?\r\n\r\nI will add that we have noticed that immediately after calling UserManager.AddClaimAsync(user, claim) that the corresponding user object does then have the newly added claim in User.Claims and it is persisted to the db store.  But that doesn\u0027t appear to get re-fetched when the user is looked up later via UserManager find functions...",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOEjlVZA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5NTM5OTczOQ==",
                                           "createdAt":  "2017-04-19T19:19:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "At the minute no, @HaoK can look at making an extensibility point for you.",
                                           "updatedAt":  "2017-04-19T19:19:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNTc0NzMwMA==",
                                           "createdAt":  "2017-06-02T10:12:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "Clearing assignment for now since this isn\u0027t something I plan on doing anytime soon given the 2.0 bar",
                                           "updatedAt":  "2017-06-02T10:12:43Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Is there an option for prefetching Claims with UserManager find functions?",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "affected-few",
                       "severity-minor"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5732",
        "createdAt":  "2017-05-14T18:58:38Z",
        "number":  5732,
        "author":  "scttstrck",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAsF_zw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "coccor",
                                            "createdAt":  "2019-07-09T14:52:46Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-09-21T02:52:20Z",
        "body":  "The UserManager exposes the method GetUsersForClaimAsync(Claim claim).\r\nThis method takes a claim and returns a list of users with that claim.\r\nSometimes it is needed to find all users by a specific claim type, ignoring the value.\r\n\r\nA method like GetUsersForClaimTypeAsync(string claimType) would be great.\r\nIt would need to be added to the IUserClaimStore\u003cTUser\u003e interface, and thus the UserStore(s) too.\r\n\r\nDoing this by inheritance is a pain since the UserClaims property is private.\r\nOtherwise a slightly modified query as from the GetUsersForClaimAsync is all that is needed, where claimType is a string.\r\n\r\n`            var query = from userclaims in UserClaims\r\n                        join user in Users on userclaims.UserId equals user.Id\r\n                        where userclaims.ClaimType == claimType\r\n                        select user;`\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONwx9FA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde843AGWR",
                                           "createdAt":  "2021-09-20T09:41:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Xyncgas",
                                           "body":  "has this gone to the void",
                                           "updatedAt":  "2021-09-20T09:41:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde843DH0U",
                                           "createdAt":  "2021-09-21T02:52:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fgfmichael",
                                           "body":  "I love that I have this exact issue and 17 hours prior to trying to solve it on a 4 year old issue somebody else has just messaged",
                                           "updatedAt":  "2021-09-21T02:52:20Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Add the ability for getting users having a type of claim",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "severity-minor",
                       "affected-very-few"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5750",
        "createdAt":  "2017-06-14T22:28:45Z",
        "number":  5750,
        "author":  "vicchy-platform",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-03-22T01:00:04Z",
        "body":  "Hi:\r\n\r\nI am testing the case where a user creates a local account (e.g., test@gmail.com) and comes back to the site a time after and does not remember if it created a local account or used a external provider (e.g., Google), so it decides to attempt to login with its Google account; or simply, a user that does not remember its password and he hates the password recovery process so it decides to attempt to login with its Google account.\r\n\r\nIn such scenario, when the user attempts to login with Google, it gets to /Account/ExternalLoginCallback , which shows \"Register\", \"Associate your Google account\", \"You\u0027ve successfully authenticated with Google\".\r\n\r\nWhen the user clicks Register button, without changing its email test@gmail.com, it gets the error message \"User name \u0027test@gmail.com\u0027 is already taken\", and the message \"You\u0027ve successfully authenticated with\" [which LACKS the provider name Google ]. \r\n\r\n(to solve this small issue, instead of persisting the LoginProvider in ViewData I included it in ExternalLoginConfirmationViewModel and used a input/hiiden in the form)\r\n\r\nI believe this flow is not appropriate for this case because obviosly this user does not want to Register, so I think that when a user coming from an external provider attemps to login for the first time (that it seems to be registering to the service), the system should verify if the email account is already taken because in such case there is a high probability that the user is not attempting to create another account in the system but to login to its account. So, if taken, there should be a different flow that helps the user link the external provider to its account, or at least give options :\r\n\r\nDo you want to create a new account OR link your \"Google\" account to the existing account for test@gmail.com?\r\n\r\nHope this helps improve the system.\r\n\r\nThanks\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOEoVMvw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMDcyNTgyMw==",
                                           "createdAt":  "2017-06-23T17:27:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "This would only work where the external flow sends you the email address, which isn\u0027t guaranteed by any means. It also means we\u0027d end up having to ask for an email address from the google flow by default, which goes against asking for just what you need.\r\n\r\nI\u0027ll pop it in backlog for now and we can mull it over. ",
                                           "updatedAt":  "2017-06-23T17:27:35Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Improvement for external provider flow when user already has local account",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "severity-minor",
                       "affected-medium"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5753",
        "createdAt":  "2017-08-02T19:12:29Z",
        "number":  5753,
        "author":  "blowdart",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2020-10-09T22:35:58Z",
        "body":  "Mail providers, text providers etc.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Formalize interfaces for 2fa providers",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "severity-nice-to-have",
                       "affected-medium"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5758",
        "createdAt":  "2017-11-27T11:51:01Z",
        "number":  5758,
        "author":  "michaelkaye",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2020-10-06T20:30:09Z",
        "body":  "Hi there,\r\n\r\nAs an enhancement, I\u0027d like to see more information returned from the Verify*Token methods on UserManager, such that richer information on failures can be recorded in metrics, or the flow updated to ease user interactions. \r\n\r\nRather than returning a boolean true/false from UserManager.verifyUserToken(), I\u0027d be interested in a richer object that\u0027s a pair of true/false + some sort of status string / error code / something to provide more details.\r\n\r\nI think there\u0027ll only be one token provider for any given call, so it shouldn\u0027t need to have multiple status strings returned (eg, if multiple providers needed to say \u0027no\u0027 in different ways)\r\n\r\nThe sort of failure information we could see passed back would allow:\r\n\r\n- Being able to find out if the TOTP code is ahead/behind but nearly valid (user may need to be pushed to a flow to obtain multiple codes to handle authentication token resync)\r\n- An one-use token was valid but already been used (please ask for another or contact an admin to investigate if you didn\u0027t use it)\r\n- A time-limited token was valid but has timed out (ask for another token)\r\n\r\nAnd additionally we would start storing metrics on the above, so we can see if the time delay on tokens is too short; if there\u0027s something confusing in the flows, or if some odd spike of failures is indicating an attacker trying it on.\r\n\r\nFor those providing public signups, exposing the exact details of the failure to the users may have a security impact, so I wouldn\u0027t make displaying information part of any templates.\r\n\r\nIn a corporate environment, re-sending a expired code to a phone automatically (rather than require the user to re-start the password reset flow) could reduce the support load of these sorts of security features.\r\n\r\nHopefully that makes sense,\r\nMichael",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOFN3StQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1MDA4MTcxNw==",
                                           "createdAt":  "2017-12-07T20:15:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "We\u0027ll pop this in the backlog for visiting in a new major version",
                                           "updatedAt":  "2017-12-07T20:15:40Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Enhancement: Provide more information in the result from the UserManager.Verify*TokenAsync() methods",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "affected-few",
                       "severity-minor"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5761",
        "createdAt":  "2018-01-11T22:43:48Z",
        "number":  5761,
        "author":  "grahamehorner",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2020-10-06T18:50:41Z",
        "body":  "IMHO TOTP needs to use ISystemClock to allow for testing to skew clock outside TOTP TimeStep, also at present the TimeStep is fixed at 3 mins which result in a window of 9 mins either side of the time the code was issued, this should be configurable with a note that a larger worn is less secure and a smaller windows is more prone to expire.\r\n\r\nie. when using an authenticator application a small windows of 2 mins is suffice\r\n     while using email/phone TOTP systems a larger window is required due to delays in communication of the code to the user",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Improve test ability of TOTP",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "severity-nice-to-have",
                       "affected-very-few"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5763",
        "createdAt":  "2018-01-26T04:27:28Z",
        "number":  5763,
        "author":  "HaoK",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAttfQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "raminmjj",
                                            "createdAt":  "2019-02-02T20:07:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MoienTajik",
                                            "createdAt":  "2019-05-19T11:42:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MarcusWichelmann",
                                            "createdAt":  "2019-10-12T15:48:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pvlst",
                                            "createdAt":  "2021-05-03T16:50:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "virzak",
                                            "createdAt":  "2022-12-30T17:38:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yura-b",
                                            "createdAt":  "2023-08-22T13:12:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cremor",
                                            "createdAt":  "2023-08-28T09:18:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "C-M-Eisen",
                                            "createdAt":  "2025-04-01T10:07:22Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2023-11-21T20:29:18Z",
        "body":  "See: https://github.com/aspnet/SignalR/issues/1345#issuecomment-360663449\r\n\r\nIf we do this in 3.0, we could probably also get rid of the automatic HttpRequest.Aborted hookup, which would let us get rid of the derived AspNetUserManager entirely.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZa-MrA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5Mzc1MTEwMA==",
                                           "createdAt":  "2019-05-19T12:02:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MoienTajik",
                                           "body":  "Are there any plans to support this?\r\n\r\n[Another](https://github.com/aspnet/Identity/issues/1034) problem that could happen when there\u0027s no `CancellationToken` parameter exists for `Manager` methods is when using **Background Jobs**.\r\n\r\nIn that scenario, there\u0027s no `CancellationToken` explicitly defined to pass to Manager methods and the Job will never cancel. ( There\u0027s no `HttpContext` in Jobs, So along with it, there\u0027s no `HttpRequest` to call `HttpRequest.Abort` ! )",
                                           "updatedAt":  "2019-05-19T12:03:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85lr4ys",
                                           "createdAt":  "2023-09-05T06:13:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cremor",
                                           "body":  "Related: #45869",
                                           "updatedAt":  "2023-09-05T06:13:58Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Consider adding optional cancellationToken to manager APIs",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "severity-major",
                       "affected-very-few",
                       "triaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5769",
        "createdAt":  "2018-03-05T18:24:03Z",
        "number":  5769,
        "author":  "Eilon",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2020-10-06T20:31:30Z",
        "body":  "_From @Eilon on October 24, 2017 21:51_\n\n_From @SteveSandersonMS on May 9, 2016 16:32_\n\nIt\u0027s debatable to what extent any of these are \"bugs\", since the template is just a starting point and not meant to be a finished, polished app. But many of them can be fixed easily.\n1. **Default \"External Logins\" UX is confusing**\n   \n   It says \"External logins: 0 [Manage]\". When you click \u0027Manage\u0027, it takes you to a blank page (there\u0027s just a heading - no content). What\u0027s an end user supposed to do with this? There should at least be some instructions here for the developer, like on other pages.\n2. **Default \u0027Manage your account\u0027 layout is bad**\n   \n   Screenshot:\n   ![screen shot 2016-05-09 at 17 20 10](https://cloud.githubusercontent.com/assets/1101362/15119713/1fffe7a0-160a-11e6-8a0d-37431e1c4c33.png)\n   \n   The text \"Two-Factor Authentic...\" is truncated for no good reason, and its counterpart in the next column isn\u0027t correctly vertically aligned with it.\n3. **Change password UI is rough**\n   \n   The heading \"Change Password.\" is inconsistently capitalised (on other pages like \"Log in.\" and \"Forgot your password?\" we don\u0027t capitalise the first letter of each word). The subheading, \"Change Password Form\", is completely pointless. Suffixing headings like \"Change Password.\" with period characters is weird and ugly in my option, though that\u0027s just a matter of personal preference.\n4. **The account management page is hard to discover**\n   \n   To reach it, you have to click the part of the heading that says \"Hi [username]!\". There\u0027s no clear indication that this is how to manage your account.\n5. **When using confirmation URLs, the registration flow provides no indication of what\u0027s going on**\n   \n   If you set up account confirmation [as per the docs](http://docs.asp.net/en/latest/security/authentication/accconfirm.html), then when the user registers an account, they just get redirected back to the home page. They are not logged in, and there\u0027s no message to say their registration succeeded. It would be nice to display some sort of message like \"Please check your email and click the link we sent to you.\", otherwise the user may think their registration was rejected.\n6. **Login failed message is unhelpful**\n   \n   When you enter the wrong username or password, it says \"Login attempt failed\", without indicating whether it\u0027s a bad username or password. I know from reading the code that this is deliberate, but I don\u0027t know what sort of benefit it\u0027s supposed to provide. An attacker who wants to know whether a given username is registered can easily find out (just try to register a new account with it), so why withhold genuinely useful information from legit users?\n7. **Account-not-confirmed error message makes little sense**\n   \n   If you try to log in before confirming your account, it says \"You must have a confirmed email to log in\". That won\u0027t make any sense to normal users. What\u0027s a \"confirmed email\"? A better message would be \"Please check your email and click the link we sent to you.\"\n8. **No way to resend confirmation email**\n   \n   If you somehow didn\u0027t receive (or accidentally deleted, etc.) your confirmation email, then your account is dead forever, because there\u0027s no way to resend it. It\u0027s worse still if v1 of your site didn\u0027t implement confirmation emails, but v2 does, because then all existing users lose their accounts.\n9. **Set password page when you login with external authentication provider**\n   Delete this line as it looks ugly in the markup: https://github.com/aspnet/Templates/blob/dev/src/Rules/StarterWeb/IndividualAuth/Views/Manage/SetPassword.cshtml#L6\n\n\n_Copied from original issue: aspnet/Templates#551_\n\n_Copied from original issue: aspnet/templating#115_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOG0J4oA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MDUxNDUxNA==",
                                           "createdAt":  "2018-03-05T18:24:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eilon",
                                           "body":  "_From @peterblazejewicz on May 9, 2016 19:29_\n\n\u003e Default \u0027Manage your account\u0027 layout is bad\n\nTo help to visualize that problem: here is a pen: http://codepen.io/blazejewicz/full/972a6dae4af0b0fe5d22421535130635/ that uses static markup to provide insight on current markup:\nIf/else are removed and their relevant content is rendered. remark: The `Two-Form Authentication` is cropped by default BS rendering for data list titles (nowrap, ellipsis)\n",
                                           "updatedAt":  "2018-03-05T18:24:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MDUxNDUyMA==",
                                           "createdAt":  "2018-03-05T18:24:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eilon",
                                           "body":  "_From @rustd on May 9, 2016 20:13_\n\nThank you for the feedback. #6 is by design.  If you have a suggestion for fixing #2 then please do send a PR for it.\nI agree that we can improve upon the rest.\n",
                                           "updatedAt":  "2018-03-05T18:24:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MDUxNDUyOA==",
                                           "createdAt":  "2018-03-05T18:24:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eilon",
                                           "body":  "_From @phenning on May 17, 2016 18:42_\n\nI\u0027m working on some of these issues along with some other UI improvements.\n",
                                           "updatedAt":  "2018-03-05T18:24:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MDUxNDUzNA==",
                                           "createdAt":  "2018-03-05T18:24:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eilon",
                                           "body":  "_From @SteveSandersonMS on June 16, 2016 18:35_\n\nSome more observations from the current round of verification:\n\n**Forgot password flow doesn\u0027t send emails to people whose emails aren\u0027t confirmed, but doesn\u0027t tell them that**\nIt acts as if it has sent the email, but hasn\u0027t. This would be extremely confusing for a user who didn\u0027t realise they had to click the original confirmation link and was trying to fix the problem by resetting their password.\n\n**Forgot password page gives a confusing error if you mistype your email address**\nInstead of something like \"Sorry, we don\u0027t recognise that email address\", it says \"Invalid token\". Normal humans will have no idea what that means. A better message would be \"Sorry, that email address doesn\u0027t match the link you clicked. Did you sign up with a different email address?\"\n",
                                           "updatedAt":  "2018-03-05T18:24:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MDUxNDUzNw==",
                                           "createdAt":  "2018-03-05T18:24:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eilon",
                                           "body":  "_From @Rick-Anderson on April 22, 2017 0:16_\n\nCan we address many of these issues by documenting this page?  You could add a fwlink to the management page. Let me know if I should create an issue in https://github.com/aspnet/Docs to document  how all this works and maybe some tips on customizing it.",
                                           "updatedAt":  "2018-03-05T18:24:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MDUxNDU0NA==",
                                           "createdAt":  "2018-03-05T18:24:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eilon",
                                           "body":  "_From @Ponant on June 9, 2017 7:30_\n\nOK, a template is a template but if a template is to be given it should at least be self-consistent from a-z, otherwise the lack of consistency in identity/security mgt will backfire on MS sooner or later. \r\nHere is a list of issues which could be gathered here (at least for the purpose of cleaning up things in the repos):\r\nhttps://github.com/aspnet/Templates/issues/365\r\nhttps://github.com/aspnet/Templates/issues/832\r\nhttps://github.com/aspnet/Templates/issues/804\r\nhttps://github.com/aspnet/Templates/issues/686\r\nhttps://github.com/aspnet/Identity/issues/1265\r\nhttps://github.com/aspnet/Identity/issues/1138\r\nhttps://github.com/aspnet/Identity/issues/1079\r\nhttps://github.com/aspnet/Identity/issues/1209\r\nhttps://github.com/aspnet/Templates/issues/723 (UI)\r\n\r\n\r\n",
                                           "updatedAt":  "2018-03-05T18:24:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwNjM4MzEwMQ==",
                                           "createdAt":  "2018-07-19T19:09:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "@Eilon @mkArtakMSFT this needs a dev assigned or moved out. Please decide which.",
                                           "updatedAt":  "2018-07-19T19:09:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwNjcxOTIyMA==",
                                           "createdAt":  "2018-07-20T20:33:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eilon",
                                           "body":  "@blowdart - have we decided what action to take on the list of issues? I would suggest having individual issues filed for any specific actions we wish to take. Some of the issues in the original issue are entire features (e.g. re-sending email confirmation).",
                                           "updatedAt":  "2018-07-20T20:33:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwNzE1MjQ4Mg==",
                                           "createdAt":  "2018-07-23T18:16:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Well there were original issues, you summarised :) Everything aside from email resending is UI tweaks. All of which I believe should be addressed.",
                                           "updatedAt":  "2018-07-23T18:16:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NzM0MTA4OA==",
                                           "createdAt":  "2019-01-24T20:17:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "@haok please look and decide which is easy fit and finish and do them, and we\u0027ll discuss the rest once that\u0027s done.",
                                           "updatedAt":  "2019-01-24T20:17:07Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "UX issues related to Identity",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "feature-identity-ui",
                       "affected-most",
                       "severity-minor"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5771",
        "createdAt":  "2018-03-15T21:36:51Z",
        "number":  5771,
        "author":  "HaoK",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOA4KKyA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bchewy",
                                            "createdAt":  "2019-12-31T23:33:43Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2020-10-09T22:41:57Z",
        "body":  "While we have various features today to make this possible it requires a fair bit of wire up and its pretty complex.  See (https://github.com/aspnet/AuthSamples/tree/dev/samples/Identity.ExternalClaims)\r\n\r\nThis issue is to track making the two following scenarios easier:\r\n1. Ability to flow any AuthenticationTokens(i.e. refresh/access) to the Identity database\r\n2. Ability to flow any claims that are part of the external claims identity into the Identity database\r\n\r\nRelated: https://github.com/aspnet/Identity/issues/628 https://github.com/aspnet/Security/issues/1685\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOF1Q_Vw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MTM3MjQyMQ==",
                                           "createdAt":  "2018-05-23T14:40:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAZkSfQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "seangwright",
                                                                               "createdAt":  "2018-07-23T01:52:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "chrisckc",
                                           "body":  "@HaoK Using the code from the sample:\r\n\r\n```\r\nvar info = await _signInManager.GetExternalLoginInfoAsync();\r\n.......\r\n// Include the access token in the properties\r\nvar props = new AuthenticationProperties();\r\nprops.StoreTokens(info.AuthenticationTokens);\r\n```\r\nI found that the token is also stored in the database as well as being made available in the AuthenticationProperties and the HttpContext using HttpContext.GetTokenAsync(\"access_token\");\r\n\r\nI was using:\r\n`_signInManager.UpdateExternalAuthenticationTokensAsync(info);`\r\nWhich stored the token in the database but did not make it available in the HttpContext or the AuthenticationProperties. This was because the \"Identity.External\" Cookie was removed after login.\r\n\r\nUsing props.StoreTokens(info.AuthenticationTokens); the \"Identity.External\" cookie remains.\r\n\r\nNone of this behaviour is documented so required much more time that it should have to get it working the way i wanted. There really should be one way of doing this with options to specify if the token is to be stored in either the database, the cookie or both.\r\n\r\nSame for Claims, by default external Claims are not added to the database, they can be added using _userManager.AddClaimsAsync() which add them to the database and the cookie. (with re-signin required to update the cookie). I cannot find a good way to add external claims to the \"Identity.Application\" cookie and not store them in the database.\r\n",
                                           "updatedAt":  "2018-05-23T14:40:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MTM5NzIwNw==",
                                           "createdAt":  "2018-05-23T15:47:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chrisckc",
                                           "body":  "After modifying the scaffolded Identity code, here is what i came up with for adding the claims and the token to the database on signup and updating them on every login:\r\n\r\n[https://gist.github.com/chrisckc/354c010780f23f0067f7e6a0d84c063a](https://gist.github.com/chrisckc/354c010780f23f0067f7e6a0d84c063a)\r\n\r\nWith this code the only way to get the token for the current authentication method is from the database like this:\r\n\r\n```\r\nstring externalAccessToken = null;\r\nif (User.Identity.IsAuthenticated) {\r\n\tvar userFromManager = await _userManager.GetUserAsync(User);\r\n\tstring authenticationMethod = User.Claims.FirstOrDefault(c =\u003e c.Type == ClaimTypes.AuthenticationMethod)?.Value;\r\n\tif (authenticationMethod != null)\r\n\t{\r\n\t\texternalAccessToken = await _userManager.GetAuthenticationTokenAsync(userFromManager, authenticationMethod, \"access_token\");     \r\n\t} else\r\n\t{\r\n\t\texternalAccessToken = await _userManager.GetAuthenticationTokenAsync(userFromManager, userFromManager.LastLoginProvider, \"access_token\");\r\n\t}\r\n}\r\n```\r\nThe extra check is there because sometimes i found that the AuthenticationMethod claim was missing so i had to store it in the database along with the LastLoginDate.\r\n\r\nI will change it to use props.StoreTokens(info.AuthenticationTokens); to save a trip to the database when getting the token.\r\n",
                                           "updatedAt":  "2018-05-23T16:58:00Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Improve external login token/claim flow to identity in default templates",
        "labels":  [
                       "investigate",
                       "enhancement",
                       "area-identity",
                       "severity-minor",
                       "affected-medium"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5772",
        "createdAt":  "2018-03-27T17:13:09Z",
        "number":  5772,
        "author":  "HaoK",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCvKF9w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "viktor-svub",
                                            "createdAt":  "2021-06-10T18:31:43Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "msschl",
                                            "createdAt":  "2022-01-19T16:01:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "msschl",
                                            "createdAt":  "2022-01-19T16:05:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vchirikov",
                                            "createdAt":  "2023-03-29T23:53:42Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2023-11-21T20:29:19Z",
        "body":  "See https://github.com/aspnet/Identity/issues/626 for more context",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWMfTog==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NjYwMzU5NQ==",
                                           "createdAt":  "2018-03-27T17:13:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "Parking in 2.2 for triage",
                                           "updatedAt":  "2018-03-27T17:13:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NjY0NTM3OA==",
                                           "createdAt":  "2020-07-10T12:17:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC41n2A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "viktor-svub",
                                                                               "createdAt":  "2021-06-10T18:31:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vchirikov",
                                                                               "createdAt":  "2023-03-29T23:53:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "dazinator",
                                           "body":  "maybe for .net 5.0 ?",
                                           "updatedAt":  "2020-07-10T12:17:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Yx9Oi",
                                           "createdAt":  "2023-03-29T23:58:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC45BGQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "dazinator",
                                                                               "createdAt":  "2023-03-30T14:23:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vchirikov",
                                           "body":  "Maybe for net8.0? :)",
                                           "updatedAt":  "2023-03-29T23:58:29Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Consider moving to a per login factor secret for TFA",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "affected-most",
                       "severity-major",
                       "triaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5774",
        "createdAt":  "2018-03-29T23:40:41Z",
        "number":  5774,
        "author":  "HaoK",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBBzw9w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "StevenRasmussen",
                                            "createdAt":  "2020-04-21T23:06:18Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2020-11-06T20:06:00Z",
        "body":  "This came up as a part of investigating the fix to https://github.com/aspnet/Identity/issues/1679\r\n\r\nToday to add additional basic data to a custom user requires overriding the Register/Manage pages,\r\nwhich is still somewhat involved, see [DefaultUI sample](https://github.com/aspnet/Identity/tree/dev/samples/IdentitySample.DefaultUI/Areas/Identity/Pages/Account)\r\n\r\n```\r\n   public class MyUser : IdentityUser {\r\n       public string Name { get; set; }\r\n       public int Age { get; set; }\r\n   }\r\n```\r\n\r\nI think we can simplify this to only needing to define only the additional properties + the corresponding input model if we add a basic mechanism for generating the appropriate inputs and introduce a new abstraction in the UI package around updating/creating the actual TUser:\r\n\r\n```C#\r\n   public class MyUser : IdentityUser {\r\n       public string Name { get; set; }\r\n       public int Age { get; set; }\r\n   }\r\n\r\n   public class MyUserInputModel : RegisterInputModel, ManageInputModel {\r\n            [Required]\r\n            [DataType(DataType.Text)]\r\n            [Display(Name = \"Full name\")]\r\n            public string Name { get; set; }\r\n\r\n            [Required]\r\n            [Range(0,199, ErrorMessage = \"Age must be between 0 and 199 years\")]\r\n            [Display(Name = \"Age\")]\r\n            public int Age { get; set; }\r\n   }\r\n```\r\n\r\nWe would have to introduce a couple of new abstractions/services in the UI package and update the Register/Manage pages to use them: \r\n\r\n```C#\r\n   // Default implementation would reflect to work against properties\r\n   // only users with truly custom POCOs would need to implement this.\r\n   public interface IUserFactory\u003cTUser\u003e {\r\n       TUser Create(IUserData data); // Register calls this to create a new user\r\n       void Update(TUser user, IUserData data); // Manage uses this to update the user\r\n   }\r\n\r\n    // Similarly we could generate the Register/manage inputs from the models\r\n   // we could some minor ability to customize the classes names if needed\r\n    IInputGenerator.Generate(InputModel):\r\n    // generates the:\r\n            \u003cdiv class=\"form-group\"\u003e\r\n                \u003clabel asp-for=\"Input.Name\"\u003e\u003c/label\u003e\r\n                \u003cinput asp-for=\"Input.Name\" class=\"form-control\" /\u003e\r\n                \u003cspan asp-validation-for=\"Input.Name\" class=\"text-danger\"\u003e\u003c/span\u003e\r\n            \u003c/div\u003e\r\n            \u003cdiv class=\"form-group\"\u003e\r\n                \u003clabel asp-for=\"Input.Age\"\u003e\u003c/label\u003e\r\n                \u003cinput asp-for=\"Input.Age\" class=\"form-control\" /\u003e\r\n                \u003cspan asp-validation-for=\"Input.Age\" class=\"text-danger\"\u003e\u003c/span\u003e\r\n            \u003c/div\u003e\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJXWtKw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NzQwNzQxOA==",
                                           "createdAt":  "2018-03-29T23:57:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "Thoughts @DamianEdwards @danroth27 @javiercn @ajcvickers @blowdart @kichalla  @mkArtakMSFT ?",
                                           "updatedAt":  "2018-03-29T23:57:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NzQxODI1Nw==",
                                           "createdAt":  "2018-03-30T01:18:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkArtakMSFT",
                                           "body":  "I\u0027ve assigned this to rc1 milestone independent on the actual design decision here. We just know that there is some work to be done here.",
                                           "updatedAt":  "2018-03-30T01:18:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3OTg0ODA5Ng==",
                                           "createdAt":  "2018-04-09T18:26:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "Chatted with @ajcvickers today he suggested we just make a small tweak to future proof the user factory without having to build everything, basically use an abstract base class as the dependency instead of an interface\r\n\r\n`IUserFactory\u003cTUser\u003e` =\u003e abstract `UserFactoryBase\u003cTUser\u003e` \r\n\r\nThis means we can add additional methods in 2.2 without having to deal with breaking changes.\r\n\r\n",
                                           "updatedAt":  "2018-04-09T18:26:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MDYyMTg2OA==",
                                           "createdAt":  "2018-04-11T22:59:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "Moving this to 2.2",
                                           "updatedAt":  "2018-04-11T22:59:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MDYyMzIyOA==",
                                           "createdAt":  "2018-04-11T23:06:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "For 2.1\r\n* We will remove UserFactory\u003cTUser\u003e\r\n* We will create users by calling Activator.CreateInstance\u003cTUser\u003e() and set the properties through store methods in our internal implementation.\r\n* On the scaffolded code, we will rely on the properties available through IdentityUser.\r\n\r\nThis enables using the Default UI with Identity provided that:\r\n* TUser has a parameter-less constructor or the user overrides the two views where users are created if they are used.\r\n  * Register\r\n  * ExternalLogin\r\n* The underlying user store has support for emails or the user overrides the three views where emails are used.\r\n  * Register\r\n  * ExternalLogin\r\n  * Manage/Index.\r\n\r\nFor 2.2\r\n\r\nWe will look into making the customizing a given user scenario easier. Some options that we\u0027ve discussed are:\r\n* Scaffold the relevant views when choosing a custom user.\r\n  * Register\r\n  * Manage/Index\r\n  * ExternalLogins",
                                           "updatedAt":  "2018-04-11T23:06:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMDA1ODE0NA==",
                                           "createdAt":  "2018-08-02T20:30:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkArtakMSFT",
                                           "body":  "@blowdart, is this something you want us to do?",
                                           "updatedAt":  "2018-08-02T20:30:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMDA2OTkyMA==",
                                           "createdAt":  "2018-08-02T21:13:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Yes, it would be incredibly useful. It\u0027s hard to discover right now",
                                           "updatedAt":  "2018-08-02T21:13:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMzY2MDM1Mg==",
                                           "createdAt":  "2018-08-16T19:36:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "@mkArtakMSFT we think the priority is more important than 3, because it\u0027s a long standing pain point. If Javier has not time for preview 2, can it be assigned to Identity, rather than Identity UI.",
                                           "updatedAt":  "2018-08-16T19:36:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMzcxMTMwNA==",
                                           "createdAt":  "2018-08-16T23:11:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkArtakMSFT",
                                           "body":  "This definitely won\u0027t fit in @javiercn\u0027s schedule based on how much stuff he has on his plate.\r\n@HaoK, is this something you can handle during 2.2?\r\n/cc @ajcvickers",
                                           "updatedAt":  "2018-08-16T23:11:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxNTg5NjQwMQ==",
                                           "createdAt":  "2018-08-24T22:15:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "Moving to preview3",
                                           "updatedAt":  "2018-08-24T22:15:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxNTkxMzI4Mw==",
                                           "createdAt":  "2018-08-25T00:16:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "Sounds good to me. I think we need to discuss this before we jump into doing something. I\u0027m not convinced on the approach and I haven\u0027t seen requests from customers for it.",
                                           "updatedAt":  "2018-08-25T00:16:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMTg4NjgxNw==",
                                           "createdAt":  "2018-09-17T04:12:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gulbanana",
                                           "body":  "I’ve got a customer request :) \r\n\r\nI’m integrating a proprietary ORM with ASP.NET Core and plugging it into Identity is *almost* easy. The one problem is that our entity classes aren’t parameterless - we use a different paradigm to EF where the “context” is not itself an app specific type but contains code-generated metadata binding app-specific types to generics. Internal details aside, it’s necessary for our business objects to have an IEntityContext at construction, like so:\r\n\r\n`new ApplicationObject(ormHandle.CreateContext())`\r\n\r\nIn our asp.net integration these contexts can be acquired from DI, so if the default UI used DI to resolve a transient TUser that would be fine. Our IUserStore and UserManager\u003cTUser\u003e are also capable of creating contexts, so we can produce TUsers easily enough in FindById and friends. The problem is these Register and External pages which use Activator instead.\r\n\r\nAt the moment, we have an ugly workaround to work with the default identity ui: for TUser we use a wrapping class which lazily gets-or-creates the actual internal orm object using a context supplied by the IUserStore whenever it accesses a TUser. This is particularly annoying for users of our ORM because if they want to customise *our* representation of a user, they have to write something like\r\n```\r\nAddIdentityCore\u003cORMUser\u003cActualAppUser\u003e\u003e().AddORMStores();\r\n[…]\r\nawait userManager.GetUser(User).GetOrCreateAsync(context)\r\n```\r\n\r\nIn summary, we would appreciate a factory or DI resolution for TUser, as is already available everywhere except in some of this scaffolded UI.",
                                           "updatedAt":  "2018-09-17T04:12:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMjk0NjkzMg==",
                                           "createdAt":  "2018-09-19T20:28:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "@gulbanana are you asking for something like a `IUserFactory` with a Create method that the UI would use instead?",
                                           "updatedAt":  "2018-09-19T20:28:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMzAwMjIxOQ==",
                                           "createdAt":  "2018-09-20T00:40:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gulbanana",
                                           "body":  "That would work fine for my use case.",
                                           "updatedAt":  "2018-09-20T00:40:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyNTI4NDE3Nw==",
                                           "createdAt":  "2018-09-28T00:36:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "Can someone point me to the feedback from customers that are actually trying to create custom `IdentityUser` types that don\u0027t have constructorless parameters? I believe we can fix the templates to not instantly break when using a custom user type (just the code in `LoginPartial.cshtml` I believe). I\u0027m interested as to whether we need to go this far though.",
                                           "updatedAt":  "2018-09-28T00:36:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyNTI4NTM0Nw==",
                                           "createdAt":  "2018-09-28T00:45:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "I see the one from @gulbanana above (obviously 😄) but are there more? Adding new factory classes and replumbing all the things to use that instead isn\u0027t trivial, and I\u0027m concerned about assumptions being changed about who builds what in a minor release so want to be sure this is worthy of this kind of change, i.e. it benefits a good number of folks.",
                                           "updatedAt":  "2018-09-28T00:45:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyNTI5MjYzOA==",
                                           "createdAt":  "2018-09-28T01:34:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "This wasn\u0027t an issue until the UI so I doubt you will see too many issues about it as it wouldn\u0027t affect anyone who didn\u0027t switch.  We could do this transparently for all TUsers that derive from our built in IdentityUser types that have default constructors, the user factory would only be needed if you had a custom TUser that didn\u0027t derive from ours, which you\u0027d just have to do something like this:\r\n\r\n```\r\n            services.AddDefaultIdentity\u003cPocoUser\u003e()\r\n                .AddUserManager\u003cUserManager\u003cPocoUser\u003e\u003e()\r\n                .AddDefaultUIUserFactory\u003cPocoUser\u003e((userName,email) =\u003e\r\n                    new PocoUser(userName, email);\r\n```",
                                           "updatedAt":  "2018-09-28T01:34:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyNTU2MjY3OQ==",
                                           "createdAt":  "2018-09-28T20:52:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "Discussed this with @ajcvickers and we decided it would be best to wait to tackle this in 3.0",
                                           "updatedAt":  "2018-09-28T20:52:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyNTYyMTQzMg==",
                                           "createdAt":  "2018-09-29T06:47:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gulbanana",
                                           "body":  "I suspect there aren’t a lot of people with this use case, but I still think the change should be made (eventually. the concern about breaking changes is understandable). There’s a reason everything else uses DI instead of Activator!",
                                           "updatedAt":  "2018-09-29T06:47:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NDI1MDA2MQ==",
                                           "createdAt":  "2019-04-17T20:32:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Due to lack of demand we\u0027re backlogging this until more support arises.",
                                           "updatedAt":  "2019-04-17T20:32:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyODQ2OTAzNQ==",
                                           "createdAt":  "2020-05-14T08:08:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gulbanana",
                                           "body":  ":-(",
                                           "updatedAt":  "2020-05-14T08:08:37Z"
                                       }
                                   ],
                         "totalCount":  21
                     },
        "title":  "Simplify using a custom TUser with DefaultUI",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "affected-few",
                       "severity-minor"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5776",
        "createdAt":  "2018-03-30T14:20:16Z",
        "number":  5776,
        "author":  "kichalla",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2020-10-06T18:49:58Z",
        "body":  "Currently we have log statements in DefaultUI where we try to log user id, but we try to get the user id irrespective of whether the loglevel was enabled or not. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOG-Y35g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2ODA3MjQyMg==",
                                           "createdAt":  "2019-02-27T23:27:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "Clearing assignment since this is in backlog",
                                           "updatedAt":  "2019-02-27T23:27:15Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Check loglevel for some log statements in DefaultUI",
        "labels":  [
                       "task",
                       "area-identity",
                       "feature-identity-ui",
                       "severity-nice-to-have",
                       "affected-few"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5777",
        "createdAt":  "2018-03-30T15:13:03Z",
        "number":  5777,
        "author":  "weedkiller",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAnxTtw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KevinJRussell",
                                            "createdAt":  "2019-04-29T22:13:14Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2020-11-12T19:35:06Z",
        "body":  "Please add some additional sample views for roles, users in roles, roles containing user.\r\nNumber of failed login attempts in one hour. with lock out option.\r\n\r\nhttps://github.com/aspnet/Identity/tree/dev/samples/IdentitySample.Mvc/Views/Account",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOFoJQvw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NzYxOTg0MA==",
                                           "createdAt":  "2018-03-30T20:48:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAgmUtQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "weedkiller",
                                                                               "createdAt":  "2018-03-30T22:38:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "longbnguyen",
                                                                               "createdAt":  "2018-04-17T12:48:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "flatproject",
                                                                               "createdAt":  "2018-07-05T14:47:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "IvanJosipovic",
                                                                               "createdAt":  "2018-12-19T02:44:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "blowdart",
                                           "body":  "We don\u0027t really aim anything at administration of a whole user database, only user self management. This would be a huge new feature. So I\u0027m putting this in the backlog for eventual consideration.",
                                           "updatedAt":  "2018-03-30T20:48:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NzYzOTEwMw==",
                                           "createdAt":  "2018-03-30T22:38:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "weedkiller",
                                           "body":  "I was asking about user management with a view, it used to be in the original web forms.",
                                           "updatedAt":  "2018-03-30T22:38:56Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Add sample views for Managing Roles, Users in Roles etc.",
        "labels":  [
                       "task",
                       "area-identity",
                       "Samples",
                       "severity-nice-to-have",
                       "affected-very-few"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5778",
        "createdAt":  "2018-04-05T05:13:00Z",
        "number":  5778,
        "author":  "DamianEdwards",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-Mtxg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "skoruba",
                                            "createdAt":  "2019-01-05T18:47:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "leogcba",
                                            "createdAt":  "2019-01-13T00:25:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jlchavez",
                                            "createdAt":  "2019-01-13T07:12:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Bob-HL",
                                            "createdAt":  "2019-04-01T09:03:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "leftnet",
                                            "createdAt":  "2019-04-26T15:42:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlissonRS",
                                            "createdAt":  "2019-08-05T02:07:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "raphaelr",
                                            "createdAt":  "2019-08-23T19:29:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Oblomoff",
                                            "createdAt":  "2020-03-09T21:04:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "abremora",
                                            "createdAt":  "2020-06-11T18:58:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fjallemark",
                                            "createdAt":  "2020-06-25T07:18:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CePur",
                                            "createdAt":  "2020-07-12T18:06:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dcube9",
                                            "createdAt":  "2020-08-13T14:15:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dansmitt",
                                            "createdAt":  "2020-09-15T12:09:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ianbrian",
                                            "createdAt":  "2021-09-18T14:32:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JaySkyworker",
                                            "createdAt":  "2021-09-22T03:31:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "csharpfritz",
                                            "createdAt":  "2022-07-18T17:30:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mrjohnnyexe",
                                            "createdAt":  "2022-08-27T12:14:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jakubmaguza",
                                            "createdAt":  "2023-05-05T11:06:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vike2000",
                                            "createdAt":  "2023-07-09T14:31:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RamziHamouda",
                                            "createdAt":  "2023-09-04T12:07:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "runceel",
                                            "createdAt":  "2023-10-22T00:22:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "animitta",
                                            "createdAt":  "2023-12-22T09:44:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "j-witelus",
                                            "createdAt":  "2025-01-16T13:00:14Z"
                                        }
                                    ],
                          "totalCount":  23
                      },
        "updatedAt":  "2023-11-21T20:29:19Z",
        "body":  "Now that we have Identity UI in a library, we should consider having it use `IViewLocalizer` and `IStringLocalizer` to support localization of the various strings. I think it might be possible to just wrap all strings with calls to these interfaces, but **not** provide any resources, but rather have them picked up via the app if they\u0027re provided and configured correctly (we added features in 2.0 if I recall to enable this scenario).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOauaBsg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MDA4NTYyMA==",
                                           "createdAt":  "2018-04-10T12:46:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "@DamianEdwards is this blocking, or can it move to 2.2?",
                                           "updatedAt":  "2018-04-10T12:46:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MDExNzEyMA==",
                                           "createdAt":  "2018-04-10T14:20:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "Not blocking",
                                           "updatedAt":  "2018-04-10T14:20:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMjM3NTE2NQ==",
                                           "createdAt":  "2018-07-04T06:19:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "damienbod",
                                           "body":  "I created a localization of the Identity lib released in 2.1.\r\n\r\nhttps://github.com/damienbod/AspNetCorePagesWebpack/tree/master/AspNetCorePagesIdentity\r\n\r\nI was wondering if you could use this, or how you plan to support localization. When doing this I noticed a few problems, had a few questions.\r\n\r\nWill you create 1 localization resource for the whole Identity package, or one per page ~30 pages?\r\nwhich would mean ~30 resource files per language.\r\n\r\nWill you use English as the default and localize from this, or use capital letter english texts and add english as the first resource. If english is in it\u0027s own resource, the first example can be part of the future package and if the localization is missing from the other languages, it can be found quickly. I assume english as the default is the answer, because the rest of MVC is done this way.\r\n\r\nI had problems localizing the code in the Pages (resource was not found) and had to switch to IStringLocalizerFactory. Maybe a default service with an interface could be used for all the Pages, views and code, which can be implemented by the hosted application if required. This would make it easier to use the identity localization, something like this:\r\n\r\nhttps://github.com/damienbod/AspNetCorePagesWebpack/blob/master/AspNetCorePagesIdentity/Resources/IdentityLocalizationService.cs\r\n\r\nI removed the model display attributes, and localized this in the views. Then the view localization is only implemented in the view.\r\n\r\nOnly Cookie localization worked, the query string localization had problems with some of the Pages, for example Register.\r\n\r\nI think the page model should be moved separate classes.\r\n\r\nI could help with a PR, if you want.\r\n\r\nGreetings Damien\r\n",
                                           "updatedAt":  "2018-07-04T07:18:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMDM4OTQyNw==",
                                           "createdAt":  "2018-08-03T22:10:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAhJRUw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "skoruba",
                                                                               "createdAt":  "2019-01-05T19:01:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "santiagoIT",
                                           "body":  "I have created a simple web app targeted at spanish speaking users using asp.net core 2.1. I have now come to realize that there is no straightforward way to localize the identity pages/error messages.\r\n\r\nFor my needs the out of the box identity UI is fine. However I just need the default Identity views to display in Spanish.\r\nWhat is the most efficient way to accomplish this in 2.1?\r\n\r\nWill the Identity UI views be updated for the 2,2 release, if so when will 2.2 be released?\r\n\r\nThanks!",
                                           "updatedAt":  "2018-08-03T22:11:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2NTc0MjY3Mw==",
                                           "createdAt":  "2019-02-20T20:32:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ssenapat",
                                           "body":  "\u003e I created a localization of the Identity lib released in 2.1.\r\n\u003e \r\n\u003e https://github.com/damienbod/AspNetCorePagesWebpack/tree/master/AspNetCorePagesIdentity\r\n\u003e \r\n\u003e I was wondering if you could use this, or how you plan to support localization. When doing this I noticed a few problems, had a few questions.\r\n\u003e \r\n\u003e Will you create 1 localization resource for the whole Identity package, or one per page ~30 pages?\r\n\u003e which would mean ~30 resource files per language.\r\n\u003e \r\n\u003e Will you use English as the default and localize from this, or use capital letter english texts and add english as the first resource. If english is in it\u0027s own resource, the first example can be part of the future package and if the localization is missing from the other languages, it can be found quickly. I assume english as the default is the answer, because the rest of MVC is done this way.\r\n\u003e \r\n\u003e I had problems localizing the code in the Pages (resource was not found) and had to switch to IStringLocalizerFactory. Maybe a default service with an interface could be used for all the Pages, views and code, which can be implemented by the hosted application if required. This would make it easier to use the identity localization, something like this:\r\n\u003e \r\n\u003e https://github.com/damienbod/AspNetCorePagesWebpack/blob/master/AspNetCorePagesIdentity/Resources/IdentityLocalizationService.cs\r\n\u003e \r\n\u003e I removed the model display attributes, and localized this in the views. Then the view localization is only implemented in the view.\r\n\u003e \r\n\u003e Only Cookie localization worked, the query string localization had problems with some of the Pages, for example Register.\r\n\u003e \r\n\u003e I think the page model should be moved separate classes.\r\n\u003e \r\n\u003e I could help with a PR, if you want.\r\n\u003e \r\n\u003e Greetings Damien\r\n\r\nI am facing query string localization issue. I cannot navigate to the Identity pages using the lang or culture keyword in the URL. \r\nexample:\r\nThe below url\u0027s are working fine \r\ntestproject:4465/en \r\ntestproject:4465/en/Home/About \r\n...\r\n\r\nBut Identity pages does not have language or culture in the url\r\ntestproject:4465/Identity/Pages/Account/Login\r\ntestproject:4465/Identity/Pages/Account/Register\r\n...\r\n\r\nIf I try to navigate with language in the url it fails \r\ni.e testproject:4465/en/Identity/Pages/Account/Login fails and navigates back to home page.\r\n\r\nIs this resolved or did you find any workaround for this issue.",
                                           "updatedAt":  "2019-02-20T20:32:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODk2NzUwOQ==",
                                           "createdAt":  "2019-06-05T07:16:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hishamco",
                                           "body":  "I\u0027m not sure what\u0027s prevent us from using `IViewLocalizer` in views and `IStringLocalizer` else where to make the resources localizable, then when the app register those services and resources are added the localized resources will show up",
                                           "updatedAt":  "2019-06-05T07:16:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxMTE1Njc4Mw==",
                                           "createdAt":  "2019-07-13T21:59:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hishamco",
                                           "body":  "@HaoK is my previous thought make sense or is there anything blocking?",
                                           "updatedAt":  "2019-07-13T21:59:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxODA2MDQwOA==",
                                           "createdAt":  "2019-08-05T02:08:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AlissonRS",
                                           "body":  "I\u0027d like to know if there is a straightforward way of localizing DefaultUI. If not, is my only option scaffolding the entire identity pages and doing it manually?\r\n\r\nThanks!",
                                           "updatedAt":  "2019-08-05T02:08:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxODIwMDg4NQ==",
                                           "createdAt":  "2019-08-05T11:44:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAt29-A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "AlissonRS",
                                                                               "createdAt":  "2019-08-05T12:06:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hishamco",
                                           "body":  "@AlissonRS https://github.com/aspnet/AspNetCore/issues/5778#issuecomment-498967509",
                                           "updatedAt":  "2019-08-05T11:44:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxODIwNzI1Mw==",
                                           "createdAt":  "2019-08-05T12:06:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AlissonRS",
                                           "body":  "@hishamco I\u0027m not sure how your comment answers my question. What you suggest is exactly what I wanted to avoid, thus my question remains: is there an easier alternative for localizing the DefaultUI?",
                                           "updatedAt":  "2019-08-05T12:06:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxODQzMDExOA==",
                                           "createdAt":  "2019-08-05T22:49:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hishamco",
                                           "body":  "Got it.. but I am not sure if there\u0027s alternative solution",
                                           "updatedAt":  "2019-08-05T22:49:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxODQ0MTcyMA==",
                                           "createdAt":  "2019-08-05T23:47:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AlissonRS",
                                           "body":  "@hishamco thanks for replying. I decided to scaffold everything.",
                                           "updatedAt":  "2019-08-05T23:47:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxODQ1ODUzOQ==",
                                           "createdAt":  "2019-08-06T01:21:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hishamco",
                                           "body":  "BTW my earlier suggestion to localize everything out of the box, and let the users localize the resources into their cultures, because I don\u0027t think there\u0027s an easy way to achieve this unless you are using sort of translation technique\r\n\r\nPlease have a look to my repo https://github.com/hishamco/LocalizationResourceGenerator, that may simplify the process for you, if you have the default culture resources",
                                           "updatedAt":  "2019-08-06T01:21:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyMTc5MjU5NQ==",
                                           "createdAt":  "2019-08-15T20:50:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBH672g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "agrothe",
                                                                               "createdAt":  "2019-09-02T21:09:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "gblmarquez",
                                                                               "createdAt":  "2020-04-01T15:19:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "AlissonRS",
                                                                               "createdAt":  "2020-06-19T06:13:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "Rick-Anderson",
                                           "body":  "@DamianEdwards  @vijayrkn @mkArtakMSFT  @ryanbrandenburg can we get this scheduled for 3.1?",
                                           "updatedAt":  "2019-08-15T20:50:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0Mjg4Mjc0Mw==",
                                           "createdAt":  "2020-06-11T19:25:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "abremora",
                                           "body":  "Any news here? I\u0027d appreciate a solution for localization by Microsoft directly. Otherwise I cannot use it for my projects.",
                                           "updatedAt":  "2020-06-11T19:25:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0OTMxMjExMA==",
                                           "createdAt":  "2020-06-25T07:32:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fjallemark",
                                           "body":  "Same here. I write web apps in Blazor that support seven different languages.\r\n\r\nHaving only American English on the account pages is a show stopper because there is no other way than clone the [repo ](https://github.com/dotnet/aspnetcore/tree/master/src/Identity/UI/src/Areas/Identity/Pages/V4) and implement the localisation yourself. Which is waste of time, because there must be several others that need this and want updates as well. \r\n\r\nBesides implementing **IViewLocaliser** and **IStringLocalizer**, you also need to make every property in models using the **DisplayAttribute** point to a resource type that we can add translations to. Also all **ValidationAttribute**s need to be localisable. Then validation errors will show both message and field name in local language. \r\n\r\nThis is how I localize models used in Blazor and AspNet:\r\n\r\n        [Display(Name = nameof(AdministratorPassword), ResourceType = typeof(Strings))]\r\n        [Required(ErrorMessageResourceName = \"Required\", ErrorMessageResourceType = typeof(Strings))]\r\n        [StringLength(10, ErrorMessageResourceName = \"InvalidString\", ErrorMessageResourceType = typeof(Strings))]\r\n        public string AdministratorPassword { get; set; } = DemoClockPassword;\r\n ",
                                           "updatedAt":  "2020-06-25T07:39:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde842-T_a",
                                           "createdAt":  "2021-09-18T14:36:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOECwAsQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JaySkyworker",
                                                                               "createdAt":  "2021-09-22T03:30:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "andreyka26-git",
                                                                               "createdAt":  "2022-04-10T16:01:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Rastamas",
                                                                               "createdAt":  "2022-04-22T13:02:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mpalladinru",
                                                                               "createdAt":  "2022-04-24T02:27:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Moreno-Gentili",
                                                                               "createdAt":  "2022-05-16T06:55:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GiantappMan",
                                                                               "createdAt":  "2022-06-17T10:22:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RodrigoLopezP",
                                                                               "createdAt":  "2023-08-25T16:03:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RamziHamouda",
                                                                               "createdAt":  "2023-09-04T12:06:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "j-witelus",
                                                                               "createdAt":  "2025-01-16T12:59:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  9
                                                         },
                                           "author":  "ianbrian",
                                           "body":  "It\u0027s ridiculous that localization isn\u0027t baked in. I\u0027m very bored scaffolding identity pages and replacing hardcoded english strings with a string lookup scheme that I think should already be there. How many millions of devs have done this?",
                                           "updatedAt":  "2021-09-18T14:36:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85pvGsO",
                                           "createdAt":  "2023-10-22T00:31:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "runceel",
                                           "body":  "The new Blazor web app project for .NET 8 generates `.razor` pages for Identity in English without localization resources, with hard coded English text.\r\nDo you have a plan to move text to resource file?\r\n",
                                           "updatedAt":  "2023-10-22T00:31:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85p0ygG",
                                           "createdAt":  "2023-10-23T15:20:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fjallemark",
                                           "body":  "Its remarkable that Microsoft ignore this year after year after year. I cannot be that hard to write localisable apps, components and pages using the standards Microsoft themselves has made. I use IStringLocalizer in my Blazor components and it is working as a charm. Sorry, Microsoft, why are you so lazy not using the nice things you recommend us all to use?",
                                           "updatedAt":  "2023-10-23T15:20:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85p051V",
                                           "createdAt":  "2023-10-23T15:35:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hishamco",
                                           "body":  "@fjallemark you can add this as a part of the project templates, I remembered we talked about localizing templates few years ago",
                                           "updatedAt":  "2023-10-23T15:35:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85p0_x5",
                                           "createdAt":  "2023-10-23T15:48:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fjallemark",
                                           "body":  "@hishamco : Hi, I really don\u0027t know where to find the source code for the ASP.NET or BLAZOR user administration pages. And now I have implemented my own handling of user authentication and authorisation  that is tailored to fit well with how I organise my apps. I initially also tried Microsoft Azure AD B2C, which IS localized, but gave up. \r\n\r\nBut if you provide where to find the code in GitHub, and if I don\u0027t have to check out 3 tons of code that does not compile without special setup/toolchains that I will have  to spend days to understand, I an willing to help.",
                                           "updatedAt":  "2023-10-23T15:48:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85qBHlf",
                                           "createdAt":  "2023-10-25T07:30:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hishamco",
                                           "body":  "This [ASP.NET Core](https://github.com/dotnet/aspnetcore) repo, @mkArtak could you please point to the templates repo",
                                           "updatedAt":  "2023-10-25T07:30:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85q4nXf",
                                           "createdAt":  "2023-11-03T23:09:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODLzwNA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hishamco",
                                                                               "createdAt":  "2023-11-04T16:37:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mkArtak",
                                           "body":  "@hishamco which templates are you looking for? \r\nThis is where all our templates are located in: https://github.com/dotnet/aspnetcore/tree/main/src/ProjectTemplates/Web.ProjectTemplates\r\n\r\n",
                                           "updatedAt":  "2023-11-03T23:09:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85q5oGy",
                                           "createdAt":  "2023-11-04T16:38:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hishamco",
                                           "body":  "@fjallemark if you are interested you can contribute to localize the template that you are looking for, please let me know if you need a help",
                                           "updatedAt":  "2023-11-04T16:38:42Z"
                                       }
                                   ],
                         "totalCount":  24
                     },
        "title":  "Localize the default UI",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "feature-identity-ui",
                       "affected-few",
                       "severity-major",
                       "triaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5782",
        "createdAt":  "2018-04-12T22:44:02Z",
        "number":  5782,
        "author":  "HaoK",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2020-11-12T19:35:49Z",
        "body":  "We were unable to do this in 2.1 due to key rotation issues.\r\n\r\nPotential solns: Modify the scheme or make changes to the value converters to allow passing context (\"the key to use\")\r\n\r\n@ajcvickers do you want me to file a bug in EF about value converter changes?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOGr46vw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4MDk2OTE1NA==",
                                           "createdAt":  "2018-04-12T22:56:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "@HaoK Yes, please.",
                                           "updatedAt":  "2018-04-12T22:56:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0ODY3NDQ5NQ==",
                                           "createdAt":  "2018-12-19T17:16:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "For reference, issue is https://github.com/aspnet/EntityFrameworkCore/issues/12205",
                                           "updatedAt":  "2018-12-19T17:16:51Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Figure out how to protect login provider key",
        "labels":  [
                       "investigate",
                       "enhancement",
                       "area-identity",
                       "severity-major",
                       "affected-medium"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5789",
        "createdAt":  "2018-05-11T21:48:23Z",
        "number":  5789,
        "author":  "kspearrin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCLoZ5Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lonix1",
                                            "createdAt":  "2019-07-28T17:00:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rsoulard",
                                            "createdAt":  "2020-11-15T03:58:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ice2burn",
                                            "createdAt":  "2021-01-15T14:07:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JuliusPC",
                                            "createdAt":  "2021-06-02T07:24:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ECrownofFire",
                                            "createdAt":  "2022-01-26T12:58:06Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2023-11-21T20:29:20Z",
        "body":  "As shown in this email verification example, it is required to URL encode the base64 email confirmation token before sending them in an email:\r\n\r\nhttps://github.com/aspnet/Identity/blob/47060f5e529ee4b872d9fcf66774935dafb051fc/samples/IdentitySample.DefaultUI/Areas/Identity/Pages/Account/Register.cshtml.cs#L100\r\n\r\nThis works the majority of the time. However, at no fault of our own, there are email providers out there that will still re-encode `%` characters that appear in anchor tags with `%25`, resulting in invalid tokens.\r\n\r\nFor example, `==` (original b64 characters) → `%3D%3D` (correct) → `%253D%253D` (incorrect).\r\n\r\nThis is obviously a bug with the email client itself, but we have come across the case several times with multiple different email clients (for example, mailbox.org will do this).\r\n\r\nSince this really effects everyone (though most may not have noticed), I would propose that the team here should consider using URL safe base64 strings by default within the framework. This would eliminate the need for us to manually create our own TokenProvider, which we\u0027ve had to resort to today. URL safe base64 strings are used, for example, in JWT tokens as a standard. Here is some sample code that we use to achieve it:\r\n\r\n        public static string Base64UrlEncode(byte[] input)\r\n        {\r\n            var output = Convert.ToBase64String(input)\r\n                .Replace(\u0027+\u0027, \u0027-\u0027)\r\n                .Replace(\u0027/\u0027, \u0027_\u0027)\r\n                .Replace(\"=\", string.Empty);\r\n            return output;\r\n        }\r\n\r\n        public static byte[] Base64UrlDecode(string input)\r\n        {\r\n            var output = input;\r\n            // 62nd char of encoding\r\n            output = output.Replace(\u0027-\u0027, \u0027+\u0027);\r\n            // 63rd char of encoding\r\n            output = output.Replace(\u0027_\u0027, \u0027/\u0027);\r\n            // Pad with trailing \u0027=\u0027s\r\n            switch(output.Length % 4)\r\n            {\r\n                case 0:\r\n                    // No pad chars in this case\r\n                    break;\r\n                case 2:\r\n                    // Two pad chars\r\n                    output += \"==\"; break;\r\n                case 3:\r\n                    // One pad char\r\n                    output += \"=\"; break;\r\n                default:\r\n                    throw new InvalidOperationException(\"Illegal base64url string!\");\r\n            }\r\n\r\n            // Standard base64 decoder\r\n            return Convert.FromBase64String(output);\r\n        }",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOGEDltg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4ODUwMzk1OQ==",
                                           "createdAt":  "2018-05-11T22:48:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AdamAnandUS",
                                           "body":  "My token is fine. I am using manual copy and pasting of the token. I am using POST operation just to avoid url encode/decode issues. Please check my log in the main post. It fails only on the hosted third-party server. Works fine in my development machine. It fails with this error.\r\n\r\nVerifyUserTokenAsync() failed with purpose: \"EmailConfirmation\" for user \"53a70644-1ccd-4497-8e3b-146b8d7a7354\".\r\n",
                                           "updatedAt":  "2018-05-11T22:48:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwNjkwNjI5NA==",
                                           "createdAt":  "2018-07-22T23:41:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeanCollas",
                                           "body":  "I also often have issue with tokens. \r\n\r\nI don\u0027t feel that it is a good practice to put non-valid url characters in a server-generated url, used only for the server. \r\n\r\nOn my side, I have changed the URL generation:\r\n\r\n    var callbackUrl = Url.Action(\"ConfirmEmail\", AccountController.Name, new { userId = user.Id, code = code.UrlEncoded() }, protocol: HttpContext.Request.Scheme);\r\n\r\nWith \r\n\r\n        public static string UrlEncoded(this string src)\r\n            =\u003e src == null ? src : System.Net.WebUtility.UrlEncode(src);\r\n\r\nAnd in `ConfirmEmail`:\r\n\r\n            var result = await UserManager.ConfirmEmailAsync(user, code);\r\n            if (!result.Succeeded)\r\n                result = await UserManager.ConfirmEmailAsync(user, code.UrlDecode());",
                                           "updatedAt":  "2018-07-22T23:42:08Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Consider using URL safe base64 tokens for email verification instead of URL encoding",
        "labels":  [
                       "bug",
                       "area-identity",
                       "affected-few",
                       "severity-minor",
                       "triaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5790",
        "createdAt":  "2018-05-14T22:11:04Z",
        "number":  5790,
        "author":  "Eirenarch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2020-10-06T20:22:43Z",
        "body":  "The old version of ASP.NET Identity had a lot of overloads of different methods that accepted user id instead of user object. In the current version only the User object overloads are left. This forces us to write code like this\r\n\r\n`UserManager.IsInRoleAsync(new User { Id = userId }, \"Admin\");`\r\n\r\nPlease consider adding the overloads that accept userId.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Consider adding overloads of IsInRole(Async) and other methods which accept user id",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "severity-nice-to-have",
                       "affected-few"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5796",
        "createdAt":  "2018-06-01T15:49:59Z",
        "number":  5796,
        "author":  "kinosang",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2020-10-09T17:31:21Z",
        "body":  "I saw #106, #650, #1278, and #1281\r\n\r\nOne year passed, is there any plan for the account activity feature?\r\n\r\nOr if the schema changes have been done and the project is ready for the activity feature with a pull request?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOF3xZSA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDAwOTczMg==",
                                           "createdAt":  "2018-06-01T21:09:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "@HaoK you merged something for this at one point against an issue, what happened to it?",
                                           "updatedAt":  "2018-06-01T21:09:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDAyNTI4OA==",
                                           "createdAt":  "2018-06-01T22:24:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "We didn\u0027t end up making schema changes for 2.0, so it got punted, something we can consider for 3.0.",
                                           "updatedAt":  "2018-06-01T22:24:50Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[feature request] user activity",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "severity-minor",
                       "affected-medium"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5802",
        "createdAt":  "2018-07-07T10:03:39Z",
        "number":  5802,
        "author":  "ghost",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2020-10-06T20:22:20Z",
        "body":  "To get some context about the request, see the issue https://github.com/aspnet/Identity/issues/1859\r\n\r\n## Consider providing ACL in Identity\r\nWell as in the title: consider providing ACL in ASP.NET Core though Identity.\r\n\r\n### Some arguments\r\n- ACL is not something too much complex for enterprise level app… \r\n- What Identity provides today, **about group management**, is out to date (again see the issue [1859](https://github.com/aspnet/Identity/issues/1859))…\r\n- Other frameworks oriented **enterprise level app/webapp**, provide, out of the box, ACL support. (See, Zend frameworks, Joomla, etc…)\r\n    - **With all due respect, In comparison, Identity looks like a back to the Past…(there is simply no ACL support at all)**\r\n- Nothing prevents to suggest some improvements, **[or do not mention community involvement](https://www.asp.net/open-source)**…\r\n- You should \"write\" [for customers, **not for simplicity sake**, nor without listening customers](https://github.com/aspnet/Identity/issues/1859#issuecomment-403067317)… And I used to think that ASP.NET Core was for writing enterprise level app, not to write simple blog CMS, **with simplistic group support**…\r\n- it will not cost so much for you, to add ACL support.\r\n\r\n### Design\r\nIt will be simple to integrate some ACL support to Identity, without breaking anything (simply by adding few line of codes, again, take a look at [1859](https://github.com/aspnet/Identity/issues/1859)).\r\n\r\nFor the sake of demonstration:\r\n- Add an Acl table like `IdentityAcl`\r\n- Add a many-to-many relationship table between `IdentityRoles` and `IdentityAcl`;\r\n- Add to `ClaimsIdentity` and `ClaimsPrincipal` … the adequat properties (to avoid having recourse to `Scope` and `IdentityDbContext` for `AuthorizationHandler`)…\r\n- Good doc…\r\n\r\n### Some thoughts\r\nWe do not ask you to write for us our apps, but to provide us with a good, up to date, and real world use framework (**like other frameworks in the market**).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Feature Request—Consider providing ACL in ASP.NET Core Identity",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "affected-few",
                       "severity-minor"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5804",
        "createdAt":  "2018-07-13T21:32:17Z",
        "number":  5804,
        "author":  "NinoFloris",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2020-10-06T20:45:27Z",
        "body":  "Talking about https://github.com/aspnet/Identity/blame/master/src/Core/UserManager.cs#L597\r\nCould instead of returning on `!succeeded` store them, run CreateAsync and merge them with those errors.\r\nThis is blocking a nice api where you get all errors of a registration in one go.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHQae-A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4Njk3MzE3Ng==",
                                           "createdAt":  "2019-04-26T08:25:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "@haok I\u0027d like to get this into 3.0 too, is this change approved? ",
                                           "updatedAt":  "2019-04-26T08:25:38Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "UserManager.CreateAsync(user, password) doesn\u0027t return all errors if password is invalid",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "severity-nice-to-have",
                       "affected-few"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5823",
        "createdAt":  "2018-10-01T00:39:38Z",
        "number":  5823,
        "author":  "davidrevoledo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODQcnLw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jadarnel27",
                                            "createdAt":  "2019-12-21T14:22:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "erikdarlingdata",
                                            "createdAt":  "2020-04-15T02:41:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "shaneis",
                                            "createdAt":  "2020-05-12T15:34:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "radiok",
                                            "createdAt":  "2021-02-03T22:03:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TanvirArjel",
                                            "createdAt":  "2021-07-29T18:43:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cetinbas",
                                            "createdAt":  "2022-02-06T18:20:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "7702244",
                                            "createdAt":  "2022-02-27T11:54:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vishrb",
                                            "createdAt":  "2023-01-19T21:38:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ASADeveloper",
                                            "createdAt":  "2024-05-17T12:07:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andyblack19",
                                            "createdAt":  "2025-09-14T22:47:46Z"
                                        }
                                    ],
                          "totalCount":  10
                      },
        "updatedAt":  "2023-11-21T20:29:22Z",
        "body":  "I\u0027ve realized that the configuration for the default entity `IdentityUser` \r\nhttps://github.com/aspnet/Identity/blob/master/src/EF/IdentityUserContext.cs#L134 doesn\u0027t have any configuration for the `PhoneNumber` and other values.\r\n\r\nI faced a few performance lacking using varchar(max) sizing.\r\n\r\nReference : https://sqlperformance.com/2017/06/sql-plan/performance-myths-oversizing-strings\r\n\r\nI think it\u0027d be a good idea use some standard as default to avoid users that don\u0027t care or don\u0027t know about it have to deal with those kind of throughput issues and every once can configure like they prefer (as it is possible now) but IMO is a quite dangerous letting this as default\r\n\r\n![image](https://user-images.githubusercontent.com/8322252/46265030-2dda9280-c4f9-11e8-9649-881dec444d3b.png)\r\n\r\nAcording this with `For full international support, you\u0027d need a VARCHAR of 15 digits.`\r\nhttps://en.wikipedia.org/wiki/E.164\r\n \r\nThanks.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOM4i92A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyODc3NDkwOQ==",
                                           "createdAt":  "2018-10-11T00:16:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBBGnFA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "erikdarlingdata",
                                                                               "createdAt":  "2020-04-15T02:41:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidrevoledo",
                                           "body":  "any news ? ",
                                           "updatedAt":  "2018-10-11T00:16:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyODc4MjMzNA==",
                                           "createdAt":  "2018-10-11T01:02:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBBGnGg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "erikdarlingdata",
                                                                               "createdAt":  "2020-04-15T02:42:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KevMorelli",
                                           "body":  "I ran a few tests and it seems that these length values could work without issues:\r\nPhoneNumber =\u003e 15\r\nPasswordHash =\u003e 84\r\nSecurityStamp =\u003e 32\r\nConcurrencyStamp =\u003e 36",
                                           "updatedAt":  "2018-10-11T01:02:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyODc4MzIzMA==",
                                           "createdAt":  "2018-10-11T01:08:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBBGnHA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "erikdarlingdata",
                                                                               "createdAt":  "2020-04-15T02:42:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidrevoledo",
                                           "body":  "@KevMorelli Yeah I\u0027m aware of that.",
                                           "updatedAt":  "2018-10-11T01:08:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyODc5MDY0Nw==",
                                           "createdAt":  "2018-10-11T01:51:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBBGnHw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "erikdarlingdata",
                                                                               "createdAt":  "2020-04-15T02:42:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KevMorelli",
                                           "body":  "I will check the other tables before making a pull request for 3.0 with the fixed migration for the templates because there are many fields with maximum length.",
                                           "updatedAt":  "2018-10-11T02:00:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyODc5MTY4NQ==",
                                           "createdAt":  "2018-10-11T01:58:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBBGnIw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KevMorelli",
                                                                               "createdAt":  "2018-10-11T01:59:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "erikdarlingdata",
                                                                               "createdAt":  "2020-04-15T02:42:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davidrevoledo",
                                           "body":  "@KevMorelli I think we should wait until some one of the team answer this Issue, the PR will be a quite complicated as will be a breaking change.",
                                           "updatedAt":  "2018-10-11T01:58:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyOTAwMjU2OA==",
                                           "createdAt":  "2018-10-11T15:35:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBBGnJQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidrevoledo",
                                                                               "createdAt":  "2019-02-14T21:01:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "erikdarlingdata",
                                                                               "createdAt":  "2020-04-15T02:42:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "@HaoK @blowdart I think there is value here, and for 3.0 we should probably bite the bullet and do schema cleanup, but clearly not before 3.0 given where we currently are. Suggest we triage this to 3.0.",
                                           "updatedAt":  "2018-10-11T15:35:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyOTAwODUyNg==",
                                           "createdAt":  "2018-10-11T15:49:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidrevoledo",
                                           "body":  "@ajcvickers yes I think the same if not it will force everyonce to run a migration.",
                                           "updatedAt":  "2018-10-11T15:49:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MzcxNTU1NA==",
                                           "createdAt":  "2019-02-14T17:26:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "@ajcvickers , I have a new project and would like to know what would be some better defaults for the length of the PasswordHash, Concurrency and Security stamps, knowing that I have usernames not exceeding 32 chars, same for phone numbers and emails must be below 128. So far I have the defauls values for PasswordHash, Concurrency and Security stamps (nvarchar(max)) and would like some fixed upper limit (256?), if possible.",
                                           "updatedAt":  "2019-02-14T17:26:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2Mzc5MjQwOA==",
                                           "createdAt":  "2019-02-14T20:55:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "@HaoK Do you know if their are well-known maximum lengths for \"PasswordHash, Concurrency and Security stamps\"?",
                                           "updatedAt":  "2019-02-14T20:55:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2Mzc5NTAwNQ==",
                                           "createdAt":  "2019-02-14T21:02:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "@blowdart for his thoughts as well, the stamps are just guids right now by default, the password hash looks like its always 49 bytes",
                                           "updatedAt":  "2019-02-14T21:02:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNjczNTY1MQ==",
                                           "createdAt":  "2019-07-31T07:40:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexk8",
                                           "body":  "please consider this too\r\n### problem\r\nDefault `IdentityUser` is declared as `IdentityUser\u003cstring\u003e`\r\nThat generates column of type `\"nvarchar(450)\"` is MsSql and unlimited `\"text\"` in postgres which is a bit strange\r\nIf users are supposed to explicitly declare maxlength \r\n` services.AddDefaultIdentity\u003cIdentityUser\u003e(opts =\u003e  {opts.Stores.MaxLengthForKeys = 36;  })`\r\n-anyway, it doesnt help (#7568)\r\n\r\n### solution\r\nsince it internaly uses Guid.ToString(), column should be explicitly declared as \u0027char(36)\u0027 or similar.\r\nThanks",
                                           "updatedAt":  "2019-07-31T07:54:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMDc1NTQ1Nw==",
                                           "createdAt":  "2020-04-28T17:42:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCQi2TQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "shaneis",
                                                                               "createdAt":  "2020-05-12T15:35:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cetinbas",
                                                                               "createdAt":  "2022-02-06T18:20:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xantari",
                                                                               "createdAt":  "2022-02-07T00:28:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "7702244",
                                                                               "createdAt":  "2022-02-27T11:56:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "jadarnel27",
                                           "body":  "I still think this would be a useful change - the framework and templates should be setting users up for success, and part of that is putting appropriate constraints on columns.\r\n\r\nI [spent a little time](https://www.joshthecoder.com/2020/04/28/max-data-types-in-aspnet-core-identity-schema.html) looking into the current state of the code, and I think that these would be very reasonable settings:\r\n\r\n```\r\nbuilder.Entity\u003cIdentityUser\u003e(u =\u003e\r\n{                                                                                                                            \r\n    u.Property(user =\u003e user.PhoneNumber)\r\n        .IsUnicode(false)\r\n        .IsFixedLength(false)\r\n        .HasMaxLength(15);\r\n\r\n    u.Property(user =\u003e user.PasswordHash)\r\n        .IsUnicode(false)\r\n        .IsFixedLength(true)\r\n        .HasMaxLength(84);\r\n\r\n    u.Property(user =\u003e user.ConcurrencyStamp)\r\n        .IsUnicode(false)\r\n        .IsFixedLength(true)\r\n        .HasMaxLength(36)\r\n        .IsRequired(true);\r\n\r\n    u.Property(user =\u003e user.SecurityStamp)\r\n        .IsUnicode(false)\r\n        .IsFixedLength(false)\r\n        .HasMaxLength(36)\r\n        .IsRequired(true);\r\n});\r\n```\r\n\r\nTo highlight some of those items:\r\n\r\n- none of these columns needs unicode (saves on storage size, at least in SQL Server)\r\n- `PasswordHash` and `ConcurrencyStamp` have fixed length\r\n- `ConcurrencyStamp` and `SecurityStamp` are never null\r\n\r\nIt would be nice if `ConcurrencyStamp` were a `Guid` on the .NET side, so that a proper `uniqueidentifier` could be used in SQL Server.  However, I don\u0027t know if all the other supported data platforms have a comparable data type to map to.",
                                           "updatedAt":  "2020-04-28T17:42:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NDU5OTUxMg==",
                                           "createdAt":  "2021-06-20T19:16:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "luizfbicalho",
                                           "body":  "Is there any evolution on this case?",
                                           "updatedAt":  "2021-06-20T19:16:24Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Default Values for IdentityUser",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "severity-nice-to-have",
                       "affected-most",
                       "triaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/4285",
        "createdAt":  "2018-11-27T20:15:59Z",
        "number":  4285,
        "author":  "ZombieProtectionAgency",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2020-10-09T23:50:31Z",
        "body":  "I am not sure whether this is actually an issue or just a misunderstanding and I am not sure what the best fix for this would be but when using a service interface and an implementation for `AddDbContext` the actual context is not configured for injection so any attempt to use EntityFramework identity stores (e.g. `UserStore` via `UserManager`) results in an exception because the context cannot be injected. \r\n\r\n```\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n    services.AddDbContext\u003cIMyContext, MyContext\u003e();\r\n    services.AddIdentity\u003cApplicationUser, ApplicationRole\u003e()\r\n                .AddEntityFrameworkStores\u003cMyContext\u003e();\r\n}\r\n```\r\n\r\nYou can work around this by manually binding the context ([as described here](https://stackoverflow.com/questions/52347535)) but it definitely does not feel ideal.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "AddEntityFrameworkStores expects a concrete implementation and AddDbContext\u003cTContextService, TContextImplementation\u003e does not bind the concrete implementation",
        "labels":  [
                       "bug",
                       "area-identity",
                       "affected-few",
                       "severity-minor"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/7568",
        "createdAt":  "2019-02-14T09:50:25Z",
        "number":  7568,
        "author":  "Ponant",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-27T01:53:36Z",
        "body":  "`            services.AddDefaultIdentity\u003cIdentityUser\u003e(x=\u003ex.Stores.MaxLengthForKeys=100)\r\n`\r\nwill not generate a Max Length of 100 for UserId; it remains at 450. This is not consitent with the intellisense text\r\n\" If set to a positive number, the default OnModelCreating will use this value as the max length for any properties used as keys, i.e. UserId, LoginProvider,  ProviderKey.\" ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTynzlg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MzczMTI4OQ==",
                                           "createdAt":  "2019-02-14T18:11:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Could you tell me which version of identity you\u0027re seeing this in?",
                                           "updatedAt":  "2019-02-14T18:11:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2Mzc4MzE3Mg==",
                                           "createdAt":  "2019-02-14T20:31:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "On both\r\n2.1.600-preview-009497\r\n2.2.200-preview-009804\r\n\r\nthe preview is because I am on on the lastest VS 2019 preview",
                                           "updatedAt":  "2019-02-14T20:31:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2Mzc4NzQzMw==",
                                           "createdAt":  "2019-02-14T20:43:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "It is actually worse than that because for the 2.1 version setting 100 as a max will set not only 450 for UserId but will also ignore the 100 for the providers, which remain at 128.\r\nThe culprit is most likely here\r\nhttps://github.com/aspnet/AspNetCore/blob/bfec2c14be1e65f7dd361a43950d4c848ad0cd35/src/Identity/UI/src/IdentityServiceCollectionUIExtensions.cs#L58-L59",
                                           "updatedAt":  "2019-02-14T20:43:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2Mzc5NDkyNg==",
                                           "createdAt":  "2019-02-14T21:02:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "And trying to play with the migrations, e.g. delete the migration folder or simply adding another migration will mix up things you will get 100 for providers but still 450 for USerId. The template I used is the Razor Pages with Auth selected for the sdk\u0027s above.",
                                           "updatedAt":  "2019-02-14T21:02:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2Mzk4MTk3Ng==",
                                           "createdAt":  "2019-02-15T10:10:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "@blowdart , the inconstency might be due to the following:\r\n`services.AddDefaultIdentity\u003cIdentityUser\u003e(x=\u003ex.Stores.MaxLengthForKeys=100)`\r\nacts in `AddIdentityCore` but `x.Stores.MaxLengthForKeys=100` is only taken into account in `IdentityUserContext` https://github.com/aspnet/AspNetCore/blob/bfec2c14be1e65f7dd361a43950d4c848ad0cd35/src/Identity/EntityFrameworkCore/src/IdentityUserContext.cs#L120\r\n\r\nThis means UserId is not affected by the MaxLengthForKeys in `IdentityUserContext` (`IdentityDbContext` inherits from it)\r\nhttps://github.com/aspnet/AspNetCore/blob/bfec2c14be1e65f7dd361a43950d4c848ad0cd35/src/Identity/EntityFrameworkCore/src/IdentityUserContext.cs#L167 , so this means it is the intellisense info which is wrong.\r\n\r\n(Edit: removed a wrong argument)",
                                           "updatedAt":  "2019-02-15T10:22:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2NjE2NDU1NA==",
                                           "createdAt":  "2019-02-21T21:01:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "We\u0027ll consider this next time we break the schema, rather than create a break just for this.",
                                           "updatedAt":  "2019-02-21T21:01:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85NdcDk",
                                           "createdAt":  "2022-11-02T04:47:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IndigoHealth",
                                           "body":  "[This SO answer](https://stackoverflow.com/a/67686126/1637105) recommends using `Stores.MaxLengthForKeys` as a workaround for an annoying problem where the migration scaffolder changes the lengths of a bunch of keys (`AspNetUserTokens.Name`, `AspNetUserTokens.LoginProvider`, `AspNetUserLogins.ProviderKey`, `AspNetUserLogins.LoginProvider`) from 450 to 128 and back again. [This github issue](https://github.com/dotnet/efcore/issues/28106) documents that problem.",
                                           "updatedAt":  "2022-11-02T04:47:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85PKfOW",
                                           "createdAt":  "2022-11-27T01:40:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "replaysMike",
                                           "body":  "I just hit this when trying to add a IDesignTimeDbContextFactory for when I moved my migrations to another project. I tried `options.Stores.MaxLengthForKeys=450` as mentioned in @IndigoHealth post above but it didn\u0027t have any effect. In my case I\u0027m on `net 6, EF 6.0.9`. Going to ignore it for now since I don\u0027t seem to have a workaround for this.\r\n\r\nAll I did was the following:\r\n\r\n```csharp\r\npublic class ApplicationDbContextFactory : IDesignTimeDbContextFactory\u003cApplicationDbContext\u003e\r\n{\r\n        public ApplicationDbContext CreateDbContext(string[] args)\r\n        {\r\n            var optionsBuilder = new DbContextOptionsBuilder\u003cKeyApiAuthorizationDbContext\u003cApplicationUser, ApplicationRole, int\u003e\u003e();\r\n            optionsBuilder.UseSqlServer(\"...connectionstring...\", b =\u003e b.MigrationsAssembly(\"MyAssembly.Data\"));\r\n            \r\n            return new ApplicationDbContext(optionsBuilder.Options, Options.Create\u003cOperationalStoreOptions\u003e(new OperationalStoreOptions()));\r\n        }\r\n}\r\n```",
                                           "updatedAt":  "2022-11-27T01:53:36Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Stores.MaxLengthForKeys is not consistent with what is announced",
        "labels":  [
                       "bug",
                       "area-identity",
                       "severity-nice-to-have",
                       "affected-very-few"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/9107",
        "createdAt":  "2019-04-05T08:58:41Z",
        "number":  9107,
        "author":  "Ponant",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2020-10-06T18:27:34Z",
        "body":  "On .Net Core 3.0 Preview 3, Asp.NET Core Identity Template, register a user with username\r\n`bernhard@günter.com\r\n`\r\n**Expected**\r\nValidation responds that this is not an allowed character for a username since the default is\r\n`\r\npublic string AllowedUserNameCharacters { get; set; }\r\n            = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._@+\";\r\n`\r\n**Result**\r\n`bernhard@xn--gnter-kva.com \r\n` is stored in the db as username and email and displayed in the UI!\r\n\r\nThat is pretty unexpected for an old framework and a handicap in the current implementation.\r\nProbably this has been encountered in the past??",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHOdqyg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDIwODg1NA==",
                                           "createdAt":  "2019-04-05T09:23:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "A first issue comes from the template having the `[EmailAddress]` attribute. If that is commented then `günter` is not formatted and the response is as expected \"User name \u0027bernhard@günter.com\u0027 is invalid, can only contain letters or digits.\", which btw is a wrong error description since other characters are allowed by default (-._@+) .\r\nThe problem remains when someone wants to collect an email address and puts in the `[EmailAddress]` he will collect a wrong email which can have lots of consequences.\r\nFurthermore it would be good to have a `UserNameAttribute` class that would validate the username according to the allowed characters instead of going to the server.",
                                           "updatedAt":  "2019-04-05T09:27:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDI2NDY3NQ==",
                                           "createdAt":  "2019-04-05T12:54:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "The same issue happens with `[DataType(DataType.EmailAddress)]`",
                                           "updatedAt":  "2019-04-05T12:54:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDM0MTkxNg==",
                                           "createdAt":  "2019-04-05T16:37:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "That\u0027s odd. @HaoK ?",
                                           "updatedAt":  "2019-04-05T16:37:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDM0NTkwMA==",
                                           "createdAt":  "2019-04-05T16:50:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "There\u0027s two kinds of validation going on, the MVC/model data validation attributes which control the views/UI validation on the forms, and then there\u0027s a set of identity specific properties that do things inside of the identity methods.\r\n\r\nThe templates use email as the username and set it as so, which is why that happens.  It also does it in two steps, it updates the email ( which works), and then tries to update the username which fails.\r\n\r\nThe relevant code which clearly can result in out of sync username/emails:\r\n```\r\n                var setEmailResult = await _userManager.SetEmailAsync(user, Input.Email);\r\n                if (!setEmailResult.Succeeded)\r\n                {\r\n                    var userId = await _userManager.GetUserIdAsync(user);\r\n                    throw new InvalidOperationException($\"Unexpected error occurred setting email for user with ID \u0027{userId}\u0027.\");\r\n                }\r\n\r\n                // In our UI email and user name are one and the same, so when we update the email\r\n                // we need to update the user name.\r\n                var setUserNameResult = await _userManager.SetUserNameAsync(user, Input.Email);\r\n                if (!setUserNameResult.Succeeded)\r\n                {\r\n                    var userId = await _userManager.GetUserIdAsync(user);\r\n                    throw new InvalidOperationException($\"Unexpected error occurred setting name for user with ID \u0027{userId}\u0027.\");\r\n                }\r\n```",
                                           "updatedAt":  "2019-04-05T16:50:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDM5NzA5Mw==",
                                           "createdAt":  "2019-04-05T19:34:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "I disagree with the arguments.\r\n1) The `[DataType(DataType.EmailAddress)] ` or `[EmailAddress]` will encode the umlaut character **ü** silently and transform it somewhat to some combination of dashes and dots and some alphanumeric (see above), and that will end up in the database and ui for both username and email since now the former is encoded with dashes and the like, so it passes validation, see:\r\n```\r\n   private async Task ValidateUserName(UserManager\u003cTUser\u003e manager, TUser user,\r\n            ICollection\u003cIdentityError\u003e errors)\r\n```\r\nA proper attribute or whatever logic would stop me from sending an encoded umlaut to the server. Somehow we should make sure that the user input is properly sent to the db and later the ui.\r\n\r\n2) This violation occurs when the umlaut or a French accent is in the domain name. güter@gmail.com would not pass the validation on the client, even if js validation is turned off\r\n\r\n2) A round trip to the server is needed to validate the UserName, I am now working on having something validating client-side following the rules of `AllowedUserNameCharacters`\r\n\r\n3) The `InvalidUserName` key the resx file has a value which is not consistent with the default values of the `AllowedUserNameCharacters` of the `IdentityOptions`\r\n\r\nIt would be good to have feedback from some people who I think are used to German, e.g.\r\n@leastprivilege or French @PinpointTownes",
                                           "updatedAt":  "2019-04-05T19:39:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDQxMzQyMA==",
                                           "createdAt":  "2019-04-05T20:34:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kevinchalet",
                                           "body":  "\u003e The [DataType(DataType.EmailAddress)] or [EmailAddress] will encode the umlaut character ü silently and transform it somewhat to some combination of dashes and dots and some alphanumeric (see above)\r\n\r\nIt\u0027s actually called [punycode](https://en.wikipedia.org/wiki/Punycode).\r\n\r\n\u003e It would be good to have feedback from some people who I think are used to German, e.g.\r\n@leastprivilege or French @PinpointTownes\r\n\r\nThat\u0027s a rather strange bug, indeed (and not something I\u0027ve seen before, tho\u0027 I must admit I don\u0027t use accents in my email addresses, which is often not allowed by major email providers anyway).\r\n\r\nAre you sure the username/email are not punycoded client-side by the browser before being sent to the server? It may explain why the validation check doesn\u0027t reject the punycoded username/email if they are received already encoded.",
                                           "updatedAt":  "2019-04-05T20:34:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDQyMjc0NQ==",
                                           "createdAt":  "2019-04-05T21:08:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "@PinpointTownes  I will do more checks later as it is late here; all I can say for now is that I will receive punycoded data only if I have these EmailAddress attributes. This holds with or without validation js scripts. Otherwise the data will go with the umlaut to the server and UserValidation will reject the username (as expected). Does this tell you something?\r\nEdit:\r\nCase when js validation is removed, while Chrome and Firefox accept the umlaut,  Edge refuses to post.",
                                           "updatedAt":  "2019-04-05T21:20:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDU5MTA2OQ==",
                                           "createdAt":  "2019-04-07T13:34:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "I think this should be moved to corefx as it does not seem to be related to Identity. I will update this thread once the bug is isolated.\r\nhttps://github.com/dotnet/corefx/issues/36675",
                                           "updatedAt":  "2019-04-07T13:34:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDU5MjA3OQ==",
                                           "createdAt":  "2019-04-07T13:48:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kevinchalet",
                                           "body":  "\u003e I will do more checks later as it is late here; all I can say for now is that I will receive punycoded data only if I have these EmailAddress attributes. Does this tell you something?\r\n\r\nThese attributes affect the way email input boxes are represented in HTML5 (i.e as `type=email` inputs rather than `type=text`).\r\n\r\nA quick search shows that it is indeed a browser-side conversion, that automatically happens for email fields: https://bugs.chromium.org/p/chromium/issues/detail?id=410937\r\n\r\nIt\u0027s also interesting to note that the W3C HTML WG updated the spec to [allow non-ASCII chars in email inputs](https://github.com/w3c/html/issues/845). I wouldn\u0027t be surprised if the behavior you\u0027re seeing was changed in a future version of mainstream browsers.",
                                           "updatedAt":  "2019-04-07T13:48:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDU5MjU3OQ==",
                                           "createdAt":  "2019-04-07T13:54:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "@PinpointTownes , then why I do not have this problem with a fresh non core asp.net identity but still on chrome?",
                                           "updatedAt":  "2019-04-07T13:54:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDU5Mjk2Mg==",
                                           "createdAt":  "2019-04-07T14:00:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "@PinpointTownes , ok I just found out that the old .Net framework outputs type=text while .Net Core type=email. I also found that FF does send the data correctly to the browser, so it seems to be a chromium issue.",
                                           "updatedAt":  "2019-04-07T14:00:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDU5MzE0Mg==",
                                           "createdAt":  "2019-04-07T14:02:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "the bug you link to dates back to 2014, so I still think  that should be fixed here to accommodate for chrome since the response from chromium has been a \"won\u0027t fix\". ",
                                           "updatedAt":  "2019-04-07T14:02:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDU5MzU4Ng==",
                                           "createdAt":  "2019-04-07T14:07:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAmdDhQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "Ponant",
                                                                               "createdAt":  "2019-04-07T14:12:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "kevinchalet",
                                           "body":  "\u003e ok I just found out that the old .Net framework outputs type=text while .Net Core type=email. I also found that FF does send the data correctly to the browser, so it seems to be a chromium issue.\r\n\r\nYep, that\u0027s because the MVC 5.x templates use `Html.TextBoxFor` for the email/username field. If you switch to `Html.EditorFor`, it will take the `EmailAddress` attribute into account and you\u0027ll see a similar behavior.\r\n\r\n\u003e the bug you link to dates back to 2014, so I still think that should be fixed here to accommodate for chrome since the response from chromium has been a \"won\u0027t fix\".\r\n\r\nAt best, Identity\u0027s UI could try to proactively \"punydecode\" the username/email fields back to their real Unicode representation and validate them after that. Whether it\u0027s a good idea or something rather fragile is what @blowdart will have to determine 😄 ",
                                           "updatedAt":  "2019-04-07T14:08:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDU5MzgzOA==",
                                           "createdAt":  "2019-04-07T14:10:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "Yes, well that is maybe an issue for the  `asp-for` tag helper",
                                           "updatedAt":  "2019-04-07T14:10:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDU5NDA3NA==",
                                           "createdAt":  "2019-04-07T14:13:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Given there\u0027s RFCs for international characters in email addresses now, (RFCs: 6530, 6531,6532, 6533), and even Office 365 supports it (and let\u0027s face it, Microsoft isn\u0027t the fastest to jump on board to new standards), allowing international characters is probably a valid choice. Chrome\u0027s conversion however, in my view, isn\u0027t. \r\n\r\nIf anything I\u0027d lean to the \"un-punycode\", but that would have to be tested a bunch to ensure \"fake\" punycode isn\u0027t going to cause crashes, and assumes there\u0027s an un-punycode in CoreFX somewhere.",
                                           "updatedAt":  "2019-04-07T14:13:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDU5NDI5Nw==",
                                           "createdAt":  "2019-04-07T14:16:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kevinchalet",
                                           "body":  "\u003e and assumes there\u0027s an un-punycode in CoreFX somewhere\r\n\r\nThere\u0027s [IdnMapping](https://docs.microsoft.com/en-us/dotnet/api/system.globalization.idnmapping?view=netframework-4.7.2) (already used in ASP.NET Core), but it\u0027s completely specific to domain names and I\u0027m not sure it would work with email addresses.",
                                           "updatedAt":  "2019-04-07T14:16:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDU5NDM4Mg==",
                                           "createdAt":  "2019-04-07T14:17:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "Why not reverting back to type=text, it works in that I avoid formatting surprises and then it is up to the dev to decide if he wants non us-ascii or not?",
                                           "updatedAt":  "2019-04-07T14:17:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDU5NDU1OA==",
                                           "createdAt":  "2019-04-07T14:20:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kevinchalet",
                                           "body":  "Well, that would mean degrading the UX a bit, as `type=email` inputs allow mobile browsers to render a keyboard with everything you need to type an email address (typically, the `@`) and even shortcuts to directly enter your commonly used email addresses (at least, on iOS). It\u0027s not exactly something you can blindly change without weighing the pros/cons.",
                                           "updatedAt":  "2019-04-07T14:21:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDU5NTI2Mg==",
                                           "createdAt":  "2019-04-07T14:28:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "The problem is that Chrome is dominant among browsers🥇 ",
                                           "updatedAt":  "2019-04-07T14:28:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDU5NTQwMQ==",
                                           "createdAt":  "2019-04-07T14:30:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "You mean this\r\nhttps://github.com/aspnet/AspNetCore/blob/574be0d22c1678ed5f6db990aec78b4db587b267/src/Http/Http.Abstractions/src/HostString.cs",
                                           "updatedAt":  "2019-04-07T14:30:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDU5Njk4OQ==",
                                           "createdAt":  "2019-04-07T14:50:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "Actually that is better\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.globalization.idnmapping?view=netframework-4.7.2\r\nit seems to work but one needs to isolate the domain name. It starts getting messy if there are several @ symbols in the email address.",
                                           "updatedAt":  "2019-04-07T14:50:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDU5NzExMQ==",
                                           "createdAt":  "2019-04-07T14:52:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Chrome munges to the left of the @? Aggh. \r\n\r\nThe original example, bernhard@xn--gnter-kva.com is arguable right, because it\u0027s just the domain name that got IDNified.",
                                           "updatedAt":  "2019-04-07T14:52:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDU5ODczMQ==",
                                           "createdAt":  "2019-04-07T15:12:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "1) günter@gmail.com is rejected by Chrome, FF, Edge\r\n2) hello@günter.com gets\r\n-encoded by chrome\r\n-sent raw by FF\r\n-refused by edge",
                                           "updatedAt":  "2019-04-07T15:12:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDU5OTIzNg==",
                                           "createdAt":  "2019-04-07T15:18:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "The IDN makes things more complicated as the methods throw if the input on the server is ascii or not and this input will depend on the browser\u0027s behavior. I don\u0027t really like this path especially that there are phishing attacks with punycode domains.",
                                           "updatedAt":  "2019-04-07T15:19:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDU5OTk2Mg==",
                                           "createdAt":  "2019-04-07T15:28:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "@PinpointTownes has a good point about mobile experience with type=text but having that in asp-for will avoid the complexity discussed above.\r\nOne can further make the system more robust by having an \"AllowedEmailCharacters\" as a property in identityoptions together with the validation similar to \"AllowedUserNameCharacters\" that can be tweaked by the dev who wishes to include or exclude non ascii text.\r\nIn my case actually I don\u0027t want non-ascii text but I was testing my attributes and got this bug.",
                                           "updatedAt":  "2019-04-07T15:28:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDYwNDI4MQ==",
                                           "createdAt":  "2019-04-07T16:05:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Well edge will match Chrome soon enough ...\r\n\r\nWe did merge a new feature in 3.0 for having [different username and email normalizers](https://github.com/aspnet/AspNetCore/pull/8412) - an email normalizer could reverse IDN on the domain side.\r\n\r\n@HaoK do normalizers run before validators?\r\n",
                                           "updatedAt":  "2019-04-07T16:05:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDYwNjk1MA==",
                                           "createdAt":  "2019-04-07T16:27:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "Normalizes have nothing to do with the actual name field. It’s only for dB lookups\n\n\u003e On Apr 7, 2019, at 10:06 AM, Barry Dorrans \u003cnotifications@github.com\u003e wrote:\n\u003e \n\u003e Well edge will match Chrome soon enough ...\n\u003e \n\u003e We did merge a new feature in 3.0 for having different username and email normalizers - an email normalizer could reverse IDN on the domain side.\n\u003e \n\u003e @HaoK do normalizers run before validators?\n\u003e \n\u003e —\n\u003e You are receiving this because you were mentioned.\n\u003e Reply to this email directly, view it on GitHub, or mute the thread.\n",
                                           "updatedAt":  "2019-04-07T16:27:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDYwNzg1MA==",
                                           "createdAt":  "2019-04-07T16:35:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Darn it.",
                                           "updatedAt":  "2019-04-07T16:35:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDYwODY0NQ==",
                                           "createdAt":  "2019-04-07T16:44:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "@blowdart in the end I don\u0027t think that is your issue :) I mean it would make more sense that this is something at the MVC level, where strings will be puny-decoded to counter chrome\u0027s behavior. Having` \u003cinput type=\"text\" asp-for=\"Input.Email\"/\u003e` fixes this at the moment.",
                                           "updatedAt":  "2019-04-07T16:44:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDYwOTM3Nw==",
                                           "createdAt":  "2019-04-07T16:51:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Except switching it back makes for a worse end-user during input, and is semantically dubious. ",
                                           "updatedAt":  "2019-04-07T16:51:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDYxMTI1NA==",
                                           "createdAt":  "2019-04-07T17:13:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "I agree, this is a workaround. But in the end I would find it more natural if the conversion is made at the action level of an mvc page or handler before entering a usermanager or the identity methods.",
                                           "updatedAt":  "2019-04-07T17:14:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDYzNjMwMQ==",
                                           "createdAt":  "2019-04-07T22:42:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "ok my understanding now is that google chose to punycode to avoid homograph attacks, e.g.\r\nhere\r\nhttps://аррӏе.com\r\nsounds like apple? check on FF and Chrome and Edge and only FF will show \"аррӏе.com\" in the url bar.",
                                           "updatedAt":  "2019-04-07T22:42:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MTIwOTMyNA==",
                                           "createdAt":  "2019-04-09T11:16:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "https://github.com/dotnet/corefx/blob/b8654425442fef4ba4b58510be53d9859887be1a/src/System.Private.Uri/src/System/DomainNameHelper.cs\r\nfor the record as I am working on this. This method uses unsafe keyword.\r\n\r\nhttps://www.grepular.com/The_Sad_State_of_HTML_Email_Input_Fields_and_IDNs\r\npoints to non-consistent behavior when using javascript.",
                                           "updatedAt":  "2019-04-12T12:50:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MjAxNTI5OQ==",
                                           "createdAt":  "2019-04-11T08:15:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "I find it tricky to find a solution that remains consistent. For instance if you allow user to enter an email or url and he enters say http://faß.de . This link in FF will display as is and route to it. But in Chrome and Edge http://faß.de will redirect to https://www.bayern-fass.de/ . WTF can we do with this?",
                                           "updatedAt":  "2019-04-11T08:15:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NDI0MjE2MA==",
                                           "createdAt":  "2019-04-17T20:09:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "*sigh* Chrome. I think this is going to take thought, which certainly rules it out for the next preview.",
                                           "updatedAt":  "2019-04-17T20:09:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NDkyODIwMg==",
                                           "createdAt":  "2019-04-19T15:18:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ponant",
                                           "body":  "Still dwelling upon this issue. I found out that when client side validation is enabled we get some weird behavior:\r\n\r\n**For a@ü.com\r\nClient side validation enabled**\r\nFF refuses the post with error \"Please enter a valid email address\"\r\nEdge same as FF\r\nChrome allows the post and sends you the punycode a@xn--tda.com\r\n\r\n**For a@ü.com\r\nClient side validation disabled**\r\nFF allows the post and sends the raw value a@ü.com\r\nEdge still silly, it refuses the post and displays its default error \"You must enter a valid email address\"\r\nChrome allows the post and sends you the punycode a@xn--tda.com\r\n\r\nIn short, Chrome does not care about client side validation, whereas FF will work only if client side val is disabled, Edge refuses unicode altogether. Two problems:\r\n1) Edge needs to fix this and accept unicode. Luckily the new Edge Chromium based project behave slike Chrome as of 04.2019\r\n2) The js validation scripts do not like unicode, so these need to be adapted or else FF needs to punycode the entries that are evaluated by jquery validation+unobstrusive.\r\n\r\nAny thought?\r\n",
                                           "updatedAt":  "2019-04-20T08:25:20Z"
                                       }
                                   ],
                         "totalCount":  36
                     },
        "title":  "Username with German or French letters gets encoded and passes validation ASP.NET Core Identity",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "affected-few",
                       "severity-minor"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/12047",
        "createdAt":  "2019-07-10T14:34:31Z",
        "number":  12047,
        "author":  "warappa",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBXW54Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KhalilMohammad",
                                            "createdAt":  "2020-11-19T14:25:51Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-01-19T13:22:33Z",
        "body":  "### Description\r\nI use **ASP.NET Core 2 Identity** with **OpenIdConnect** on **IdentityServer3**. After my external authentication callback is called, I use `signInManager.ExternalLoginSignInAsync(...)` to **sign in - and it works**.\r\n\r\nWhat does *not work* is, that in the **next request** any call to `HttpContext.GetTokenAsync(...)` **fails** for any possible authentication-scheme (token \"id_token\"). This is bad because for OpenIdConnectHandler not being able to retrieve the `id_token` from the current context, it doesn\u0027t provide the `id_token` to the logout endpoint of IdentityServer. IdentityServer logs the user out but doesn\u0027t accept the `post_logout_redirect_uri` because of this.\r\n\r\nBut I have found a *workaround*.\r\n\r\n### To Reproduce\r\n1. Create a new **ASP.NET Core 2.2** application with **ASP.NET Core 2 Identity** support\r\n2. Configure **OpenIdConnect**, like\r\n\r\n```csharp\r\nservices.AddAuthentication(options =\u003e\r\n{\r\n\toptions.DefaultScheme = IdentityConstants.ApplicationScheme;\r\n\toptions.DefaultAuthenticateScheme = IdentityConstants.ApplicationScheme;\r\n\toptions.DefaultChallengeScheme = OpenIdConnectDefaults.AuthenticationScheme;\r\n\toptions.DefaultSignInScheme = IdentityConstants.ExternalScheme;\r\n\toptions.DefaultSignOutScheme = IdentityConstants.ApplicationScheme;\r\n})\r\n.AddOpenIdConnect(OpenIdConnectDefaults.AuthenticationScheme, options =\u003e\r\n{\r\n\toptions.Authority = \"https://devnavis.premedia.at/SecurityTokenService\";\r\n\toptions.ClientId = \"\u003cclient-id\u003e\";\r\n\toptions.ClientSecret = \"\u003cclient-secret\u003e\";\r\n\toptions.RequireHttpsMetadata = false;\r\n\r\n\t// callback path is provided by middleware\r\n\toptions.CallbackPath = \"/openidconnect-signin-callback\";\r\n\toptions.SaveTokens = true;\r\n\r\n\toptions.SignInScheme = IdentityConstants.ExternalScheme;\r\n\toptions.SignOutScheme = IdentityConstants.ApplicationScheme;\r\n\toptions.SignedOutRedirectUri = \"/account/logged-out\";\r\n\toptions.SignedOutCallbackPath = \"/openidconnect-signout-callback\";\r\n\t// configure for returning id_token\r\n\toptions.ResponseType = OpenIdConnectResponseType.IdTokenToken;\r\n\toptions.GetClaimsFromUserInfoEndpoint = true;\r\n\r\n\toptions.Scope.Add(\"openid\");\r\n\toptions.Scope.Add(\"profile\");\r\n\toptions.Scope.Add(\"email\");\r\n\t\r\n\toptions.Events = new OpenIdConnectEvents\r\n\t{\r\n\t\tOnTicketReceived = async e =\u003e\r\n\t\t{\r\n\t\t\t// slim down claims if claims are too much\r\n\t\t\te.Principal = TransformClaims(e.Principal);\r\n\t\t}\r\n\t};\r\n})\r\n...\r\nprivate static ClaimsPrincipal TransformClaims(ClaimsPrincipal claimsPrincipal)\r\n{\r\n\tvar identity = (ClaimsIdentity)claimsPrincipal.Identity;\r\n\tvar email = identity.FindFirst(\"email\");\r\n\tvar name = identity.FindFirst(\"name\");\r\n\tvar sub = identity.FindFirst(\"sub\");\r\n\tvar nameidentifier = identity.FindFirst(ClaimTypes.NameIdentifier);\r\n\tvar claimsToKeep = new[]\r\n\t{\r\n\t\temail,\r\n\t\tname,\r\n\t\tsub,\r\n\t\tnameidentifier\r\n\t};\r\n\tvar newIdentity = new ClaimsIdentity(claimsToKeep, identity.AuthenticationType, \"name\", \"role\");\r\n\tvar newClaims = new ClaimsPrincipal(newIdentity);\r\n\treturn newClaims;\r\n}\r\n```\r\n\r\n3. In a login contoller method, call `signInManager.ConfigureExternalAuthenticationProperties(...)` with OpenIdConnect scheme and proper redirect url, like\r\n\r\n```csharp\r\nvar properties = signInManager.ConfigureExternalAuthenticationProperties(OpenIdConnectDefaults.AuthenticationScheme, $\"/account/logged-in\");\r\nawait HttpContext.ChallengeAsync(OpenIdConnectDefaults.AuthenticationScheme, properties).ConfigureAwait(false);\r\n```\r\n\r\n4. When the authentication comes back (logged-in), call\r\n\r\n```csharp\r\nvar externalInfo = await signInManager.GetExternalLoginInfoAsync();\r\nvar signInResult = await signInManager.ExternalLoginSignInAsync(externalInfo.LoginProvider, externalInfo.ProviderKey, true, true).ConfigureAwait(false);\r\nif (signInResult.Succeeded)\r\n\treturn Redirect(redirect_url);\r\nelse if (signInResult.IsLockedOut)\r\n\treturn Unauthorized();\r\nelse // new user\r\n{\r\n\tvar email = externalInfo.Principal.FindFirstValue(ClaimTypes.Email) ??\r\n\t\t  externalInfo.Principal.FindFirstValue(\"email\");\r\n\tvar name = externalInfo.Principal.FindFirstValue(ClaimTypes.Name) ??\r\n\t\texternalInfo.Principal.FindFirstValue(\"name\");\r\n\tvar user = new User\r\n\t{\r\n\t\tEmail = email,\r\n\t\tUserName = name,\r\n\t\tName = name\r\n\t};\r\n\tvar resultCreateUser = await userManager.CreateAsync(user);\r\n\tif (resultCreateUser.Succeeded)\r\n\t{\r\n\t\tresultCreateUser = await userManager.AddLoginAsync(user, externalInfo);\r\n\t\tif (resultCreateUser.Succeeded)\r\n\t\t{\r\n\t\t\tlogger.LogInformation(\"User created an account using {Name} provider.\", externalInfo.LoginProvider);\r\n\t\t\treturn Redirect(redirect_url);\r\n\t\t}\r\n\t}\r\n}\r\nreturn Unauthorized();\r\n```\r\n\r\n5. The user is *successfully logged* in\r\n6. Navigate to another Controller-Action like `/account/token` which has something, like\r\n\r\n```csharp\r\nvar idToken = await HttpContext.GetTokenAsync(\"id_token\")\r\n```\r\n7. `idToken` is **null**\r\n\r\n### Workaround\r\nSupplement the code from step 4 with *another* `SignIn(...)` call with **custom `AuthenticationProperties`**, which copy the authentication tokens to the authentication cookie (as far as I understand).\r\n\r\n```csharp\r\nvar externalInfo = await signInManager.GetExternalLoginInfoAsync();\r\nvar signInResult = await signInManager.ExternalLoginSignInAsync(externalInfo.LoginProvider, externalInfo.ProviderKey, true, true).ConfigureAwait(false);\r\nif (signInResult.Succeeded)\r\n{\r\n\t// workaround\r\n\tvar props = new AuthenticationProperties();\r\n\tprops.StoreTokens(externalInfo.AuthenticationTokens);\r\n\tprops.IsPersistent = true;\r\n\tvar user = await userManager.FindByLoginAsync(externalInfo.LoginProvider, externalInfo.ProviderKey);\r\n\t// provide custom AuthenticationProperties so tokens get persisted!\r\n\tawait signInManager.SignInAsync(user, props, externalInfo.LoginProvider);**\r\n\t// workaround end\r\n\t\r\n\treturn Redirect(redirect_url);\r\n}\r\nelse if (signInResult.IsLockedOut)\r\n\treturn Unauthorized();\r\nelse // new user\r\n{\r\n\tvar email = externalInfo.Principal.FindFirstValue(ClaimTypes.Email) ??\r\n\t\t  externalInfo.Principal.FindFirstValue(\"email\");\r\n\tvar name = externalInfo.Principal.FindFirstValue(ClaimTypes.Name) ??\r\n\t\texternalInfo.Principal.FindFirstValue(\"name\");\r\n\tvar user = new User\r\n\t{\r\n\t\tEmail = email,\r\n\t\tUserName = name,\r\n\t\tName = name\r\n\t};\r\n\tvar resultCreateUser = await userManager.CreateAsync(user);\r\n\tif (resultCreateUser.Succeeded)\r\n\t{\r\n\t\tresultCreateUser = await userManager.AddLoginAsync(user, externalInfo);\r\n\t\tif (resultCreateUser.Succeeded)\r\n\t\t{\r\n\t\t\t// workaround\r\n\t\t\tvar props = new AuthenticationProperties();\r\n            props.StoreTokens(externalInfo.AuthenticationTokens);\r\n            props.IsPersistent = true;\r\n            var user = await userManager.FindByLoginAsync(externalInfo.LoginProvider, externalInfo.ProviderKey);\r\n            // provide custom AuthenticationProperties so tokens get persisted!\r\n            await signInManager.SignInAsync(user, props, externalInfo.LoginProvider);**\r\n\t\t\t// workaround end\r\n\t\t\t\r\n\t\t\tlogger.LogInformation(\"User created an account using {Name} provider.\", externalInfo.LoginProvider);\r\n\t\t\treturn Redirect(redirect_url);\r\n\t\t}\r\n\t}\r\n}\r\nreturn Unauthorized();\r\n```\r\n\r\n### Expected behavior\r\n`HttpContext.GetTokenAsync(\"id_token\")` should return non- null id-token\r\n\r\n### Suggestion\r\nEither provide a way to pass in custom `AuthenticationProperties` to `signInManager.ExternalLoginSignInAsync(...)`, or enable copying over the `AuthenticationTokens` from `ExternalLoginInfo`.\r\n\r\n### Additional context\r\nnetcoreapp2.2\r\n\r\n#### Relevant Nugets\r\n```xml\r\n\u003cPackageReference Include=\"IdentityServer4.AccessTokenValidation\" Version=\"2.7.0\" /\u003e\r\n\u003cPackageReference Include=\"IdentityModel\" Version=\"3.10.10\" /\u003e\r\n\u003cPackageReference Include=\"Microsoft.AspNetCore.App\" /\u003e\r\n\u003cPackageReference Include=\"Microsoft.IdentityModel.Protocol.Extensions\" Version=\"1.0.4.403061554\" /\u003e\r\n\u003cPackageReference Include=\"NLog.Web.AspNetCore\" Version=\"4.8.1\" /\u003e\r\n\u003cPackageReference Include=\"Microsoft.AspNetCore.Razor.Design\" Version=\"2.2.0\" PrivateAssets=\"All\" /\u003e\r\n\u003cPackageReference Include=\"System.IdentityModel.Tokens.Jwt\" Version=\"5.5.0\" /\u003e\r\n\u003cPackageReference Include=\"Microsoft.AspNetCore.Authorization.Policy\" Version=\"2.2.0\" /\u003e\r\n```\r\n#### dotnet --info\r\n```\r\n.NET Core SDK (gemäß \"global.json\"):\r\n Version:   2.2.300\r\n Commit:    73efd5bd87\r\n\r\nLaufzeitumgebung:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.300\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.5\r\n  Commit:  0a3c9209c0\r\n\r\n.NET Core SDKs installed:\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.107 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.204 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLXfz7A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxMTA1ODQ2Mg==",
                                           "createdAt":  "2019-07-12T23:03:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "Note: This https://github.com/aspnet/AspNetCore/issues/11405 might help mitigate the issue somewhat, at least the tokens will be accessible from the ExternaLoginInfo as a result of that fix",
                                           "updatedAt":  "2019-07-12T23:03:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjU5MjE2Ng==",
                                           "createdAt":  "2020-09-15T09:27:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCqKpuw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "paviad",
                                                                               "createdAt":  "2022-08-07T14:27:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "FranklinWhale",
                                           "body":  "`GetExternalLoginInfoAsync` cannot be used in another controller because `ExternalLoginSignInAsync` deletes the External cookie on successful sign in.\r\n\r\nI think `ExternalLoginSignInAsync` needs to have the `AuthenticationProperties` parameter.",
                                           "updatedAt":  "2020-09-15T09:27:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMDQxNjk2Mw==",
                                           "createdAt":  "2020-11-19T14:37:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODdvxhQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "paviad",
                                                                               "createdAt":  "2022-08-07T14:27:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Meigs2",
                                                                               "createdAt":  "2024-04-10T20:52:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "KhalilMohammad",
                                           "body":  "I am using `await _signInManager.SignInAsync` to store token after calling `await _signInManager.ExternalLoginSignInAsync`.\r\n\r\nHaving `AuthenticationProperties` parameter in `ExternalLoginSignInAsync`, I would not need to do that.\r\nAlso, is there any reason. I should not call `_signInManager.SignInAsync` after `_signInManager.ExternalLoginSignInAsync`\r\n\r\nFor me, it\u0027s working perfectly fine now.",
                                           "updatedAt":  "2020-11-19T14:37:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MjgzNTk0OA==",
                                           "createdAt":  "2021-01-19T13:22:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODZstjA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "paviad",
                                                                               "createdAt":  "2022-08-07T14:29:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DushyantSinghChouhan",
                                                                               "createdAt":  "2024-03-07T09:52:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "FionaHolder",
                                           "body":  "Thanks to @warappa I have managed to get this working in .NET Core 3.1 with a lot of debugging.\r\nYour workaround didn\u0027t work for me, but it pointed me in the right direction. \r\n\r\nI managed to get this working by setting `SaveTokens `to true in the `services.AddAuthentication().AddOpenIdConnect` options in Startup.cs. \r\n\r\nThe Microsoft docs for said property: https://docs.microsoft.com/en-us/dotnet/api/microsoft.owin.security.openidconnect.openidconnectauthenticationoptions.savetokens?view=owin-4.1 ",
                                           "updatedAt":  "2021-01-19T13:22:33Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "SigninManager.ExternalLoginSignInAsync(...) Does Not Store Authentication-Tokens",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "affected-most",
                       "severity-minor"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/12344",
        "createdAt":  "2019-07-19T06:37:29Z",
        "number":  12344,
        "author":  "slaneyrw",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCu0mTg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dmytroett",
                                            "createdAt":  "2020-11-13T14:48:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SamuelJohnsonMedia",
                                            "createdAt":  "2021-05-19T20:35:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AnthonyMastrean",
                                            "createdAt":  "2021-07-27T14:16:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "majordutch",
                                            "createdAt":  "2021-07-28T22:42:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "b4ux1t3",
                                            "createdAt":  "2021-08-11T15:30:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "brantmerrell",
                                            "createdAt":  "2021-08-11T15:41:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mikechristiansenvae",
                                            "createdAt":  "2021-08-11T15:46:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "leeanne-jackson",
                                            "createdAt":  "2021-08-11T16:00:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tjbarbour",
                                            "createdAt":  "2021-08-11T16:35:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ProTip",
                                            "createdAt":  "2023-03-11T18:39:36Z"
                                        }
                                    ],
                          "totalCount":  10
                      },
        "updatedAt":  "2024-10-02T23:12:34Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\n\r\nContent... \r\n\r\n- I have a derived class of UserManager.\r\n- I have an alternative implementation of PasswordHasher that requires an Async call ( Argon2 ). \r\n- I also have additional processes I need to perform between when a password is hashed and the user is updated.\r\n\r\nUnfortunately the placed where both of these processes are performed is in the **private** overload of UpdatePasswordHash that has the IUserPasswordStore parameter.\r\n\r\nTo resolve my issue I have to replace all 6 methods that hash passwords that, with the exception of UpdatePasswordHash, are identical to the implementation in the UserManager.\r\n- AddPasswordAsync\r\n- ChangePasswordAsync\r\n- CheckPasswordAsync  (ReHash flow)\r\n- CreatePasswordAsync\r\n- RemovePasswordAsync\r\n\r\nThe original hashing method also calls another private method **UpdateSecurityStampInternal** that I need to also call.\r\n\r\nIncidently GenerateNewAuthenticatorKey is virtual, but UpdateSecurityStampInternal directly uses the it\u0027s default target of NewSecurityStamp.  What\u0027s the point of making it virtual if UpdateSecurityStampInternal doesn\u0027t use it.\r\n\r\n\r\n### Describe the solution you\u0027d like\r\nMake the private UpdatePasswordHash with IUserPasswordStore overload **protected** \r\nMake the private UpdateSecurityStampInternal method **protected**\r\n\r\n### Additional context\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjnHmug==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NTA2ODU1MQ==",
                                           "createdAt":  "2020-06-16T23:54:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "slaneyrw",
                                           "body":  "Can we please plan this for v5, at least making IPasswordHasher methods async ( every method above it in the callchain is async, just not the last step)",
                                           "updatedAt":  "2020-06-16T23:54:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NDQ1ODI2MA==",
                                           "createdAt":  "2021-05-19T20:43:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamuelJohnsonMedia",
                                           "body":  "Would it be better to just make IPasswordHasher methods async?",
                                           "updatedAt":  "2021-05-19T20:43:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde8405_py",
                                           "createdAt":  "2021-07-27T15:38:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC3o7ZQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "majordutch",
                                                                               "createdAt":  "2021-07-28T22:43:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "leeanne-jackson",
                                                                               "createdAt":  "2021-08-11T16:00:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tjbarbour",
                                                                               "createdAt":  "2021-08-11T16:35:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ProTip",
                                                                               "createdAt":  "2023-03-11T18:39:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "AnthonyMastrean",
                                           "body":  "In order to comply with DISA STIG, we\u0027re implementing password history (to prevent recent password reuse, etc.) by extending the various parts of Identity and the UserManager and have this exact same problem with the private update passsword hash and update security stamp methods.",
                                           "updatedAt":  "2021-07-27T16:21:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde841c4h4",
                                           "createdAt":  "2021-08-11T11:57:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "slaneyrw",
                                           "body":  "Just checked v6.0 preview... still synchronous methods.  Please consider updating the hasher to be Async for the next LTS release.\r\n\r\nEverything calling the hashing system is async.. seems a shame to not to complete it end to end.",
                                           "updatedAt":  "2021-08-11T11:57:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86Ocea6",
                                           "createdAt":  "2024-10-02T22:50:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "\u003e I have an alternative implementation of PasswordHasher that requires an Async call ( Argon2 ).\r\n\r\nFrom the looks of it, this means that making the `IUserPasswordStore` overload of `UpdatePasswordHash` protected would be insufficient without also making `IPasswordHasher` async as many people in the follow up comments have suggested.\r\n\r\nI don\u0027t know why Argon2 requires an async call, especially with [OWASP\u0027s recommended degree of parallelism](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html) being one. Even if you need more parallelism, it\u0027s not obvious why you couldn\u0027t use the current thread as one of the hashing threads. This would reduce the amount of dispatching.\r\n\r\nThings like implementing password history to prevent password reuse seem like they should be done by the `IPasswordValidator` not the `IPasswordHasher`, and the validator is already async. And if you\u0027re in the uncommon situation where you do have such a need, overriding 4 or 5 CRUD methods to manage password doesn\u0027t seem too onerous.\r\n\r\n\u003e The original hashing method also calls another private method UpdateSecurityStampInternal that I need to also call.\r\n\r\nWhy not just call the already-public `UserManager.UpdateSecurityStampAsync(TUser user)` method? If you want to really optimize it avoid DB round trips, you could call `IUserSecurityStampStore.SetSecurityStampAsync(TUser user, string stamp)` instead.\r\n\r\n\u003e Incidently GenerateNewAuthenticatorKey is virtual, but UpdateSecurityStampInternal directly uses the it\u0027s default target of NewSecurityStamp. What\u0027s the point of making it virtual if UpdateSecurityStampInternal doesn\u0027t use it.\r\n\r\nThe short answer is that the security stamp is not an authenticator key. It just happens that the default implementation for generating an authenticator key and security stamp is shared.\r\n\r\nGenerateNewAuthenticatorKey and GetAuthenticatorKeyAsync are virtual so you can do things like [encrypt the key at rest](https://chsakell.com/2019/08/18/asp-net-core-identity-series-two-factor-authentication/#:~:text=Encrypting%20Authenticator%20key). A security stamp generally doesn\u0027t need the same level of secrecy as a key. So long as any new values are unique and unpredictable, it should serve its purpose of invalidating stale credentials.",
                                           "updatedAt":  "2024-10-02T23:12:34Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Expose private UpdatePasswordHash with IUserPasswordStore overload to derived classes",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "affected-few",
                       "severity-minor",
                       "triaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/12609",
        "createdAt":  "2019-07-26T14:26:55Z",
        "number":  12609,
        "author":  "lonix1",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2020-10-06T18:35:27Z",
        "body":  "`UserManager` In 2.1 exposed the \"purpose\" constants, eg. [ConfirmEmailTokenPurpose](https://github.com/aspnet/Identity/blob/release/2.1/src/Core/UserManager.cs#L39).\r\n\r\nWe relied on this in order to use `userManager.VerifyUserTokenAsync()`.\r\n\r\nNow those constants are gone, and there is a [`GetChangeEmailTokenPurpose()`](https://github.com/aspnet/AspNetCore/blob/master/src/Identity/Extensions.Core/src/UserManager.cs#L2472) method in its place, which is `protected`.\r\n\r\nPlease make it `public`, otherwise the verify function is unusable.\r\n\r\n(Subclassing just adds an unnecessary mess as this class already conceals a lot of complexity and should be usable as is.)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHrq11w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNTQ3OTA4Mg==",
                                           "createdAt":  "2019-07-26T14:36:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "@HaoK another breaking change?",
                                           "updatedAt":  "2019-07-26T14:36:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNTUyODIwOQ==",
                                           "createdAt":  "2019-07-26T17:03:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lonix1",
                                           "body":  "To be consistent, consider:\r\n\r\nChanging `GetChangeEmailTokenPurpose()` (and related) to `public`.\r\n\r\nOR, changing `VerifyUserTokenAsync()` to `protected`, because it becomes useless anyways.",
                                           "updatedAt":  "2019-07-26T17:03:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNTUzNTAxOQ==",
                                           "createdAt":  "2019-07-26T17:25:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "No the constants are still there, see: https://github.com/aspnet/AspNetCore/blob/master/src/Identity/Extensions.Core/src/UserManager.cs#L39",
                                           "updatedAt":  "2019-07-26T17:25:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNTU0MDEwNg==",
                                           "createdAt":  "2019-07-26T17:41:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lonix1",
                                           "body":  "It doesn\u0027t work when trying to change email, because now it uses [`GetChangeEmailTokenPurpose`](https://github.com/aspnet/AspNetCore/blob/master/src/Identity/Extensions.Core/src/UserManager.cs#L2472), which is protected. (Could be other uses cases too, haven\u0027t checked.)\r\n\r\nAnd as you can see, it was changed to `\"ChangeEmail:\" + newEmail`, so the constant you linked is dead code.\r\n\r\nIt is used [here](https://github.com/aspnet/AspNetCore/blob/master/src/Identity/Extensions.Core/src/UserManager.cs#L1555) and [here](https://github.com/aspnet/AspNetCore/blob/master/src/Identity/Extensions.Core/src/UserManager.cs#L1533).",
                                           "updatedAt":  "2019-07-26T17:43:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNTU0MTcxMQ==",
                                           "createdAt":  "2019-07-26T17:47:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "Ok, that seems safe enough to expose in the future.  \r\n\r\nSo you can just call VerifyUserTokenAsync with \"ChangeEmail:\" + newEmail as the purpose in the short term.  \r\n\r\nBut there\u0027s no breaking change here",
                                           "updatedAt":  "2019-07-26T17:47:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNTU0MTk2Nw==",
                                           "createdAt":  "2019-07-26T17:47:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAtTbtw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lonix1",
                                                                               "createdAt":  "2019-07-26T18:25:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "HaoK",
                                           "body":  "Something for the backlog / future @blowdart ",
                                           "updatedAt":  "2019-07-26T17:47:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNTU1MjcyNw==",
                                           "createdAt":  "2019-07-26T18:21:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lonix1",
                                           "body":  "Thanks for looking into this.\r\n\r\nI\u0027ve opted to subclass instead, to avoid magic strings (as shown by this issue, it\u0027s a bad idea to rely on magic strings :smile:).\r\n\r\nFor anyone else migrating code to 2.2, note that if you subclass, it\u0027s important not to register the subclass with the container, but to replace the default during init:\r\n````cs\r\nservices\r\n.AddIdentityCore\u003cUser\u003e()\r\n.AddUserManager\u003cMyUserManager\u003cUser\u003e\u003e()    // \u003c--- the magic\r\n````\r\n\r\nAnd then it\u0027s as easy as this:\r\n````cs\r\npublic async Task\u003cbool\u003e ValidateEmailChangeToken(TUser user, string newEmail, string token) {\r\n  return await VerifyUserTokenAsync(\r\n    user,\r\n    Options.Tokens.ChangeEmailTokenProvider,\r\n    GetChangeEmailTokenPurpose(newEmail),\r\n    token\r\n  );\r\n}\r\n\r\n````",
                                           "updatedAt":  "2019-07-26T18:25:24Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Expose UserManager\u003cT\u003e.GetChangeEmailTokenPurpose()",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "severity-nice-to-have",
                       "affected-very-few"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/12762",
        "createdAt":  "2019-07-31T15:22:34Z",
        "number":  12762,
        "author":  "arisliang",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2020-10-07T07:57:31Z",
        "body":  "I am trying to change `PhoneNumberTokenProvider` to not generate 2FA, but there seems to be no way to configure this currently in v2.1.\r\n\r\nIt would be good to be able to remove a token provider, so I could add a custom one back; or add option to override the 2FA generation flag for the default providers.\r\n\r\nAlternatively I\u0027m thinking to override the `AddDefaultTokenProviders`, which I\u0027d rather not, because for my use, the rest of the default providers are fine.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKgHaQA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNjkyMzA0MQ==",
                                           "createdAt":  "2019-07-31T16:28:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "We\u0027ve pretty much all but given up on phone auth as an industry, and it\u0027s not in our templates any more so it\u0027s unlikely we\u0027d do much if any work on it any more.\r\n\r\n@HaoK is there a reason we still add the 2fa provider by default? ",
                                           "updatedAt":  "2019-07-31T16:28:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDU0MzI5Nw==",
                                           "createdAt":  "2020-10-06T20:46:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "We generally just keep things the same for back compat, otherwise apps that were using phone 2fa all of a sudden would explode after upgrading",
                                           "updatedAt":  "2020-10-06T20:46:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDc2NDQ4MA==",
                                           "createdAt":  "2020-10-07T07:57:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arisliang",
                                           "body":  "Noted, I\u0027m fine with what is it now. Will just use some workaround.",
                                           "updatedAt":  "2020-10-07T07:57:30Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Configure `CanGenerateTwoFactorTokenAsync` for default token providers",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "affected-few",
                       "severity-minor"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/15168",
        "createdAt":  "2019-10-18T21:03:55Z",
        "number":  15168,
        "author":  "franchyd",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-09-02T14:05:13Z",
        "body":  "For identity services such as UserManager or RoleManager, when using a custom type, the service is available under both the UserManager\u003cT\u003e AND the custom type itself for dependency injection.  Similarly RoleManager and a few others also forward the services for both the required type and the custom type.\r\nHowever other identity services dont, specifically the IUserStore.\r\nIn my application, I have some additional methods added to IUserStore so I need it under a more specific type, and it requires a \r\n`services.AddScoped(typeof(CustomStore), serviceFinder =\u003e serviceFinder.GetRequiredService(typeof(IUserStore\u003cCustomUser\u003e)));`\r\nIt just seems inconsistent that I have to forward the IUserStore service manually, but the UserManager and SignInManager and RoleManager, ect don\u0027t need to be.\r\n\r\nInterestingly enough, the AddUserStore() method also isn\u0027t doing any type validation whereas all the other methods do.\r\n\r\n### Describe the solution you\u0027d like\r\nI would like the implementation of AddUserStore()\r\nhttps://github.com/aspnet/AspNetCore/blob/master/src/Identity/Extensions.Core/src/IdentityBuilder.cs#L108\r\nto look more like that of AddUserManager()\r\nhttps://github.com/aspnet/AspNetCore/blob/master/src/Identity/Extensions.Core/src/IdentityBuilder.cs#L145\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONlfGxw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MDQ4Njk0Ng==",
                                           "createdAt":  "2019-11-06T20:29:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "We don\u0027t really expect users to use the store directly, we expect the managers to use it.\r\n\r\n@HaoK to look at the PR\r\n",
                                           "updatedAt":  "2019-11-06T20:29:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MDUxNzc2Ng==",
                                           "createdAt":  "2019-11-06T21:54:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "franchyd",
                                           "body":  "@blowdart I suppose the correct pattern for my extra UserStore functionality is an additional interface, TBH, it had been quite a while since I wrote my user store, and I had just noticed in my pipeline setup I was forwarding the service and thought it was odd.  I could accept not auto-forwarding the service, althought I see no real reason not to do it either.  However I would still say the strict type checking is worth bringing in.",
                                           "updatedAt":  "2019-11-06T21:54:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MDUyMTAzOQ==",
                                           "createdAt":  "2019-11-06T22:02:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Yup Hao will look at the PR as a starting point for 5.0",
                                           "updatedAt":  "2019-11-06T22:02:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde842Tqy3",
                                           "createdAt":  "2021-09-02T03:51:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "@HaoK @blowdart Looks like that PR was closed (unmerged) in July 2020. Is there anything to do here, or should this issue be closed?",
                                           "updatedAt":  "2021-09-02T03:52:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde842TtrL",
                                           "createdAt":  "2021-09-02T04:06:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "I think we can move it backlog or close, @blowdart do you have a preference between the two?",
                                           "updatedAt":  "2021-09-02T04:06:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde842Tt5V",
                                           "createdAt":  "2021-09-02T04:07:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Oof. backlog",
                                           "updatedAt":  "2021-09-02T04:07:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde842TuEi",
                                           "createdAt":  "2021-09-02T04:08:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-09-02T04:08:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde842V8bH",
                                           "createdAt":  "2021-09-02T14:05:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "franchyd",
                                           "body":  "Oh sorry, I had gotten busy at work around this time and forgotten about this.  I\u0027ll try to open a new PR with the changes requested (tests added) soonish.",
                                           "updatedAt":  "2021-09-02T14:05:13Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "AddUserStore should allow injection via IUserStore\u003cT\u003e as well as actual type",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "severity-nice-to-have",
                       "affected-very-few"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/15242",
        "createdAt":  "2019-10-21T18:33:20Z",
        "number":  15242,
        "author":  "ajcvickers",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCNgVuw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xtellurian",
                                            "createdAt":  "2019-10-21T22:12:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "keystroke",
                                            "createdAt":  "2022-02-08T01:56:03Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-11-21T20:29:26Z",
        "body":  "This basically means setting it up to use aggregates (i.e. documents) and to not attempt to join across aggregates. See https://github.com/aspnet/EntityFrameworkCore/issues/17314 for more information.\r\n\r\nNote for Identity triage: I don\u0027t think this is high priority given the extremely low usage of the EF Core Cosmos provider, but opening the issue here anyway for appropriate consideration and triage.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORezHkw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5OTAyNDQ4Mg==",
                                           "createdAt":  "2020-09-25T16:24:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-09-25T16:24:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MjA5NTU1MQ==",
                                           "createdAt":  "2021-02-02T23:50:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tyeth",
                                           "body":  "We were considering similar to https://github.com/dotnet/efcore/issues/17314  as we wanted to reduce the resources deployment burden in the cloud. This is a shame to see and running high availability SQL just for identity seems expensive in Azure.\r\n\r\nAlso don\u0027t you think that if the cosmos provider and identity dont work (basic examples would require this) then you wont see the usage numbers. I do appreciate you\u0027re maybe looking at installs but any developer worth their salt reads the docs first which say clearly it\u0027s limitations are severe, so no installation takes place.",
                                           "updatedAt":  "2021-02-03T00:04:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85F7MeT",
                                           "createdAt":  "2022-07-03T18:03:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "toiyabe",
                                           "body":  "Hello!\r\n\r\nI hope this thread is still alive because I have good news.  I just finished a Cosmos DB implementation for Identity, and I need people to try it out and provide feedback.  Here is the link to the project:\r\n\r\n[CosmosSoftware/AspNetCore.Identity.CosmosDb](https://github.com/CosmosSoftware/AspNetCore.Identity.CosmosDb)\r\n\r\nHere is the NuGet package:\r\n\r\n[AspNetCore.Identity.CosmosDb](https://www.nuget.org/packages/AspNetCore.Identity.CosmosDb)\r\n\r\nI want to give a shout-out to [Piero De Tomi](https://github.com/pierodetomi) who\u0027s excellent work to make a Cosmos DB provider for .Net 5!\r\n\r\nThis new project is refactored for .Net 6, includes unit tests, an example web project, and expanded support for more Identity features.\r\n\r\nThanks in advance for your feedback!",
                                           "updatedAt":  "2022-07-03T18:03:12Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Make the ASP.NET Core Identity model suitable for Cosmos",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "affected-few",
                       "severity-minor",
                       "triaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/17184",
        "createdAt":  "2019-11-17T21:10:50Z",
        "number":  17184,
        "author":  "kanadaj",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-03T08:39:08Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\nI\u0027ve noticed that the default 2FA implementation for Identity has lockout implementation for using an authentication code, but _not_ for using a 2FA recovery key inside `TwoFactorRecoveryCodeSignInAsync()`. And neither does this function check for lockouts.\r\n\r\nIs this intentional? Wouldn\u0027t this effectively expose any user to brute-force attacks against their recovery codes (as at this point the username and password are known, so lockout isn\u0027t incremented for login attempts).\r\n\r\nIn addition, I\u0027ve noticed that the comment for lockouts on Login.cshtml.cs is as follows:\r\n```cs\r\n// To enable password failures to trigger account lockout, set lockoutOnFailure: true\r\n```\r\n\r\nWouldn\u0027t it make more sense to advise it to be set as `lockoutOnFailure: !await _userManager.GetLockoutEnabledAsync(user)` in order to avoid DOS attacks on accounts with authenticators, and use the lockout on the authentication code? I\u0027m not entirely sure about this point so some additional insight would be welcome.\r\n\r\n### Describe the solution you\u0027d like\r\nCall `UserManager.AccessFailedAsync()` on bad 2FA Recovery code in the `SignInManager`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOldap0A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NTAzMTM3NQ==",
                                           "createdAt":  "2019-11-18T14:11:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "I\u0027m not convinced the recovery code should lockout, it feels like a very simple way to DoS an admin account. Recovery codes are special, they don\u0027t allow logins, unlike an MFA code.",
                                           "updatedAt":  "2019-11-18T14:11:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NTEzMzU4OA==",
                                           "createdAt":  "2019-11-18T17:56:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kanadaj",
                                           "body":  "@blowdart I believe you\u0027ve misunderstood. I\u0027m not talking about password recovery codes, but MFA recovery codes, used via `_signInManager.TwoFactorRecoveryCodeSignInAsync(recoveryCode);`. \r\n\r\nLockout at that point seems logical, since it implies the admin\u0027s password has been compromised and someone is trying to brute force their authenticator recovery codes, and that should very much warrant a forced password recovery.\r\n\r\nThe function in question: https://github.com/aspnet/AspNetCore/blob/4303bbe78650abf0bc6941d81956b02e4357feb5/src/Identity/Core/src/SignInManager.cs#L447",
                                           "updatedAt":  "2019-11-18T17:56:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NTEzNDg2Nw==",
                                           "createdAt":  "2019-11-18T18:00:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Ah.\r\n\r\nAs it\u0027s a breaking change it\u0027s something we\u0027d take in 5.0",
                                           "updatedAt":  "2019-11-18T18:00:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NTEzNTQ4Mg==",
                                           "createdAt":  "2019-11-18T18:01:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kanadaj",
                                           "body":  "As for the DoS vector, it feels like lockouts shouldn\u0027t be applied for the password sign in step for accounts with MFA enabled. As it is, it opens up an attack vector where you can lock out an admin permanently even without their password even if they have MFA enabled.\r\n\r\nFor reference I\u0027ve also observed the above issue on Microsoft\u0027s own sign-in system. I had to rotate my password on one of our business accounts weekly because, though the password was never acquired (never got the 2FA email), the account kept getting locked out due to password login attempts.",
                                           "updatedAt":  "2019-11-18T18:02:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NTYxNzA0Mg==",
                                           "createdAt":  "2019-11-19T17:26:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "We thought about this before, but it feels wrong to remove the lockout just because MFA is enabled. It would open up accounts to password stuffing, because you can just abandon the login attempt at the MFA prompt.",
                                           "updatedAt":  "2019-11-19T17:26:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NTYyMTg0MQ==",
                                           "createdAt":  "2019-11-19T17:37:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kanadaj",
                                           "body":  "While that\u0027s true, it still opens up accounts to DoS attacks and even rotating the password wouldn\u0027t fix that (since all you need for a lockout is the username/email address), so it doesn\u0027t seem like a good solution. \r\n\r\nOne solution I could see is sending username, password and MFA token at the same time to avoid the whole lock-out issue, potentially offered on the lock out page. This wouldn\u0027t open any more attack vectors, would it?\r\n\r\nEdit: I guess it would since then there is no lockout on the MFA attempts if the password is already known. What a pain.",
                                           "updatedAt":  "2019-11-19T17:40:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NTYyNDU0Mg==",
                                           "createdAt":  "2019-11-19T17:44:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Then we\u0027d have to store the password between pages, which is a rather bad idea security wise :)",
                                           "updatedAt":  "2019-11-19T17:44:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NTYyNTM1NA==",
                                           "createdAt":  "2019-11-19T17:46:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kanadaj",
                                           "body":  "No no I meant on a single page. Username+Password+MFA Code. I\u0027m not crazy enough to want to store the password between pages :)",
                                           "updatedAt":  "2019-11-19T17:47:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NTYzMzE4OQ==",
                                           "createdAt":  "2019-11-19T18:04:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "But then users get confused when they don\u0027t have MFA enabled, and we don\u0027t want to send a request back when a username is entered to see if MFA is enabled. \r\n\r\nIn all probability it\u0027s going to change again when we add FIDO2 support and move towards the username on a single screen, then on the next screen authentication details.",
                                           "updatedAt":  "2019-11-19T18:04:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MjM3MjA0Nw==",
                                           "createdAt":  "2020-06-11T02:44:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "slaneyrw",
                                           "body":  "We ditched the explicit recovery code methods and made our own TwoFactor provider for recovery code.",
                                           "updatedAt":  "2020-06-11T02:44:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MjYwNjk4OA==",
                                           "createdAt":  "2020-06-11T12:17:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brockallen",
                                           "body":  "IMO if whole lockout system in ASP.NET identity should get an overhaul. There\u0027s no brute force checking on onboarding phone or email either, and so they\u0027re brittle if they would prefer to use TOTP rather than code sent as a link in an email to verify (and we know links in email is passé). \r\n\r\nImagine someone changes a provider for email confirmation to be TOTP (because it\u0027s designed for easy toggling between types). Then I come in and register billg@microsoft.com and brute force the email confirmation (because no lockout checks on this). Then the system assumes aspects of my identity because I have \"confirmed\" the email. That\u0027s brittle, and it\u0027s hard to blame the app developer for understanding all those nuances to not trust the email when according to ASP.NET Identity the email is confirmed.",
                                           "updatedAt":  "2020-06-11T12:17:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MjYwODAzNw==",
                                           "createdAt":  "2020-06-11T12:20:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brockallen",
                                           "body":  "Also, authenticator confirmation is also broken: the authenticator key is generated and stored as part of the confirmation. Internally the presence of the authenticator key is enough for the system to think authenticator is enabled, despite the user not needing to have confirmed the key. I know the TwoFactor enabled flag is the guard against this, but it\u0027s ineffective of the system also used email or SMS as a MFA option. ",
                                           "updatedAt":  "2020-06-11T12:20:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0Mjc1Mzc5Ng==",
                                           "createdAt":  "2020-06-11T15:44:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kanadaj",
                                           "body":  "@brockallen To be fair, a normal 6-10 character TOTP code sent in the email is still far worse than sending a login link using ASP.NET Identity\u0027s verification token provider. The token in the login link would be 672 or 800 bits of entropy (depending on whether the user ID is known), 512 bits from the data protection key and 160 from the security token. I\u0027d say that\u0027s not going to be brute forced ever unless there is a security issue in the underlying algorithms.\r\n\r\nThat token system is also used for email verification during registration, so I highly doubt you can brute force the registration verification itself.\r\n\r\nThat said, emails have this nasty tendency to fly about the internet without encryption, so a MITM attack on the verification email is more concerning.",
                                           "updatedAt":  "2020-06-11T15:44:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NTA2ODk3Mg==",
                                           "createdAt":  "2020-06-16T23:55:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "slaneyrw",
                                           "body":  "@kanadaj Sending links in email is not practicable for two factor challenges, clicking on it will ( at best ) open a separate window/tab, forking the sign in session.  If one window is a \"private\" browser window, game over.  Links in SMS channels is just plain bad.  So TOTP codes is the only way to go if you need to use these channels.\r\n\r\n@brockallen We solved the lockout problem by extending the schema and adding a \"Codes\" table that stores a purpose and lockout information.  Now we can lock on an individual purpose ( channel + value ) and aggregate up for an overall user lock.\r\n\r\nThere is no real perfect way of doing 2FA without use of a third party external system.  Email and SMS channels can be intercepted.  Auth Apps require a shared secret ( you could argue Email and Phone are also a pre-shared secret).  But they are better than nothng.\r\n\r\nFor us, the TwoFactor information is now stored as a claim which contains a flag for enabled.  TOTP (Authenticator app) and recovery code entries store the shared secret, but phone and email do not.  Neither do some other OTP implementations like SymanticVIP or RSA token systems.  \r\n\r\nPhone and Email can combine an extra piece of entropy when generating a TOTP code that makes codes validate for 1 session invalid for another, but Auth App and Recovery codes cannot add more entropy.\r\n\r\nBecause the TwoFactor metadata is stored in a claim, we don\u0027t have to use the single Phone or Email address on the user record and can have multiple/alternate for any given channel\r\n\r\nAll this is missing from the default Identity implementation and cannot be added without replacing the entire 2FA system, including the SignInManager.",
                                           "updatedAt":  "2020-06-16T23:55:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NTQzOTg3OQ==",
                                           "createdAt":  "2020-06-17T15:18:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brockallen",
                                           "body":  "\u003e @brockallen We solved the lockout problem by extending the schema and adding a \"Codes\" table that stores a purpose and lockout information. Now we can lock on an individual purpose ( channel + value ) and aggregate up for an overall user lock.\r\n\r\nYes, I\u0027ve done something similar in my projects.\r\n\r\n\u003e All this is missing from the default Identity implementation and cannot be added without replacing the entire 2FA system, including the SignInManager.\r\n\r\nAnd yes, this is the important point here. The SignInManager, for real projects, is not usable. It needs to be overly customized (brittle), or simply replaced. ",
                                           "updatedAt":  "2020-06-17T15:18:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MjE4NDUyNQ==",
                                           "createdAt":  "2021-02-19T16:28:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-02-19T16:28:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde841C9V_",
                                           "createdAt":  "2021-07-30T15:26:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AnthonyMastrean",
                                           "body":  "We are finding this comment from @brockallen to be extremely true...\r\n\r\n\u003e The SignInManager, for real projects, is not usable. It needs to be overly customized (brittle), or simply replaced.\r\n\r\nWe\u0027re implementing features in order to comply with both DISA STIG and NIAP Common Criteria for an ASP.NET MVC/WebAPI project deployed within the Department of Defense and we\u0027re very close to replacing the `UserManager` and `SignInManager` entirely. \r\n\r\nWe already had to write a whole session store from scratch and are fighting the design of the cookie authentication handler and its options and session store lifecycle 🙄 .\r\n",
                                           "updatedAt":  "2021-07-30T15:26:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde853lyGe",
                                           "createdAt":  "2024-03-19T09:00:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD9QTCw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DoxxableSetanta",
                                                                               "createdAt":  "2024-04-03T11:18:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ihordyrman",
                                                                               "createdAt":  "2024-12-02T19:18:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "pampua84",
                                           "body":  "The problem seems to still be present on the method:\r\n\r\n`TwoFactorRecoveryCodeSignInAsync`\r\n\r\n Will there be improvements on this?  @blowdart ",
                                           "updatedAt":  "2024-03-19T09:00:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86V1qnQ",
                                           "createdAt":  "2024-12-03T08:39:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ihordyrman",
                                           "body":  "The absence of a locking mechanism in 2FA recovery code verification is counterintuitive since you have it on 2FA OTP validation by default.\nI was quite surprised to discover this. \nAnd could just imagine how many people left it as it is with a default implementation, which makes it possible to easily brute force recovery code.",
                                           "updatedAt":  "2024-12-03T08:39:07Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "2FA Recovery Code login doesn\u0027t have lockout",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "affected-most",
                       "severity-minor"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/17232",
        "createdAt":  "2019-11-19T16:29:42Z",
        "number":  17232,
        "author":  "brockallen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-06T22:03:29Z",
        "body":  "Many methods on the SignInManager provide the lockout semantics for user credential validation, but they also contain the code to manage/issue cookies (signin, MFA, etc). It would be nice to break those up, as many workflows require those checks, but perhaps additional custom checks before issuing the main login cookie, or MFA cookie. One such example would be additional risk assessment logic at login time. We want to validate the credentials with the lockout checks, but prior to issuing the cookie we want additional custom logic to inform the UI workflow (another example would be forced password reset due to suspected breach). In my proposal the UI layer would be responsible for issuing the cookie, not the identity layer.\r\n\r\nAs of now, the UI layer calls a method on the SignInManager and you will get back a positive result that it\u0027s the right user/creds, but then it\u0027s too late for the UI to take over a workflow because the main login cookie has already been issued.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcxYZFw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NTU5OTQ0Mw==",
                                           "createdAt":  "2019-11-19T16:49:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "We do take pull requests ;)\r\n\r\nMore seriously Identity isn\u0027t scheduled for any major work right now for 5.0, and this does feel reasonably major. So I\u0027m putting it in the backlog for now, and I\u0027ll see if we can find time.",
                                           "updatedAt":  "2019-11-19T16:49:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NTYyMTQ1Mw==",
                                           "createdAt":  "2019-11-19T17:36:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brockallen",
                                           "body":  "This would also be required to support FIDO2, methinks, given those workflows.",
                                           "updatedAt":  "2019-11-19T17:37:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85MYEiv",
                                           "createdAt":  "2022-10-17T19:36:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "Moving to 8.0 for consideration with some of the Jwt work",
                                           "updatedAt":  "2022-10-17T19:36:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85MYEnk",
                                           "createdAt":  "2022-10-17T19:36:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-10-17T19:36:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85qrp9v",
                                           "createdAt":  "2023-11-01T23:28:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "I think we can close this issue now that #47232 is addressed which added support for account lockout using `SignInManager` with `IdentityConstants.BearerScheme` via [`SignInManager\u003cTUser\u003e.AuthenticationScheme`](https://github.com/dotnet/aspnetcore/issues/47232#issuecomment-1683086875).\r\n\r\n@brockallen Do you agree?",
                                           "updatedAt":  "2023-11-01T23:28:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85qrp__",
                                           "createdAt":  "2023-11-01T23:28:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Hi @brockallen. We have added the \"Needs: Author Feedback\" label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
                                           "updatedAt":  "2023-11-01T23:28:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85qvW95",
                                           "createdAt":  "2023-11-02T14:03:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brockallen",
                                           "body":  "Well, IIRC, my original intent is that I did not want any authN scheme to be triggered if login was success or failure, but I wanted the locking behavior in tact. I did not look closely enough at the new code around this new property you reference, so I\u0027m unsure if that changed really gives this at all. Are you suggesting we set this to some \"dummy\" value to achieve what I was asking?",
                                           "updatedAt":  "2023-11-02T14:03:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85zFhkX",
                                           "createdAt":  "2024-02-06T22:03:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2024-02-06T22:03:28Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Decouple password validation/lockout APIs from cookie management",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "affected-few",
                       "severity-major"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/20085",
        "createdAt":  "2020-03-23T22:12:37Z",
        "number":  20085,
        "author":  "mwhouser",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2020-10-06T20:39:16Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\n\r\nI want my login, registration, etc. pages to use a different `_Layout.cshtml` than my \"authenticated\" layout.\r\n\r\nAs such, I need to scaffold out **every single page in Identity** to signify a different `Layout` property value.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nIn the current Identity scaffolding, I can scaffold `Manage\\Layout`, but that only applies to the \"manage\" pages.\r\n\r\nI\u0027d like to see other `Layout` scaffolds that can apply to the remainder of the pages, especially the ones that apply to unauthenticated users.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOI_Bwxg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwMjk2MDA3MA==",
                                           "createdAt":  "2020-03-24T01:48:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Backlogging until we have an identity sprint again",
                                           "updatedAt":  "2020-03-24T01:48:38Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Identity: Add Layout Scaffolding",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "affected-few",
                       "severity-minor"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/22170",
        "createdAt":  "2020-05-23T15:31:48Z",
        "number":  22170,
        "author":  "aguacongas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2020-10-10T00:02:40Z",
        "body":  "### Describe the bug\r\nWhen a client configuration doesn\u0027t not contains a Profile property the [AutoRedirectEndSessionEndpoint](https://github.com/dotnet/aspnetcore/blob/35628a67800a3e269eb375989d2fffa9d67b8dbf/src/Identity/ApiAuthorization.IdentityServer/src/Extensions/AutoRedirectEndSessionEndpoint.cs#L60) doesn\u0027t redirect to the configured post logout uri but to UserInteraction.LogoutUrl.  \r\n\r\nIMO it\u0027s a bug, the profile type is not required nor used in this code. But `result.ValidatedRequest.PostLogOutUri` should be validated.\r\n\r\n### To Reproduce\r\n- Add client to the IdentityServer configuration with a PostLogoutUri and without Profile property.\r\n- Login/Logout\r\nThe client loged out screen is not displayed.\r\n``` C#\r\nnew Client\r\n{\r\n    ClientClaimsPrefix = null,\r\n    ClientId = \"theidserver-swagger\",\r\n    ClientName = \"TheIdServer Swagger UI\",\r\n    AllowedGrantTypes = GrantTypes.Implicit,\r\n    RequireClientSecret = false,\r\n    BackChannelLogoutSessionRequired = false,\r\n    FrontChannelLogoutSessionRequired = false,\r\n    RedirectUris =\r\n    {\r\n        \"https://localhost:5443/login.html\",\r\n    },\r\n    PostLogoutRedirectUris = \r\n    {\r\n        \"https://localhost:5443/logedout.html\",\r\n    },\r\n    AllowedCorsOrigins =\r\n    {\r\n        \"https://localhost:5443\",\r\n    },\r\n    AllowedScopes = { \"theidserveradminapi\" },\r\n    AllowAccessTokensViaBrowser = true\r\n}\r\n```\r\n\r\n### Further technical details\r\n- ASP.NET Core version 3.1.4\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKao3Yg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzNDg2OTc4OA==",
                                           "createdAt":  "2020-05-27T18:51:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "@javiercn Thoughts please :)",
                                           "updatedAt":  "2020-05-27T18:51:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzNTI1OTkyNw==",
                                           "createdAt":  "2020-05-28T10:35:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "@blowdart We only redirect apps that are defined through our APIs and have a profile. That\u0027s deliberate to allow composing with IS if the user decides to add extra apps.\r\n\r\nWe can take a look at what IS does in this case and do the same for apps defined without a profile.",
                                           "updatedAt":  "2020-05-28T10:35:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzNTM3MDA2MQ==",
                                           "createdAt":  "2020-05-28T14:03:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "@HaoK can you work with Javier to figure out what identity server does here and match it in our helpers?",
                                           "updatedAt":  "2020-05-28T14:03:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5OTAyMTE1NA==",
                                           "createdAt":  "2020-09-25T16:17:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-09-25T16:17:38Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "AutoRedirectEndSessionEndpoint doesn\u0027t redirect to the configured PostLogoutUri",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "affected-few",
                       "severity-minor"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/22815",
        "createdAt":  "2020-06-11T07:56:39Z",
        "number":  22815,
        "author":  "slaneyrw",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2020-10-06T18:51:18Z",
        "body":  "\u003c!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\n--\u003e\r\n\r\n### Is your feature request related to a problem? Please describe.\r\nNot really, trying to optimise \"database\" access for common scenarios, especially non SQL backends\r\n\r\n### Describe the solution you\u0027d like\r\nWhen UserManager.UpdateAsync(user) is invoked, the UserValidator\u0026lt;T\u0026gt;.ValidateAsync is invoked.  This eventually calls UserStore.FindByName to validate the username is unique in the system and matches the current user if found.\r\n\r\nIf the username hasn\u0027t changed ( rerun manager.NormalizeName and check against user.NormalizedUserName? ) then why check if the username is unique... that has already been checked on creation.\r\n\r\n### Additional context\r\n\r\nSame for ValidateEmail",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "UserValidator.ValidateUserName  - FindByName check could be bypassed if username has not changed",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "severity-nice-to-have",
                       "affected-very-few"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/24197",
        "createdAt":  "2020-07-22T11:13:13Z",
        "number":  24197,
        "author":  "michaeldz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBWk3Qw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "smallprogram",
                                            "createdAt":  "2020-11-12T14:21:11Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2020-10-10T00:06:40Z",
        "body":  "I have multiply clients - SPA and regular Server Web Application. \r\nSPA and Identity server hosted together. Server-side Web App hosted on other site.\r\nI used template for creating Identity server and SPA:\r\n```\r\ndotnet new blazorwasm --hosted --auth Individual\r\n```\r\n\r\nI defined client for SPA:\r\n```\r\n  \"IdentityServer\": {\r\n    \"Clients\": {\r\n      \"MySPA\": {\r\n        \"Profile\": \"IdentityServerSPA\"\r\n      }\r\n```\r\n\r\nFor server side web application I have no ability to define configuration because there is no suitable profile.\r\n\r\nIt will be nice to have one more profile \u0027Server\u0027 (or something like) for server-side web application. It should works like SPA but also assign client secret.\r\n\r\nThere is method `WithClientSecret` in ClientsBuilder but marked as \u0027internal\u0027. Also `ClientSecret` property defined in `ClientDefinition` class but nowhere called. This could be used for implementation.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJ4etsw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MjQzNzAxNQ==",
                                           "createdAt":  "2020-07-22T12:57:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "@michaeldz thanks for contacting us.\r\n\r\nOur current integration with Identity Server is for SPA applications only. You can configure a web application in the same way you do today in IdentityServer by adding it to the list of Clients in the options. We don\u0027t have configuration support for that at the moment.",
                                           "updatedAt":  "2020-07-22T12:57:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MjQzNzE1NA==",
                                           "createdAt":  "2020-07-22T12:57:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-07-22T12:57:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzIwMzI1MQ==",
                                           "createdAt":  "2020-07-23T19:58:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michaeldz",
                                           "body":  "If I configure clients outside scope of the configuration process of the library I\u0027ll have two configuration places - for SPA (or other supported by the library) and for other clients. This adds complexity for deployment. But I understand your position you should not support all possible cases for configuring clients.\r\nSo maybe it will be better solution to have ability to extend somehow the client configuration mechanism perhaps thru DI.",
                                           "updatedAt":  "2020-07-23T19:58:48Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Identity Server: new Application Profile for Server Web App",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "severity-minor",
                       "affected-medium"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/25074",
        "createdAt":  "2020-08-20T15:38:15Z",
        "number":  25074,
        "author":  "MikeAlhayek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2020-10-06T20:38:54Z",
        "body":  "\u003c!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\n--\u003e\r\n\r\n### Is your feature request related to a problem? Please describe.\r\nI want to temporary prevent users from registering new users. Without much code, I am unable to do it. Its seems to be a common things to do.\r\n\r\n### Describe the solution you\u0027d like\r\nThe `IdentityOptions` class should have a property called `AllowRegistration` which should be set to `true` by default. If a user attempt to register new account, he/she will get blocked.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKItObQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MDIxODIyMQ==",
                                           "createdAt":  "2020-08-25T19:12:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-08-25T19:12:30Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "We should be able to enable/disable new user registration from the configuration",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "affected-few",
                       "severity-minor"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/25556",
        "createdAt":  "2020-09-03T04:58:18Z",
        "number":  25556,
        "author":  "benaadams",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBxc4Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "joakimriedel",
                                            "createdAt":  "2020-09-03T07:25:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2020-09-05T06:50:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mguinness",
                                            "createdAt":  "2020-12-22T18:28:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tsu1980",
                                            "createdAt":  "2022-09-06T07:36:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "06b",
                                            "createdAt":  "2023-06-16T22:18:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Vlaaaaaaad",
                                            "createdAt":  "2025-04-27T14:28:25Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2023-11-21T20:29:27Z",
        "body":  "https://web.dev/change-password-url/\r\n\r\nSet a redirect from `/.well-known/change-password` to the change password page of website. This will enable password managers to navigate your users directly to that page.\r\n\r\n## Browser compatibility \r\nA well-known URL for changing passwords has been supported in Safari since 2019. Chrome\u0027s password manager is starting to support it from version 86 onwards (which is scheduled for Stable release in late October 2020) and other Chromium-based browsers may follow. Firefox considers it worth implementing, but has not signalled that it plans to do so as of August 2020.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKOqyZg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NjQ2OTczNA==",
                                           "createdAt":  "2020-09-03T12:55:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-09-03T12:55:31Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Support /.well-known/change-password url for changing passwords",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "affected-most",
                       "severity-minor",
                       "triaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/25788",
        "createdAt":  "2020-09-10T21:46:41Z",
        "number":  25788,
        "author":  "sherif-elmetainy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2020-10-06T20:48:19Z",
        "body":  "### Describe the bug\r\nIn the Microsoft.AspNetCore.Identity.UI package, the StringLength validation for the password in registration form is [hardcoded to 6](https://github.com/dotnet/aspnetcore/blob/v3.1.8/src/Identity/UI/src/Areas/Identity/Pages/V4/Account/Register.cshtml.cs).\r\nSo changing the `PasswordOptions.RequiredLength` property in Startup.cs has no effect on the validation.\r\n\r\nAnd you can look in [Source Code](https://github.com/dotnet/aspnetcore/blob/v3.1.8/src/Identity/UI/src/Areas/Identity/Pages/V4/Account/Register.cshtml.cs) that `Password` property has the following attributes:\r\n\r\n```csharp\r\n[Required]\r\n[StringLength(100, ErrorMessage = \"The {0} must be at least {2} and at max {1} characters long.\", MinimumLength = 6)]\r\n[DataType(DataType.Password)]\r\n[Display(Name = \"Password\")]\r\npublic string Password { get; set; }\r\n```\r\nWhich is as you can see the length is hardcoded.\r\n\r\nThe [Reset Password](https://github.com/dotnet/aspnetcore/blob/v3.1.8/src/Identity/UI/src/Areas/Identity/Pages/V4/Account/ResetPassword.cshtml.cs) and [Change Password](https://github.com/dotnet/aspnetcore/blob/v3.1.8/src/Identity/UI/src/Areas/Identity/Pages/V4/Account/Manage/ChangePassword.cshtml.cs) also have the same hardcoded value.\r\n\r\n### To Reproduce\r\n1. Create a new Asp.NET Core Web Application with following options: WebApplication (Model-View-Controller) and Individual User Account calculator.\r\n2. In startup.cs change identity options as follows:\r\n```csharp\r\nservices.AddDefaultIdentity\u003cIdentityUser\u003e(options =\u003e\r\n{\r\n    options.SignIn.RequireConfirmedAccount = true;\r\n    options.Password.RequiredLength = 4; // This line is changing the default\r\n}).AddEntityFrameworkStores\u003cApplicationDbContext\u003e();\r\n```\r\n3. Run the application, go the the Register Page, Enter a 4 letter password.\r\n\r\n### Expected Output\r\nPassword of length 4 chars or more should be accepted to match the setting for `RequiredLength` property.\r\n### Actual Output\r\nPassword validation fails and the validation message indicates minimum length is 6 characters.\r\n\r\n### Exceptions (if any)\r\nNo exceptions are thrown\r\n\r\n### Further technical details\r\n- ASP.NET Core version: 3.1.8\r\n- dotnet --info \r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.402\r\n Commit:    9b5de826fd\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19041\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.402\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.8\r\n  Commit:  9c1330dedd\r\n\r\n.NET Core SDKs installed:\r\n  3.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.22 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.22 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.22 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n- Visual Studio 2019 Version 16.7.3\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKTS7FA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MDk5MDYwMg==",
                                           "createdAt":  "2020-09-11T09:45:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "@HaoK validation attributes need to be constants at compile time do they not? So we can\u0027t affect the form ui without a custom validation attribute?",
                                           "updatedAt":  "2020-09-11T09:45:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MTAwMDk5Ng==",
                                           "createdAt":  "2020-09-11T10:05:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "Yup, I think that\u0027s the main issue that it needs to be a constant",
                                           "updatedAt":  "2020-09-11T10:05:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MTMwNzc3OQ==",
                                           "createdAt":  "2020-09-11T20:55:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "@sherif-elmetainy Do you really want such a short password? What\u0027s the use case here? I\u0027m inclined to just mark this as won\u0027t fix, but I\u0027d like to know your needs here",
                                           "updatedAt":  "2020-09-11T20:55:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MTMxMzMyMQ==",
                                           "createdAt":  "2020-09-11T21:09:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sherif-elmetainy",
                                           "body":  "\u003e @sherif-elmetainy Do you really want such a short password? What\u0027s the use case here? I\u0027m inclined to just mark this as won\u0027t fix, but I\u0027d like to know your needs here\r\n\r\n@blowdart . The 4 in the issue was just an example. The issue applies whether `RequiredLength ` is set to 4 or 8 or whatever.  The validator behavior doesn\u0027t match the `RequiredLength` setting for any value except for the hardcoded 6.\r\n\r\nLet\u0027s say I set to minimum Length to 8. User enters a 5 char password. Validator client side message will tell him/her length must be 6 or more. He/she enters a 6 letter password, client validation will pass, submit form, then the server update will fail and now he gets a message that it\u0027s actually 8. It\u0027s confusing when users gets a message that min length is 6, then enters a 6 letter password then the server replies \"sorry I meant 8\".\r\n\r\nSo it is not about me wanting a short password or a long password. It\u0027s about weird behavior. ",
                                           "updatedAt":  "2020-09-11T21:09:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MTMxNDU2Nw==",
                                           "createdAt":  "2020-09-11T21:13:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Hmm probably best to remove it entirely then. We\u0027ll look at this for 6.0",
                                           "updatedAt":  "2020-09-11T21:13:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MTMxNDYzNA==",
                                           "createdAt":  "2020-09-11T21:13:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-09-11T21:13:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MTMxOTYzMw==",
                                           "createdAt":  "2020-09-11T21:27:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "Yeah in the old days when the attribute was in the app, it was at least possible for them to keep in sync, getting rid of the client side validation seems better I guess",
                                           "updatedAt":  "2020-09-11T21:27:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MTMyMTYyMA==",
                                           "createdAt":  "2020-09-11T21:33:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sherif-elmetainy",
                                           "body":  "\u003e Hmm probably best to remove it entirely then. We\u0027ll look at this for 6.0\r\n\r\nYes, I think removing the attribute entirely might be a good idea. I just looked at source code, and found that if the developer injects a custom service implementing `IPasswordValidator`, the entire `PasswordOptions` object will not be checked at all. So a custom attribute will have to be server side only which is already implemented without an attribute. ",
                                           "updatedAt":  "2020-09-11T21:33:27Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Identity UI Password validation has string length is hardcoded to 6",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "affected-few",
                       "severity-minor"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/26279",
        "createdAt":  "2020-09-24T16:31:48Z",
        "number":  26279,
        "author":  "joshua-phillips",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOB3wvfQ==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "AnthonyMastrean",
                                            "createdAt":  "2021-08-25T17:26:50Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-02-17T03:18:39Z",
        "body":  "\u003c!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\nPlease keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.\r\n\r\nIf you believe you have an issue that affects the SECURITY of the platform, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.\r\nFor other types of questions, consider using [StackOverflow](https://stackoverflow.com).\r\n\r\n--\u003e\r\n\r\n### Describe the bug\r\nWhen not using the `DefaultInboundClaimTypeMap` then `SignInManager.GetExternalLoginInfoAsync` is returning null because the name identifier claim can\u0027t be found.\r\n\r\nI believe issue #17646 was referring to the same problem\r\n\r\n### To Reproduce\r\n\u003c!--\r\nWe ❤ code! Point us to a minimalistic repro project hosted in a GitHub repo.\r\nFor a repro project, create a new ASP.NET Core project using the template of your your choice, apply the minimum required code to result in the issue you\u0027re observing.\r\n\r\nWe will close this issue if:\r\n- the repro project you share with us is complex. We can\u0027t investigate custom projects, so don\u0027t point us to such, please.\r\n- if we will not be able to repro the behavior you\u0027re reporting\r\n--\u003e\r\nFor example in my `Startup.ConfigureServices` if I have\r\n```\r\n            JwtSecurityTokenHandler.DefaultInboundClaimTypeMap.Clear();\r\n\r\n...\r\n\r\n            services.Configure\u003cIdentityOptions\u003e(options =\u003e {\r\n                options.ClaimsIdentity.UserIdClaimType = \"sub\";\r\n            });\r\n```\r\n\r\nThen in my ExternalLogin.cshtml.cs the templated code is\r\n```\r\n        public async Task\u003cIActionResult\u003e OnGetCallbackAsync(string returnUrl = null, string remoteError = null) {\r\n...\r\n            var info = await _signInManager.GetExternalLoginInfoAsync();\r\n            if (info == null)\r\n            {\r\n                ErrorMessage = \"Error loading external login information.\";\r\n                return RedirectToPage(\"./Login\", new { ReturnUrl = returnUrl });\r\n            }\r\n...\r\n        }\r\n```\r\n\r\ninfo is always null because the `SignInManager` uses the following code\r\n```\r\n        public virtual async Task\u003cExternalLoginInfo\u003e GetExternalLoginInfoAsync(string expectedXsrf = null) {\r\n...\r\n            var providerKey = auth.Principal.FindFirstValue(ClaimTypes.NameIdentifier);\r\n            var provider = items[LoginProviderKey] as string;\r\n            if (providerKey == null || provider == null)\r\n            {\r\n                return null;\r\n            }\r\n...\r\n        }\r\n```\r\n\r\nInstead of using the injected `IdentityOptions` that was configured in my `Startup.ConfigureServices` method\r\n```\r\n        public virtual async Task\u003cExternalLoginInfo\u003e GetExternalLoginInfoAsync(string expectedXsrf = null) {\r\n...\r\n            var providerKey = auth.Principal.FindFirstValue(Options.ClaimsIdentity.UserIdClaimType);\r\n            var provider = items[LoginProviderKey] as string;\r\n            if (providerKey == null || provider == null)\r\n            {\r\n                return null;\r\n            }\r\n...\r\n        }\r\n```\r\n\r\n### Exceptions (if any)\r\n\u003c!-- \r\nInclude the exception you get when facing this issue\r\n--\u003e\r\n\r\n### Further technical details\r\n- ASP.NET Core version\r\n- Include the output of `dotnet --info`\r\n- The IDE (VS / VS Code/ VS4Mac) you\u0027re running on, and it\u0027s version\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.301\r\n Commit:    7feb845744\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.301\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.5\r\n  Commit:  65cd789777\r\n\r\n.NET Core SDKs installed:\r\n  3.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLoH1_A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODQ1NDQzMw==",
                                           "createdAt":  "2020-09-24T16:33:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joshua-phillips",
                                           "body":  "Also possibly related to #23134",
                                           "updatedAt":  "2020-09-24T16:33:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5OTAxNDYwNw==",
                                           "createdAt":  "2020-09-25T16:04:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\nWe\u0027re moving this issue to the `Next sprint planning` milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-09-25T16:04:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5OTAxNDc0MQ==",
                                           "createdAt":  "2020-09-25T16:04:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pranavkm",
                                           "body":  "Would you be interested in sending us a PR to address this?",
                                           "updatedAt":  "2020-09-25T16:04:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzA5NjM3MQ==",
                                           "createdAt":  "2020-10-03T12:32:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sanyam142mittal",
                                           "body":  "I would like to work on this if that\u0027s okay.",
                                           "updatedAt":  "2020-10-03T12:32:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMDYwODAyNw==",
                                           "createdAt":  "2020-11-02T17:17:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "Note: the fix for this should be to introduce a new ExternalClaimUserId property which sign in manager would use, the current options should be focused soley on the cookie identity generates, its not appropriate for the same flag to configure both.  Sound reasonable @blowdart ?",
                                           "updatedAt":  "2020-11-02T17:17:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMDYwODQ0MA==",
                                           "createdAt":  "2020-11-02T17:17:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "@sanyam142mittal is this something that still interests you?",
                                           "updatedAt":  "2020-11-02T17:17:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMDYzNjM4OA==",
                                           "createdAt":  "2020-11-02T18:07:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Why isn\u0027t it appropriate for both? (just to be clear)",
                                           "updatedAt":  "2020-11-02T18:07:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMDY0NDA0NQ==",
                                           "createdAt":  "2020-11-02T18:21:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "You can think of the external claim as what we expect the external providers to generate, this is up to each of the, google/facebook, they control that via their sign in configuration, so this switch is likely not going to work well in cases with multiple incoming external identities, as many of the providers don\u0027t have any mechanism to configure it.  \r\n\r\nIf we want to allow configuration of this at all, it needs a separate option specifically for this method.  We just happen to use the same default for the name identifier claim when writing out the cookie, they really are not the same thing.",
                                           "updatedAt":  "2020-11-02T18:21:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMjk2MjE4Nw==",
                                           "createdAt":  "2020-11-06T08:59:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sanyam142mittal",
                                           "body":  "\u003e @sanyam142mittal is this something that still interests you?\r\n\r\nYes, I would like to try this out",
                                           "updatedAt":  "2020-11-06T08:59:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NzEwNzgxOQ==",
                                           "createdAt":  "2021-01-25T20:57:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-01-25T20:57:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NzEwODExNw==",
                                           "createdAt":  "2021-01-25T20:58:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Moving out as the external auth flow is fragile and needs careful testing. The interaction in all the parts aren\u0027t clear and a large risk of breakage.",
                                           "updatedAt":  "2021-01-25T20:58:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MDI2OTA1Mg==",
                                           "createdAt":  "2021-02-17T03:18:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "henryblacketer",
                                           "body":  "Is there any update to this issue?  This is a frustrating issue for my team and I\u0027m reticent to work around it by mucking around in the internals of the Identity framework.",
                                           "updatedAt":  "2021-02-17T03:18:39Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "SignInManager using ClaimTypes instead of IdentityOptions.ClaimsIdentity where appropriate",
        "labels":  [
                       "bug",
                       "Needs: Design",
                       "area-identity",
                       "affected-few",
                       "severity-minor"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/27088",
        "createdAt":  "2020-10-21T09:28:49Z",
        "number":  27088,
        "author":  null,
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_iM3w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cedricfronteau",
                                            "createdAt":  "2020-10-21T11:30:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dimio5",
                                            "createdAt":  "2021-03-10T10:06:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "idimakosprofilesw",
                                            "createdAt":  "2021-03-11T12:20:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mguinness",
                                            "createdAt":  "2021-06-17T01:00:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "unitondev",
                                            "createdAt":  "2023-04-13T11:28:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "codelovercc",
                                            "createdAt":  "2023-08-14T13:55:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xshaheen",
                                            "createdAt":  "2023-10-12T17:20:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MichelJansson",
                                            "createdAt":  "2023-10-30T10:53:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "marcelpotirnac",
                                            "createdAt":  "2023-11-11T18:35:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2024-06-26T04:26:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "matatouille",
                                            "createdAt":  "2025-01-09T10:56:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Temoeri-sys",
                                            "createdAt":  "2025-02-11T16:03:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cheng93",
                                            "createdAt":  "2025-02-27T10:31:38Z"
                                        }
                                    ],
                          "totalCount":  13
                      },
        "updatedAt":  "2024-07-09T17:59:19Z",
        "body":  "Hello, \r\n\r\nI have some security concerns regarding the default value of 3 minutes for time-step. It seems very long.\r\nhttps://github.com/dotnet/aspnetcore/blob/ce16ff0a51a74811674228835696e5cc78494fd7/src/Identity/Extensions.Core/src/Rfc6238AuthenticationService.cs#L14\r\n\r\nIn addition allowing variance of two steps ahead and behind make the window even larger.\r\nhttps://github.com/dotnet/aspnetcore/blob/ce16ff0a51a74811674228835696e5cc78494fd7/src/Identity/Extensions.Core/src/Rfc6238AuthenticationService.cs#L101-L113\r\n\r\n[RFC](https://tools.ietf.org/html/rfc6238) recommends a time-step size of 30 seconds and a time-step window of less than 10 minutes.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhDkHwQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMzUyOTQwOA==",
                                           "createdAt":  "2020-10-21T12:21:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-10-21T12:21:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMDA3MzQzMw==",
                                           "createdAt":  "2020-11-01T11:26:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "After analysis, it would seem that the values defined in the `Rfc6238AuthenticationService` are mainly used to generate tokens sent by SMS (`PhoneNumberTokenProvider`)\r\n\r\nThe values to generate time-based one-time password used for authenticator code verification (Like Google or Microsoft Authenticator) are redefined in the `AuthenticatorTokenProvider` class.\r\nThese values appear consistent with the recommendations described in the RFC.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/65e933ec70c16c40324129fca23032826631b234/src/Identity/Extensions.Core/src/AuthenticatorTokenProvider.cs#L57-L68\r\n\r\nIt seems to be a good idea to make the values defined in the `Rfc6238AuthenticationService` class configurable to:\r\n\r\n- Avoid duplicating part of the algorithm in the `AuthenticatorTokenProvider` class.\r\n- Have the possibility to modify the lifetime of the tokens sent by SMS",
                                           "updatedAt":  "2020-11-01T11:26:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NjUyMzcwNw==",
                                           "createdAt":  "2021-03-11T07:21:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "idimakosprofilesw",
                                           "body":  "Hello, what would be the steps to help bring this forward?\r\nWe are interested in having this in the next LTS.\r\n\r\nCould you provide some guidance in terms of the way this would need to be configurable?\r\n\r\ncc @mkArtakMSFT @davidfowl ",
                                           "updatedAt":  "2021-03-29T13:30:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTM4NTMwNg==",
                                           "createdAt":  "2021-03-29T13:40:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "cc @javiercn @blowdart ",
                                           "updatedAt":  "2021-03-29T13:40:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTM4Njg5Mg==",
                                           "createdAt":  "2021-03-29T13:42:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "We haven\u0027t been prepared to make this a more public api due to support concerns. This hasn\u0027t changed. Unless @mkArtakMSFT wants to take the dev burden it will remain not public.",
                                           "updatedAt":  "2021-03-29T13:42:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTM5MTI2Mg==",
                                           "createdAt":  "2021-03-29T13:48:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@idimakosprofilesw Can you make a case for why it should be public? What would it help in your scenario? That hasn\u0027t been clearly expressed in this issue as yet.",
                                           "updatedAt":  "2021-03-29T13:48:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTQxMDQ4MQ==",
                                           "createdAt":  "2021-03-29T14:12:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCeBp5g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "huanbd",
                                                                               "createdAt":  "2022-05-22T06:53:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "idimakosprofilesw",
                                           "body":  "@davidfowl thank you for your time.\r\n\r\nWe are using PhoneNumberTokenProvider from AspNetIdentity to generate SMS OTP codes for two factor authentication for the end users of our application.\r\nAn example repo of a similar approach can be found here: https://github.com/Jurabek/IdentityServer4.PhoneNumberAuth/blob/master/IdentityServer4.PhoneNumberAuth/Controllers/VerifyPhoneNumberController.cs#L107\r\n\r\nHowever, the API enforces:\r\n9 minutes expiry time\r\n3 minutes of time step\r\n\r\nIn our business (mobile banking), these time windows are too large. \r\nMore sensible for us would be 2 minutes expiry and 1 minute time step.\r\n\r\nThese values are hardcoded into the source of AspNetIdentity, and there is no clear way on how to extend them other than to fork these services (or to workaround it in the application layer)\r\nSo, before forking, we thought to get in touch with you first to see if there is a way to contribute.",
                                           "updatedAt":  "2021-03-29T14:12:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTQxNTc0NQ==",
                                           "createdAt":  "2021-03-29T14:18:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@blowdart this seems reasonable. Is there a reason not to expose these settings? (other than the usual, due diligence we do when we expose APIs?)",
                                           "updatedAt":  "2021-03-29T14:18:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTQzMTc5Nw==",
                                           "createdAt":  "2021-03-29T14:36:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "It\u0027s an internal class. We feel the settings are correct for our use.\n\nWe already have di for custom implementations, and we don\u0027t want to support our implementation outside of our use (and it would probably need to more to CoreFx to be correctly positioned, which is another burden)",
                                           "updatedAt":  "2021-03-29T14:38:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTQ2MjExMA==",
                                           "createdAt":  "2021-03-29T15:12:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Is @idimakosprofilesw \u0027s scenario not something that we support or intend to support ?",
                                           "updatedAt":  "2021-03-29T15:12:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2Mjg1MTQ5Ng==",
                                           "createdAt":  "2021-06-17T01:49:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOELGQ3A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "luisfernandomoraes",
                                                                               "createdAt":  "2021-10-18T02:02:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jordanbean-msft",
                                                                               "createdAt":  "2022-05-06T19:36:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "potchy",
                                                                               "createdAt":  "2022-10-21T17:47:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MeikandaNayanar",
                                                                               "createdAt":  "2022-12-16T10:18:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "unitondev",
                                                                               "createdAt":  "2023-04-13T11:31:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "chaimtevel",
                                                                               "createdAt":  "2023-05-10T17:45:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "codelovercc",
                                                                               "createdAt":  "2023-08-14T13:56:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichelJansson",
                                                                               "createdAt":  "2023-10-30T10:54:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Temoeri-sys",
                                                                               "createdAt":  "2025-02-11T16:09:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SergiyIvan",
                                                                               "createdAt":  "2025-03-23T20:23:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  10
                                                         },
                                           "author":  "mguinness",
                                           "body":  "I\u0027m disappointed with the reluctance to allow user configuration of both the expiry time and time step instead of them being hardcoded.  I don\u0027t think this issue is necessarily about exposing the API or making it public?  \r\n\r\nIs it possible to allow something like `services.Configure\u003cPhoneNumberTokenProviderOptions\u003e(x =\u003e x.Timestep = TimeSpan.FromMinutes(1));` in Startup?\r\n\r\nThis was also raised in issue [TotpSecurityStampBasedTokenProvider defines a fixed timestep of 3 minutes](https://github.com/aspnet/AspNetIdentity/issues/15) and [ASP.NET Identity Core 2.0 - Expiration phone token](https://github.com/dotnet/aspnetcore/issues/5784).\r\n\r\n\u003e However, the API enforces:\r\n9 minutes expiry time\r\n3 minutes of time step\r\n\r\nAlso I think the documentation needs to be updated in [Enabling 2FA](https://docs.microsoft.com/en-us/aspnet/identity/overview/features-api/two-factor-authentication-using-sms-and-email-with-aspnet-identity#enabling-2fa) as the underlying code seems to in contradict it.\r\n\r\n\u003e The 2FA codes are generated using [Time-based One-time Password Algorithm](http://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm) and codes are valid for six minutes. If you take more than six minutes to enter the code, you\u0027ll get an Invalid code error message.\r\n\r\nWhile this issue is being debated, what is the best way to implement a custom expiry time and time step?  Is it to inherit `PhoneNumberTokenProvider` and use a custom `Rfc6238AuthenticationService` class as detailed in [4 Digit Token Provider For Asp.net Core Identity](https://gist.github.com/jmichas/dab35d9b8e916eae8936322465d76b66)?",
                                           "updatedAt":  "2021-06-17T01:52:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde844X9ph",
                                           "createdAt":  "2021-10-18T14:03:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODLUoTg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichelJansson",
                                                                               "createdAt":  "2023-10-30T10:54:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "luisfernandomoraes",
                                           "body":  "Gentlemen’s, please, any news about this issue? \r\nIn my very simple scenario I just need put more time into token lifetime. \r\n@davidfowl @blowdart ",
                                           "updatedAt":  "2021-10-18T14:07:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Hsbh2",
                                           "createdAt":  "2022-08-02T15:30:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ihadjiat",
                                           "body":  "Hello guys,\r\nWas there any update in the last 9 months ?\r\n\r\nThanks",
                                           "updatedAt":  "2022-08-02T15:30:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85KkGax",
                                           "createdAt":  "2022-09-19T12:50:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxSCPw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "potchy",
                                                                               "createdAt":  "2022-10-21T17:49:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bit365",
                                                                               "createdAt":  "2022-10-22T05:51:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidivkovic",
                                                                               "createdAt":  "2023-02-24T20:43:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "obenarchid",
                                                                               "createdAt":  "2023-04-04T15:56:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "unitondev",
                                                                               "createdAt":  "2023-04-13T11:32:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "codelovercc",
                                                                               "createdAt":  "2023-08-14T13:56:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nobel42",
                                                                               "createdAt":  "2023-10-23T03:51:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichelJansson",
                                                                               "createdAt":  "2023-10-30T10:57:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Cotspheer",
                                                                               "createdAt":  "2024-01-03T13:29:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ilhesam",
                                                                               "createdAt":  "2024-09-06T13:34:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  10
                                                         },
                                           "author":  "itd3v",
                                           "body":  "Hello from Sep 19 2022, it is still an issue... What\u0027s the problem to make expiration time and time step window configurable? Anyway developer who need to change that settings will copy/paste existing code from `Rfc6238AuthenticationService` and adjust it to there needs. It\u0027s just like wasting a time.\r\n\r\nAlso a pretty common dialog with the client:\r\nClient: Please reduce 2fa code expiration from 3min to 45sec because our customers are big corporation and they requested this change\r\nDev: Sorry, it is not configurable\r\nClient: What? It\u0027s just a time, why you could not change it to our needs?\r\nDev: Sorry, but Microsoft say we must use only 3min expiration time\r\nClient: Please find a workaround because we need 45sec 2fa code validity\r\nDev: _copying and pasting existing code from Rfc6238AuthenticationService with required settings_",
                                           "updatedAt":  "2022-09-19T12:50:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Z0BBw",
                                           "createdAt":  "2023-04-13T11:35:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "unitondev",
                                           "body":  "Hello from Apr 13 2023, it\u0027s still an issue... Any updates?\r\nThanks",
                                           "updatedAt":  "2023-04-13T11:35:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Z0Ba2",
                                           "createdAt":  "2023-04-13T11:35:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DenDeline",
                                           "body":  "Hello from Apr 13 2023, it\u0027s still an issue... Any updates?\r\nThanks",
                                           "updatedAt":  "2023-04-13T11:35:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85k50Ic",
                                           "createdAt":  "2023-08-25T07:09:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "codelovercc",
                                           "body":  "If a SMS with a token code send to the user, can we tell the user that the token code will be expired in 9 minutes?",
                                           "updatedAt":  "2023-08-25T07:09:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85qozZW",
                                           "createdAt":  "2023-11-01T14:42:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "frantisekvojtech",
                                           "body":  "Being unable to configure basic token function as lifespan, for the DefaultEmailProvider and DefaultPhoneProvider\r\nwhich inherits this hard coded setting, is obviously the wrong approach. What we can do now to change it?",
                                           "updatedAt":  "2023-11-01T14:54:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85vx_Yu",
                                           "createdAt":  "2024-01-03T13:30:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODRKXhA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "codelovercc",
                                                                               "createdAt":  "2024-01-03T13:41:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "muntdan",
                                                                               "createdAt":  "2024-01-03T13:46:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "d-sebastian",
                                                                               "createdAt":  "2024-01-03T15:01:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gegeacatalin",
                                                                               "createdAt":  "2024-01-03T15:02:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "leopcode",
                                                                               "createdAt":  "2024-01-03T15:02:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mguinness",
                                                                               "createdAt":  "2024-01-03T19:38:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "Cotspheer",
                                           "body":  "Still an issue. I have users reporting that their confirmation code is expired as when the email arrives. There are providers out there that have up to 10 minutes to scan an email and to deliver that to the user (confirmed it myself). So I ended up by copying the whole code and set the timestemp to an hour. RFC6238 states 30 seconds only as RECOMMENDED and not as a MUST. So making this configurable is like a MUST to adhere the RFC.",
                                           "updatedAt":  "2024-01-03T13:30:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85yD-7G",
                                           "createdAt":  "2024-01-28T16:10:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODeoxIA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "codelovercc",
                                                                               "createdAt":  "2024-01-29T05:20:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DoxxableSetanta",
                                                                               "createdAt":  "2024-04-18T10:16:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "AsifulNobel",
                                           "body":  "Big thanks to everyone in this thread who dropped hints on fixing this! So, I ran into this issue while trying to configure the email OTP lifespan. I got it sorted for my company and figured, I would add a sample solution on GitHub. Just in case it helps someone else down the road.\r\n\r\nCheck out the solution here: [AspNetCoreIssue27088](https://github.com/AsifulNobel/AspNetCoreIssue27088). Cheers! 🚀",
                                           "updatedAt":  "2024-01-28T16:10:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde856RyG-",
                                           "createdAt":  "2024-04-12T10:20:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODeoxKA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "mguinness",
                                                                               "createdAt":  "2024-04-12T20:38:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "DoxxableSetanta",
                                                                               "createdAt":  "2024-04-18T10:16:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "farhadzm",
                                           "body":  "I fix this issue by changing `ValidateCode` scenario in `Rfc6238AuthenticationService` in a [custom service](https://github.com/farhadzm/totp-generator/blob/master/TotpGenerator/TotpService.cs#L55).\r\n\r\nIf you want to modify the TOTP code generated by Identity, you need to follow these steps:\r\n\r\nFirst, create a class that inherits from the [TotpSecurityStampBasedTokenProvider](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.identity.totpsecuritystampbasedtokenprovider-1) class. Then, you should override the GenerateAsync and ValidateAsync methods and use [TotpService](https://github.com/farhadzm/totp-generator/tree/master) instead of [Rfc6238AuthenticationService](https://github.com/dotnet/aspnetcore/blob/ce16ff0a51a74811674228835696e5cc78494fd7/src/Identity/Extensions.Core/src/Rfc6238AuthenticationService.cs).\r\n\r\nGenerateAsync method:\r\n```CSharp\r\npublic override async Task\u003cstring\u003e GenerateAsync(\r\n    string purpose,\r\n    UserManager\u003cApplicationUser\u003e manager,\r\n    ApplicationUser user)\r\n{\r\n    if (manager == null)\r\n    {\r\n        throw new ArgumentNullException(nameof(manager));\r\n    }\r\n    var token = await manager.CreateSecurityTokenAsync(user);\r\n    var modifier = await GetUserModifierAsync(purpose, manager, user);\r\n\r\n    return TotpService.GenerateCode(token, modifier).ToString(\"D6\", CultureInfo.InvariantCulture);\r\n}\r\n```\r\nValidateAsync method:\r\n```CSharp\r\npublic override async Task\u003cbool\u003e ValidateAsync(\r\n    string purpose,\r\n    string token,\r\n    UserManager\u003cApplicationUser\u003e manager,\r\n    ApplicationUser user)\r\n{\r\n    if (manager == null)\r\n    {\r\n        throw new ArgumentNullException(nameof(manager));\r\n    }\r\n    int code;\r\n    if (!int.TryParse(token, out code))\r\n    {\r\n        return false;\r\n    }\r\n    var securityToken = await manager.CreateSecurityTokenAsync(user);\r\n    var modifier = await GetUserModifierAsync(purpose, manager, user);\r\n\r\n    return securityToken != null \u0026\u0026 TotpService.ValidateCode(securityToken, code, modifier, _userOption.TwoFactorTotpExpiration);\r\n}\r\n```\r\nThen, introduce the created class to Identity: \r\n```CSharp\r\nservices.AddIdentity\u003cApplicationUser, ApplicationRole\u003e()\r\n    .AddEntityFrameworkStores\u003cIdentityContext\u003e()\r\n    .AddDefaultTokenProviders()\r\n    .AddTokenProvider\u003cCustomTotpSecurityStampBasedTokenProvider \u003e(\"CustomTotp\");\r\n```\r\nAnd when generating and validating the code, you should send its provider name to the UserManager: \r\n```CSharp\r\nvar verificationCode = await _userManager.GenerateTwoFactorTokenAsync(user, \"CustomTotp\");\r\n```\r\n```CSharp\r\nvar verify = await _userManager.VerifyTwoFactorTokenAsync(user, \"CustomTotp\", request.VerificationCode);\r\n```\r\nIn this method, only one additional minute is considered.\r\n[Additional document](https://dotnetdocs.ir/Post/72/creating-a-time-based-one-time-password-(totp)-along-with-its-expiration-time).",
                                           "updatedAt":  "2024-04-12T10:22:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde856_tfS",
                                           "createdAt":  "2024-04-18T10:16:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEF_AMQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "Cotspheer",
                                                                               "createdAt":  "2024-04-18T17:06:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "codelovercc",
                                                                               "createdAt":  "2024-04-20T04:36:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "epicstar",
                                                                               "createdAt":  "2024-06-12T14:40:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "jtaylor-dohle",
                                                                               "createdAt":  "2024-06-17T15:01:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "Temoeri-sys",
                                                                               "createdAt":  "2025-02-11T15:59:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "DoxxableSetanta",
                                           "body":  "Is there any chance of this being updated to be configurable? Still plenty of time to include it with NET9 :) ",
                                           "updatedAt":  "2024-04-18T10:16:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86EOQfB",
                                           "createdAt":  "2024-07-09T17:59:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODpVKgQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "codelovercc",
                                                                               "createdAt":  "2024-07-11T15:15:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "moshe-saccal",
                                           "body":  "@davidfowl  can i create a pr for this.?\r\n",
                                           "updatedAt":  "2024-07-09T17:59:18Z"
                                       }
                                   ],
                         "totalCount":  23
                     },
        "title":  "Allow Rfc6238AuthenticationService time-step size and time-step window to be configurable",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "severity-major",
                       "affected-very-few",
                       "triaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/28055",
        "createdAt":  "2020-11-22T13:16:42Z",
        "number":  28055,
        "author":  "jonasarcangel",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-06T15:24:40Z",
        "body":  "Using ASP.Net Core Identity and EntityFramework, the migration code generated created key (for tables like ApplicationUser, from IdentityUser) with Id and no key length.\r\n\r\nGetting an error when running with MySql:\r\n\r\n\u003e MySqlConnector.MySqlException (0x80004005): BLOB/TEXT column \u0027Id\u0027 used\r\n\u003e in key specification without a key length\r\n\r\nFor example:\r\n\r\n        modelBuilder.Entity(\"MyProject.ApplicationUser\", b =\u003e\r\n            {\r\n                b.Property\u003cstring\u003e(\"Id\")\r\n                    .HasColumnType(\"TEXT\");\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfOi0Eg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMTg2NDA0OA==",
                                           "createdAt":  "2020-11-22T23:17:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rezathecoder",
                                           "body":  "Try changing your migration file manually:\r\n\r\n`migrationBuilder.CreateTable(\r\n                name: \"Users\",\r\n                columns: table =\u003e new\r\n                {\r\n                    Id = table.Column\u003cstring\u003e(nullable: false),`\r\n\r\nChange it to\r\n\r\n`Id = table.Column\u003cstring\u003e(nullable: false, maxLength: 450)`",
                                           "updatedAt":  "2020-11-22T23:17:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczODg5OTM5MQ==",
                                           "createdAt":  "2020-12-04T17:08:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkArtakMSFT",
                                           "body":  "@blowdart FYI",
                                           "updatedAt":  "2020-12-04T17:08:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczODkwMTkwNg==",
                                           "createdAt":  "2020-12-04T17:12:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODgzIJQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "christiannagel",
                                                                               "createdAt":  "2024-05-06T14:29:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-12-04T17:12:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85HtDll",
                                           "createdAt":  "2022-08-02T17:03:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODgzINg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "christiannagel",
                                                                               "createdAt":  "2024-05-06T14:29:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mahomedalid",
                                           "body":  "@jonasarcangel  I created a sample template to solve this problem https://github.com/mahomedalid/blazor-auth-mysql you probably can use this https://github.com/mahomedalid/blazor-auth-mysql/blob/main/Data/Migrations/00000000000000_CreateIdentitySchema.cs ",
                                           "updatedAt":  "2022-08-02T17:03:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85HtPJZ",
                                           "createdAt":  "2022-08-02T17:54:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mahomedalid",
                                           "body":  "I would like to work in this issue, I\u0027m working in a PR to add a new option, with the following characteristics:\r\n\r\n* Instead of UseLocalDb a DbType, with the options local sqlite (which will be the same as local), sqlserver and mysql. \r\n* I am planning to keep UseLocalDb for backward compatibility, I did a quick proof of concept and seems will work fine. \r\n* I am planning to use Pomelo.EntityFrameworkCore.MySql to avoid vendor lock-in and support MariaDB as well.\r\n\r\nI think this should be important, because it helps new developers into Blazor to setup a quick boilerplate/project to use with some of the most open-source tools. I can see this as a great help and introduction for LAMP (Linux/Apache/MySQL/PHP) developers and will likely attract new users. I also see this as a start to add support for other databases like PostgreSQL.\r\n\r\n@mkArtakMSFT @msftbot Let me know what you think.",
                                           "updatedAt":  "2022-08-02T17:54:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde8586LQS",
                                           "createdAt":  "2024-05-06T10:08:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "christiannagel",
                                           "body":  "I had this issue creating a .NET 8 Blazor identity project, configured it with .NET Aspire, and connected it with the .NET Aspire MySQL Entity Framework component.\r\n\r\nI tried to overwrite the model definition with ApplicationDbContext, and re-generated the migration code. Migrations still failed.\r\n\r\n@mahomedalid - thanks for your template updates! Copying the migrations files from your repo fixed it for me. \r\nLooking at the differences, it looks like changing maxlength alone is not enough. Your templates also changed the type from TEXT to varchar(256).\r\n\r\n@mkArtakMSFT - I think after the release of .NET Aspire, more people will have this issue, and the label *affected-few* probably no longer applies.\r\n\r\n",
                                           "updatedAt":  "2024-05-06T15:24:40Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "EntityFramework Migration for ASP.Net Core Identity creates Key without key length",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "affected-few",
                       "severity-minor"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/29569",
        "createdAt":  "2021-01-24T02:27:29Z",
        "number":  29569,
        "author":  "felinepc",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-10-24T13:41:34Z",
        "body":  "## Summary\r\n\r\nA ```LoginProviderKey``` property (and corresponding DB column with EF Core) should be added to ```Microsoft.AspNetCore.Identity.IdentityUserToken``` so that the token store can properly store multiple sets of tokens from multiple external user accounts from the same external provider. This will make it inline with the design behavior of ```IdentityUserLogin```.\r\n\r\n## Motivation and goals\r\n\r\nWhile working on a project that allows a user to link multiple external accounts from multiple external identity providers, I discovered a discrepancy between the ```IdentityUserLogin``` class (underlying DB table ```AspNetUserLogins```) and ```IdentityUserToken``` (underlying DB table ```AspNetUserTokens```).\r\n\r\nThe  ```IdentityUserLogin``` class has the ```LoginProvider``` and ```ProviderKey```  properties as a composite key. Because of this, one local user is allowed to have multiple external logins from the same provider associated, because ```ProviderKey``` can be used to store the user\u0027s unique object ID at the provider. For example, a user is allowed to have 2 Google accounts as external logins, despite both having the same ```LoginProvider``` \"Google\".\r\n\r\nNow some applications need to store user\u0027s tokens obtained from these external providers, that\u0027s why ASP.NET Core Identity provided the ```IdentityUserToken``` class as well as methods such as ```_signInManager.UpdateExternalAuthenticationTokensAsync``` that makes storing and accessing such tokens easy.\r\n\r\nHowever, ```IdentityUserToken``` and its DB datastore only has the ```LoginProvider``` property, without a ```LoginProviderKey```. This means this token store can only manage one set of keys for one provider. If a user has multiple \"Google\" accounts, the store won\u0027t work using its intended structure.\r\n\r\nThe fundamental issue here is that associating a \"provider\" (as in the name of the provider) with a set of tokens does not make sense. Tokens are issued for individual user accounts at the provider, not the provider itself.\r\n\r\nIn other words, if a single property/column had to be used, it would have been better if it used ```LoginProviderKey``` instead of ```LoginProvider``` for this table. Combined with the ```UserId``` foreign key, we can navigate back to the ```AspNetUserLogins``` table to find the ```LoginProvider``` anyway (it is almost impossible for a given user to have duplicate ```LoginProviderKey``` ).\r\n\r\nTo work around this issue, one can\r\n\r\n1. Extend ```IdentityUserToken``` by inheriting it and adding the extra property. But doing so makes built-in token related helper methods less useful.\r\n\r\n2. Re-arrange the storing of data into the existing properties. For example, one can choose to store ```LoginProviderKey``` inside the ```LoginProvider``` column, and use ```LoginProviderKey``` to store the actual provider name (essentially swapping these 2 properties for their intended use). But this makes the naming confusing and non-intuitive. It may also break some other built-in methods.\r\n\r\nI feel neither way is ideal. Since ```IdentityUserLogin``` was already designed to be multi-provider and multi-userlogin friendly, it makes sense that ```IdentityUserToken``` should follow suit.\r\n\r\n## Risks / unknowns\r\n\r\nCurrently the AspNetUserTokens table has ```UserId```, ```LoginProvider``` and ```Name``` together as a composite key. Adding ```LoginProviderKey``` should change this design such that ```LoginProvider``` , ```LoginProviderKey``` and ```Name``` should be used as the composite key, following the pattern of ```IdentityUserLogin```. However, such change can break existing implementations.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkSg9WA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2OTkyODQ2OQ==",
                                           "createdAt":  "2021-01-29T17:04:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-01-29T17:04:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86RKD1Y",
                                           "createdAt":  "2024-10-24T13:41:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "popasUC",
                                           "body":  "Any plans for this issue to be resolved? It affects us, too. \nWe\u0027re considering changing the definition of some of the underlying tables, though it\u0027d be preferable Microsoft does something after 3+ years ...",
                                           "updatedAt":  "2024-10-24T13:41:33Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "In ASP.NET Core Identity, the IdentityUserToken class should include a \"LoginProviderKey\" property",
        "labels":  [
                       "enhancement",
                       "breaking-change",
                       "area-identity",
                       "affected-few",
                       "severity-major"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/29792",
        "createdAt":  "2021-01-30T17:00:21Z",
        "number":  29792,
        "author":  "PrizZzt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-02-19T00:09:06Z",
        "body":  "\u003c!--\r\nThis template is useful to build consensus about whether work should be done, and if so, the high-level shape of how it should be approached. Use this before fixating on a particular implementation.\r\n--\u003e\r\n\r\n## Summary\r\n\r\nMy proposal is to make class RelativeRedirectUriValidator public in order to be able to inherrit it or use in another way other than default flow. It provide complex logic, which is hard to maintain in case of copying to your project.\r\n\r\n## Motivation and goals\r\n\r\nIn my project I faced problem when my identity server has two clients: one is SPA on Blazor, another is native application. For Blazor app I used default redirect uri validation, which is provided by standard AddApiAuthorization method. However, for native app I need ability to redirect to the localhost uris with random port.\r\nI think best solution in my situation is to inherrit RelativeRedirectUriValidator with additional logic for allowing redirect uris if they are localhost and related to the native client.\r\n\r\n## Risks / unknowns\r\n\r\nI don\u0027t think that it can create any problems, because of the fact that it is already using in default implementation.\r\n\r\n## Examples\r\n\r\n```csharp\r\npublic class LocalhostRedirectUriValidator : RelativeRedirectUriValidator\r\n{\r\n\tprotected bool IsLocalhostRequest(IdentityServer4.Models.Client client, string requestedUri) =\u003e\r\n\t\tclient.ClientId == \"Native\" \u0026\u0026 requestedUri.StartsWith(\"http://localhost:\");\r\n\r\n\tpublic override async Task\u003cbool\u003e IsRedirectUriValidAsync(string requestedUri, IdentityServer4.Models.Client client)\r\n\t{\r\n\t\tvar isDefaulRequest = await base.IsRedirectUriValidAsync(requestedUri, client);\r\n\t\tvar isLocalhostRequest = IsLocalhostRequest(client, requestedUri);\r\n\r\n\t\treturn isDefaulRequest || isLocalhostRequest;\r\n\t}\r\n\t...\r\n}\r\n```\r\n\r\n\u003c!--\r\n# Detailed design\r\n\r\nIt\u0027s often best not to fill this out until you get basic consensus about the above. When you do, consider adding an implementation proposal with the following headings:\r\n\r\nDetailed design\r\nDrawbacks\r\nConsidered alternatives\r\nOpen questions\r\nReferences\r\n\r\nIf there\u0027s one clear design you have consensus on, you could do that directly in a PR.\r\n--\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLgxv3Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MjU2NzAwNQ==",
                                           "createdAt":  "2021-02-03T14:51:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-02-03T14:51:58Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "RelativeRedirectUriValidator class is internal",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "severity-minor",
                       "affected-very-few",
                       "design-proposal"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/30266",
        "createdAt":  "2021-02-18T14:53:49Z",
        "number":  30266,
        "author":  "javiercn",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-22T18:01:51Z",
        "body":  "This was causing grief in our E2E tests. It shows up when your window is 800x600 or less on a Desktop\r\n\r\n![87bd1cdd670942fc87713d525e35ddf4](https://user-images.githubusercontent.com/6995051/108374432-d0bd0580-71b5-11eb-966b-44564fd59c13.png)\r\n\r\nLikely an issue in the _Layout Identity UI includes",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTo_cNw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MTUxNDg2Mw==",
                                           "createdAt":  "2021-02-18T17:36:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\nWe\u0027re moving this issue to the `Next sprint planning` milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-02-18T17:36:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Oj9w3",
                                           "createdAt":  "2022-11-17T04:27:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-11-17T04:27:31Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[Identity] UI bug when the view port is small enought",
        "labels":  [
                       "bug",
                       "area-identity",
                       "severity-nice-to-have",
                       "affected-very-few"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/30503",
        "createdAt":  "2021-02-26T18:58:30Z",
        "number":  30503,
        "author":  "wtgodbe",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-12-27T13:44:48Z",
        "body":  "https://github.com/dotnet/aspnetcore/blob/release/2.1/src/Identity/UI/src/Microsoft.AspNetCore.Identity.UI.csproj does not build correctly in release/2.1 currently - not all expected outputs are being produced. It appears that it doesn\u0027t actually import the razor props/targets from https://github.com/dotnet/aspnetcore/tree/release/2.1/src/Razor/Sdk.Razor/src/build/netstandard2.0. We should figure out why it\u0027s broken and fix it before we need to patch it again, at which time we should remove the condition here: https://github.com/dotnet/aspnetcore/blob/aa28a13991281637d162147554e68e23391610e6/src/Identity/UI/src/Microsoft.AspNetCore.Identity.UI.csproj#L52",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQnx9BQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NzA5NTY0OA==",
                                           "createdAt":  "2021-02-27T16:07:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\nWe\u0027re moving this issue to the `Next sprint planning` milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-02-27T16:07:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5OTcyNDIzOA==",
                                           "createdAt":  "2021-03-15T20:20:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "@wtgodbe just to understand the scope of the issue, do we have an acceptable long term workaround here for servicing, and this is just investigative?  Or is the current approach/fix problematic the next time we need to service 2.1?",
                                           "updatedAt":  "2021-03-15T20:20:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5OTcyNjMxNw==",
                                           "createdAt":  "2021-03-15T20:23:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pranavkm",
                                           "body":  "It\u0027s the latter.",
                                           "updatedAt":  "2021-03-15T20:23:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5OTcyNzE4Mg==",
                                           "createdAt":  "2021-03-15T20:25:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "Ok marking as blocking for the triage ranking tool",
                                           "updatedAt":  "2021-03-15T20:25:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMDQwODY0MA==",
                                           "createdAt":  "2021-03-16T16:24:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wtgodbe",
                                           "body":  "To be specific, it would block us the next time we need to service `Microsoft.AspNetCore.Identity.UI` specifically. Releases of 2.1 that don\u0027t service that package are unaffected.",
                                           "updatedAt":  "2021-03-16T16:24:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMDQxMTU0OQ==",
                                           "createdAt":  "2021-03-16T16:28:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "Ok, that\u0027s not nearly as big of an issue then, thanks for the clarification",
                                           "updatedAt":  "2021-03-16T16:28:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde842aFLJ",
                                           "createdAt":  "2021-09-03T20:58:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "Triage: let\u0027s do this right after all the 6.0 stuff cools down.",
                                           "updatedAt":  "2021-09-03T20:58:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85CfH0F",
                                           "createdAt":  "2022-05-02T23:12:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dougbu",
                                           "body":  "Work on component governance _might_ resolve this issue by accident. Please check that once 2.1 CG work is building correctly.",
                                           "updatedAt":  "2022-05-02T23:12:00Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[release/2.1] Microsoft.AspNetCore.Identity.UI does not build correctly",
        "labels":  [
                       "bug",
                       "investigate",
                       "area-infrastructure",
                       "area-identity",
                       "affected-most",
                       "severity-minor"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/33348",
        "createdAt":  "2021-05-14T14:04:58Z",
        "number":  33348,
        "author":  "michaelongithub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-06-18T22:41:29Z",
        "body":  "\u003c!-- What problem are you trying to solve? --\u003e\r\nWe have a lot of projects where username = email is unfitting, due to organisational requierments or handlig restrictions. While email still can be a required field in registration, the dependency of it as usernames forces us to change the generated scaffolds manually (UI and code)\r\n\r\n\r\n\u003c!-- Describe the solution you\u0027d like --\u003e\r\nProvide a variant where:\r\n\r\n- username is independent of email and a seperate field when registering\r\n- Login with this username (and not email) (and pwd)\r\n- Change username in accordance with that, independent of email\r\n\r\nThanks for considering this, Michael\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORRzVQg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NjA2MDY5MQ==",
                                           "createdAt":  "2021-06-07T15:56:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deepchoudhery",
                                           "body":  "This seems like a suggestion for the actual templates for Identity.  We don\u0027t control the template content in scaffolding, just help with the provisioning and editing of said templates in the .NET projects. \r\nWill try to move the issue to the appropriate path.\r\nTagging @HaoK ",
                                           "updatedAt":  "2021-06-07T15:56:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NjA2MjU0Mw==",
                                           "createdAt":  "2021-06-07T15:58:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "cc @blowdart ",
                                           "updatedAt":  "2021-06-07T15:58:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NjA3NTIyMQ==",
                                           "createdAt":  "2021-06-07T16:15:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michaelongithub",
                                           "body":  "Thanks for considering.",
                                           "updatedAt":  "2021-06-07T16:15:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NjE3NTk4Mw==",
                                           "createdAt":  "2021-06-07T18:48:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Moved to aspnet repo.\r\n\r\nWe can consider it, but it won\u0027t be until v7 now, it\u0027s a new feature, and as such it is too late for v6, so we\u0027ll backlog it for now. ",
                                           "updatedAt":  "2021-06-07T18:48:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NjE3NjA0NQ==",
                                           "createdAt":  "2021-06-07T18:48:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-06-07T18:48:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85FHNVC",
                                           "createdAt":  "2022-06-18T17:12:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RyanTheShaw",
                                           "body":  "Seems like this is something that has come up a number of times and for what it\u0027s worth, is something that I wouldn\u0027t mind seeing changed as well. I\u0027ve additional worked with many junior devs in the past who have struggled with this inconsistency when first looking to seed test data when learning to use the identity library. I was able to dig up another issue that seems to stem from the same underlying problem. [other issue](https://github.com/dotnet/aspnetcore/issues/33519)\r\n\r\nPersonally, I think it leads to a lot of confusion when first working with the identity library to have to scaffold out the Login.cshtml.cs page, debug through it, and then only find out then that your email value is being sent to a method signature that clear expects a username. Definitely more than we should expect from templates which are meant to get someone up and running quickly. There are many reasons as to why someone would want a different username / email value, perhaps the simplest being otherwise what is the point of having two columns (data redundancy)?\r\n\r\nAnyway, in the short-term for anyone looking to fix this issue, you can simply scaffold the related `Login.cshtml` and `Login.cshtml.cs` files, find the line with the following command, and change it to the following three lines. This behavior makes for a much more common sense experience imo.\r\n\r\nbefore:\r\n```cs\r\nvar result = await _signInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);\r\n``` \r\n\r\nafter:\r\n```cs\r\nvar user = await _signInManager.UserManager.FindByEmailAsync(Input.Email);\r\nvar userName = user == null ? Input.Email : user.UserName;\r\nvar result = await _signInManager.PasswordSignInAsync(userName, Input.Password, Input.RememberMe, lockoutOnFailure: false);\r\n```",
                                           "updatedAt":  "2022-06-18T22:41:29Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Scaffolding variant for username only, independent of email",
        "labels":  [
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/32933",
        "createdAt":  "2021-05-22T07:42:38Z",
        "number":  32933,
        "author":  "TanvirArjel",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-12-27T03:53:16Z",
        "body":  "EF Core update command for a tracked entity only generates the update command for the modified fields only and if no field is modified then it does not send any update command to the database. This is a pretty much efficient approach. We love it.\r\n\r\nHowever, although ASP.NET Core Identity heavily depends on EF Core,  `UserManager.UpdateAsync()`  generating an update command for all the fields for the identity user. Even though no field is changed it\u0027s sending an update command to the database with all the fields. This is pretty much annoying and costlier. Also goes against EF Core motivation.\r\n\r\nFor say, I have changed UserName of the IdentityUser:\r\n\r\n**EF Core Generated Command:** \r\n\r\n```SQL\r\nUPDATE \"AspNetUsers\" SET \"UserName\" = @p0\r\nWHERE \"Id\" = @p1 AND \"ConcurrencyStamp\" = @p2;\r\n```\r\n**ASP.NET Core Identity Generated Command**:\r\n\r\n```SQL\r\nUPDATE \"AspNetUsers\" SET \"AccessFailedCount\" = @p0, \"ConcurrencyStamp\" = @p1, \"CountryId\" = @p2, \"DateOfBirth\" = @p3, \"Email\" = @p4, \"EmailConfirmed\" = @p5, \"FirstName\" = @p6, \"Gender\" = @p7, \"Language\" = @p8, \"LastName\" = @p9, \"LockoutEnabled\" = @p10, \"LockoutEnd\" = @p11, \"NormalizedEmail\" = @p12, \"NormalizedUserName\" = @p13, \"PasswordHash\" = @p14, \"PhoneNumber\" = @p15, \"PhoneNumberConfirmed\" = @p16, \"PhotoUrl\" = @p17, \"PostCode\" = @p18, \"ReferredBy\" = @p19, \"RefreshToken\" = @p20, \"SecurityPin\" = @p21, \"SecurityStamp\" = @p22, \"Theme\" = @p23, \"TwoFactorEnabled\" = @p24, \"UserName\" = @p25\r\nWHERE \"Id\" = @p26 AND \"ConcurrencyStamp\" = @p27;\r\n```\r\n\r\nPlease fix this.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMqaqIw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0OTc4MzMzMQ==",
                                           "createdAt":  "2021-05-27T16:45:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-05-27T16:45:35Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Identity `UserManager.UpdateAsync()` method is not efficient.",
        "labels":  [
                       "bug",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/33278",
        "createdAt":  "2021-06-04T09:54:22Z",
        "number":  33278,
        "author":  "mmarinchenko",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-06-10T16:31:48Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\nThis is a continuation of #16916 and #20248. I opened new issue because I can\u0027t re-open the original ones.\r\n\r\nContext: https://github.com/dotnet/aspnetcore/issues/20248#issuecomment-619787938\r\n\r\n### Describe the solution you\u0027d like\r\nIt would be nice to have something like `Type \u0027API\u0027 should be configured in \u0027Resources\u0027 section not \u0027Clients\u0027` instead of current `Type \u0027API\u0027 is not supported.`\r\n\r\nCurrent exception message along with the documentation wording (where all profiles listed together in one list) is very misleading especially for beginners.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMy_JLA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1ODc2OTcwOA==",
                                           "createdAt":  "2021-06-10T16:31:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCnqHvQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "mmarinchenko",
                                                                               "createdAt":  "2022-07-20T15:03:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-06-10T16:31:48Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Provide adequate exception messages on IdentityServer profiles misconfiguration",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "feature-identity-service"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/34717",
        "createdAt":  "2021-07-26T14:56:41Z",
        "number":  34717,
        "author":  "TanvirArjel",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC650HA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "abdusco",
                                            "createdAt":  "2021-07-29T05:34:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TanvirArjel",
                                            "createdAt":  "2021-07-29T18:21:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "stevebelskie",
                                            "createdAt":  "2022-02-01T20:20:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "duaneking",
                                            "createdAt":  "2022-04-01T18:27:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "StanislavPrusac",
                                            "createdAt":  "2022-09-09T21:24:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "morteza-jabarzare",
                                            "createdAt":  "2023-03-30T12:20:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alaatm",
                                            "createdAt":  "2023-07-18T19:08:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fowl2",
                                            "createdAt":  "2024-09-10T13:11:35Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2024-08-22T11:20:17Z",
        "body":  "I am a big fan of ASP.NET Core but its only sickening part is its Identity. All the database operations related to ASP.NET Core Identity has been written in an extremely inefficient way, maybe the possible worst way which is very frustrating to see when it is come from ASP.NET Core team.\r\n\r\n**The code for ASP.NET Core Identity was written in ASP.NET Core 1.0 and EF Core 1.0 is still same as in ASP.NET Core 6.0 and EF Core 6.0. Both ASP.NET Core and EF Core have been evolved greatly and ASP.NET Core Identity still in legacy mode.**\r\n\r\nHere are a few examples:\r\n\r\n1.  Look at the following code for creating a User:\r\n\r\n```C#\r\nApplicationUser applicationUser = new ApplicationUser { UserName = email, Email = email, EmailConfirmed = true };\r\nIdentityResult userCreationResult = await _userManager.CreateAsync(applicationUser);\r\n```\r\n\r\nThe above code generating the following SQL queries and commands:\r\n\r\n```\r\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]\r\n      Executed DbCommand (3ms) [Parameters=[@__normalizedUserName_0=\u0027?\u0027 (Size = 50)], CommandType=\u0027Text\u0027, CommandTimeout=\u002730\u0027]\r\n      SELECT TOP(1) [a].[Id], [a].[AccessFailedCount], [a].[ConcurrencyStamp], [a].[DialCode], [a].[Email], [a].[EmailConfirmed], [a].[FullName], [a].[IsDisabled], [a].[LanguageCulture], [a].[LastLoggedInAtUtc], [a].[LockoutEnabled], [a].[LockoutEnd], [a].[NormalizedEmail], [a].[NormalizedUserName], [a].[PasswordHash], [a].[PhoneNumber], [a].[PhoneNumberConfirmed], [a].[SecurityStamp], [a].[TwoFactorEnabled], [a].[UserName]\r\n      FROM [AspNetUsers] AS [a]\r\n      WHERE [a].[NormalizedUserName] = @__normalizedUserName_0\r\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]\r\n      Executed DbCommand (1ms) [Parameters=[@__normalizedEmail_0=\u0027?\u0027 (Size = 50)], CommandType=\u0027Text\u0027, CommandTimeout=\u002730\u0027]\r\n      SELECT TOP(2) [a].[Id], [a].[AccessFailedCount], [a].[ConcurrencyStamp], [a].[DialCode], [a].[Email], [a].[EmailConfirmed], [a].[FullName], [a].[IsDisabled], [a].[LanguageCulture], [a].[LastLoggedInAtUtc], [a].[LockoutEnabled], [a].[LockoutEnd], [a].[NormalizedEmail], [a].[NormalizedUserName], [a].[PasswordHash], [a].[PhoneNumber], [a].[PhoneNumberConfirmed], [a].[SecurityStamp], [a].[TwoFactorEnabled], [a].[UserName]\r\n      FROM [AspNetUsers] AS [a]\r\n      WHERE [a].[NormalizedEmail] = @__normalizedEmail_0\r\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]\r\n      Executed DbCommand (3ms) [Parameters=[@p0=\u0027?\u0027 (DbType = Guid), @p1=\u0027?\u0027 (DbType = Int32), @p2=\u0027?\u0027 (Size = 4000), @p3=\u0027?\u0027 (Size = 4), @p4=\u0027?\u0027 (Size = 50), @p5=\u0027?\u0027 (DbType = Boolean), @p6=\u0027?\u0027 (Size = 100), @p7=\u0027?\u0027 (DbType = Boolean), @p8=\u0027?\u0027 (Size = 4), @p9=\u0027?\u0027 (DbType = DateTime2), @p10=\u0027?\u0027 (DbType = Boolean), @p11=\u0027?\u0027 (DbType = DateTimeOffset), @p12=\u0027?\u0027 (Size = 50), @p13=\u0027?\u0027 (Size = 50), @p14=\u0027?\u0027 (Size = 4000), @p15=\u0027?\u0027 (Size = 15), @p16=\u0027?\u0027 (DbType = Boolean), @p17=\u0027?\u0027 (Size = 4000), @p18=\u0027?\u0027 (DbType = Boolean), @p19=\u0027?\u0027 (Size = 50)], CommandType=\u0027Text\u0027, CommandTimeout=\u002730\u0027]\r\n      SET NOCOUNT ON;\r\n      INSERT INTO [AspNetUsers] ([Id], [AccessFailedCount], [ConcurrencyStamp], [DialCode], [Email], [EmailConfirmed], [FullName], [IsDisabled], [LanguageCulture], [LastLoggedInAtUtc], [LockoutEnabled], [LockoutEnd], [NormalizedEmail], [NormalizedUserName], [PasswordHash], [PhoneNumber], [PhoneNumberConfirmed], [SecurityStamp], [TwoFactorEnabled], [UserName])\r\n      VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19);\r\n```\r\n\r\n**Look at the above commands, it made two completely unnecessary queries and pulling the same big object twice just to check whether a User already exists or not by UserName which could have been done by a single simple query and getting 1 bit of data.**\r\n\r\n2. Look at the following code:\r\n\r\n```C#\r\n IdentityResult addExternalLoginResult = await _userManager.AddLoginAsync(applicationUser, externalLoginInfo);\r\n```\r\n\r\nThe above code generating the following SQL queries and commands:\r\n\r\n```C#\r\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]\r\n      Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0=\u0027?\u0027 (Size = 50)], CommandType=\u0027Text\u0027, CommandTimeout=\u002730\u0027]\r\n      SELECT TOP(1) [a].[Id], [a].[AccessFailedCount], [a].[ConcurrencyStamp], [a].[DialCode], [a].[Email], [a].[EmailConfirmed], [a].[FullName], [a].[IsDisabled], [a].[LanguageCulture], [a].[LastLoggedInAtUtc], [a].[LockoutEnabled], [a].[LockoutEnd], [a].[NormalizedEmail], [a].[NormalizedUserName], [a].[PasswordHash], [a].[PhoneNumber], [a].[PhoneNumberConfirmed], [a].[SecurityStamp], [a].[TwoFactorEnabled], [a].[UserName]\r\n      FROM [AspNetUsers] AS [a]\r\n      WHERE [a].[NormalizedUserName] = @__normalizedUserName_0\r\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]\r\n      Executed DbCommand (1ms) [Parameters=[@__normalizedEmail_0=\u0027?\u0027 (Size = 50)], CommandType=\u0027Text\u0027, CommandTimeout=\u002730\u0027]\r\n      SELECT TOP(2) [a].[Id], [a].[AccessFailedCount], [a].[ConcurrencyStamp], [a].[DialCode], [a].[Email], [a].[EmailConfirmed], [a].[FullName], [a].[IsDisabled], [a].[LanguageCulture], [a].[LastLoggedInAtUtc], [a].[LockoutEnabled], [a].[LockoutEnd], [a].[NormalizedEmail], [a].[NormalizedUserName], [a].[PasswordHash], [a].[PhoneNumber], [a].[PhoneNumberConfirmed], [a].[SecurityStamp], [a].[TwoFactorEnabled], [a].[UserName]\r\n      FROM [AspNetUsers] AS [a]\r\n      WHERE [a].[NormalizedEmail] = @__normalizedEmail_0\r\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]\r\n      Executed DbCommand (2ms) [Parameters=[@p0=\u0027?\u0027 (Size = 450), @p1=\u0027?\u0027 (Size = 450), @p2=\u0027?\u0027 (Size = 4000), @p3=\u0027?\u0027 (DbType = Guid)], CommandType=\u0027Text\u0027, CommandTimeout=\u002730\u0027]\r\n      SET NOCOUNT ON;\r\n      INSERT INTO [AspNetUserLogins] ([LoginProvider], [ProviderKey], [ProviderDisplayName], [UserId])\r\n      VALUES (@p0, @p1, @p2, @p3);\r\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]\r\n      Executed DbCommand (4ms) [Parameters=[@p19=\u0027?\u0027 (DbType = Guid), @p0=\u0027?\u0027 (DbType = Int32), @p1=\u0027?\u0027 (Size = 4000), @p20=\u0027?\u0027 (Size = 4000), @p2=\u0027?\u0027 (Size = 4), @p3=\u0027?\u0027 (Size = 50), @p4=\u0027?\u0027 (DbType = Boolean), @p5=\u0027?\u0027 (Size = 100), @p6=\u0027?\u0027 (DbType = Boolean), @p7=\u0027?\u0027 (Size = 4), @p8=\u0027?\u0027 (DbType = DateTime2), @p9=\u0027?\u0027 (DbType = Boolean), @p10=\u0027?\u0027 (DbType = DateTimeOffset), @p11=\u0027?\u0027 (Size = 50), @p12=\u0027?\u0027 (Size = 50), @p13=\u0027?\u0027 (Size = 4000), @p14=\u0027?\u0027 (Size = 15), @p15=\u0027?\u0027 (DbType = Boolean), @p16=\u0027?\u0027 (Size = 4000), @p17=\u0027?\u0027 (DbType = Boolean), @p18=\u0027?\u0027 (Size = 50)], CommandType=\u0027Text\u0027, CommandTimeout=\u002730\u0027]\r\n      SET NOCOUNT ON;\r\n      UPDATE [AspNetUsers] SET [AccessFailedCount] = @p0, [ConcurrencyStamp] = @p1, [DialCode] = @p2, [Email] = @p3, [EmailConfirmed] = @p4, [FullName] = @p5, [IsDisabled] = @p6, [LanguageCulture] = @p7, [LastLoggedInAtUtc] = @p8, [LockoutEnabled] = @p9, [LockoutEnd] = @p10, [NormalizedEmail] = @p11, [NormalizedUserName] = @p12, [PasswordHash] = @p13, [PhoneNumber] = @p14, [PhoneNumberConfirmed] = @p15, [SecurityStamp] = @p16, [TwoFactorEnabled] = @p17, [UserName] = @p18\r\n      WHERE [Id] = @p19 AND [ConcurrencyStamp] = @p20;\r\n      SELECT @@ROWCOUNT;\r\n```\r\n\r\n**This is even more disastrous! Just for single insert and related checking, it\u0027s making a complete massacre. This is in no way acceptable. Even the following command from the above code is completely unnecessary:**\r\n\r\n```C#\r\nUPDATE [AspNetUsers] SET [AccessFailedCount] = @p0, [ConcurrencyStamp] = @p1, [DialCode] = @p2, [Email] = @p3, [EmailConfirmed] = @p4, [FullName] = @p5, [IsDisabled] = @p6, [LanguageCulture] = @p7, [LastLoggedInAtUtc] = @p8, [LockoutEnabled] = @p9, [LockoutEnd] = @p10, [NormalizedEmail] = @p11, [NormalizedUserName] = @p12, [PasswordHash] = @p13, [PhoneNumber] = @p14, [PhoneNumberConfirmed] = @p15, [SecurityStamp] = @p16, [TwoFactorEnabled] = @p17, [UserName] = @p18\r\n      WHERE [Id] = @p19 AND [ConcurrencyStamp] = @p20;\r\n      SELECT @@ROWCOUNT;\r\n```\r\n\r\n3. Another instance, I have already submitted here:  https://github.com/dotnet/aspnetcore/issues/32933\r\n4. Every UserManager method is expecting the IdentityUser while the only UserId is sufficient.\r\n\r\nLast but not the least, I am sorry but to say, the whole ASP.NET Core Identity database operation code has been written in a possible worst way. It could have been accepted if was written by any other third party but it\u0027s from Microsoft where we believe the world\u0027s best software engineers do work.\r\n\r\nThank you.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiVqoxA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde8404Pwd",
                                           "createdAt":  "2021-07-27T02:29:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ar0311",
                                           "body":  "Wouldn\u0027t this be a \"by-design\" Entity Framework issue? Not sure how it has much to do with Identity",
                                           "updatedAt":  "2021-07-27T02:29:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde8404QdB",
                                           "createdAt":  "2021-07-27T02:38:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD8o2jA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "duaneking",
                                                                               "createdAt":  "2022-04-01T18:27:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StanislavPrusac",
                                                                               "createdAt":  "2022-09-09T21:25:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "briangithex",
                                                                               "createdAt":  "2023-03-21T13:46:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Logged1n",
                                                                               "createdAt":  "2024-11-27T00:53:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "TanvirArjel",
                                           "body":  "@ar0311 No! It\u0027s not EF Core issue! EF Core is quite efficient if you can write EF Core code properly. It’s Microsoft ASP.NET Core Identity team who have written the EF Core code inside the Identify framework in possible worst way. ",
                                           "updatedAt":  "2021-07-27T02:38:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde841DojK",
                                           "createdAt":  "2021-07-30T20:46:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-07-30T20:46:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86JWqjE",
                                           "createdAt":  "2024-08-22T11:20:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamJ26",
                                           "body":  "Any update on this issue? 3 years later and nothing has changed.",
                                           "updatedAt":  "2024-08-22T11:20:16Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "ASP.NET Core Identity database operations are extremely inefficient.",
        "labels":  [
                       "area-identity",
                       "triaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/38902",
        "createdAt":  "2021-12-08T18:00:39Z",
        "number":  38902,
        "author":  "elaine-jackson",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCF16RQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RonPeters",
                                            "createdAt":  "2021-12-09T01:46:08Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-12-15T19:49:35Z",
        "body":  "Some business applications may only want authorized users to create an account on their ASP.NET Web Application. Identity Roles are a powerful tool to make sure only authorized groups can access a set of data. However this can lead to unwanted users registering in your application. A common solution is to limit `/Identity/Account/Register` with Web Server rules to have either HTTP Basic Auth or IP Address Allow Listing. I propose the ability to do Invite Only Registrations.\r\n\r\n## First I want to explain my current workaround\r\n\r\nAs a work-around in my current application. I add an `InviteKey` to the `Register.cshtml.cs` InputModel object. \r\n\r\n```cs\r\n[Required]\r\n            [DataType(DataType.Password)]\r\n            [Display(Name = \"Invite Key\")]\r\n            public string InviteKey { get; set; }\r\n```\r\n\r\nFrom there I check this on:\r\n```cs\r\npublic async Task\u003cIActionResult\u003e OnPostAsync(string returnUrl = null)\r\n        {\r\n            returnUrl ??= Url.Content(\"~/\");\r\n            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();\r\n\r\n            // Using a custom validator would leak the key in client side regex validator\r\n            // To get around this we only check server-side and return an error if the key\r\n            // doesn\u0027t match the defined key in appsettings.json!\r\n            if (!Input.InviteKey.Equals(configuration.GetValue\u003cstring\u003e(\"InviteKey\")))\r\n            {\r\n                ModelState.AddModelError(string.Empty, \"Invalid Invite Key\");\r\n                return Page();\r\n            }\r\n\r\n            if (ModelState.IsValid)\r\n            {\r\n```\r\n\r\nUsing a custom validator (I tried this with a hard coded key) would disclose the invite key in client-side regex so I can only do a server side check.\r\n\r\n## Here is how I would do this ideally\r\n\r\nThis is far from a perfect solution however and it is merely a work-around until something better exists. Ideally a database-driven solution would exist with one-time, expiring, invite keys built into ASP.NET Identity. For the initial user registration the startup log would give a one-time registration link with the key in it. From there the initial user would be allowed to create Invite Keys or links to allow other users to register. I am not super familiar with Identity Roles as I haven\u0027t worked with them in a while, although a default Inviter role could be given to first user and then only users who have this role could create invite links.\r\n\r\nWhat are the ASP.NET Core community\u0027s thoughts on building this type of feature into ASP.NET Identity and the corresponding scaffolders?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOO1D5iA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde8469iQW",
                                           "createdAt":  "2021-12-08T21:27:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "This is an interesting idea. We\u0027d need a good design for the experience. Putting it in backlog for now.\r\n\r\n@blowdart @HaoK ",
                                           "updatedAt":  "2021-12-08T21:27:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde8469iSN",
                                           "createdAt":  "2021-12-08T21:27:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-12-08T21:27:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde846-Vcy",
                                           "createdAt":  "2021-12-09T01:45:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RonPeters",
                                           "body":  "I completely support this. The vast majority of websites I\u0027ve built for companies are invite-only. So I\u0027ve had to implement this myself over and over again over the years. With the latest templates, I\u0027ve been piggybacking on the reset password flow, utilizing and extending the verification code generation. Also the ability to send new invites if the verification code has expired.",
                                           "updatedAt":  "2021-12-09T05:31:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde846-l8v",
                                           "createdAt":  "2021-12-09T03:57:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elaine-jackson",
                                           "body":  "\u003e I completely support this. The vast majority of websites I\u0027ve been for companies are invite-only. So I\u0027ve had to implement this myself over and over again over the years. With the latest templates, I\u0027ve been piggybacking on the reset password flow, utilizing and extending the verification code generation. Also the ability to send new invites if the verification code has expired.\r\n\r\nOnce we have a solid design plan in place I could potentially help out with a merge request. One of the strengths of ASP and the .NET platform is most code is written for you with the help of the code generator and large library. This pushes the project in that way and I hope to see the support of the broader community.",
                                           "updatedAt":  "2021-12-09T03:57:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde846-wJy",
                                           "createdAt":  "2021-12-09T05:32:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RonPeters",
                                           "body":  "\u003e Once we have a solid design plan in place I could potentially help out with a merge request. One of the strengths of ASP and the .NET platform is most code is written for you with the help of the code generator and large library. This pushes the project in that way and I hope to see the support of the broader community.\r\n\r\nI\u0027m down to help as well\r\n",
                                           "updatedAt":  "2021-12-09T05:32:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde847UOoQ",
                                           "createdAt":  "2021-12-15T19:43:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RonPeters",
                                           "body":  "Also, an administrator needs to be able to disable a user\u0027s account. This is not accommodated for in the current schema",
                                           "updatedAt":  "2021-12-15T19:43:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde847UPmI",
                                           "createdAt":  "2021-12-15T19:49:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elaine-jackson",
                                           "body":  "\u003e Also, an administrator needs to be able to disable a user\u0027s account. This is not accommodated for in the current schema\r\n\r\nIn general you should be using the role system for this so when a user account is enabled it should have a member role, However I agree an account lockout feature would be helpful. That said it is a separate issue which should have its own discussion thread.",
                                           "updatedAt":  "2021-12-15T19:49:35Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[Feature Request] Invite Only Registration",
        "labels":  [
                       "enhancement",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/39194",
        "createdAt":  "2021-12-26T13:01:25Z",
        "number":  39194,
        "author":  "BenjaminAbt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC65DEQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gfoidl",
                                            "createdAt":  "2021-12-26T14:49:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "remcoros",
                                            "createdAt":  "2022-01-06T18:13:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fowl2",
                                            "createdAt":  "2024-09-10T04:52:33Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2023-11-21T20:29:29Z",
        "body":  "It\u0027s unclear to me, unfortunately, if this is a design flaw (in which case it would be a feature request to fix that) or if there is a built-in solution (in which case this is a question).\r\n\r\n### Is your feature request related to a problem? Please describe.\r\n\r\nASP.NET Core Identity has the possibility to define rules for e.g. usernames, which is usually widely used.\r\nHowever, it is also often the case in the real world that these rules can change - for example, special characters are subsequently banned in the username.\r\n\r\nBut, if the rules are changed, many identity operations can end with exceptions on existing users.\r\nFor example, a **password** can no longer be changed if a **username** does not match the new rules....(!).\r\n\r\n\u003e Password change exception: Identity Error InvalidUserName: Username \u0027User Name\u0027 is invalid, can only contain letters or digits.\r\n\r\nIt is forced to update all usernames when the rules are changed. Why?\r\n\r\nUnfortunately, this only becomes apparent when the corresponding updates have been rolled out. And then a manual intervention of the developers in the production system is necessary, e.g. to be able to fight password leaks (current case).\r\nThe user himself is blocked.\r\n\r\n### Describe the solution you\u0027d like\r\nA backward compatible solution would be better or a way to hook into the validation process for such cases.\r\n\r\nOr just dont validate the \u003cins\u003eusername\u003c/ins\u003e if the user just changes the \u003cins\u003epassword\u003c/ins\u003e.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPVqkQA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde847szmM",
                                           "createdAt":  "2021-12-27T14:46:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCH9jAA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gfoidl",
                                                                               "createdAt":  "2021-12-27T14:51:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "blowdart",
                                           "body":  "I don\u0027t think we ever considered this; we assume that if you add rules for validity they must be enforced everywhere,.\r\n\r\nIt would be a breaking change, and an interesting one at that. Rather than break what may work for others, would a setting work for you here? For example, some setting on identity that says, \"Ignore username validity checks when updating a user\"? It would be off by default, but you could configure it on startup. That way we don\u0027t change the current behaviour, but you can opt-in.",
                                           "updatedAt":  "2021-12-27T14:46:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde847s4us",
                                           "createdAt":  "2021-12-27T15:32:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BenjaminAbt",
                                           "body":  "I guess I would prefer a validation interface that would be implemented similarly to the rest of the Identity providers.\r\nThat means a general interface and a default implementation that can be replaced (like the UserManager).\r\n\r\n`public class CustomUserManager : UserManager\u003cMyUser\u003e`\r\n\r\nbut for the validation\r\n\r\n```cs\r\npublic class CustomUserValidator : UserValidator\u003cMyUser\u003e\r\n{\r\n   public CustomUserValidator(IOptions\u003cIdentityOptions\u003e optionsAccessor, ....) : base(optionsAccessor) { }\r\n \r\n   public IdentityValidationResult ValidateUsername(MyUser user, string userName)\r\n   {\r\n      ...\r\n   }\r\n\r\n   public IdentityValidationResult ValidatePassword(MyUser user, string newPassword)\r\n   {\r\n      ...\r\n   }\r\n}\r\n```\r\n\r\nThe mechanism would therefore be very similar to the current ASP.NET Identity structure, the default behavior wont change - but there would be maximum flexibility for customization.\r\nA general option could of course be introduced in addition.\r\n\r\n",
                                           "updatedAt":  "2021-12-27T15:32:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde84796L2",
                                           "createdAt":  "2022-01-05T21:18:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-01-05T21:18:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde848AqLv",
                                           "createdAt":  "2022-01-06T18:10:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "@BenjaminAbt That seems complicated to me, how would you use that? You wouldn\u0027t be able to tell what the operation was, so you couldn\u0027t do, for example, do not validate the username when changing the password only, unless you\u0027re expecting us to just call validatepassword, which, of course, already exists kind of, with the validation rules.\r\n\r\nWe prefer a flag option in identity settings, it\u0027s easier to understand.",
                                           "updatedAt":  "2022-01-06T18:10:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde848ArDb",
                                           "createdAt":  "2022-01-06T18:16:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "@BenjaminAbt you should be able to do this already via a custom user manager that overrides ChangePasswordAsync to call your own version of UpdateUserWithOutValidation",
                                           "updatedAt":  "2022-01-06T18:16:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde849WqRA",
                                           "createdAt":  "2022-02-03T20:00:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BenjaminAbt",
                                           "body":  "\u003e how would you use that? \r\n\r\nYes, it probably couldn\u0027t be done with the current system without major changes.\r\nCurrently, the entire user is always validated (`ValidateUserAsync`) without knowing what has actually changed.\r\n\r\n@HaoK thanks for the hint.\r\nCurrently, we are bypassing the entire user management process. We actually only use the identity system to have a secure login behavior, 2FA for free and not have to do certain tasks like password hashing ourselves.\r\n\r\nEverything else is disabled because it\u0027s not applicable (for us / my customers).",
                                           "updatedAt":  "2022-02-03T20:00:05Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Offer backward compatible Identity rule mechanism",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "triaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/39375",
        "createdAt":  "2022-01-07T18:01:15Z",
        "number":  39375,
        "author":  "ascott18",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-22T18:01:52Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nThe message for an invalid username is `Username \u0027{0}\u0027 is invalid, can only contain letters or digits`. https://github.com/dotnet/aspnetcore/blob/main/src/Identity/Extensions.Core/src/Resources.resx#L164-L167\r\n\r\nHowever, this message is produced when the username contains any characters not included in `AllowedUserNameCharacters`, a value which defaults to alphanumeric _plus_ `-._@+`. \n\n### Expected Behavior\n\nAt the very least I\u0027d expect the error message reflect what\u0027s actually allowed by the defaults. Bonus points if it reflected what\u0027s configured by the developer, but this would be quite difficult due to the way that the allowed characters are configured.\n\n### Steps To Reproduce\n\nRepro is trivial:\r\n- In an AspNetCore project w/ Identity, call `UserManager\u003cT\u003e.SetUserNameAsync(user, \"userName!\")` \r\n- Observe that the error states the username can only contain letters and numbers.\r\n- Change the username to `userName@example.com`, observe that no error occurs despite containing characters other than letters and numbers as stated by the validation message.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n6.0.101\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOl-UWGA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde848EO3b",
                                           "createdAt":  "2022-01-07T21:09:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "Triage: we should correct the default here, and also make the message customizable since users can modify the set of allowed characters in the username.",
                                           "updatedAt":  "2022-01-07T21:09:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde848EO5l",
                                           "createdAt":  "2022-01-07T21:09:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 7 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-01-07T21:09:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Oj8zz",
                                           "createdAt":  "2022-11-17T04:22:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-11-17T04:22:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Oj81c",
                                           "createdAt":  "2022-11-17T04:22:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-11-17T04:22:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85QMSIF",
                                           "createdAt":  "2022-12-10T22:21:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ingmar-Paetzold",
                                           "body":  "I just typed in an example from a Adam Freeman\u0027s book, where `.AllowedUserNameCharacters` are set to lowercase letters a-z only.\r\nThe default error message \"... can only contain letters or digits\" is definitely misleading, since no digits allowed. That would drive possible users crazy. (OK, granted, a site that only allows lowercase letters for user names probably needs to think about usability as well...)\r\nNevertheless, when customizing the usable alphabet is possible, then customizing the error message should be as well, allowing to refer to the special rules. Or is it already changeable?",
                                           "updatedAt":  "2022-12-12T08:07:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86WEq20",
                                           "createdAt":  "2024-12-04T15:38:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lokisinary3d",
                                           "body":  "i got this error: Username is invalid, can only contain letters or digits.\nif i add the user name field in registration and try to use user name like this: test user\nbut if i use: testuser\ni do not see the error and found out that we cannot have space between the user name because it treating UserName as email also.\nIf any one know how to fix this provide the solution.",
                                           "updatedAt":  "2024-12-04T15:45:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86X5RYY",
                                           "createdAt":  "2024-12-17T12:48:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sander1095",
                                           "body":  "I wouldn\u0027t mind having a look at this in the new year, however, I would like to hear from the ASP.NET Core team what kind of solution they\u0027d like. \n\n- Do we need to change the current default sentence?\n- Does the message need to become customizable, somehow?\n- Or would it need to change automatically based on the `AllowedUserNameCharacters`?",
                                           "updatedAt":  "2024-12-17T12:48:02Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Identity: Message for invalid username does not reflect actual permitted characters.",
        "labels":  [
                       "help wanted",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/41303",
        "createdAt":  "2022-04-21T17:35:46Z",
        "number":  41303,
        "author":  "lpperras",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCzM83A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "scs-vilim",
                                            "createdAt":  "2023-10-11T09:41:41Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-04-27T22:16:13Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nWe are using the Microsoft.Extensions.DependencyInjection.IdentityServerBuilderConfigurationExtensions.AddApiAuthorization method and it registers and in memory implementation of ISigningCredentialStore and IValidationKeysStore. The existing code will configure the ConfigureSigningCredentials and always call the LoadKey method in Microsoft.AspNetCore.ApiAuthorization.IdentityServer.ConfigureSigningCredentials. That means that you need to configure the IdentityServer:Key in your environment, even if you end up not needing it because you use your own implementation of ISigningCredentialStore and IValidationKeysStore.\n\n### Describe the solution you\u0027d like\n\nI would like the Microsoft.Extensions.DependencyInjection.IdentityServerBuilderConfigurationExtensions.AddApiAuthorization to not force the registration of the in memory ISigningCredentialStore and IValidationKeysStore if there is already one registered, or through the options.\n\n### Additional context\n\nDuende now suggests to use their automatic key management key store. It might be a good idea to leverage it by default instead of in memory implementation.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQkCqlg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85CQKqW",
                                           "createdAt":  "2022-04-27T22:16:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-04-27T22:16:13Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "AddApiAuthorization for IdentityServer should allow to override in memory signing credential store.",
        "labels":  [
                       "area-identity",
                       "feature-identity-service"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/42260",
        "createdAt":  "2022-06-17T14:30:45Z",
        "number":  42260,
        "author":  "springy76",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-03-29T15:27:25Z",
        "body":  "`UserStore\u003cTUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken, TRoleClaim\u003e` just ignores the fact my app is using (Pooled)DbContextFactories.\r\n\r\nI don\u0027t know if `UserStore` could auto-detect the presence of `IDbContextFactory` registration or if 2 similar classes would have to be maintained.\r\n\r\nSuch thing also should fix issues like https://github.com/dotnet/aspnetcore/issues/22031",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWL3r7g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85FF9zG",
                                           "createdAt":  "2022-06-17T20:02:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-06-17T20:02:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Yvevu",
                                           "createdAt":  "2023-03-29T15:27:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Drake53",
                                           "body":  "I have the same issue with [EntityFrameworkCoreXmlRepository](https://github.com/dotnet/aspnetcore/blob/main/src/DataProtection/EntityFrameworkCore/src/EntityFrameworkCoreXmlRepository.cs)",
                                           "updatedAt":  "2023-03-29T15:27:25Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "UserStore should use IDbContextFactory\u003cTContext\u003e (instead of just TContext) if available",
        "labels":  [
                       "investigate",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/42669",
        "createdAt":  "2022-07-11T21:28:36Z",
        "number":  42669,
        "author":  "PieterjanDeClippel",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC2mxnQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "malisancube",
                                            "createdAt":  "2022-07-14T01:06:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Hamza-Houzali",
                                            "createdAt":  "2022-07-14T16:26:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pihai",
                                            "createdAt":  "2024-03-18T14:44:11Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-08-22T20:13:39Z",
        "body":  "## Summary\r\n\r\n[SignInManager.SignIn methods](https://github.com/dotnet/aspnetcore/blob/main/src/Identity/Core/src/SignInManager.cs#L327) now call [SignInOrTwoFactorAsync](https://github.com/dotnet/aspnetcore/blob/main/src/Identity/Core/src/SignInManager.cs#L784). If a verification code is required, this method runs the following pseudo-code\r\n\r\n    var claimsIdentity = new ClaimsIdentity(IdentityConstants.TwoFactorUserIdScheme);\r\n    identity.AddClaims([\r\n        new Claim(ClaimTypes.Name, userId),\r\n        new Claim(ClaimTypes.AuthenticationMethod, loginProvider),\r\n    ]);\r\n    await Context.SignInAsync(IdentityConstants.TwoFactorUserIdScheme, new ClaimsPrincipal(claimsIdentity));\r\n\r\nYou\u0027re not signed in until you actually enter a 2-factor verification code. At the moment this is **hard-coded** [here](https://github.com/dotnet/aspnetcore/blob/main/src/Identity/Core/src/SignInManager.cs#L337), so there\u0027s no way we can add more of similar logic to the sign-in flow.\r\n\r\n## Motivation and goals\r\n\r\n### Use-case 1\r\nThe two-factor authentication flow can be implemented using this mechanism.\r\n\r\nThe idea would be something like this:\r\n\r\n```\r\ninternal class TwoFactorSignInInterceptor : SignInInterceptor\r\n{\r\n    private readonly UserManager\u003cUser\u003e userManager;\r\n    public TwoFactorSignInInterceptor(UserManager\u003cUser\u003e userManager)\r\n    {\r\n        this.userManager = userManager;\r\n    }\r\n\r\n    public override Task\u003c(bool, SignInResult)\u003e Intercept(Claim[] issuedClaims)\r\n    {\r\n        // At this point, the user is still unauthenticated\r\n        var user = await userManager.GetUserByIdAsync(issuedClaims.FirstOrDefault(c =\u003e c.Name == ClaimTypes.NameIdentifier));\r\n        if (user.TwoFactorEnabled)\r\n        {\r\n            await Context.SignInAsync(IdentityConstants.TwoFactorUserIdScheme, StoreTwoFactorInfo(userId, loginProvider));\r\n            return (false, SignInResult.RequiresTwoFactor);\r\n        }\r\n        else\r\n        {\r\n            return (true, SignInResult.Succeeded);\r\n        }\r\n    }\r\n\r\n    // Create when the sign-in flow is interrupted\r\n    public override string CookieName =\u003e \"Identity.TwoFactorUserId\";\r\n}\r\n\r\nservices.AddScoped\u003cSignInInterceptor, TwoFactorSignInInterceptor\u003e();\r\n```\r\n\r\n### Use-case 4\r\nEmail confirmation.\r\n\r\nIf a user\u0027s email address isn\u0027t confirmed, and `IdentityOptions.SignIn.RequiresConfirmedEmail == true`, the flow can be interrupted.\r\n\r\n### Use-case 3 (my requirement)\r\n\r\n- A pre-configured user is set using the EFCore `HasData` method, with a hard-coded email/password\r\n- This user is administrator. This would be harmless since there\u0027s no data whatsoever yet in the database\r\n- When the admin first signs in, he MUST change his password before he can do anything.\r\n\r\nHere you would have a similar flow as the two-factor-signin. A cookie is created containing the necessary information to complete the flow. We can\u0027t add such logic since everything in the `SignInManager` is [hard-coded](https://github.com/dotnet/aspnetcore/blob/main/src/Identity/Core/src/SignInManager.cs#L337)\r\n\r\nAn admin user is pre-configured with an email/password combination. After deploying the app (while the database doesn\u0027t contain any information) the administrator can sign in using `admin@example.com` / `admin`. Before he can proceed he MUST change the password. Up until then he\u0027s still not signed in.\r\n\r\nYou could have a `ChangePasswordSignInInterceptor`:\r\n\r\n```\r\ninternal class ChangePasswordSignInInterceptor : SignInInterceptor\r\n{\r\n    private readonly UserManager\u003cUser\u003e userManager;\r\n    private readonly SignInManager\u003cUser\u003e signInManager;\r\n    public ChangePasswordSignInInterceptor(UserManager\u003cUser\u003e userManager, SignInManager\u003cUser\u003e signInManager)\r\n    {\r\n        this.userManager = userManager;\r\n        this.signInManager = signInManager;\r\n    }\r\n\r\n    public override Task\u003c(bool, SignInResult)\u003e Intercept(Claim[] issuedClaims)\r\n    {\r\n        // At this point, the user is still unauthenticated\r\n        var user = await userManager.GetUserByIdAsync(issuedClaims.FirstOrDefault(c =\u003e c.Name == ClaimTypes.NameIdentifier));\r\n        var isInitialPassword = await userManager.CheckPasswordAsync(user, \"admin\");\r\n        if (isInitialPassword)\r\n        {\r\n            // Don\u0027t sign in yet. Force the user to change his password.\r\n            await Context.SignInAsync(IdentityConstants.ForceChangeUserPasswordScheme, new ClaimsPrincipal(new [] {\r\n                new Claim(\"changePasswordUserId\", user.Id),\r\n            }));\r\n            return (false, MySignInResult.MustChangePassword);\r\n        }\r\n        else\r\n        {\r\n            return (true, SignInResult.Succeeded);\r\n        }\r\n    }\r\n\r\n    // Create when the sign-in flow is interrupted\r\n    public override string CookieName =\u003e \"Identity.FirstTimeChangePassword\";\r\n}\r\n\r\nservices.AddScoped\u003cSignInInterceptor, ChangePasswordSignInInterceptor\u003e();\r\n```\r\n\r\n### Use-case 4\r\nForce users to change their password once every year.\r\n\r\nSame as the previous 2 cases. When the user password is older than 1 year, the user should not be able to finish the sign-in flow until he actually changed his password. This can also easily be coded using this mechanism.\r\n\r\n## Forecasted major changes\r\n\r\nThe [`SignInOrTwoFactor`](https://github.com/dotnet/aspnetcore/blob/main/src/Identity/Core/src/SignInManager.cs#L784) method would need to be modified to iterate these interceptors:\r\n\r\n```\r\nvar interceptors = serviceProvider.GetServices\u003cSignInInterceptor\u003e();\r\nforeach (var interceptor in interceptors) {\r\n    var result = await interceptor.Intercept(claimsToIssue);\r\n    if (!result.Item1) {\r\n        switch (interceptor) {\r\n            case TwoFactorSignInInterceptor twoFactorSignInInterceptor:\r\n                return SignInResult.RequiresTwoFactor;\r\n            case ChangePasswordSignInInterceptor changePasswordSignInInterceptor:\r\n                return MySignInResult.MustChangePassword;\r\n            default:\r\n                return interceptor.GetResult();\r\n        }\r\n        // Or just interceptor.GetResult() all the way, I don\u0027t know...\r\n    }\r\n}\r\n```\r\n\r\n## In scope\r\n\r\n- Only the `TwoFactorSignInInterceptor`, which is by default registered by Identity, is registered in the service container\r\n- Developers added their own `SignInInterceptor` in the application (for example the before-mentioned `ChangePasswordSignInInterceptor`)\r\n\r\n## Risks / unknowns\r\n\r\n### Sign-in must succeed\r\nWe must be certain that the Signin chosen by the user actually **succeeds** (eg. correct username-password). For example the `ChangePasswordSignInInterceptor` could be creating a before-sign-in cookie which allows the owner to change the password of an administrator user, even when this password was changed in the past.\r\n\r\nIf the username/password combination, or external login, is incorrect, the interceptors **MUST NOT** be triggered.\r\n\r\nElse, the before-mentioned `ChangePasswordSignInInterceptor` would allow anyone to change to password of the administrator user (or do it some other way...).\r\n\r\n### Interceptors cannot be bypassed\r\nEach registered interceptor is essential in deciding whether a SignIn is completed or not\r\n\r\n## Examples\r\n\r\n```\r\nvar signinResult = await signInManager.PasswordSignInAsync(user, password);\r\nif (signInResult.Succeeded) {\r\n    var entityUser = await userManager.GetUserAsync(User);\r\n    return Redirect(RouteUrl(\"home\"), new { userName = entityUser.UserName }); // Welcome, Joe\r\n} else {\r\n    switch (signInResult.FailedInterceptor) {\r\n        case EmailConfirmationIntercepter emailConfirmationIntercepter:\r\n            await emailService.ResendConfirmationEmail(user);\r\n            return Forbid();\r\n        case TwoFactorSignInInterceptor twoFactorSignInInterceptor:\r\n            return Redirect(RouteUrl(\"two-factor-form\"));\r\n        case ChangePasswordSignInInterceptor changePasswordSignInInterceptor:\r\n            return Redirect(RouteUrl(\"change-initial-password\"));\r\n        default:\r\n           return Redirect(RouteUrl(\"error\"), new { message = \"The password is incorrect\" });\r\n    }\r\n}\r\n```\r\n\r\n\u003c!--\r\n# Detailed design\r\n\r\nIt\u0027s often best not to fill this out until you get basic consensus about the above. When you do, consider adding an implementation proposal with the following headings:\r\n\r\nDetailed design\r\nDrawbacks\r\nConsidered alternatives\r\nOpen questions\r\nReferences\r\n\r\nIf there\u0027s one clear design you have consensus on, you could do that directly in a PR.\r\n--\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrdCpNA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85GjppR",
                                           "createdAt":  "2022-07-13T22:38:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "@blowdart @HaoK ",
                                           "updatedAt":  "2022-07-13T22:38:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Gna0K",
                                           "createdAt":  "2022-07-14T17:55:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Thats not a bad idea for 8. Plopping it into that milestone.",
                                           "updatedAt":  "2022-07-14T17:55:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85V-A0H",
                                           "createdAt":  "2023-02-23T19:32:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-02-23T19:32:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86t0Kk0",
                                           "createdAt":  "2025-05-28T12:30:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Pilchard123",
                                           "body":  "Did anything ever come of this (or something similar but under a different name)? It looks like it\u0027s been shuffled in and out of a couple of milestones but never got high up enough the priority list to be worked on. I have a similar requirement to OP and would prefer to use built-in functionality over home-brewed if possible.\n\nI\u0027d be willing to collaborate on a PR/design proposal/whatever if that would be any use.",
                                           "updatedAt":  "2025-05-28T12:31:10Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "SignInInterceptor - Use case = Force user to change password",
        "labels":  [
                       "area-identity",
                       "design-proposal"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/43562",
        "createdAt":  "2022-08-26T09:17:08Z",
        "number":  43562,
        "author":  "Ogglas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-ZH5Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rwb196884",
                                            "createdAt":  "2024-06-20T15:50:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dsparkplug",
                                            "createdAt":  "2024-09-09T07:55:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danports",
                                            "createdAt":  "2024-11-01T18:23:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ogglas",
                                            "createdAt":  "2025-01-23T09:39:21Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-08-22T18:01:53Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI miss a method for deleting `AuthenticatorKey `and `RecoveryCodes `for a user in `Microsoft.AspNetCore.Identity UserManager`. I can control nearly everything else but for some reason there is no method to remove these values.\n\n### Describe the solution you\u0027d like\n\nI would like the following methods implemented:\r\n\r\n```\r\npublic virtual async Task\u003cIdentityResult\u003e RemoveAuthenticatorKeyAsync(TUser user)\r\n\r\npublic virtual async Task\u003cIdentityResult\u003e RemoveTwoFactorRecoveryCodesAsync(TUser user)\r\n```\r\n\r\nI know it might be a risk and that the authenticator app will not work until you reconfigure the AuthenticatorKey again etc. However calling `ResetAuthenticatorKeyAsync `without calling `SetTwoFactorEnabledAsync(user, false);` or similar will have the same affect imo.\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOm0leqg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85JP2m2",
                                           "createdAt":  "2022-08-26T20:14:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "What is your use case for this? You can disable MFA and it\u0027ll all get ignored anyway. What does deletion accomplish for you that disabling doesn\u0027t?",
                                           "updatedAt":  "2022-08-26T20:14:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85JbhJX",
                                           "createdAt":  "2022-08-30T17:20:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Hi @Ogglas. We have added the \"Needs: Author Feedback\" label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
                                           "updatedAt":  "2022-08-30T17:20:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85JbyMJ",
                                           "createdAt":  "2022-08-30T18:32:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODmaMaw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rwb196884",
                                                                               "createdAt":  "2024-06-20T15:51:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Ogglas",
                                           "body":  "@blowdart If a user chooses to disable two-factor authentication I think there should be an alternative to also delete Two-factor authentication keys. \r\n\r\nCurrent functionality:\r\n\r\n![image](https://user-images.githubusercontent.com/4015237/187513898-363133ca-6264-4d37-9561-5d1c30ca9538.png)\r\n\r\nProposed extra button if a user has keys but not 2FA enabled:\r\n\r\n![image](https://user-images.githubusercontent.com/4015237/187514540-0688a915-6bc0-4dde-bdfa-52e8fb21a7db.png)\r\n\r\nA user can of course use Reset authenticator app but that only resets the authenticator key. The database will still keep track of `AuthenticatorKey` and `RecoveryCodes` in Table `AspNetUserTokens` and I think a user should have the possibility to remove these if they want. You can of course fix this via SQL but given that the `UserManager` handles everything else I think this should be handled as well. ",
                                           "updatedAt":  "2022-08-30T18:32:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85JcPtG",
                                           "createdAt":  "2022-08-30T20:36:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCrZ4-g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Ogglas",
                                                                               "createdAt":  "2022-08-30T20:44:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Fair enough. We\u0027ll think about it for 8.\r\n\r\n(But there are a lot of edge case scenarios where usermanager doesn\u0027t do it)",
                                           "updatedAt":  "2022-08-30T20:36:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85pgQFT",
                                           "createdAt":  "2023-10-19T05:33:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOECOrIg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Ogglas",
                                                                               "createdAt":  "2023-10-25T13:38:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "msmeza",
                                                                               "createdAt":  "2023-10-31T15:11:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rwb196884",
                                                                               "createdAt":  "2024-06-20T15:51:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danports",
                                                                               "createdAt":  "2025-01-13T17:22:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "Flash619",
                                           "body":  "\u003e What is your use case for this? You can disable MFA and it\u0027ll all get ignored anyway. What does deletion accomplish for you that disabling doesn\u0027t?\r\n\r\nI would also like to see this feature. \r\n\r\nI currently am working within a system which has the concept of OTP disenrollment. In this case, I would like to also clear any related authentication tokens for that user. This way if OTP is re-enrolled, I do not need to worry about old keys floating around within the system or old authenticators still working. \r\n\r\nTo mitigate this today, upon OTP disenrollment I reset the authenticator key which feels wrong, as it simply replaces the key in the database instead of removing it entirely. ",
                                           "updatedAt":  "2023-10-19T05:36:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86bSV6q",
                                           "createdAt":  "2025-01-21T17:00:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tprime1",
                                           "body":  "\u003e What is your use case for this? You can disable MFA and it\u0027ll all get ignored anyway. What does deletion accomplish for you that disabling doesn\u0027t?\n\nWe offer MFA via both email and authenticator app.  Many of our users are k-12 students who may or may not have a secondary device during class with which to authenticate. But they will, of course have their primary device.  There may be another way to handle this scenario, but I\u0027d like to allow them to be able to remove their AuthenticatorKeys and RecoveryCodes when they mistakenly set up an authenticator app.  Removing those would cause their accounts to revert back to what we have as the default MFA method, email.",
                                           "updatedAt":  "2025-01-21T17:00:37Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Microsoft.AspNetCore.Identity UserManager - Delete user AuthenticatorKey and RecoveryCodes ",
        "labels":  [
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/43634",
        "createdAt":  "2022-08-30T10:44:39Z",
        "number":  43634,
        "author":  "paviad",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-09-26T01:59:14Z",
        "body":  "https://github.com/dotnet/aspnetcore/blob/6f4860eaa8f5281eb4fbabbe830f0c28254d3087/src/Identity/ApiAuthorization.IdentityServer/src/Extensions/DefaultClientRequestParametersProvider.cs#L49-L57\r\n\r\nWhen the client definition has no post logout redirect uris defined, line 54 simply throws without any indication in the log of what the issue was.\r\n\r\nIt would be beneficial to developers if a log message would be shown to explain the exception.\r\n\r\nAlternatively, provide some default value in case the list is empty such as the root path `/`.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSWivlA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85JaK-U",
                                           "createdAt":  "2022-08-30T12:27:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-08-30T12:27:05Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Log instead of just crashing when `PostLogoutRedirectUris` in client definition is empty",
        "labels":  [
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/44000",
        "createdAt":  "2022-09-15T09:59:08Z",
        "number":  44000,
        "author":  "pampua84",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-22T18:00:50Z",
        "body":  "Hello,\r\nusing the RemoveLoginAsync method of the UserManager class I found an anomaly, because if wrong or non-existent values are passed, the method returns as a result Succeeded = true. \r\nIt would be preferable to return an error specifying that the data was not found, for example a not found.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSn3Jwg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85KfcnC",
                                           "createdAt":  "2022-09-16T20:04:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-09-16T20:04:39Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Enhance the RemoveLoginAsync method of the UserManager class",
        "labels":  [
                       "area-identity",
                       "design-proposal"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/44122",
        "createdAt":  "2022-09-22T10:21:35Z",
        "number":  44122,
        "author":  "Ogglas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-10-18T12:13:14Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI have a `Blazor WebAssembly App` created with `Microsoft Visual Studio` with these specifications: `Target Framework .NET 6.0`, `Authentication Type Individual Accounts` and `ASP.NET Core Hosted`:\r\n\r\nUsing this answer I have been able to add Client Credentials flow\r\n\r\nhttps://stackoverflow.com/a/67324222/3850405\r\n\r\nI removed this from `appsettings.json`:\r\n\r\n    \"Clients\": {\r\n      \"WebApplication4.Client\": {\r\n        \"Profile\": \"IdentityServerSPA\"\r\n      }\r\n    }\r\n\r\nEdit `Startup.cs` or `Program.cs`:\r\n\r\n    services.AddIdentityServer()\r\n        .AddApiAuthorization\u003cApplicationUser, ApplicationDbContext\u003e(options =\u003e\r\n        {\r\n            options.Clients.AddIdentityServerSPA(\"WebApplication4.Client\", builder =\u003e\r\n            {\r\n                builder.WithRedirectUri(\"/authentication/login-callback\");\r\n                builder.WithLogoutRedirectUri(\"/authentication/logout-callback\");\r\n            });\r\n            options.Clients.Add(new Duende.IdentityServer.Models.Client\r\n            {\r\n                ClientId = \"WebApplication4.Integration\",\r\n                AllowedGrantTypes = { GrantType.ClientCredentials },\r\n                ClientSecrets = { new Secret(\"MySecretValue\".Sha256()) },\r\n                AllowedScopes = { \"WebApplication4.ServerAPI\"}\r\n            });\r\n        });\r\n\r\nThis request will work:\r\n\r\n    POST /connect/token HTTP/1.1\r\n    Host: localhost:44397\r\n    Content-Type: application/x-www-form-urlencoded\r\n\r\n    grant_type=client_credentials\u0026client_id=WebApplication4.Integration\u0026client_secret=MySecretValue\u0026scope=WebApplication4.ServerAPI\r\n\r\nHowever I want this client to have its own `AllowedScopes`. If I then change `AllowedScopes = { \"WebApplication4.ServerAPI\"}` to `AllowedScopes = { \"WebApplication4.IntegrationAPI\"}` and of course modifying the request. \r\n\r\nServer then responds with:\r\n\r\n    {\r\n        \"error\": \"invalid_scope\"\r\n    }\r\n\r\nIf I look at logging I get the following history:\r\n\r\n    info: Duende.IdentityServer.Hosting.IdentityServerMiddleware[0]\r\n          Invoking IdentityServer endpoint: Duende.IdentityServer.Endpoints.TokenEndpoint for /connect/token\r\n    info: Duende.IdentityServer.Events.DefaultEventService[0]\r\n          {\r\n            \"ClientId\": \"WebApplication4.Integration\",\r\n            \"AuthenticationMethod\": \"SharedSecret\",\r\n            \"Category\": \"Authentication\",\r\n            \"Name\": \"Client Authentication Success\",\r\n            \"EventType\": \"Success\",\r\n            \"Id\": 1010,\r\n            \"ActivityId\": \"80000009-0014-d600-b63f-84710c7967bb\",\r\n            \"TimeStamp\": \"2022-09-22T09:30:31Z\",\r\n            \"ProcessId\": 17768,\r\n            \"LocalIpAddress\": \"::1:44397\",\r\n            \"RemoteIpAddress\": \"::1\"\r\n          }\r\n    fail: Duende.IdentityServer.Validation.DefaultResourceValidator[0]\r\n          Scope WebApplication4.IntegrationAPI not found in store or not supported by requested resource indicators.\r\n    fail: Duende.IdentityServer.Validation.TokenRequestValidator[0]\r\n          Invalid scopes requested, {\r\n            \"ClientId\": \"WebApplication4.Integration\",\r\n            \"GrantType\": \"client_credentials\",\r\n            \"AuthorizationCode\": \"********\",\r\n            \"RefreshToken\": \"********\",\r\n            \"Raw\": {\r\n              \"grant_type\": \"client_credentials\",\r\n              \"client_id\": \"WebApplication4.Integration\",\r\n              \"client_secret\": \"***REDACTED***\",\r\n              \"scope\": \"WebApplication4.IntegrationAPI\"\r\n            }\r\n          }\r\n    info: Duende.IdentityServer.Events.DefaultEventService[0]\r\n          {\r\n            \"ClientId\": \"WebApplication4.Integration\",\r\n            \"Endpoint\": \"Token\",\r\n            \"GrantType\": \"client_credentials\",\r\n            \"Error\": \"invalid_scope\",\r\n            \"Category\": \"Token\",\r\n            \"Name\": \"Token Issued Failure\",\r\n            \"EventType\": \"Failure\",\r\n            \"Id\": 2001,\r\n            \"ActivityId\": \"80000009-0014-d600-b63f-84710c7967bb\",\r\n            \"TimeStamp\": \"2022-09-22T09:30:31Z\",\r\n            \"ProcessId\": 17768,\r\n            \"LocalIpAddress\": \"::1:44397\",\r\n            \"RemoteIpAddress\": \"::1\"\r\n          }\r\n\r\nWhat I take with me is this:\r\n\r\n    Scope WebApplication4.IntegrationAPI not found in store or not supported by requested resource indicators.\r\n\r\nI then looked at these guides:\r\n\r\nhttps://github.com/IdentityServer/IdentityServer4/issues/4632#issuecomment-654685880\r\n\r\nhttps://docs.duendesoftware.com/identityserver/v5/quickstarts/1_client_credentials/\r\n\r\nI therefore added this code:\r\n\r\n    public static class Config\r\n    {\r\n        public static IEnumerable\u003cApiScope\u003e ApiScopes =\u003e\r\n            new List\u003cApiScope\u003e\r\n            {\r\n            new ApiScope(\"WebApplication4.IntegrationAPI\", \"Integration API\")\r\n            };\r\n    }\r\n\r\nand\r\n\r\n    services.AddIdentityServer()\r\n        .AddInMemoryApiScopes(Config.ApiScopes)\r\n        .AddApiAuthorization\u003cApplicationUser, ApplicationDbContext\u003e(options =\u003e...\r\n\r\nThis still gave me the same error.\r\n\r\nI then added a new list with clients:\r\n\r\n    public static IEnumerable\u003cDuende.IdentityServer.Models.Client\u003e Clients =\u003e\r\n        new List\u003cDuende.IdentityServer.Models.Client\u003e\r\n        {\r\n            new Duende.IdentityServer.Models.Client\r\n            {\r\n                ClientId = \"WebApplication4.Integration\",\r\n                AllowedGrantTypes = { GrantType.ClientCredentials },\r\n                ClientSecrets = { new Secret(\"MySecretValue\".Sha256()) },\r\n                AllowedScopes = { \"WebApplication4.IntegrationAPI\" },\r\n            }\r\n        };\r\n\r\nRemoved the old client from `AddApiAuthorization` and used this code instead:\r\n\r\n    services.AddIdentityServer()\r\n        .AddInMemoryApiScopes(Config.ApiScopes)\r\n        .AddInMemoryClients(Config.Clients)\r\n        .AddApiAuthorization\u003cApplicationUser, ApplicationDbContext\u003e(options =\u003e ...\r\n\r\nThis gave me a new error when requesting a token:\r\n\r\n    {\r\n        \"error\": \"invalid_client\"\r\n    }\r\n\r\nLogs:\r\n\r\n    info: Duende.IdentityServer.Hosting.IdentityServerMiddleware[0]\r\n          Invoking IdentityServer endpoint: Duende.IdentityServer.Endpoints.TokenEndpoint for /connect/token\r\n    info: Duende.IdentityServer.Events.DefaultEventService[0]\r\n          {\r\n            \"ClientId\": \"WebApplication4.Integration\",\r\n            \"Category\": \"Authentication\",\r\n            \"Name\": \"Client Authentication Failure\",\r\n            \"EventType\": \"Failure\",\r\n            \"Id\": 1011,\r\n            \"Message\": \"Unknown client\",\r\n            \"ActivityId\": \"8000000a-0016-e700-b63f-84710c7967bb\",\r\n            \"TimeStamp\": \"2022-09-22T09:54:08Z\",\r\n            \"ProcessId\": 10676,\r\n            \"LocalIpAddress\": \"::1:44397\",\r\n            \"RemoteIpAddress\": \"::1\"\r\n          }\r\n    fail: Duende.IdentityServer.Validation.ClientSecretValidator[0]\r\n          No client with id \u0027WebApplication4.Integration\u0027 found. aborting\r\n\r\nIf I look at https://localhost:44397/.well-known/openid-configuration I only see `WebApplication4.ServerAPI` in `scopes_supported` no matter the configuration. \n\n### Describe the solution you\u0027d like\n\nI want to do it like this so that I can add a policy like this later:\r\n\r\n    services.AddAuthorization(options =\u003e\r\n    {\r\n        options.AddPolicy(\"IntegrationApiScope\", policy =\u003e\r\n        {\r\n            policy.RequireAuthenticatedUser();\r\n            policy.RequireClaim(\"scope\", \"WebApplication4.IntegrationAPI\");\r\n        });\r\n    });\r\n\r\nMeaning that I only want Client Credentials flow to get the scope `WebApplication4.IntegrationAPI` and I don\u0027t want Authorization Code Grant, normal login flow via `authorization_code`, to have this scope or be able to request this scope.\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTG4pDw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85LVslM",
                                           "createdAt":  "2022-09-30T20:12:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "@javiercn @SteveSandersonMS Can you please take a look at this?",
                                           "updatedAt":  "2022-09-30T20:12:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Lbnt8",
                                           "createdAt":  "2022-10-03T14:29:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "@Ogglas thanks for contacting us.\r\n\r\nDoes the same configuration work without using our integration package?",
                                           "updatedAt":  "2022-10-03T14:29:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85LbnyX",
                                           "createdAt":  "2022-10-03T14:29:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Hi @Ogglas. We have added the \"Needs: Author Feedback\" label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
                                           "updatedAt":  "2022-10-03T14:29:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85LoPrr",
                                           "createdAt":  "2022-10-05T19:08:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ogglas",
                                           "body":  "@javiercn Yes it does. You can try it out by installing Duende IdentityServer Templates like this:\r\n\r\n`dotnet new --install Duende.IdentityServer.Templates`\r\n\r\nhttps://docs.duendesoftware.com/identityserver/v5/quickstarts/0_overview/\r\n\r\nThen create a new project with template: \"Duende IdentityServer with ASP.NET Core Identity (Duende Software)\"\r\n\r\nWorks:\r\n\r\n![image](https://user-images.githubusercontent.com/4015237/194138461-9d849249-7856-4a81-b40a-0390d8239bf9.png)\r\n\r\nDoes not work:\r\n\r\n![image](https://user-images.githubusercontent.com/4015237/194138538-8d9ab3c9-c6a1-4135-8667-007fa652f300.png)\r\n\r\n![image](https://user-images.githubusercontent.com/4015237/194138774-41ce0135-61c2-4436-b872-430a9af24182.png)\r\n\r\nI did manage to get an extra scope like this:\r\n\r\n    services.AddIdentityServer()\r\n        .AddApiAuthorization\u003cApplicationUser, ApplicationDbContext\u003e(options =\u003e\r\n        {\r\n            options.ApiScopes.Add(new ApiScope(\"scope1\"));\r\n            options.Clients.AddIdentityServerSPA(\"WebApplication4.Client\", builder =\u003e\r\n            {\r\n                builder.WithRedirectUri(\"/authentication/login-callback\");\r\n                builder.WithLogoutRedirectUri(\"/authentication/logout-callback\");\r\n            });\r\n            options.Clients.Add(new Duende.IdentityServer.Models.Client\r\n            {\r\n                ClientId = \"WebApplication4.Integration\",\r\n                AllowedGrantTypes = { GrantType.ClientCredentials },\r\n                ClientSecrets = { new Secret(\"MySecretValue\".Sha256()) },\r\n                AllowedScopes = { \"scope1\" }\r\n            });\r\n        });\r\n\r\nHowever `WebApplication4.Integration` can still request the scope `WebApplication4.ServerAPI` and get a token with it. \r\n\r\nIf I remove `AddApiAuthorization` I get this error: \r\n\r\n\u003e No service for type \u0027Duende.IdentityServer.Stores.ISigningCredentialStore\u0027 has been registered.\r\n\r\nI\u0027m guessing it has something to do with `AddApiAuthorization` from NuGet `Microsoft.AspNetCore.ApiAuthorization.IdentityServer`. \r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/main/src/Identity/ApiAuthorization.IdentityServer/src/IdentityServerBuilderConfigurationExtensions.cs\r\n\r\nUsing the following code:\r\n\r\n    services.AddIdentityServer()\r\n        .AddApiAuthorization\u003cApplicationUser, ApplicationDbContext\u003e(options =\u003e\r\n        {\r\n            options.ApiScopes.Add(new ApiScope(\"scope1\"));\r\n            options.ApiScopes.Add(new ApiScope(\"scope2\"));\r\n            options.Clients.Add(new Duende.IdentityServer.Models.Client\r\n            {\r\n                ClientId = \"WebApplication4.Integration\",\r\n                AllowedGrantTypes = { GrantType.ClientCredentials },\r\n                ClientSecrets = { new Secret(\"MySecretValue\".Sha256()) },\r\n                AllowedScopes = { \"scope1\" }\r\n            });\r\n        });\r\n\r\n`WebApplication4.Integration` can get a token using scopes `WebApplication4.ServerAPI` and `scope1` but not with `scope2`. Any idea on how to prevent `WebApplication4.ServerAPI` to be added to all `AllowedScopes`?",
                                           "updatedAt":  "2022-10-05T19:16:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85L0eHT",
                                           "createdAt":  "2022-10-07T20:06:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-10-07T20:06:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85MJteB",
                                           "createdAt":  "2022-10-13T13:27:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ogglas",
                                           "body":  "@adityamandaleeka @javiercn @SteveSandersonMS I noticed something else as well. \r\n\r\nUsing the following code:\r\n\r\n```\r\nservices.AddIdentityServer()\r\n    .AddApiAuthorization\u003cApplicationUser, ApplicationDbContext\u003e(options =\u003e\r\n    {\r\n        options.ApiScopes.Add(new ApiScope(\"scope1\"));\r\n        options.Clients.AddIdentityServerSPA(\"WebApplication4.Client\", builder =\u003e\r\n        {\r\n            builder.WithRedirectUri(\"/authentication/login-callback\");\r\n            builder.WithLogoutRedirectUri(\"/authentication/logout-callback\");\r\n        });\r\n        options.Clients.Add(new Duende.IdentityServer.Models.Client\r\n        {\r\n            ClientId = \"WebApplication4.Integration\",\r\n            AllowedGrantTypes = { GrantType.ClientCredentials },\r\n            ClientSecrets = { new Secret(\"MySecretValue\".Sha256()) },\r\n            AllowedScopes = { \"scope1\" }\r\n        });\r\n    });\r\n```\r\n\r\nI get a token with the following request:\r\n\r\n```\r\nPOST /connect/token HTTP/1.1\r\nHost: localhost:44397\r\nContent-Type: application/x-www-form-urlencoded\r\n\r\ngrant_type=client_credentials\u0026client_id=WebApplication4.Integration\u0026client_secret=MySecretValue\u0026scope=scope1\r\n```\r\n\r\nI then tried to create a policy like this:\r\n\r\n```\r\nservices.AddAuthorization(options =\u003e\r\n{\r\n    options.AddPolicy(\"ApiScope\", policy =\u003e\r\n    {\r\n        policy.RequireAuthenticatedUser();\r\n        policy.RequireClaim(\"scope\", \"scope1\");\r\n    });\r\n});\r\n```\r\n\r\nAnd use it like this:\r\n\r\n```\r\n[HttpGet]\r\n[Authorize(Policy = \"ApiScope\")]\r\npublic ActionResult\u003cIEnumerable\u003cstring\u003e\u003e Get()\r\n```\r\n\r\nUsing the `access_token` I got from the request resulted in a 401 Unauthorized response. I then tried with simply `[Authorize]` but I still receive 401 Unauthorized. If I change `RequireClaim` to `policy.RequireClaim(\"scope\", \"WebApplication4.ServerAPI\");` and request a new token like above but with scope `WebApplication4.ServerAPI` instead of `scope1`. Then both `[Authorize]` and `[Authorize(Policy = \"ApiScope\")]` works as expected. Any idea how to get around this? Also if you have any idea on how to prevent `WebApplication4.ServerAPI` to be added to all AllowedScopes it would be very appreciated. ",
                                           "updatedAt":  "2022-10-13T13:27:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85MbaN-",
                                           "createdAt":  "2022-10-18T11:43:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marinasundstrom",
                                           "body":  "My Blazor app stopped working with a \"invalid_scope\".\r\n\r\nSource: https://github.com/marinasundstrom/todo-app\r\n\r\nHere is the Identity Server log:\r\n\r\n```\r\n[identityservice_a6b737f7-2]: [13:37:21 Debug] Duende.IdentityServer.EntityFramework.Stores.ResourceStore\r\n[identityservice_a6b737f7-2]: Found [\"openid\", \"profile\"] identity scopes in database\r\n[identityservice_a6b737f7-2]:\r\n[identityservice_a6b737f7-2]: [13:37:21 Debug] Duende.IdentityServer.EntityFramework.Stores.ResourceStore\r\n[identityservice_a6b737f7-2]: Found [\"myapi\"] API resources in database\r\n[identityservice_a6b737f7-2]:\r\n[identityservice_a6b737f7-2]: [13:37:21 Debug] Duende.IdentityServer.EntityFramework.Stores.ResourceStore\r\n[identityservice_a6b737f7-2]: Found [\"myapi\"] scopes in database\r\n[identityservice_a6b737f7-2]:\r\n[identityservice_a6b737f7-2]: [13:37:21 Error] Duende.IdentityServer.Validation.DefaultResourceValidator\r\n[identityservice_a6b737f7-2]: Scope email not found in store or not supported by requested resource indicators.\r\n[identityservice_a6b737f7-2]:\r\n[identityservice_a6b737f7-2]: [13:37:21 Error] Duende.IdentityServer.Endpoints.AuthorizeEndpoint\r\n[identityservice_a6b737f7-2]: Request validation failed\r\n```\r\n\r\nIdentityServer config:\r\n\r\n```c#\r\n    public static IEnumerable\u003cApiResource\u003e ApiResources =\u003e\r\n        new ApiResource[]\r\n        {\r\n                // the api requires the role claim\r\n                new ApiResource(\"myapi\", \"The Web Api\", new[] { JwtClaimTypes.Name, JwtClaimTypes.PreferredUserName, JwtClaimTypes.Email, JwtClaimTypes.Role })\r\n                {\r\n                    Scopes = new string[] { \"myapi\" }\r\n                }\r\n        };\r\n```\r\n\r\nI started working again when I removed the scope \"email\" from \"DefaultScopes\" in appsettings.json in my Blazor app:\r\n\r\n```json\r\n{\r\n  \"Local\": {\r\n    \"Authority\": \"https://localhost:5041\",\r\n    \"ClientId\": \"clientapp\",\r\n    \"RedirectUri\": \"https://localhost:5021/authentication/login-callback\",\r\n    \"ResponseType\": \"code\",\r\n    \"DefaultScopes\": [\r\n      \"openid\",\r\n      \"profile\",\r\n      // \"email\",\r\n      \"myapi\"\r\n    ],\r\n    \"PostLogoutRedirectUri\": \"https://localhost:5021/\"\r\n  }\r\n}\r\n```",
                                           "updatedAt":  "2022-10-18T11:50:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85MbikP",
                                           "createdAt":  "2022-10-18T12:13:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCuC4wA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "marinasundstrom",
                                                                               "createdAt":  "2022-10-18T14:37:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "leastprivilege",
                                           "body":  "I recommend\r\n\r\nhttps://docs.duendesoftware.com/identityserver/v6/upgrades/spa_to_duende/",
                                           "updatedAt":  "2022-10-18T12:13:14Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Duende.IdentityServer from Blazor WebAssembly App protecting ASP.NET Core API using Client Credentials with custom allowed scope - invalid_scope",
        "labels":  [
                       "External",
                       "area-identity",
                       "feature-blazor-wasm"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/44660",
        "createdAt":  "2022-10-20T12:38:30Z",
        "number":  44660,
        "author":  "erxbout",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODGVsig==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Gideon1673",
                                            "createdAt":  "2024-03-03T16:39:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mguinness",
                                            "createdAt":  "2025-05-12T03:29:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Enderlook",
                                            "createdAt":  "2025-07-09T13:22:53Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-08-22T20:13:30Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nhttps://github.com/dotnet/aspnetcore/blob/afeab33afa4d81d3799dd665d6c1f47618815791/src/Identity/UI/src/Areas/Identity/Pages/V5/Account/Login.cshtml.cs#L130\r\n\r\nThis line above uses the Input.Email for logging in, but the PasswordSignInAsync method expects a username, therefore can not login if the username differs from the email..\n\n### Expected Behavior\n\nAfter using the libraries with default configuration one should be able to login without scaffolding Login.cshtml.cs because this call is used wrongly..\n\n### Steps To Reproduce\n\n+ Use libraries with default configuration\r\n+ Add users with username and email (example user: foo, email: foo@test.com)\r\n   *Outcome in usertable: username = foo, NormalizedUsername = FOO, email = foo@test.com, NormalizedEmail = FOO@TEST.COM*\r\n+ Try to login with email\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n6\n\n### Anything else?\n\nPossible solutions are (in my opinion, maybe I miss something)\r\n+ Edit PasswordSignInAsync to allow an email as first parameter\r\n+ Edit PasswordSignInAsync to find user by email or by username\r\n+ Use UserManager to select the user by email and pass it to PasswordSignInAsync correctly\r\n\r\nSince this would be a small change (at least as far as I can see), I would volunteer to provide a PR, but I need to know which solution would be appreciated ;)\r\n\r\nAlso I do not know what DotnetVersion I should provide (I am currently using 6 but this bug might affect versions below too)\r\nHave a nice day :D ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqvGp_Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85Mu_kt",
                                           "createdAt":  "2022-10-21T20:07:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC6BOag==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "scott-wi",
                                                                               "createdAt":  "2023-04-17T16:06:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "blowdart",
                                           "body":  "The templates assume username and email are the same, if you\u0027re veering from that assumption you need to adjust the UI for your own circumstances.",
                                           "updatedAt":  "2022-10-21T20:07:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Mu_nO",
                                           "createdAt":  "2022-10-21T20:07:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Hi @erxbout. We have added the \"Needs: Author Feedback\" label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
                                           "updatedAt":  "2022-10-21T20:07:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85MwZb_",
                                           "createdAt":  "2022-10-22T10:32:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODZBQtw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "scott-wi",
                                                                               "createdAt":  "2023-04-17T15:42:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "russellChidhakwa",
                                                                               "createdAt":  "2024-03-02T08:01:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "erxbout",
                                           "body":  "Ouh ok, that makes sense\r\n\r\nBut I also think it would be beneficial if different username/email combinations are possible out of the box..\r\n\r\nIn my case already have a database filled with user data, and people get access by an administrator.. I used the UserManager to insert a user in identity.AspNetUsers so these people can login (so I created the data not through the register process)\r\nSince the username and email are stored in separated columns my assumption was that email would be used by default if that is what the login clearly requires by default..\r\n\r\nAfter a while some users changed their user data, therefore locked them out of the system (took me some time to find out the username gets normalized during any change in user data)\r\n\r\nAfter many hours of testing scaffolding I saw this line of code, and only this line of code would need the change.. So a lot of additional code generated only for one line to be changed.. To be fair, I could customize my page more now, but it is not very necessary since it works to 98% as I need it to work xD\r\n\r\nI mean, now I know where and what I need to do now, but I would very appreciate this behavior out of the box since it is a very common feature amongst internet websites overall to have a username associated to an email (and sometimes even to login with both)..\r\n\r\nAnyway, thank you for your time and have a nice day :D",
                                           "updatedAt":  "2022-10-22T10:32:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Nu2kg",
                                           "createdAt":  "2022-11-04T20:06:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC6BHjQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "scott-wi",
                                                                               "createdAt":  "2023-04-17T15:46:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-11-04T20:06:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85dTJid",
                                           "createdAt":  "2023-05-27T09:14:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEMsWHQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "erxbout",
                                                                               "createdAt":  "2023-06-05T17:18:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AndrewBPC",
                                                                               "createdAt":  "2023-07-10T02:12:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maskedmouse",
                                                                               "createdAt":  "2023-12-11T11:04:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "scott-wi",
                                                                               "createdAt":  "2025-01-06T20:12:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PavelLovygin",
                                                                               "createdAt":  "2025-04-03T04:18:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "MihaiDaniel",
                                           "body":  "This caused some issue for me aswell after I used scaffolding, untill I realised that PasswordSignInAsync actually needs the UserName and not the email. In my opinion this scaffolding is \"broken\" in a sense, because it should work out of the box, but it does not, so it would be nice to fix it.",
                                           "updatedAt":  "2023-05-27T09:14:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85uQ_i5",
                                           "createdAt":  "2023-12-11T12:06:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOES0JWw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "scott-wi",
                                                                               "createdAt":  "2025-01-06T20:12:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "erxbout",
                                                                               "createdAt":  "2025-05-20T12:35:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "maskedmouse",
                                           "body":  "I\u0027m kind of wondering about this as well. There\u0027s no point of separating the `Username` and `Email` if they\u0027re being confused when trying to log in.\r\n`SignInManager.PasswordSignInAsync` requires the `Username`.\r\nIt would be nice to have this support either `Username` or `Email`.\r\n\r\nEven with the new .NET 8 Identity Api endpoints I ran into the issue when the Username is not the same as the Email.\r\nThus failing to use the Login Api as it requests an e-mail as parameter but under the hood uses the Username due to `PasswordSignInAsync`.\r\nI had to copy paste the new endpoints into my own class and modify them to actually make them work.\r\nSadly it isn\u0027t extendable / configurable as far as I know.\r\n",
                                           "updatedAt":  "2023-12-11T12:06:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85zJKci",
                                           "createdAt":  "2024-02-07T10:50:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "erxbout",
                                           "body":  "Is there anything I should do? Or is this just an error as this is an issue not a pr? xD",
                                           "updatedAt":  "2024-02-07T10:50:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85zJK7p",
                                           "createdAt":  "2024-02-07T10:51:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODV1QlQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "erxbout",
                                                                               "createdAt":  "2024-02-07T10:52:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "erxbout",
                                                                               "createdAt":  "2024-02-07T10:52:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "martincostello",
                                           "body":  "#53859",
                                           "updatedAt":  "2024-02-07T10:51:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86J6HiY",
                                           "createdAt":  "2024-08-27T23:00:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "etriebe",
                                           "body":  "Any update on when this will be fixed? This feels pretty broken for core identity. ",
                                           "updatedAt":  "2024-08-27T23:00:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86MqHRN",
                                           "createdAt":  "2024-09-19T02:24:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "etriebe",
                                           "body":  "Anyone have a recommendation for fixing? \n\nI have a fix in my local GitHub repo of aspnetcore but wondering if an extension method might also work?\n\nOr perhaps creating an entirely new signinmanager? Does anyone have an example of this?",
                                           "updatedAt":  "2024-09-19T02:24:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86NTliH",
                                           "createdAt":  "2024-09-24T09:14:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODzWbgw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "martincostello",
                                                                               "createdAt":  "2024-09-24T09:16:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "h1nson",
                                           "body":  "What a rubbish framework.",
                                           "updatedAt":  "2024-09-24T09:14:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86NXi8k",
                                           "createdAt":  "2024-09-24T16:22:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgds0Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JoeFarrera",
                                                                               "createdAt":  "2025-03-28T08:47:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PavelLovygin",
                                                                               "createdAt":  "2025-04-02T10:14:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aciudacov",
                                                                               "createdAt":  "2025-09-02T08:21:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "etriebe",
                                           "body":  "@h1nson I have a solution without needing to modify anything from Microsoft!\r\n\r\nI made BetterSignInManager.cs\r\n\r\n```\r\n// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nusing Microsoft.AspNetCore.Authentication;\r\nusing Microsoft.Extensions.Options;\r\nusing Pickem.Shared.Account;\r\nusing System.Diagnostics.CodeAnalysis;\r\nusing System.Security.Claims;\r\nusing System.Text;\r\n\r\nnamespace Microsoft.AspNetCore.Identity;\r\n\r\n/// \u003csummary\u003e\r\n/// Provides the APIs for user sign in.\r\n/// \u003c/summary\u003e\r\n/// \u003ctypeparam name=\"TUser\"\u003eThe type encapsulating a user.\u003c/typeparam\u003e\r\npublic class BetterSignInManager : SignInManager\u003cApplicationUser\u003e\r\n{\r\n    public BetterSignInManager(UserManager\u003cApplicationUser\u003e userManager, IHttpContextAccessor contextAccessor, IUserClaimsPrincipalFactory\u003cApplicationUser\u003e claimsFactory, IOptions\u003cIdentityOptions\u003e optionsAccessor, ILogger\u003cSignInManager\u003cApplicationUser\u003e\u003e logger, IAuthenticationSchemeProvider schemes, IUserConfirmation\u003cApplicationUser\u003e confirmation) : base(userManager, contextAccessor, claimsFactory, optionsAccessor, logger, schemes, confirmation)\r\n    {\r\n    }\r\n\r\n    /// \u003csummary\u003e\r\n    /// Attempts to sign in the specified \u003cparamref name=\"userName\"/\u003e and \u003cparamref name=\"password\"/\u003e combination\r\n    /// as an asynchronous operation.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cparam name=\"email\"\u003eThe email to sign in.\u003c/param\u003e\r\n    /// \u003cparam name=\"password\"\u003eThe password to attempt to sign in with.\u003c/param\u003e\r\n    /// \u003cparam name=\"isPersistent\"\u003eFlag indicating whether the sign-in cookie should persist after the browser is closed.\u003c/param\u003e\r\n    /// \u003cparam name=\"lockoutOnFailure\"\u003eFlag indicating if the user account should be locked if the sign in fails.\u003c/param\u003e\r\n    /// \u003creturns\u003eThe task object representing the asynchronous operation containing the \u003csee name=\"SignInResult\"/\u003e\r\n    /// for the sign-in attempt.\u003c/returns\u003e\r\n    public virtual async Task\u003cSignInResult\u003e PasswordSignInWithEmailOrUserAsync(string email, string password,\r\n        bool isPersistent, bool lockoutOnFailure)\r\n    {\r\n        var user = await UserManager.FindByEmailAsync(email);\r\n\r\n        if (user == null)\r\n        {\r\n            user = await UserManager.FindByNameAsync(email);\r\n        }\r\n\r\n        if (user == null)\r\n        {\r\n            return SignInResult.Failed;\r\n        }\r\n\r\n        return await PasswordSignInAsync(user, password, isPersistent, lockoutOnFailure);\r\n    }\r\n}\r\n```\r\n\r\nAnd then in Program.cs did the following.\r\n\r\n```\r\nbuilder.Services.AddIdentityCore\u003cApplicationUser\u003e(options =\u003e options.SignIn.RequireConfirmedAccount = true)\r\n    .AddEntityFrameworkStores\u003cApplicationDbContext\u003e()\r\n    .AddSignInManager\u003cBetterSignInManager\u003e()\r\n    .AddDefaultTokenProviders();\r\n```\r\n\r\nI updated all the references to SignInManager in my solution to BetterSignInmanager and finally in Login.razor I changed which method was being used. \r\n\r\n```\r\n    public async Task LoginUser()\r\n    {\r\n        // This doesn\u0027t count login failures towards account lockout\r\n        // To enable password failures to trigger account lockout, set lockoutOnFailure: true\r\n        var result = await BetterSignInManager.PasswordSignInWithEmailOrUserAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);\r\n        if (result.Succeeded)\r\n        {\r\n            Logger.LogInformation(\"User logged in.\");\r\n            RedirectManager.RedirectTo(ReturnUrl);\r\n        }\r\n        else if (result.RequiresTwoFactor)\r\n        {\r\n            RedirectManager.RedirectTo(\r\n                \"Account/LoginWith2fa\",\r\n                new() { [\"returnUrl\"] = ReturnUrl, [\"rememberMe\"] = Input.RememberMe });\r\n        }\r\n        else if (result.IsLockedOut)\r\n        {\r\n            Logger.LogWarning(\"User account locked out.\");\r\n            RedirectManager.RedirectTo(\"Account/Lockout\");\r\n        }\r\n        else\r\n        {\r\n            errorMessage = \"Error: Invalid login attempt.\";\r\n        }\r\n    }\r\n```\r\n\r\nAnd this should fix login for users with a different username from their email! Hope this helps!",
                                           "updatedAt":  "2024-09-24T16:22:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86NeWZ5",
                                           "createdAt":  "2024-09-25T09:25:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEbgY8Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "etriebe",
                                                                               "createdAt":  "2025-07-22T18:25:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "erxbout",
                                           "body":  "Nice approach ;)\r\n\r\nI used scaffolding to overwrite the behavior\r\nStill I think it should be fixed in framework but since it has been moved to .net 10 planning there is no prio on that apparently..",
                                           "updatedAt":  "2024-09-25T09:25:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86NgBep",
                                           "createdAt":  "2024-09-25T12:43:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "etriebe",
                                           "body":  "Yeah. It’s a bit silly that this has existed for so long with totally broken functionality in the framework out of box for as long as it has. It’s a one line fix for them!\r\n\r\n—Eric Triebe\r\n________________________________\r\nFrom: erxbout ***@***.***\u003e\r\nSent: Wednesday, September 25, 2024 2:25:33 AM\r\nTo: dotnet/aspnetcore ***@***.***\u003e\r\nCc: Eric Triebe ***@***.***\u003e; Manual ***@***.***\u003e\r\nSubject: Re: [dotnet/aspnetcore] Identity login uses PasswordSignInAsync with Input.Email as username so username and email of account need to be the same (Issue #44660)\r\n\r\n\r\nNice approach ;)\r\n\r\nI used scaffolding to overwrite the behavior\r\nStill I think it should be fixed in framework but since it has been moved to .net 10 planning there is no prio on that apparently..\r\n\r\n—\r\nReply to this email directly, view it on GitHub\u003chttps://github.com/dotnet/aspnetcore/issues/44660#issuecomment-2373543545\u003e, or unsubscribe\u003chttps://github.com/notifications/unsubscribe-auth/ABZH2ODSKNQJOH7ETZJ6YKLZYJ6Q3AVCNFSM6AAAAAARKDQMI2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDGNZTGU2DGNJUGU\u003e.\r\nYou are receiving this because you are subscribed to this thread.Message ID: ***@***.***\u003e\r\n",
                                           "updatedAt":  "2024-09-25T12:43:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86q8an9",
                                           "createdAt":  "2025-05-09T22:07:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mguinness",
                                           "body":  "\u003e Even with the new .NET 8 Identity Api endpoints I ran into the issue when the Username is not the same as the Email.\n\nCan [RegisterRequest](https://github.com/dotnet/aspnetcore/blob/main/src/Identity/Core/src/Data/RegisterRequest.cs) class be changed to include UserName field?  Then [IdentityApiEndpointRouteBuilderExtensions](https://github.com/dotnet/aspnetcore/blob/main/src/Identity/Core/src/IdentityApiEndpointRouteBuilderExtensions.cs) class be changed to allow UserName to be set directly.  If UserName is left as null, then it could default to Email making it backwards compatible.\n\nhttps://github.com/dotnet/aspnetcore/blob/c7415ff0ea8999233c6b3272f6edaf772de910ed/src/Identity/Core/src/IdentityApiEndpointRouteBuilderExtensions.cs#L77\n\nA similar approach could also be taken with [LoginRequest](https://github.com/dotnet/aspnetcore/blob/main/src/Identity/Core/src/Data/LoginRequest.cs).  This would allow developers to choose which field is used for authentication, email address or username.",
                                           "updatedAt":  "2025-05-09T22:07:33Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "Identity login uses PasswordSignInAsync with Input.Email as username so username and email of account need to be the same",
        "labels":  [
                       "area-identity",
                       "Needs: Attention :wave:"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/44666",
        "createdAt":  "2022-10-20T21:29:57Z",
        "number":  44666,
        "author":  "jherbert",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODC3aAA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "reponemec",
                                            "createdAt":  "2023-04-03T09:01:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Saidnazar08",
                                            "createdAt":  "2023-10-23T08:59:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LukaMajcenic",
                                            "createdAt":  "2024-10-25T12:02:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "anthonymastreanvae",
                                            "createdAt":  "2025-05-27T15:52:53Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-08-22T20:13:14Z",
        "body":  "General inquiry type issue...\r\n\r\n`amr` claim type was added in #10636 and #5783 using the `SignInWithClaimsAsync` overload on the SignInManager. When the validation interval is hit `UserClaimsPrincipalFactory.GenerateClaimsAsync` gets called to refresh the ClaimPrincipal claims but the `amr` claim is lost. Is this by design? We were attempting to put a feature behind 2fa only and using this claim as authorization. If it is suggestions on some possible workarounds? We could add this claim again in our `UserClaimsPrincipalFactory.` implementation if the user has 2fa enabled with an assumption the user did actually authenticate with it?\r\n\r\nRecreation steps\r\n1. new razor app with indvidual identity\r\n2. Shorten validation interval so you don\u0027t have to wait the default 30 minutes. \r\n```\r\nbuilder.Services.Configure\u003cSecurityStampValidatorOptions\u003e(options =\u003e\r\n{\r\n    options.ValidationInterval = TimeSpan.FromSeconds(30);\r\n});\r\n``` \r\n3. Signin you\u0027ll see the `amr` claim on the user.\r\n4. Wait 30 seconds, refresh page and `amr` claim is gone\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOraR00Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85Mu_VD",
                                           "createdAt":  "2022-10-21T20:06:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCudEfw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jherbert",
                                                                               "createdAt":  "2022-10-25T15:14:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "blowdart",
                                           "body":  "So this is somewhat odd. The amr claim is for the specific sign-in that took place. Once you\u0027re into GenerateClaimsAsync you\u0027re onto user claims, not claims for the login. I don\u0027t think you can know for sure at that point whether an amr claim or not is appropriate.\r\n\r\nWe acknowledge this sucks, and we\u0027ll think for 8.0 about if/how we could persist it.\r\n\r\n ",
                                           "updatedAt":  "2022-10-21T20:06:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Mu_XV",
                                           "createdAt":  "2022-10-21T20:06:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-10-21T20:06:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85ZDu2U",
                                           "createdAt":  "2023-04-03T11:28:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "reponemec",
                                           "body":  "Until a fix is released, can SecurityStampValidatorOptions.OnRefreshingPrincipal handler be used as a workaround? Handler will return lost claims to the game.",
                                           "updatedAt":  "2023-04-03T11:28:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85rkPmx",
                                           "createdAt":  "2023-11-09T20:47:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jherbert",
                                           "body":  "@reponemec  Good suggestion here, `OnRefreshingPrincipal` has both a `CurrentPrincipal` and `NewPrincipal` property here.",
                                           "updatedAt":  "2023-11-09T20:47:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86tpHTR",
                                           "createdAt":  "2025-05-27T16:32:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "anthonymastreanvae",
                                           "body":  "We implemented an `ITicketStore` for the Cookie authentication handler that added several important claims to the claims principal that we require for downstream feature and auditing functionality. \n\nIt was unexpected that the security stamp validator would replace the claims principal.\n\nWe ended up working from this comment to eventually finding this ticket. Now we have a custom `OnRefreshingPrincipal` handler that merges claims.\n\nhttps://github.com/dotnet/aspnetcore/blob/v8.0.16/src/Identity/Core/src/SecurityStampValidator.cs#L109",
                                           "updatedAt":  "2025-05-27T16:32:27Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "amr claim lost after ClaimPrincipal renewal",
        "labels":  [
                       "investigate",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/44703",
        "createdAt":  "2022-10-23T12:42:41Z",
        "number":  44703,
        "author":  "Eirenarch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCypG8w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "QINGCHARLES",
                                            "createdAt":  "2023-09-15T21:41:37Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-03-31T01:20:43Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nI might be missing something but it seems to me that both the MVC Sample of ASP.NET Core Identity and the Identity.UI project contain a bug that allows someone to find if an email is registered in the system. Both contain this code with an actual comment about revealing if the user exists \r\n\r\n```\r\nvar user = await _userManager.FindByEmailAsync(model.Email);\r\nif (user == null)\r\n{\r\n    // Don\u0027t reveal that the user does not exist\r\n    return RedirectToAction(nameof(AccountController.ResetPasswordConfirmation), \"Account\");\r\n}\r\nvar result = await _userManager.ResetPasswordAsync(user, model.Code, model.Password);\r\nif (result.Succeeded)\r\n{\r\n    return RedirectToAction(nameof(AccountController.ResetPasswordConfirmation), \"Account\");\r\n}\r\nAddErrors(result);\r\nreturn View();\r\n```\r\n\r\nHowever I can input an email with a random code and if I get redirected to the password confirmation error I know the account does not exist if I get an error about wrong code I know the account exists. This code seems to do nothing useful while making the whole thing annoying to the user (if they mistype the email they are told they changed the password successfully). On a side note is there a reason why the email input in a text box rather than sent in the URL?\r\n\r\nI believe the code should be changed to something along the lines of \r\n\r\n```\r\nif (user is null)\r\n{\r\n    // Don\u0027t reveal that the user does not exist\r\n    ModelState.AddModelError(String.Empty, new IdentityErrorDescriber().InvalidToken().Description);\r\n    return View();\r\n}\r\n```\r\n\r\n### Expected Behavior\r\n\r\nI expect the error for wrong code and for account which does not exist to be the same\r\n\r\n### Steps To Reproduce\r\n\r\n1. Create an ASP.NET project with Identity.UI or with MVC (old templates or the code in the samples in the identity repo - https://github.com/dotnet/aspnetcore/blob/main/src/Identity/samples/IdentitySample.Mvc/Controllers/AccountController.cs )\r\n\r\n2. Go to the password reset page with a random code in the URL for example /Account/ResetPassword?code=test\r\n\r\n3. Input existing user email and submit - you get invalid token error\r\n\r\n4. Input non-existing user email and submit - you are told password was reset successfully\r\n\r\n### .NET Version\r\n\r\nnet6.0 and any version with Identity",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTQrJ3w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85Mx7Qf",
                                           "createdAt":  "2022-10-23T17:07:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODG-cdg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "QINGCHARLES",
                                                                               "createdAt":  "2023-09-15T21:41:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Thank you for the report. We\u0027ve had this one a few times. The thing is you can argue that the registration page does the same thing, it\u0027ll give a different result based on whether an email is registered or not.\r\n\r\nWe\u0027ve never felt any pressing urge to address the reset password route because there are other routes to discovery. We\u0027d look at a pull request though.\r\n\r\nAs an aside, for any project that has issue templates with a security.md defined an entry appears when filing an issue which links to their [security policy](https://github.com/dotnet/aspnetcore/security/policy);\r\n\r\n![Screenshot 2022-10-23 101734](https://user-images.githubusercontent.com/796298/197406031-b752763e-14c1-4b1b-85ca-8a82f698a4f4.png)\r\n\r\nPlease consider following the instructions set out in a security policy rather than file issues directly, as some projects would rather issues with potential security implications are reported privately. \r\n\r\n",
                                           "updatedAt":  "2022-10-23T17:20:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Mx70C",
                                           "createdAt":  "2022-10-23T17:20:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Hi @Eirenarch. We have added the \"Needs: Author Feedback\" label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
                                           "updatedAt":  "2022-10-23T17:20:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85M0pIG",
                                           "createdAt":  "2022-10-24T11:06:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eirenarch",
                                           "body":  "\u003e Thank you for the report. We\u0027ve had this one a few times. The thing is you can argue that the registration page does the same thing, it\u0027ll give a different result based on whether an email is registered or not.\r\n\u003e \r\n\u003e We\u0027ve never felt any pressing urge to address the reset password route because there are other routes to discovery. We\u0027d look at a pull request though.\r\n\r\nThis makes sense but this particular behavior is also bad user experience especially coupled with the fact that the user needs to type the email and might get it wrong. It would be OK to say that not hiding if an email is registered is a non-goal and removing this code but now we have the worst of both worlds - the info is leaked AND user experience is degraded.\r\n\r\n\u003e Please consider following the instructions set out in a security policy rather than file issues directly, as some projects would rather issues with potential security implications are reported privately.\r\n\r\nI considered using the security vulnerability template but I didn\u0027t think this important enough for this path which I presume is more urgent\r\n\r\nTo provide a pull request there must be a decision about the desired behavior. Is not leaking the registration a non-goal or is it a goal. One way it could be a goal despite the registration page is that a user can change the registration flow but keep all the rest. Alternatively the registration flow might be changed but that would make it more complex and less user friendly.",
                                           "updatedAt":  "2022-10-24T11:06:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85M1CZG",
                                           "createdAt":  "2022-10-24T12:37:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Partly the typing is due to the way identity is configured by default, where the email address and the username are the same. This decision continues to haunt us, as when folks turn that coupling off the assumptions made in the templates break which some find unexpected and are a little taken aback that customization must now take place.\r\n\r\nThe coupling here also explains the hiding of emails not being a goal, because it\u0027s not exactly an email at times, it\u0027s the username. I\u0027m not sure having the username entered is a better experience though, as usernames are public knowledge sometimes (and we\u0027re back to leaking via registration again), requiring an email address seems to be the better approach.\r\n\r\nSo ... I\u0027ll toss it back again :) Would usernames be better for password reset or emails? Do the templates need to change to take a decoupling into account, or is it ok to require folks to customize once they turn off the default configuration? I\u0027m genuinely interested in your take here. I can be persuaded either way about what the desired behaviour for reset should be, and as planning for 8 starts now is a good time to make an argument, and then we can decide if a PR fits or not.",
                                           "updatedAt":  "2022-10-24T12:37:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85M2Avl",
                                           "createdAt":  "2022-10-24T15:40:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eirenarch",
                                           "body":  "Here is my suggestion and please let me know if there is a security issue that I am not aware of.\r\n\r\n1. Forgotten Password sends a link where the URL contains the user id (not email, not username) and the code\r\n\r\n2. The form only contains inputs for password and confirm password, no email, no username. The userId from the URL is used to identify the user.\r\n\r\nThis approach is more user-friendly because it has less inputs and does not leak emails (or usernames). The decision if emails should stay hidden is irrelevant to this approach and can be made separately. Even if it is decided that leaking registration doesn\u0027t matter it is still an improvement because the user experience has improved.\r\n\r\nAgain I\u0027d like to point out that the current codebase is the worst option because it leaks the registration while containing an explicit code and comment saying that it doesn\u0027t. I was hesitant to change it for a long time before I posted this issue and while I was writing it I wasn\u0027t sure I wasn\u0027t missing something.\r\n\r\nOn the other topics\r\n\r\n1. I think hiding emails should be supported by Identity the question is if it should be in the default templates. I am not sure what the answer is here\r\n\r\n2. Username being email by default is a good thing in my opinion. I think this is the correct decision in the majority of cases\r\n\r\n3. The registration can be changed to send an email when you want to register rather than create the account outright but this is more complex and arguably less user-friendly but it will prevent email leaks while keeping username and email the same",
                                           "updatedAt":  "2022-10-24T15:40:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85NCsiI",
                                           "createdAt":  "2022-10-26T19:37:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Thanks :) We\u0027ll chat about this in triage and consider what we change for 8.0",
                                           "updatedAt":  "2022-10-26T19:37:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85NCsnf",
                                           "createdAt":  "2022-10-26T19:37:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-10-26T19:37:47Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "ASP.NET Core Identity samples and Identity.UI reveal the user exists via password reset",
        "labels":  [
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/45896",
        "createdAt":  "2023-01-05T14:33:47Z",
        "number":  45896,
        "author":  "rgordey",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-13T01:46:23Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI am trying to set a minimum Length for all strings, if not specified, in ef core\u0027s ConfigureConventions, so it won\u0027t default to max. Of course my DbContext inherits from IdentityDbContext\u003cIdentityUser\u003e. So PasswordHash got affected... and broke. \r\n```\r\nprotected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)\r\n{\r\n            configurationBuilder.Properties\u003cString\u003e()\r\n                .HaveMaxLength(25);\r\n}\r\n```\n\n### Describe the solution you\u0027d like\n\nPlease set PasswordHash (and other length sensitive fields) default max length in the model.\r\n\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObXul3Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85STxVN",
                                           "createdAt":  "2023-01-12T19:38:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-01-12T19:38:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85STxYG",
                                           "createdAt":  "2023-01-12T19:38:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "captainsafia",
                                           "body":  "Triage: This is something that we could potentially do on the new POCOs being developed for .NET 8.\r\n\r\ncc: @HaoK ",
                                           "updatedAt":  "2023-01-12T19:38:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85te6Xd",
                                           "createdAt":  "2023-12-01T21:46:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-12-01T21:46:02Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Add minimum length attributes to Identity classes",
        "labels":  [
                       "enhancement",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/46287",
        "createdAt":  "2023-01-27T12:27:27Z",
        "number":  46287,
        "author":  "byOsta",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-13T01:44:23Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nI\u0027m trying to call a OIDC server using the  WebAssembly/Authentication.Msal libary but it doesn\u0027t allow to config the ProtocolMode.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nBe able to config the protocolMode that msal-browser already accepts, by adding a new non required property onto MsalAuthenticationOptions. And propagating it to the js library.\r\n\r\n### Additional context\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObXuDGQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85te4MZ",
                                           "createdAt":  "2023-12-01T21:37:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-12-01T21:37:04Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Be able to change protocolMode on WASM Authentication.Msal",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "feature-blazor-wasm",
                       "feature-blazor-wasm-auth"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/46806",
        "createdAt":  "2023-02-22T14:48:06Z",
        "number":  46806,
        "author":  "isahin1997",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-13T01:41:49Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nIts possible to create users with Turkish characters like ı or even with whitespaces. But when assigning a role through the UserManager returns an identityerror with Invalid Username.\r\n\r\n### Expected Behavior\r\n\r\nExample:\r\ncreate user with username: Yazıcı .\r\n\u003e user created.\r\n\r\nassign role to user with UserManager\r\n\r\n\u003e Role assigned to User.\r\n\r\n### Steps To Reproduce\r\n\r\nExample:\r\ncreate user with username: Yazıcı .\r\n\u003e user created.\r\n\r\nassign role to user with UserManager\r\n\r\n\u003e returns identity error with the following info:\r\nCode: InvalidUserName.\r\nDescription: Username \u0027Yazıcı \u0027 is invalid, can only contain letters or digits.\r\n\r\n### Exceptions (if any)\r\n\r\nno exceptions\r\n\r\n### .NET Version\r\n\r\n6\r\n\r\n### Anything else?\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVgM4EA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85V-EWi",
                                           "createdAt":  "2023-02-23T19:45:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-02-23T19:45:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85WAzgQ",
                                           "createdAt":  "2023-02-24T08:05:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "isahin1997",
                                           "body":  "Does this mean that it is an acknowledged issue?",
                                           "updatedAt":  "2023-02-24T08:05:57Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Identity: Adding user to role gives an Invalid Username error (UserManager.cs).",
        "labels":  [
                       "investigate",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/47306",
        "createdAt":  "2023-03-19T18:11:41Z",
        "number":  47306,
        "author":  "martincostello",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-mDxg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ZarehD",
                                            "createdAt":  "2025-01-30T05:07:16Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-03-05T21:26:46Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nThis issue is mostly the same as #29426, but specifically **not** when using EFCore.\r\n\r\nThe `UserStoreBase.SetTokenAsync()` method does not save changes to actually update the token when called if a token for the same provider-name pair already exists for the current user. Instead, it just changes the value of the token that is found in memory, and then returns.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/7c8a4db4d1019bf716e04cf3b782c76297872156/src/Identity/Extensions.Stores/src/UserStoreBase.cs#L828-L844\r\n\r\nThis design is problematic and non-intuitive if used with another implementation of the user store which is not based on change tracking, for example [ElCamino.AspNetCore.Identity.AzureTable](https://www.nuget.org/packages/ElCamino.AspNetCore.Identity.AzureTable/). This is called out in this comment which received no reply, after which the issue was auto-closed: https://github.com/dotnet/aspnetcore/issues/29426#issuecomment-776457686\r\n\r\nIn the case of the above NuGet package, the implementation for finding the token just returns a POCO ([code](https://github.com/dlmelendez/identityazuretable/blob/bc4ba07d6289addd275c425d20db3ee19167805f/src/ElCamino.AspNetCore.Identity.AzureTable/UserOnlyStore.cs#L1054-L1058)). The provider does not track changes to the entity after it is constructed, so the provider has no idea there\u0027s any change to persist afterwards, and similarly the store provides no indication to the caller that they need to do anything as the method returns nothing, so the assumption is that the write succeeded.\r\n\r\nEventually I realised my changes weren\u0027t being persisted as API calls using a refreshed access token were failing and inspected the contents of my Azure table and found they didn\u0027t match. I then dug through the code here to determine why things weren\u0027t being updated. For the consuming application, this behaviour was not intuitive, and lead to the \"obvious\" thing to do in the calling application not working and sort-of leading to data corruption (the tokens in the store were now invalid as they\u0027d been refreshed, and the new values were lost after use in the current HTTP request as they weren\u0027t persisted to the store).\r\n\r\nI\u0027ve worked around this in my application by instead explicitly removing the token before adding the new one, and on reflection I\u0027ll probably tweak it to instead override `SetTokenAsync()`, but this subtle behaviour which then likely requires most non-EFCore based implementations to override this behaviour with 90% the same code to do an update/upsert suggests to me that the original design of this method is a bit flawed.\r\n\r\nChanging the behaviour now is probably going to be quite difficult without breaking something, so maybe this is something that can be improved via documentation? For example, the `///` comments for the method (or `SetAuthenticationTokenAsync()`) used by Intellisense give no indication of this behaviour either.\r\n\n\n### Expected Behavior\n\nCalling `SetTokenAsync()` (or `SetAuthenticationTokenAsync()`) updates the token in the backing data store as that is the intuitive intended purpose of these methods to the calling application.\r\n\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n7.0.202\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWKY8bA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85Ypjxs",
                                           "createdAt":  "2023-03-28T17:00:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-03-28T17:00:21Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "UserStoreBase.SetTokenAsync does not update token in the data store if already present",
        "labels":  [
                       "bug",
                       "area-identity",
                       "Pillar: Technical Debt"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/47368",
        "createdAt":  "2023-03-22T13:58:52Z",
        "number":  47368,
        "author":  "plachor",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCvI4jw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KrzysztofBranicki",
                                            "createdAt":  "2023-03-22T15:16:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jorrit",
                                            "createdAt":  "2023-03-29T08:29:11Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-03-05T21:22:14Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nHi, in my project I\u0027m relaying on `AddIdentityCore` followed by checrrypicked registrations like `AddSignInManager` and etc. It allows me to setup minimal Identity for my project. I do not want roles nor I do not want default authentication schemes. \r\n\r\nTill now I have not yet invested in MFA or 2FA as most of users of this product are authenticated through external authentication scheme (which supports MFA). \r\n\r\nSo I have custom authentication schemes. (OpenIdConnect, Cookie and External for SSO). However I do not have `TwoFactorRememberMeScheme` as I do not use it. I\u0027ve tried to bump my project to .NET7 from .NET6. However it turns out that in .NET7 default `SecurityStampValidator\u003cTUser\u003e` is forcing sign-out of `TwoFactorRememberMeScheme` scheme.\r\n\r\nThis ends with InvalidOperationException as there is no handler registered for that scheme. Check: https://github.com/dotnet/aspnetcore/blob/main/src/Identity/Core/src/SecurityStampValidator.cs#L137\n\n### Expected Behavior\n\nSince you allow minimal setup as `AddIdentityCore` is public and not obsolete than perhaps you should not enforce some hard-coded scheme sign-out. in default implementation of `SecurityStampValidator`\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n7.0.201\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObJP3lw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85YpjAS",
                                           "createdAt":  "2023-03-28T16:58:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-03-28T16:58:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Ys83g",
                                           "createdAt":  "2023-03-29T08:44:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODNRATw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "halter73",
                                                                               "createdAt":  "2023-11-21T20:30:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jorrit",
                                           "body":  "This addition seems to work, I hope it is an OK workaround.\r\n\r\n```c#\r\n            // Workaround for https://github.com/dotnet/aspnetcore/issues/47368\r\n            .AddCookie(IdentityConstants.TwoFactorRememberMeScheme);\r\n```\r\n\r\nI think the SecurityStampValidator should check if the scheme is registered before invoking the signout method. It seems that `IAuthenticationSchemeProvider` provides this.",
                                           "updatedAt":  "2023-03-29T08:44:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85sk_eX",
                                           "createdAt":  "2023-11-21T20:34:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "\u003e I think the SecurityStampValidator should check if the scheme is registered before invoking the signout method. It seems that `IAuthenticationSchemeProvider` provides this.\r\n\r\nThis sounds right to me too. We\u0027ve already started doing this in `SignInManager` starting in .NET 8 so it can support `MapIdentityApi\u003cTUser\u003e()`.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/00e3aaafa355bb540b6aae25d01731da6f07df61/src/Identity/Core/src/SignInManager.cs#L431-L433",
                                           "updatedAt":  "2023-11-21T20:34:12Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[Upgrade to .Net7] `SecurityStampValidator\u003cTUser\u003e` forces signout of `TwoFactorRememberMeScheme` which leads to InvalidOperationException in case scheme is not registered",
        "labels":  [
                       "bug",
                       "area-identity",
                       "cost: XS",
                       "triaged",
                       "Pillar: Technical Debt"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/48299",
        "createdAt":  "2023-05-18T05:53:03Z",
        "number":  48299,
        "author":  "zwoolli",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBy4mA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "austins",
                                            "createdAt":  "2024-09-16T18:51:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "winty56",
                                            "createdAt":  "2025-04-28T11:49:46Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-02-13T01:35:34Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI am working on an ASP.NET Core application that does not support two factor authentication or external logins. I have added\r\n\r\n- Authentication with only a cookie for the `IdentityConstants.ApplicationScheme`, and\r\n- Identity core with a custom sign in manager that overrides the `SignOutAsync` method\r\n\r\n### Program\r\n```\r\nbuilder.Services.AddAuthentication(options =\u003e\r\n{\r\n    options.DefaultScheme = IdentityConstants.ApplicationScheme;\r\n})\r\n    .AddCookie(IdentityConstants.ApplicationScheme, options =\u003e\r\n    {\r\n        options.LoginPath = new PathString(\"/Account/Login\");\r\n        options.Events = new CookieAuthenticationEvents\r\n        {\r\n            OnValidatePrincipal = SecurityStampValidator.ValidatePrincipalAsync,\r\n        };\r\n    });\r\n\r\nbuilder.Services.AddIdentityCore\u003cApplicationUser\u003e(options =\u003e\r\n{\r\n    options.SignIn.RequireConfirmedEmail = true;\r\n    options.User.RequireUniqueEmail = true;\r\n})\r\n.AddDefaultTokenProviders()\r\n.AddSignInManager\u003cCustomSignInManager\u003e();\r\n```\r\n### CustomSignInManager\r\n```\r\npublic override async Task SignOutAsync()\r\n{\r\n    await Context.SignOutAsync(IdentityConstants.ApplicationScheme);\r\n}\r\n```\r\nWith the [upgrade to net 7](https://github.com/dotnet/aspnetcore/issues/46185), the security stamp was updated. The security stamp on my `Principal` was different than the security stamp saved in my database. Due to this the [`SignInManager.ValidateSecurityStampAsync`](https://github.com/dotnet/aspnetcore/blob/main/src/Identity/Core/src/SignInManager.cs#L267) method returns a null user to the [`SecurityStampValidator`](https://github.com/dotnet/aspnetcore/blob/main/src/Identity/Core/src/SecurityStampValidator.cs#L150). This causes the `SecurityStampValidator` to eventually call [`await SignInManager.Context.SignOutAsync(IdentityConstants.TwoFactorRememberMeScheme)`](https://github.com/dotnet/aspnetcore/blob/main/src/Identity/Core/src/SecurityStampValidator.cs#L160). \r\n\r\nThis passes the scheme `IdentityConstants.TwoFactorRememberMeScheme` to the [`AuthenticationService.SignOutAsync`](https://github.com/dotnet/aspnetcore/blob/main/src/Http/Authentication.Core/src/AuthenticationService.cs#L212) method. This method cannot find a handler and throws a [`CreateMissingSignOutHandlerException`](https://github.com/dotnet/aspnetcore/blob/main/src/Http/Authentication.Core/src/AuthenticationService.cs#L227).\r\n\n\n### Expected Behavior\n\nI would expect the `SecurityStampValidator.ValidateAsync` method to not specifically sign out of the [`TwoFactorRememberMeScheme`](https://github.com/dotnet/aspnetcore/blob/main/src/Identity/Core/src/SecurityStampValidator.cs#L160). \n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n[InvalidOperationException: No sign-out authentication handler is registered for the scheme \u0027Identity.TwoFactorRememberMe\u0027. The registered sign-out schemes are: Identity.Application. Did you forget to call AddAuthentication().AddCookie(\"Identity.TwoFactorRememberMe\",...)?](https://github.com/dotnet/aspnetcore/blob/main/src/Http/Authentication.Core/src/AuthenticationService.cs#L315)\n\n### .NET Version\n\n7.0.105\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXJy3-w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85clfZW",
                                           "createdAt":  "2023-05-18T16:46:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-05-18T16:46:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85clg_U",
                                           "createdAt":  "2023-05-18T16:52:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "What happens if you call [AddTwoFactorRememberMeCookie](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.identity.identitycookieauthenticationbuilderextensions.addtwofactorremembermecookie?view=aspnetcore-7.0) as well? Or add the `IdentityConstants.TwoFactorRememberMeScheme` cookie manually? Would it cause problems even though it\u0027s not used?\r\n\r\nI think that might be the workaround for now, but we should still look into skipping this if the `IdentityConstants.TwoFactorRememberMeScheme` is not registered though.",
                                           "updatedAt":  "2023-05-18T16:52:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85cnLf7",
                                           "createdAt":  "2023-05-18T23:21:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zwoolli",
                                           "body":  "\u003e What happens if you call [AddTwoFactorRememberMeCookie](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.identity.identitycookieauthenticationbuilderextensions.addtwofactorremembermecookie?view=aspnetcore-7.0) as well? Or add the IdentityConstants.TwoFactorRememberMeScheme cookie manually? Would it cause problems even though it\u0027s not used?\r\n\u003e \r\n\u003e I think that might be the workaround for now, but we should still look into skipping this if the IdentityConstants.TwoFactorRememberMeScheme is not registered though.\r\n\r\nI believe this will work. I originally had originally copied the [`AddIdentity`](https://github.com/dotnet/aspnetcore/blob/main/src/Identity/Core/src/IdentityServiceCollectionExtensions.cs#L67) code:\r\n```\r\n        .AddCookie(IdentityConstants.TwoFactorRememberMeScheme, o =\u003e\r\n        {\r\n            o.Cookie.Name = IdentityConstants.TwoFactorRememberMeScheme;\r\n            o.Events = new CookieAuthenticationEvents\r\n            {\r\n                OnValidatePrincipal = SecurityStampValidator.ValidateAsync\u003cITwoFactorSecurityStampValidator\u003e\r\n            };\r\n        })\r\n```\r\nWhich appears to be the \"manual\" version of the [`AddTwoFactorRememberMeCookie`](https://github.com/dotnet/aspnetcore/blob/main/src/Identity/Core/src/IdentityCookiesBuilderExtensions.cs#L80) method. If a handler exists, things seem to work well. I just didn\u0027t want to add a handler for a feature I was not using. But I agree, for now this is a good patch.",
                                           "updatedAt":  "2023-05-18T23:21:51Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "SecurityStampValidator forces sign out of TwoFactorRememberMeScheme, which throws exception when no sign-out authentication handler is registered",
        "labels":  [
                       "bug",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/48317",
        "createdAt":  "2023-05-18T19:04:10Z",
        "number":  48317,
        "author":  "MikeAlhayek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-11T19:03:38Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nI want to enable two-factor authentication using 8 digits instead of the default 6. \r\n\r\nI am aware that the [Microsoft Authenticator app ](https://www.microsoft.com/en-us/security/mobile-authenticator-app) does not support the `digits` parameter so there is no way for it to generate 8 digit code. However, other apps like [Google Authenticator\r\n](https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2\u0026hl=en_US\u0026gl=US) allows **6** or **8** digit codes.\r\n\r\nThe issue with Identity is that when **8** digits code is used, the default `AuthenticatorTokenProvider\u003c\u003e` always returns false. It validates correctly only if 6 digits are used.\r\n\r\nPerhaps provide a settings where this can be changed to allow for other length.\r\n\r\nSome apps allow for 6, 7, 8 or 10 digits. I think these all should be supported.\r\n\r\n\r\n\r\n### Expected Behavior\r\n\r\nI expect 8 digits codes to be accepted since some apps are capable of generating 8 digit codes.\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n.net7\r\n\r\n### Anything else?\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXPkLzg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85c-QvO",
                                           "createdAt":  "2023-05-23T16:58:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-05-23T16:58:02Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Identity does not validate 8 digit code when two factor authentication is used",
        "labels":  [
                       "enhancement",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/48556",
        "createdAt":  "2023-06-01T01:32:51Z",
        "number":  48556,
        "author":  "khteh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-17T15:11:10Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nThe following code snippet:\r\n```\r\nClaim claim = claims.FirstOrDefault(c =\u003e c.Type == \"roles\");\r\nif (claim != null)\r\n    await _userManager.RemoveClaimAsync(appUser, claim);\r\nStringBuilder sb = new StringBuilder();\r\nif (claim != null \u0026\u0026 !string.IsNullOrEmpty(claim.Value) \u0026\u0026 !claim.Value.Contains(\"buyer\"))\r\n    sb.Append($\"{claim.Value} buyer\");\r\nelse\r\n    sb.Append(\"buyer\");\r\ntry {\r\n    await _userManager.AddClaimAsync(appUser, new Claim(\"roles\", sb.ToString()));\r\n} catch (Exception e) {\r\n    _logger.LogError($\"{nameof(CreateOrUpdateUser)} Exception! {e}\");\r\n}\r\n```\r\nkeeps throwing the exception. I have checked the DB this user does NOT have `roles` claim at all\r\n\r\n### Expected Behavior\r\n\r\nSuccessfully added new claim to the user.\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n```\r\n\"23505: duplicate key value violates unique constraint \\\"PK_AspNetUserClaims\\\"\\n\\nDETAIL: Key (\\\"Id\\\")=(6532) already exists.\"\r\n```\r\n\r\n\r\n### .NET Version\r\n\r\n7.0.105\r\n\r\n### Anything else?\r\n\r\n```\r\n.NET SDK:\r\n Version:   7.0.105\r\n Commit:    e1bc5e001c\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  23.04\r\n OS Platform: Linux\r\n RID:         ubuntu.23.04-x64\r\n Base Path:   /usr/lib/dotnet/sdk/7.0.105/\r\n\r\nHost:\r\n  Version:      7.0.5\r\n  Architecture: x64\r\n  Commit:       8042d61b17\r\n\r\n.NET SDKs installed:\r\n  7.0.105 [/usr/lib/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 7.0.5 [/usr/lib/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 7.0.5 [/usr/lib/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nOther architectures found:\r\n  None\r\n\r\nEnvironment variables:\r\n  DOTNET_ROOT       [/usr/lib/dotnet]\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOl-o_UQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85dqbfC",
                                           "createdAt":  "2023-06-01T05:59:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC85c0Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "khteh",
                                                                               "createdAt":  "2023-06-01T06:49:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "martincostello",
                                           "body":  "Looking at the exception message, it seems like the constraint is complaining about the primary key itself, rather than the value of the claim itself.\n\nHave you done anything to customise the database schema for the underlying store where you keep your data?",
                                           "updatedAt":  "2023-06-01T05:59:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85dqbl2",
                                           "createdAt":  "2023-06-01T05:59:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Hi @khteh. We have added the \"Needs: Author Feedback\" label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
                                           "updatedAt":  "2023-06-01T05:59:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85dqoYs",
                                           "createdAt":  "2023-06-01T06:48:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "khteh",
                                           "body":  "I didn\u0027t customize the schema. It consists of `Id`, `UserId`, `ClaimType` and `ClaimValue` columns. Is this the original schema?",
                                           "updatedAt":  "2023-06-01T06:48:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85drrqH",
                                           "createdAt":  "2023-06-01T09:57:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC9Rg8w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mkArtakMSFT",
                                                                               "createdAt":  "2023-06-06T16:52:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "martincostello",
                                           "body":  "Searching for `PK_AspNetUserClaims` in the repo code comes up with migrations that look like this:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/be14dda052a54373e542a9978f172d1900f15486/src/Identity/samples/IdentitySample.Mvc/Data/Migrations/00000000000000_CreateIdentitySchema.cs#L97-L106\r\n\r\nThis seems to suggest its failing to insert a row with _any_ content in the `AspNetUserClaims` table because there\u0027s already a row with a primary key of `6532`.\r\n\r\nIf you do a SQL select for that on your database does it find anything? I haven\u0027t tested this query, so might not be 100% correct:\r\n\r\n```sql\r\nselect * from AspNetUserClaims where Id = 6532;\r\n```\r\n\r\nFeels like something\u0027s off with the auto-incrementing ID for that table on your database/code causing it to incorrectly try and add a duplicate.\r\n",
                                           "updatedAt":  "2023-06-01T09:57:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85dsIuC",
                                           "createdAt":  "2023-06-01T11:12:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "khteh",
                                           "body":  "Yes, that\u0027s right. There are records at that Id \u003e= 6532",
                                           "updatedAt":  "2023-06-01T11:12:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85eH5uE",
                                           "createdAt":  "2023-06-06T16:54:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC9Tclg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "martincostello",
                                                                               "createdAt":  "2023-06-06T17:47:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "khteh",
                                                                               "createdAt":  "2023-06-07T00:04:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "mkArtakMSFT",
                                           "body":  "Thanks for helping with this investigation, @martincostello!\r\n@khteh was @martincostello\u0027s last response help you with identifying the problem, or is there more you need help with?",
                                           "updatedAt":  "2023-06-06T16:54:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85eH5yE",
                                           "createdAt":  "2023-06-06T16:54:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Hi @khteh. We have added the \"Needs: Author Feedback\" label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
                                           "updatedAt":  "2023-06-06T16:54:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85eJy8A",
                                           "createdAt":  "2023-06-07T00:04:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "khteh",
                                           "body":  "How did that happen? What was that \"something off\"?",
                                           "updatedAt":  "2023-06-07T00:05:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85eWxVh",
                                           "createdAt":  "2023-06-08T16:55:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkArtakMSFT",
                                           "body":  "@khteh based on the details share here it seems like your database got somehow corrupted or has some custom logic which interferes with primary-key auto-incrementing logic. In order for us to investigate this issue, please provide [a minimalistic repro project](https://github.com/dotnet/aspnetcore/blob/main/docs/repro.md) that illustrates the problem.",
                                           "updatedAt":  "2023-06-08T16:55:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85eWxZa",
                                           "createdAt":  "2023-06-08T16:55:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Hi @khteh. We have added the \"Needs: Author Feedback\" label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
                                           "updatedAt":  "2023-06-08T16:55:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85eZ3oQ",
                                           "createdAt":  "2023-06-09T02:16:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "khteh",
                                           "body":  "How does the primary-key auto-increment work? Doesn\u0027t it just take the last value in the table and increment and use that? How could this simple integer primary key auto-increment mess up?",
                                           "updatedAt":  "2023-06-09T02:16:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85e-WJS",
                                           "createdAt":  "2023-06-15T16:46:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkArtakMSFT",
                                           "body":  "@ajcvickers any suggestions regarding the database behavior here?",
                                           "updatedAt":  "2023-06-15T16:46:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85fMJtN",
                                           "createdAt":  "2023-06-19T11:32:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "Looks like the code is attempting to track a new Claim object with the same PK value as the existing tracked Claim object. I doubt that the API is intended to be used this way; rather I would expect the existing Claim object to be modified.",
                                           "updatedAt":  "2023-06-19T11:32:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85fN5z5",
                                           "createdAt":  "2023-06-19T16:46:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkArtakMSFT",
                                           "body":  "@ajcvickers the problem is that their code does call the `RemoveClaimAsync` before trying to add a new one (look at line 3 in their original sample). Shouldn\u0027t that work?",
                                           "updatedAt":  "2023-06-19T16:46:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85fN-6p",
                                           "createdAt":  "2023-06-19T17:05:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "@mkArtakMSFT I don\u0027t remember enough about how `AddClaim` and `RemoveClaim` work to know for sure, but it may not work depending on how the user manager is implemented.",
                                           "updatedAt":  "2023-06-19T17:05:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85fUTyQ",
                                           "createdAt":  "2023-06-20T16:51:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-06-20T16:51:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86X6j9R",
                                           "createdAt":  "2024-12-17T15:11:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pollux",
                                           "body":  "I have encountered a similar issue. Instead of adding one claim I am trying to add multiple claims through `UserManager.AddClaimsAsync(identityUser, [ ... ]);`\n\nThe code part that is responsible for the exception:\n```csharp\n                if (validUser)\n                {\n                    await _identitySignInManager.SignInAsync(identityUser, remember);\n\n                    if (......)\n                    {\n                        try\n                        {\n                            await _identityUserManager.AddClaimsAsync(identityUser, [\n                                new(ClaimNames.X, valueA),\n                                new(ClaimNames.Y, valueB)\n                            ]);\n                        }\n                        catch (Exception ex)\n                        {\n                            // DbUpdateException - see stacktrace below\n                        }\n                    }\n                }\n```\n\nThe exception with its stacktrace is as follows:\n```\nfail: 12/17/2024 15:48:59.582 CoreEventId.SaveChangesFailed[10000] (Microsoft.EntityFrameworkCore.Update) \n      An exception occurred in the database while saving changes for context type \u0027Repository.TenantDBContext\u0027.\n      Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.\n       ---\u003e Npgsql.PostgresException (0x80004005): 23505: duplicate key value violates unique constraint \"ix_asp_net_user_claims_user_id\"\n\n      DETAIL: Key (user_id)=(56037044-4bab-43db-8dd2-163dbf991e2e) already exists.\n         at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)\n         at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource\u003cTResult\u003e.GetResult(Int16 token)\n         at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)\n         at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)\n         at Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommandBatch.Consume(RelationalDataReader reader, Boolean async, CancellationToken cancellationToken)\n        Exception data:\n          Severity: ERROR\n          SqlState: 23505\n          MessageText: duplicate key value violates unique constraint \"ix_asp_net_user_claims_user_id\"\n          Detail: Key (user_id)=(56037044-4bab-43db-8dd2-163dbf991e2e) already exists.\n          SchemaName: public\n          TableName: asp_net_user_claims\n          ConstraintName: ix_asp_net_user_claims_user_id\n          File: nbtinsert.c\n          Line: 666\n          Routine: _bt_check_unique\n         --- End of inner exception stack trace ---\n         at Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommandBatch.Consume(RelationalDataReader reader, Boolean async, CancellationToken cancellationToken)\n         at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)\n         at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)\n         at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)\n         at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)\n         at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)\n         at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)\n         at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)\n         at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)\n         at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)\n```\n\nThe database table is empty though. And it looks like the exception occurs on adding the second of the entries (`ClaimNames.Y`) in the passed List, when SaveChanges() is called.\n\nHow do I go about adding multiple custom claims?",
                                           "updatedAt":  "2024-12-17T15:11:09Z"
                                       }
                                   ],
                         "totalCount":  17
                     },
        "title":  "`UserManager.AddClaimAsync` keeps throwing duplicate PK exception for new claims",
        "labels":  [
                       "investigate",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/48947",
        "createdAt":  "2023-06-21T16:24:22Z",
        "number":  48947,
        "author":  "halter73",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-13T01:32:43Z",
        "body":  "Before hitting the database, check if the refresh ticket is at least 5m old and reject it or return the same token. This will help mitigate refresh loops on the client side.\r\n\r\n_Originally posted by @Tratcher in https://github.com/dotnet/aspnetcore/pull/48595#discussion_r1237227779_\r\n            ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOX4vIrQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85fi8it",
                                           "createdAt":  "2023-06-22T16:45:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-06-22T16:45:03Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Before hitting the database, check if the refresh ticket is at least 5m old and reject it or return the same token. This will help mitigate refresh loops on the client side.",
        "labels":  [
                       "enhancement",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/49039",
        "createdAt":  "2023-06-26T21:41:07Z",
        "number":  49039,
        "author":  "afun-entp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-31T08:18:31Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nManual use of .IsInRole() or invocation of a user principal role check through the use of Blazor\u0027s AuthorizeView component, will by default transverse all windows domain trusts when in an Active Directory context.\r\n\r\nThis creates a weak point in deployed applications within multi-domain environments, since interruption of contact with any trusted domain will cause exception status for all running instances within the primary domain.\r\n\r\nThis impact is not limited by: \r\n- the domain of the user being evaluated\r\n- the memberships of the user being evaluated (meaning that the user does not have to actually be a member of any cross-domain groups, merely that a domain trust has to exist).\r\n\r\n### Expected Behavior\r\n\r\nI expected to find either:\r\n- a way to scope restrict (or otherwise configure) role checking to a specific domain\r\n- some form of exception handling for Blazor\u0027s Authorize components\r\n\r\n### Steps To Reproduce\r\n\r\nTrue reproduction requires the configuration of an Active Directory domain trust, and then severing the access to the trusted domain.\r\n(For anyone seeking to truly reproduce, the simplest method might be to intentionally create a DNS failure between 2 testing domains.)\r\n\r\n\r\n\r\nHere is example code of .IsInRole() being called manually, illustrating fairly common use:\r\n\r\n        using (PrincipalContext pc = new(ContextType.Domain, ActiveDirectoryDomain))\r\n        {\r\n            using (UserPrincipal up = UserPrincipal.FindByIdentity(pc, user.Identity.Name))\r\n            {\r\n                appState.SetCurrentUser(user.Identity.Name, up.DisplayName);\r\n\r\n                foreach (var role in ADGroupRole)\r\n                {\r\n                    if (userGroups.Any(x =\u003e x.Name.ToLower() == role.Key.ToLower()) == true \u0026\u0026 user.IsInRole(role.Value) == false)\r\n                    {\r\n                        var userClaims = new ClaimsIdentity(new List\u003cClaim\u003e()\r\n                            {\r\n                                new Claim(ClaimTypes.Role, role.Value)\r\n                            });\r\n                        user.AddIdentity(userClaims);\r\n                    }\r\n                }\r\n...\r\n\r\n\r\nHere is example code of Role checking being invoked through Blazor\u0027s AuthorizeView component:\r\n```\r\n\u003cAuthorizeView Roles=\"ProdSupervisor, Management, Admin, Support\" \u003e\r\n...\r\n\u003c/AuthorizeView\u003e\r\n\r\n```\r\n\r\n\r\nBoth result in identical exception.\r\n\r\n\r\n### Exceptions (if any)\r\n\r\n Win32Exception: The trust relationship between the primary domain and the trusted domain failed\r\n\r\n( Exception details captured from Blazor application ) \r\n\r\n\u003e System.ComponentModel.Win32Exception (1788): The trust relationship between the primary domain and the trusted domain failed.\r\n\u003e    at System.Security.Principal.NTAccount.TranslateToSids(IdentityReferenceCollection sourceAccounts, Boolean\u0026 someFailed)\r\n\u003e    at System.Security.Principal.NTAccount.Translate(IdentityReferenceCollection sourceAccounts, Type targetType, Boolean\u0026 someFailed)\r\n\u003e    at System.Security.Principal.NTAccount.Translate(IdentityReferenceCollection sourceAccounts, Type targetType, Boolean forceSuccess)\r\n\u003e    at System.Security.Principal.WindowsPrincipal.IsInRole(String role)\r\n\u003e    at Microsoft.AspNetCore.Authorization.Infrastructure.RolesAuthorizationRequirement.\u003c\u003ec__DisplayClass4_0.\u003cHandleRequirementAsync\u003eb__0(String r)\r\n\u003e    at System.Linq.Enumerable.Any[TSource](IEnumerable`1 source, Func`2 predicate)\r\n\u003e    at Microsoft.AspNetCore.Authorization.Infrastructure.RolesAuthorizationRequirement.HandleRequirementAsync(AuthorizationHandlerContext context, RolesAuthorizationRequirement requirement)\r\n\u003e    at Microsoft.AspNetCore.Authorization.AuthorizationHandler`1.HandleAsync(AuthorizationHandlerContext context)\r\n\u003e    at Microsoft.AspNetCore.Authorization.Infrastructure.PassThroughAuthorizationHandler.HandleAsync(AuthorizationHandlerContext context)\r\n\u003e    at Microsoft.AspNetCore.Authorization.DefaultAuthorizationService.AuthorizeAsync(ClaimsPrincipal user, Object resource, IEnumerable`1 requirements)\r\n\u003e    at Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.IsAuthorizedAsync(ClaimsPrincipal user)\r\n\u003e    at Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.OnParametersSetAsync()\r\n\u003e    at Microsoft.AspNetCore.Components.ComponentBase.CallStateHasChangedOnAsyncCompletion(Task task)\r\n\u003e    at Microsoft.AspNetCore.Components.ComponentBase.RunInitAndSetParametersAsync()\r\n\u003e    at Microsoft.AspNetCore.Components.Rendering.HtmlRenderer.HandleException(Exception exception)\r\n\u003e    at Microsoft.AspNetCore.Components.RenderTree.Renderer.AddToPendingTasks(Task task, ComponentState owningComponentState)\r\n\u003e    at Microsoft.AspNetCore.Components.Rendering.ComponentState.SupplyCombinedParameters(ParameterView directAndCascadingParameters)\r\n\u003e    at Microsoft.AspNetCore.Components.Rendering.ComponentState.SetDirectParameters(ParameterView parameters)\r\n\u003e    at Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiffBuilder.InitializeNewComponentFrame(DiffContext\u0026 diffContext, Int32 frameIndex)\r\n\u003e    at Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiffBuilder.InitializeNewSubtree(DiffContext\u0026 diffContext, Int32 frameIndex)\r\n\u003e    at Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiffBuilder.InsertNewFrame(DiffContext\u0026 diffContext, Int32 newFrameIndex)\r\n\u003e    at Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiffBuilder.AppendDiffEntriesForRange(DiffContext\u0026 diffContext, Int32 oldStartIndex, Int32 oldEndIndexExcl, Int32 newStartIndex, Int32 newEndIndexExcl)\r\n\u003e    at Microsoft.AspNetCore.Components.RenderTree.RenderTreeDiffBuilder.ComputeDiff(Renderer renderer, RenderBatchBuilder batchBuilder, Int32 componentId, ArrayRange`1 oldTree, ArrayRange`1 newTree)\r\n\u003e    at Microsoft.AspNetCore.Components.Rendering.ComponentState.RenderIntoBatch(RenderBatchBuilder batchBuilder, RenderFragment renderFragment, Exception\u0026 renderFragmentException)\r\n\u003e    at Microsoft.AspNetCore.Components.RenderTree.Renderer.ProcessRenderQueue()\r\n\u003e --- End of stack trace from previous location ---\r\n\u003e    at Microsoft.AspNetCore.Components.Rendering.HtmlRenderer.HandleException(Exception exception)\r\n\u003e    at Microsoft.AspNetCore.Components.RenderTree.Renderer.ProcessRenderQueue()\r\n\u003e    at Microsoft.AspNetCore.Components.RenderTree.Renderer.ProcessPendingRender()\r\n\u003e    at Microsoft.AspNetCore.Components.RenderTree.Renderer.AddToRenderQueue(Int32 componentId, RenderFragment renderFragment)\r\n\u003e    at Microsoft.AspNetCore.Components.RenderHandle.Render(RenderFragment renderFragment)\r\n\u003e    at Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged()\r\n\u003e    at Microsoft.AspNetCore.Components.ComponentBase.RunInitAndSetParametersAsync()\r\n\u003e    at Microsoft.AspNetCore.Components.Rendering.HtmlRenderer.HandleException(Exception exception)\r\n\u003e    at Microsoft.AspNetCore.Components.RenderTree.Renderer.AddToPendingTasks(Task task, ComponentState owningComponentState)\r\n\u003e    at Microsoft.AspNetCore.Components.Rendering.ComponentState.SupplyCombinedParameters(ParameterView directAndCascadingParameters)\r\n\u003e    at Microsoft.AspNetCore.Components.Rendering.ComponentState.SetDirectParameters(ParameterView parameters)\r\n\u003e    at Microsoft.AspNetCore.Components.RenderTree.Renderer.RenderRootComponentAsync(Int32 componentId, ParameterView initialParameters)\r\n\u003e    at Microsoft.AspNetCore.Components.Rendering.HtmlRenderer.CreateInitialRenderAsync(Type componentType, ParameterView initialParameters)\r\n\u003e    at Microsoft.AspNetCore.Components.Rendering.HtmlRenderer.RenderComponentAsync(Type componentType, ParameterView initialParameters)\r\n\u003e    at Microsoft.AspNetCore.Components.Rendering.RendererSynchronizationContext.\u003c\u003ec__11`1.\u003c\u003cInvokeAsync\u003eb__11_0\u003ed.MoveNext()\r\n\u003e --- End of stack trace from previous location ---\r\n\u003e    at Microsoft.AspNetCore.Mvc.ViewFeatures.StaticComponentRenderer.PrerenderComponentAsync(ParameterView parameters, HttpContext httpContext, Type componentType)\r\n\u003e    at Microsoft.AspNetCore.Mvc.ViewFeatures.ComponentRenderer.PrerenderedServerComponentAsync(HttpContext context, ServerComponentInvocationSequence invocationId, Type type, ParameterView parametersCollection)\r\n\u003e    at Microsoft.AspNetCore.Mvc.ViewFeatures.ComponentRenderer.RenderComponentAsync(ViewContext viewContext, Type componentType, RenderMode renderMode, Object parameters)\r\n\u003e    at Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper.ProcessAsync(TagHelperContext context, TagHelperOutput output)\r\n\u003e    at Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner.\u003cRunAsync\u003eg__Awaited|0_0(Task task, TagHelperExecutionContext executionContext, Int32 i, Int32 count)\r\n\u003e    at MesIntegrationPortal.Pages.Pages__Host.\u003cExecuteAsync\u003eb__24_1() in C:\\Users\\---\\Pages\\_Host.cshtml:line 25\r\n\u003e    at Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext.SetOutputContentAsync()\r\n\u003e    at MesIntegrationPortal.Pages.Pages__Host.ExecuteAsync() in C:\\Users\\----\\Pages\\_Host.cshtml:line 5\r\n\u003e    at Microsoft.AspNetCore.Mvc.Razor.RazorView.RenderPageCoreAsync(IRazorPage page, ViewContext context)\r\n\u003e    at Microsoft.AspNetCore.Mvc.Razor.RazorView.RenderPageAsync(IRazorPage page, ViewContext context, Boolean invokeViewStarts)\r\n\u003e    at Microsoft.AspNetCore.Mvc.Razor.RazorView.RenderAsync(ViewContext context)\r\n\u003e    at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor.ExecuteAsync(ViewContext viewContext, String contentType, Nullable`1 statusCode)\r\n\u003e    at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor.ExecuteAsync(ViewContext viewContext, String contentType, Nullable`1 statusCode)\r\n\u003e    at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.\u003cInvokeNextResultFilterAsync\u003eg__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n\u003e    at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)\r\n\u003e    at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State\u0026 next, Scope\u0026 scope, Object\u0026 state, Boolean\u0026 isCompleted)\r\n\u003e    at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()\r\n\u003e --- End of stack trace from previous location ---\r\n\u003e    at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.\u003cInvokeNextResourceFilter\u003eg__Awaited|25_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n\u003e    at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResourceExecutedContextSealed context)\r\n\u003e    at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State\u0026 next, Scope\u0026 scope, Object\u0026 state, Boolean\u0026 isCompleted)\r\n\u003e    at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeFilterPipelineAsync()\r\n\u003e --- End of stack trace from previous location ---\r\n\u003e    at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.\u003cInvokeAsync\u003eg__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)\r\n\u003e    at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.\u003cInvokeAsync\u003eg__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)\r\n\u003e    at Microsoft.AspNetCore.Routing.EndpointMiddleware.\u003cInvoke\u003eg__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n\u003e    at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)\r\n\u003e \r\n\r\n### .NET Version\r\n\r\n7.0.302\r\n\r\n### Anything else?\r\n\r\nIt is possible to find multiple occurrences of this issue being discussed on sites like StackExchange, but most discussions are obscured by the fact that it is an environment specific risk (and frankly many developers don\u0027t have the Domain administration background to fully understand the context).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpNW-CQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85qL7GG",
                                           "createdAt":  "2023-10-26T17:05:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyLikness",
                                           "body":  "Hi @afun-entp,\r\n\r\nI\u0027m looking into this issue and am curious what form of exception handling you are looking for. Would you want an ignore flag that basically traps the exception and ignores that instance (i.e. IsInRole won\u0027t be satisfied by the failing request, but could get populated as it cycles through others), some sort of retry policy, a combination of both or something else? Can you clarify what a successful resolution of this issue would look like for you?",
                                           "updatedAt":  "2023-10-26T17:05:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85qNRbT",
                                           "createdAt":  "2023-10-26T20:39:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "afun-entp",
                                           "body":  "Thank you for your response!\r\n\r\nI don\u0027t have an understanding of the technical complexity behind the scenes, so this may be a very naive perspective... but here goes:\r\n\r\n\r\nMost effective - prevention:\r\nA flag that allows or prevents resolution and traversal of Trusted Domains when calling .IsInRole()\r\n\r\nSince many applications are only going to be targeted to memberships within a single domain context, traversing external trusted domains adds wait time overhead as well as opening the opportunity for cross domain issues. \r\n{Interruptions of service in this case. But, I\u0027m also curious if domain trusts might open up \"membership confusion\" when both domains have identically named groups. }\r\n\r\nMetaphorically, IsInRole automatically checking Trusted Domains is like a postal worker trying to enter your neighbor\u0027s house before they decide whether or not to deliver your mail. \r\nYou and your neighbor may have high degrees of trust with each other, and you may have shared keys with each other for just in case... but ideally you both want tight control over whether or not an activity piggybacks on that.\r\n\r\nSo to me; my ideal magic-wand solution would be an option on the .NET level that allows or prevents Trusted Domain resolution, and then implementing that into Blazor\u0027s \u003cAuthorizeView\u003e component as a parameter.\r\n\r\nNext most effective - trapping:\r\nSince Blazor\u0027s AuthorizeView component calls IsInRole() the end developer does not have the option of implementing a Try/Catch at that level.\r\n\r\nSo a flag for trapping would indeed be a way of allowing the process to cycle forward to see if a non-domain role has been assigned by the application.",
                                           "updatedAt":  "2023-10-26T20:48:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85x9o5q",
                                           "createdAt":  "2024-01-26T12:18:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajallath",
                                           "body":  "Hello Guys,\r\n\r\nI have the same issue; it occurs when my Blazor application starts and does the domain validation. I’m getting the following error:\r\n\r\n**Win32Exception: The trust relationship between the primary domain and the trusted domain failed.**\r\n\r\nIt works if I run the app on the same domain as the IIS server, but if I run from any other domain, I get the error. It is weird because I have access to the domain and shared resources. It seems to be an Active Directory problem, but I would like to know if I can skip that validation.\r\nI’ve done some research on the Internet but no solution until now, any help will be appreciated. ",
                                           "updatedAt":  "2024-01-26T12:18:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85zFqz0",
                                           "createdAt":  "2024-02-06T22:22:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2024-02-06T22:22:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86k1b4J",
                                           "createdAt":  "2025-03-31T08:18:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgleMir",
                                           "body":  "I encountered the same issue a few days ago following an update on my company PC by my company, before I did not have this problem. So this exception comes from below following changes in company policies without any possibility of doing anything.\nHonestly, I found myself completely displaced two days before an important production release without the possibility of debugging testing, which is fundamental for me. Of course on the release server where we are all in A/D it would have worked the same, but not being able to test on your development PC is frustrating. So I reiterate the request to make a flag available to dodge the problem if possible.",
                                           "updatedAt":  "2025-03-31T08:18:30Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  ".IsInRole() exception - Active Directory user principal role checking broken during trusted domain interruptions ",
        "labels":  [
                       "enhancement",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/49416",
        "createdAt":  "2023-07-14T17:48:41Z",
        "number":  49416,
        "author":  "DamianEdwards",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-13T01:30:19Z",
        "body":  "We\u0027ve added support to ASP.NET Core Identity in .NET 8 for included API endpoints that can issue authentication cookies or tokens. The `dotnet user-jwts` tool we added in .NET 7 should be updated to support this new token format so that it\u0027s simple to create authentication tokens that are stored in the project\u0027s user secrets location and be used in local dev scenarios.\r\n\r\nWork required:\r\n\r\n- [ ] Alias the tool to `dotnet user-tokens` so that both `user-jwts` and `user-tokens` are supported command invocations\r\n- [ ] Add a new `--format` parameter to the `create` command that accepts `jwt` and `token` options, defaulting to `jwt` to maintain backwards compatibility with the existing behavior. \r\n- [ ] Update the command help text to replace references to \"JWT\" with \"token\" as appropriate\r\n\r\nOpen questions:\r\n\r\n- ❔Should the `--format` parameter accept a `cookie` value to enable creating valid Identity cookies?\r\n- ❔Which existing options on `create` don\u0027t apply when `--format token` is specified, e.g. `--issuer`? The tool should fail and display a helpful error message if those are specified when using `--format token`\r\n- ❔Are there any new options required on `create` for customizing the creation of tokens in the new format?\r\n- ❔Are there any Data Protection related items to consider given that the new tokens are protected using the app\u0027s configured Data Protection settings?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObXsjcA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85teyNw",
                                           "createdAt":  "2023-12-01T21:15:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-12-01T21:15:14Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Update user-jwts to support new Identity bearer tokens",
        "labels":  [
                       "enhancement",
                       "area-commandlinetools",
                       "area-identity",
                       "feature-userjwts",
                       "feature-token-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/49450",
        "createdAt":  "2023-07-16T18:35:15Z",
        "number":  49450,
        "author":  null,
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCxV4CA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2023-07-17T05:10:14Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-02-13T01:30:10Z",
        "body":  "## Background and Motivation\r\n\r\nCurrently it doesn\u0027t seem to be an easy and built-in way to customise the login url used by the default authentication scheme in `Identity` apart from reconfiguring the scheme itself.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/240377059ec25b4d9d86d4188a26722e55edc5a1/src/Identity/Core/src/IdentityServiceCollectionExtensions.cs#L61-L61\r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace Microsoft.AspNetCore.Identity;\r\n\r\npublic partial class SignInOptions\r\n{\r\n+    public string LoginPath { get; set; } = \"/Account/Login\";\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\n```c#\r\nbuilder.Services.Configure\u003cIdentityOptions\u003e(options =\u003e\r\n{\r\n    options.SignIn.LoginPath = \"/login\";\r\n});\r\n```\r\n\r\n## Risks\r\n\r\nNothing I can see now as the behaviour will remain the same thanks to the default value which is the same as the one used today.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[API Proposal]: Allow to configure the login path in Identity",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "api-suggestion"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/49481",
        "createdAt":  "2023-07-18T10:16:31Z",
        "number":  49481,
        "author":  null,
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-13T01:30:04Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nCurrently, when the user\u0027s security stamp is updated, refresh tokens issued for this user are invalidated. While this behaviour may serve as a security measure to enhance token security, it can introduce some unintended consequences. For instance, after actions like password resets or email confirmations, it\u0027s common to update the security stamp to invalidate previously issued password reset tokens, email confirmations tokens, etc.\n\n### Expected Behavior\n\nIt is expected that updating the security stamp should only invalidate tokens issued by `IUserTwoFactorTokenProvider`. The refresh token itself should remain valid to allow for a smoother user experience, where users don\u0027t face unnecessary logouts. Maybe introducing an setting to be able to control this behaviour is an option to let the choice to the developers to invalidate all the tokens or keep the refresh token active.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.100-preview.6.23330.14\n\n### Anything else?\n\nI acknowledge that security is of utmost importance, and I might not have a complete understanding of all the implications. Therefore, If there are any security concerns or best practices that I may have overlooked, I am open to feedback and corrections.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Refresh token invalidation upon security stamp update",
        "labels":  [
                       "enhancement",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/49549",
        "createdAt":  "2023-07-20T19:14:35Z",
        "number":  49549,
        "author":  "egvijayanand",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC00nUQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "thompson-tomo",
                                            "createdAt":  "2023-12-25T01:06:28Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-02-13T01:29:50Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nConsider adding PIN as an option in Identity infrastructure as it is required in most of the projects now.\r\n\r\nTo facilitate quick login, instead of a password, a user would be allowed to log in with a number-based PIN (which could be 4 digits to 6 digits) for authentication.\r\n\r\nIt requires additional definition and is repetitive.\r\n\r\nSo make it available as part of the Identity infrastructure by defining the necessary properties and methods to achieve the same.\n\n### Describe the solution you\u0027d like\n\n* A property to access PIN\r\n* An overloaded method to authenticate users with a PIN instead of a password\r\n* An option to configure the minimum # of digits required to set up the PIN\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYj5Vlw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85iPlWX",
                                           "createdAt":  "2023-07-24T16:41:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-07-24T16:41:31Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Consider adding PIN as an option in Identity infrastructure as it is required in most of the projects now",
        "labels":  [
                       "enhancement",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/49914",
        "createdAt":  "2023-08-08T05:12:50Z",
        "number":  49914,
        "author":  "martinriedel",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCygPXw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cremor",
                                            "createdAt":  "2023-09-10T13:42:22Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-02-13T01:27:53Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWhen `SignInOptions.RequireConfirmedEmail` is set to `false`, an email to confirm the register is sent to the user. This emai is not needed\r\n\r\n\r\n\r\n### Expected Behavior\r\n\r\nNo email is sent when `SignInOptions.RequireConfirmedEmail` is set to `false`\r\n\r\n### Steps To Reproduce\r\n\r\nSet `SignInOptions.RequireConfirmedEmail` to `false` and register a new user\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n7.0.306\r\n\r\n### Anything else?\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY4msmA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85jiatG",
                                           "createdAt":  "2023-08-08T16:45:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkArtakMSFT",
                                           "body":  "Thanks for contacting us.\r\nThat\u0027s indeed a slightly confusing behavior. When the flag isn\u0027t set to require confirmation, the email can be safely ignored, but we will try to address this in the future.",
                                           "updatedAt":  "2023-08-08T16:45:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85jiayY",
                                           "createdAt":  "2023-08-08T16:46:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-08-08T16:46:10Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Identity register sends an email even SignIn.RequireConfirmedEmail is false",
        "labels":  [
                       "bug",
                       "breaking-change",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/49957",
        "createdAt":  "2023-08-09T18:04:57Z",
        "number":  49957,
        "author":  "gordysc",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-04T10:12:13Z",
        "body":  "## Background and Motivation\r\n\r\nThe .NET 8 preview introduces 2 items I\u0027d like to discuss:\r\n\r\n1. [IdentityConstants.BearerAndApplicationScheme](https://github.com/dotnet/aspnetcore/blob/main/src/Identity/Core/src/IdentityConstants.cs#L26)\r\n2. [CompositeIdentityHandler](https://github.com/dotnet/aspnetcore/blob/main/src/Identity/Core/src/IdentityServiceCollectionExtensions.cs#L187)\r\n\r\nThese 2 are used together for IdentityBuilder#AddIdentityApiEndpoints to reduce friction when adding bearer token \u0026 cookie auth support to APIs.\r\n\r\n## Proposed API\r\n\r\nIt\u0027d be wonderful if these could be publicly exposed to give even greater flexibility for APIs that don\u0027t want to go \"all in\" on identity\u0027s new API endpoints, but do want these to support both bearer tokens \u0026 cookies.\r\n\r\n```diff\r\nnamespace Microsoft.AspNetCore.Identity;\r\n\r\npublic class IdentityConstants\r\n{\r\n+    public static readonly BearerAndApplicationScheme = IdentityPrefix + \".BearerAndApplication\";\r\n}\r\n```\r\n\r\nCompositeIdentityHandler would be moved to a publicly visible class\r\n\r\n## Usage Examples\r\n\r\nThe new endpoints are \"all or nothing\" which is not ideal. Implementations may want only parts of the functionality as well as be able to customize endpoint paths. The above proposal gives a very simple starting point to add functionality they want until this functionality becomes more customizable.\r\n\r\n## Alternative Designs\r\n\r\n### Alternative 1\r\n\r\nAn even better long term solution would allow for a configuration option to be passed to IdentityBuilder#AddApiEndpoints method for greater flexibility.\r\n\r\n### Alternative 2\r\n\r\nSeparate the configuration of the AddAuthentication logic into it\u0027s own function that is called inside of AddApiEndpoints.\r\n\r\n## Risks\r\n\r\nThese are new items in .NET 8 and exposing them publicly makes them more challenging to deprecate/modify later on.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhyce9Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85jqXQk",
                                           "createdAt":  "2023-08-09T19:48:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "Thanks for posting this proposal! It\u0027s very well written.\r\n\r\nI\u0027ve considered exposing `BearerAndApplicationScheme` as well and created and API proposal for that specifically at #47938. You\u0027re right about the hesitancy being the risk of exposing API that might not make as much sense with a future design.\r\n\r\nI hadn\u0027t considered exposing `CompositeIdentityHandler`. It does so little, I figured you\u0027d be better off implementing the auth handler yourself and having a good place for future extensibility if you\u0027re really doing anything more custom than a simple call to `AddIdentityApiEndpoints\u003cTUser\u003e()`.\r\n\r\n\r\n\u003e ## Usage Examples\r\n\u003e The new endpoints are \"all or nothing\" which is not ideal. Implementations may want only parts of the functionality as well as be able to customize endpoint paths. The above proposal gives a very simple starting point to add functionality they want until this functionality becomes more customizable.\r\n\r\nThis is a little vague. Sure, it\u0027d be nice to make everything public, but that limits the kind of changes we can make in the future. I am curious exactly how `BearerAndApplicationScheme` and `CompositeIdentityHandler` would be used in application or library code. I haven\u0027t marked my API proposal for the constant as ready for review yet because I wasn\u0027t sure exactly how developers would want to use it if at all. The one thing I considered is if someone might want to use the constant to configure `ForwardAuthenticate` on another auth handler.",
                                           "updatedAt":  "2023-08-10T18:22:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85jqcoJ",
                                           "createdAt":  "2023-08-09T20:05:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODvmN0g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Heromyth",
                                                                               "createdAt":  "2024-08-25T13:17:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "gordysc",
                                           "body":  "All good points! I think the heart of the matter is the full buy in with the current AddIdentityApiEndpoints method that make it a bit tricky to customize. \r\n\r\nFor a real world example: we\u0027re working on the latest preview branch for our new project. We have some internal requirements where I need to implement slightly different behaviors in our minimal APIs. We are still using identity for a lot of stuff, but the controller logic itself has some slight alterations. That said our project does have to support both cookies and bearer tokens.\r\n\r\nIt\u0027d be nice to have the cookie + bearer token code used in the identity api endpoints vs repeating what\u0027s already been done. It might not make a big difference to our current project (as we\u0027ve just taken what\u0027s already there in Identity\u0027s source code), but I imagine other projects will want this. ",
                                           "updatedAt":  "2023-08-09T20:05:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85lUeQ1",
                                           "createdAt":  "2023-08-30T21:26:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JohnCampionJr",
                                           "body":  "I had a need to do this and found this very helpful.  It basically is the same thing, but uses forwards for everything:\r\nhttps://weblog.west-wind.com/posts/2022/Mar/29/Combining-Bearer-Token-and-Cookie-Auth-in-ASPNET\r\n\r\nI wouldn\u0027t mind having access to the `BearerAndApplicationScheme` constant just to use in this :)",
                                           "updatedAt":  "2023-08-30T21:27:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85qL5Dd",
                                           "createdAt":  "2023-10-26T16:59:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-10-26T16:59:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86HJx71",
                                           "createdAt":  "2024-08-04T10:12:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Laftek",
                                           "body":  "any update?",
                                           "updatedAt":  "2024-08-04T10:12:11Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Expose BearerAndApplicationScheme and CompositeIdentityHandler.",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "api-suggestion"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/50023",
        "createdAt":  "2023-08-11T12:37:43Z",
        "number":  50023,
        "author":  "uhfath",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-13T01:27:21Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nThis is somehow related to #5747 \r\nBut with an idea for a user to setup a custom flow.\r\nCurrently some methods for a TFA and lockout management  are private in a `SignInManager`:\r\nhttps://github.com/dotnet/aspnetcore/blob/5a4c82ec57fadddef9ce841d608de5c7c8c74446/src/Identity/Core/src/SignInManager.cs#L373\r\nSpecifically `IsTfaEnabled`, `ResetLockoutWithResult` and `IdentityResultException`.\r\nOf course we can simply replicate them in our code, but that would require special care during sdk updates.\r\nMarking them `protected` in order to simply shuffle the sequence in `CheckPasswordSignInAsync` would be much better.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nSomehow changing the password sign in flow or marking some methods as `protected` instead of `private` to be able to use or override them.\r\n\r\nFor instance creating a flow in which a locked/blocked/unconfirmed/etc. errors are shown only if a correct password was supplied. Otherwise always return `SignInResult.Failed` error so an attacker couldn\u0027t distinguish between correct or invalid user names.\r\n\r\n### Additional context\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZfP8Ag==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85l8_wC",
                                           "createdAt":  "2023-09-07T16:53:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-09-07T16:53:10Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Custom password sign in flow",
        "labels":  [
                       "enhancement",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/50303",
        "createdAt":  "2023-08-24T02:59:21Z",
        "number":  50303,
        "author":  "apanaligan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODQktuw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "StevenRasmussen",
                                            "createdAt":  "2023-08-30T14:06:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ahmed-abdelrazek",
                                            "createdAt":  "2023-09-01T10:47:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "soags",
                                            "createdAt":  "2023-09-06T04:17:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cremor",
                                            "createdAt":  "2023-09-10T13:33:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eamonne",
                                            "createdAt":  "2023-10-05T12:43:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Khaos66",
                                            "createdAt":  "2023-10-31T20:46:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "migueloliveiradev",
                                            "createdAt":  "2023-11-20T11:47:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rcreynolds53",
                                            "createdAt":  "2023-11-27T16:33:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Haeri",
                                            "createdAt":  "2023-12-07T23:49:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Sander-Brilman",
                                            "createdAt":  "2023-12-28T19:30:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jnnrz",
                                            "createdAt":  "2024-01-06T00:18:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TJKos",
                                            "createdAt":  "2024-01-11T18:54:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zejji",
                                            "createdAt":  "2024-01-30T06:30:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PanSzelescik",
                                            "createdAt":  "2024-02-13T17:18:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mtosic",
                                            "createdAt":  "2024-02-29T12:06:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ajbeaven",
                                            "createdAt":  "2024-03-08T01:52:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bagatka",
                                            "createdAt":  "2024-03-16T07:05:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ast-r",
                                            "createdAt":  "2024-03-20T10:31:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EniacMlezi",
                                            "createdAt":  "2024-04-04T15:07:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danielkrash",
                                            "createdAt":  "2024-05-26T14:14:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mateusz5564",
                                            "createdAt":  "2024-06-24T19:19:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SaebAmini",
                                            "createdAt":  "2024-07-23T07:18:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mzapataj",
                                            "createdAt":  "2024-09-28T17:29:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "artoodeeto",
                                            "createdAt":  "2024-10-15T05:39:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SirCypkowskyy",
                                            "createdAt":  "2024-10-27T10:10:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hayashingo",
                                            "createdAt":  "2024-11-01T06:49:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "palapapa",
                                            "createdAt":  "2024-11-23T08:54:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Bregann",
                                            "createdAt":  "2025-01-06T09:59:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NargesMousavi",
                                            "createdAt":  "2025-01-16T02:20:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PierBover",
                                            "createdAt":  "2025-01-21T17:46:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tang2087",
                                            "createdAt":  "2025-02-04T09:02:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DavidKrowitz",
                                            "createdAt":  "2025-03-27T11:45:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mguinness",
                                            "createdAt":  "2025-05-12T03:23:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YohanSciubukgian",
                                            "createdAt":  "2025-05-12T06:58:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maiconheck",
                                            "createdAt":  "2025-05-23T18:48:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dphogit",
                                            "createdAt":  "2025-09-15T12:05:47Z"
                                        }
                                    ],
                          "totalCount":  36
                      },
        "updatedAt":  "2025-05-12T22:29:50Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\n_No response_\n\n### Describe the solution you\u0027d like\n\nAfter reading about the [Identity API endpoints](https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-8-preview-4/#identity-api-endpoints), I immediately got excited, tried it and was able to make it work after 10 minutes! (Yes! All identity features almost instantly created and working).\r\n\r\nOne thing came to mind is on up to what extent these endpoints are extensible (e.g. Decorator pattern) to support custom workflow mostly for registration or login?\r\n\r\nI [explored the code](https://source.dot.net/#Microsoft.AspNetCore.Identity/IdentityApiEndpointRouteBuilderExtensions.cs,32) that creates the routes and it seems the behavior are directly added to the routes pipeline. For instance, the RegisterRequest DTO contains only Email and Password. Normally, you would like to throw in a few more fields captured in your registration process.\r\n\r\nIf I missed anything that relates to this feature, I would appreciate if somebody can point them out to me.\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOq1MFjw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85k2naS",
                                           "createdAt":  "2023-08-24T16:35:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODrJnlQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "apanaligan",
                                                                               "createdAt":  "2023-08-26T14:00:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ahmed-abdelrazek",
                                                                               "createdAt":  "2023-09-01T10:47:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "migueloliveiradev",
                                                                               "createdAt":  "2023-11-20T11:47:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "migueloliveiradev",
                                                                               "createdAt":  "2023-11-20T11:47:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "chrisauret",
                                                                               "createdAt":  "2024-05-16T03:42:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SaebAmini",
                                                                               "createdAt":  "2024-07-23T07:18:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "SteveSandersonMS",
                                           "body":  "Thanks for the suggestion. We\u0027re filing this away for considering possible future enhancements.",
                                           "updatedAt":  "2023-08-24T16:35:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85texRQ",
                                           "createdAt":  "2023-12-01T21:11:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD8MrOQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "palapapa",
                                                                               "createdAt":  "2024-11-23T08:55:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-12-01T21:11:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85tfQK9",
                                           "createdAt":  "2023-12-01T23:17:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhIBhQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maiconheck",
                                                                               "createdAt":  "2024-05-22T18:41:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rstadler6",
                                                                               "createdAt":  "2024-09-13T21:34:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Capella87",
                                                                               "createdAt":  "2025-01-19T08:45:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PierBover",
                                                                               "createdAt":  "2025-01-21T17:48:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Dzivo",
                                                                               "createdAt":  "2025-09-05T22:57:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "halter73",
                                           "body":  "We are open to improving `MapIdentityApi`\u0027s extensibility, but we need to be careful to not to overly inhibit our ability to add functionality. Right now, we could add new service parameters to existing minimal route handlers and add entire new endpoints without breaking people, and it\u0027s important we can continue to do so.\r\n\r\nOf course, rather than include all the service parameters in the decorator signatures, we could limit the decorators to only being `Func\u003cHttpContext, RequestDTO, Task\u003cIResult\u003e\u003e` for each endpoint, but what if you wanted to inspect the response DTO? You could do `Func\u003cHttpContext, RequestDTO, Task\u003cResponseDTO\u003e\u003e`, but what if you wanted to return a different kind of response?\r\n\r\nThese decorators are strongly typed rather than just being a `Delegate` because `MapIdentityApi` relies on the new [Request Delegate Generator](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/aot/request-delegate-generator/rdg?view=aspnetcore-8.0) which requires strong typing in order to get AOT support. Designing an API that would allow you to effectively change `RegisterRequest` and potentially other DTOs to require additional fields in a trim safe way seems challenging, but I\u0027m open to suggestions.\r\n\r\nAnd even if we got that all figured out, what if we added another endpoint after .NET 9 to allow you to register with an external access token instead of a password? Now any decorator that was wrapping the existing /register endpoint to enforce extra registration requirements would be skipped for people registering with external providers.\r\n\r\nTrying to reuse the existing /register endpoint for this with its `RegisterRequest` would be problematic because `Password` is supposed to be non-nullable. We could argue that the access token is the `Password` and add a new optional bool to indicate what it really represents, but that would definitely muddy up the API.\r\n\r\nA change to support external logins might need be opt-in anyway, but you could argue just adding the external auth provider should be a sufficient opt-in just like it is for `AddDefaultUI` Razor pages. However, that argument becomes worse if people are already adding extra registration requirements using decorators.\r\n\r\nThe good news is that since we made all the MapIdentityApi DTOs public, it\u0027s now much easier to copy the code into your project. You can take [IdentityApiEndpointRouteBuilderExtensions.cs](https://github.com/dotnet/aspnetcore/blob/release/8.0/src/Identity/Core/src/IdentityApiEndpointRouteBuilderExtensions.cs) as-is and just rename `MapIdentityApi\u003cTUser\u003e` to `MyMapIdentityApi\u003cTUser\u003e` and call that instead. You do not need to copy any other files because it only calls into public API.\r\n\r\nAnd if you really want to go with the decorator approach, you can write a custom [endpoint filters](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/min-api-filters?view=aspnetcore-8.0) which is now much easier with the DTOs being public. For example:\r\n\r\n```csharp\r\napp.MapIdentityApi\u003cMyUser\u003e().AddEndpointFilterFactory((filterFactoryContext, next) =\u003e\r\n{\r\n    var parameters = filterFactoryContext.MethodInfo.GetParameters();\r\n    if (parameters.Length \u003e= 1 \u0026\u0026 parameters[0].ParameterType == typeof(RegisterRequest))\r\n    {\r\n        return async invocationContext =\u003e\r\n        {\r\n            // Validate some extra required parameters were included in the query string using\r\n            // invocationContext.HttpContext.Request.Query or something.\r\n            // ...\r\n            return await next(invocationContext);\r\n        };\r\n    }\r\n\r\n    return next; \r\n});\r\n```\r\n\r\nThat said, I recommend copying [IdentityApiEndpointRouteBuilderExtensions.cs](https://github.com/dotnet/aspnetcore/blob/c9027726579d953496ce3c43546d1b69f77385a5/src/Identity/Core/src/IdentityApiEndpointRouteBuilderExtensions.cs) for the most flexibility and robustness. Relying on non-public route handers to keep the exact same signature they currently have is bound to be fragile as it\u0027s not public API at least as of now.",
                                           "updatedAt":  "2023-12-01T23:25:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85uDIKL",
                                           "createdAt":  "2023-12-08T00:28:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOERrY4w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "soags",
                                                                               "createdAt":  "2023-12-08T01:39:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "boukenka",
                                                                               "createdAt":  "2023-12-08T08:16:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "agdgb",
                                                                               "createdAt":  "2023-12-12T09:09:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TJKos",
                                                                               "createdAt":  "2024-01-11T18:47:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EniacMlezi",
                                                                               "createdAt":  "2024-04-04T15:07:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maiconheck",
                                                                               "createdAt":  "2024-05-22T18:41:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SaebAmini",
                                                                               "createdAt":  "2024-07-23T07:20:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rstadler6",
                                                                               "createdAt":  "2024-09-13T21:34:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alvarohoro",
                                                                               "createdAt":  "2024-10-26T14:26:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidsteiner",
                                                                               "createdAt":  "2024-11-13T16:57:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "palapapa",
                                                                               "createdAt":  "2024-11-23T08:58:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NargesMousavi",
                                                                               "createdAt":  "2025-01-16T02:28:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ioannis-thyris",
                                                                               "createdAt":  "2025-02-01T20:53:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AdamVerner",
                                                                               "createdAt":  "2025-04-08T21:28:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mguinness",
                                                                               "createdAt":  "2025-05-12T03:25:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  15
                                                         },
                                           "author":  "Haeri",
                                           "body":  "Apologies for the potentially silly question but can we not just have the identity endpoints exposed as regular functions? So we could write our own endpoints, have our own request and response bodies, do all the additional validation work on the custom properties, and then just call the base identity functions like register and pass the user object?",
                                           "updatedAt":  "2023-12-08T00:28:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85uXP_5",
                                           "createdAt":  "2023-12-12T09:12:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agdgb",
                                           "body":  "\u003e Apologies for the potentially silly question but can we not just have the identity endpoints exposed as regular functions? So we could write our own endpoints, have our own request and response bodies, do all the additional validation work on the custom properties, and then just call the base identity functions like register and pass the user object?\r\n\r\nThis is exactly what I am looking for as in the previous features in MVC!",
                                           "updatedAt":  "2023-12-12T09:12:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85ujkTw",
                                           "createdAt":  "2023-12-13T22:49:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODizqVw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maiconheck",
                                                                               "createdAt":  "2024-05-22T18:44:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "halter73",
                                           "body":  "\u003e Apologies for the potentially silly question but can we not just have the identity endpoints exposed as regular functions?\r\n\r\nThis is a very good question. I think maybe these should be exposed as regular functions. It\u0027s a nice in-between solution in case you don\u0027t want just the default behavior, but you also don\u0027t want to copy hundreds of lines of code.\r\n\r\nThe reason we didn\u0027t do it immediately in .NET 8 is because it would limit some of the changes we could make. For example, we\u0027d potentially have to keep around legacy overloads of functions that don\u0027t accept all the parameters supported by future versions of the given endpoint.\r\n\r\nThis is the same basic reason the request and response DTOs were not public in early .NET 8 previews, but we switched course on that to improve customizability. If we feel people are happy enough with the current core implementation of these endpoint functions and there\u0027s enough demand, we\u0027d certainly consider making these public. If someone wants to take a stab at and API proposal, please do.\r\n\r\n[Here\u0027s the \"API proposal\" issue template](https://github.com/dotnet/aspnetcore/issues/new?assignees=\u0026labels=api-suggestion\u0026projects=\u0026template=30_api_proposal.md\u0026title=). Feel free to just copy the markdown into this issue if you want to keep the context. We can apply the right labels to this issue so it shows up on https://apireview.net/?g=aspnetcore for review.",
                                           "updatedAt":  "2023-12-13T22:49:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85vi_zc",
                                           "createdAt":  "2023-12-28T19:43:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOELt92w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maiconheck",
                                                                               "createdAt":  "2024-05-22T18:45:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Brian-ChM",
                                                                               "createdAt":  "2024-10-19T22:22:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NargesMousavi",
                                                                               "createdAt":  "2025-01-16T02:32:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DavidKrowitz",
                                                                               "createdAt":  "2025-03-27T11:47:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "Sander-Brilman",
                                           "body":  "Being able to customize the endpoints would be great but given the issues mentioned i propose a different solution. What if  only the option to **disable** specific endpoints was provided. \r\n\r\nImage i would want custom logic inside my /register endpoint. instead of providing a delegate or something similar i could just disable the original endpoint and create my own endpoint with the same route. that would already solve alot of  problems (for me atleast). That would also help with hiding endpoints that are unused by the application to enhance the security.\r\n\r\n Would that be something feasible?",
                                           "updatedAt":  "2023-12-28T19:50:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85vmikU",
                                           "createdAt":  "2023-12-29T22:34:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Haeri",
                                           "body":  "Here is my attempt at extracting the base functions\r\n\r\n\u003cdetails\u003e\r\n    \u003csummary\u003eMyIdentityApiEndpointRouteBuilderExtensions.cs\u003c/summary\u003e\r\n    \r\n    ```cs\r\n    // Licensed to the .NET Foundation under one or more agreements.\r\n    // The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n    using System.ComponentModel.DataAnnotations;\r\n    using System.Diagnostics;\r\n    using System.Linq;\r\n    using System.Security.Claims;\r\n    using System.Text;\r\n    using System.Text.Encodings.Web;\r\n    using Microsoft.AspNetCore.Authentication.BearerToken;\r\n    using Microsoft.AspNetCore.Builder;\r\n    using Microsoft.AspNetCore.Http;\r\n    using Microsoft.AspNetCore.Http.HttpResults;\r\n    using Microsoft.AspNetCore.Http.Metadata;\r\n    using Microsoft.AspNetCore.Identity;\r\n    using Microsoft.AspNetCore.Identity.Data;\r\n    using Microsoft.AspNetCore.WebUtilities;\r\n    using Microsoft.Extensions.DependencyInjection;\r\n    using Microsoft.Extensions.Options;\r\n\r\n    namespace Microsoft.AspNetCore.Routing;\r\n\r\n\r\n    public static class IdentityApiEndpoint\r\n    {\r\n        public const string PostRegister = \"/register\";\r\n        public const string PostLogin = \"/login\";\r\n        public const string PostRefresh = \"refresh\";\r\n        public const string GetConfirmEmail = \"/confirmEmail\";\r\n        public const string PostResendConfirmationEmail = \"/resendConfirmationEmail\";\r\n        public const string PostForgotPassword = \"/forgotPassword\";\r\n        public const string PostResetPassword = \"/resetPassword\";\r\n        public const string GetInfo = \"/info\";\r\n        public const string PostInfo = \"/info\";\r\n        public const string PostTwoFa = \"/2fa\";\r\n    }\r\n\r\n\r\n\r\n    /// \u003csummary\u003e\r\n    /// Provides extension methods for \u003csee cref=\"IEndpointRouteBuilder\"/\u003e to add identity endpoints.\r\n    /// \u003c/summary\u003e\r\n    public static class MyIdentityApiEndpointRouteBuilderExtensions\r\n    {\r\n\r\n        // Validate the email address using DataAnnotations like the UserValidator does when RequireUniqueEmail = true.\r\n        private static readonly EmailAddressAttribute _emailAddressAttribute = new();\r\n\r\n        // private static readonly TimeProvider? timeProvider = null;\r\n        // private static readonly IOptionsMonitor\u003cBearerTokenOptions\u003e? bearerTokenOptions = null;\r\n        // private static readonly IEmailSender\u003cTUser\u003e? emailSender = null;\r\n        private static readonly LinkGenerator? linkGenerator = null;\r\n\r\n        // We\u0027ll figure out a unique endpoint name based on the final route pattern during endpoint generation.\r\n        private static string? confirmEmailEndpointName = null;\r\n\r\n\r\n        private static async Task SendConfirmationEmailAsync\u003cTUser\u003e(TUser user, UserManager\u003cTUser\u003e userManager, HttpContext context, string email, bool isChange = false)\r\n        where TUser : class, new()\r\n        {\r\n            if (confirmEmailEndpointName is null)\r\n            {\r\n                throw new NotSupportedException(\"No email confirmation endpoint was registered!\");\r\n            }\r\n\r\n            var code = isChange\r\n                ? await userManager.GenerateChangeEmailTokenAsync(user, email)\r\n                : await userManager.GenerateEmailConfirmationTokenAsync(user);\r\n            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));\r\n\r\n            var userId = await userManager.GetUserIdAsync(user);\r\n            var routeValues = new RouteValueDictionary()\r\n            {\r\n                [\"userId\"] = userId,\r\n                [\"code\"] = code,\r\n            };\r\n\r\n            if (isChange)\r\n            {\r\n                // This is validated by the /confirmEmail endpoint on change.\r\n                routeValues.Add(\"changedEmail\", email);\r\n            }\r\n\r\n            var confirmEmailUrl = linkGenerator?.GetUriByName(context, confirmEmailEndpointName, routeValues)\r\n                ?? throw new NotSupportedException($\"Could not find endpoint named \u0027{confirmEmailEndpointName}\u0027.\");\r\n\r\n            // await emailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(confirmEmailUrl));\r\n        }\r\n\r\n        public static async Task\u003cResults\u003cOk, ValidationProblem\u003e\u003e Register\u003cTUser\u003e(IServiceProvider sp, RegisterRequest registration, HttpContext context, TUser? user)\r\n        where TUser : class, new()\r\n        {\r\n            var userManager = sp.GetRequiredService\u003cUserManager\u003cTUser\u003e\u003e();\r\n\r\n            if (!userManager.SupportsUserEmail)\r\n            {\r\n                throw new NotSupportedException($\"{nameof(MyMapIdentityApi)} requires a user store with email support.\");\r\n            }\r\n\r\n            var userStore = sp.GetRequiredService\u003cIUserStore\u003cTUser\u003e\u003e();\r\n            var emailStore = (IUserEmailStore\u003cTUser\u003e)userStore;\r\n            var email = registration.Email;\r\n\r\n            if (string.IsNullOrEmpty(email) || !_emailAddressAttribute.IsValid(email))\r\n            {\r\n                return CreateValidationProblem(IdentityResult.Failed(userManager.ErrorDescriber.InvalidEmail(email)));\r\n            }\r\n\r\n            user ??= new TUser();\r\n            await userStore.SetUserNameAsync(user, email, CancellationToken.None);\r\n            await emailStore.SetEmailAsync(user, email, CancellationToken.None);\r\n            var result = await userManager.CreateAsync(user, registration.Password);\r\n\r\n            if (!result.Succeeded)\r\n            {\r\n                return CreateValidationProblem(result);\r\n            }\r\n\r\n            //await SendConfirmationEmailAsync(user, userManager, context, email);\r\n            return TypedResults.Ok();\r\n        }\r\n\r\n        /// \u003csummary\u003e\r\n        /// Add endpoints for registering, logging in, and logging out using ASP.NET Core Identity.\r\n        /// \u003c/summary\u003e\r\n        /// \u003ctypeparam name=\"TUser\"\u003eThe type describing the user. This should match the generic parameter in \u003csee cref=\"UserManager{TUser}\"/\u003e.\u003c/typeparam\u003e\r\n        /// \u003cparam name=\"endpoints\"\u003e\r\n        /// The \u003csee cref=\"IEndpointRouteBuilder\"/\u003e to add the identity endpoints to.\r\n        /// Call \u003csee cref=\"EndpointRouteBuilderExtensions.MapGroup(IEndpointRouteBuilder, string)\"/\u003e to add a prefix to all the endpoints.\r\n        /// \u003c/param\u003e\r\n        /// \u003creturns\u003eAn \u003csee cref=\"IEndpointConventionBuilder\"/\u003e to further customize the added endpoints.\u003c/returns\u003e\r\n        public static IEndpointConventionBuilder MyMapIdentityApi\u003cTUser\u003e(this IEndpointRouteBuilder endpoints, List\u003cstring\u003e? removedEndpoints = null)\r\n            where TUser : class, new()\r\n        {\r\n            ArgumentNullException.ThrowIfNull(endpoints);\r\n\r\n            var timeProvider = endpoints.ServiceProvider.GetRequiredService\u003cTimeProvider\u003e();\r\n            var bearerTokenOptions = endpoints.ServiceProvider.GetRequiredService\u003cIOptionsMonitor\u003cBearerTokenOptions\u003e\u003e();\r\n            var emailSender = endpoints.ServiceProvider.GetRequiredService\u003cIEmailSender\u003cTUser\u003e\u003e();\r\n            var linkGenerator = endpoints.ServiceProvider.GetRequiredService\u003cLinkGenerator\u003e();\r\n\r\n\r\n            var routeGroup = endpoints.MapGroup(\"\");\r\n\r\n            // NOTE: We cannot inject UserManager\u003cTUser\u003e directly because the TUser generic parameter is currently unsupported by RDG.\r\n            // https://github.com/dotnet/aspnetcore/issues/47338\r\n            if (removedEndpoints == null || !removedEndpoints.Contains(IdentityApiEndpoint.PostRegister))\r\n            {\r\n                routeGroup.MapPost(IdentityApiEndpoint.PostRegister, async Task\u003cResults\u003cOk, ValidationProblem\u003e\u003e\r\n                    ([FromBody] RegisterRequest registration, HttpContext context, [FromServices] IServiceProvider sp) =\u003e\r\n                {\r\n                    return await Register\u003cTUser\u003e(sp, registration, context, null);\r\n                });\r\n            }\r\n\r\n            if (removedEndpoints == null || !removedEndpoints.Contains(IdentityApiEndpoint.PostLogin))\r\n            {\r\n                routeGroup.MapPost(IdentityApiEndpoint.PostLogin, async Task\u003cResults\u003cOk\u003cAccessTokenResponse\u003e, EmptyHttpResult, ProblemHttpResult\u003e\u003e\r\n                    ([FromBody] LoginRequest login, [FromQuery] bool? useCookies, [FromQuery] bool? useSessionCookies, [FromServices] IServiceProvider sp) =\u003e\r\n                {\r\n                    var signInManager = sp.GetRequiredService\u003cSignInManager\u003cTUser\u003e\u003e();\r\n\r\n                    var useCookieScheme = (useCookies == true) || (useSessionCookies == true);\r\n                    var isPersistent = (useCookies == true) \u0026\u0026 (useSessionCookies != true);\r\n                    signInManager.AuthenticationScheme = useCookieScheme ? IdentityConstants.ApplicationScheme : IdentityConstants.BearerScheme;\r\n\r\n                    var result = await signInManager.PasswordSignInAsync(login.Email, login.Password, isPersistent, lockoutOnFailure: true);\r\n\r\n                    if (result.RequiresTwoFactor)\r\n                    {\r\n                        if (!string.IsNullOrEmpty(login.TwoFactorCode))\r\n                        {\r\n                            result = await signInManager.TwoFactorAuthenticatorSignInAsync(login.TwoFactorCode, isPersistent, rememberClient: isPersistent);\r\n                        }\r\n                        else if (!string.IsNullOrEmpty(login.TwoFactorRecoveryCode))\r\n                        {\r\n                            result = await signInManager.TwoFactorRecoveryCodeSignInAsync(login.TwoFactorRecoveryCode);\r\n                        }\r\n                    }\r\n\r\n                    if (!result.Succeeded)\r\n                    {\r\n                        return TypedResults.Problem(result.ToString(), statusCode: StatusCodes.Status401Unauthorized);\r\n                    }\r\n\r\n                    // The signInManager already produced the needed response in the form of a cookie or bearer token.\r\n                    return TypedResults.Empty;\r\n                });\r\n            }\r\n\r\n            if (removedEndpoints == null || !removedEndpoints.Contains(IdentityApiEndpoint.PostRefresh))\r\n            {\r\n                routeGroup.MapPost(IdentityApiEndpoint.PostRefresh, async Task\u003cResults\u003cOk\u003cAccessTokenResponse\u003e, UnauthorizedHttpResult, SignInHttpResult, ChallengeHttpResult\u003e\u003e\r\n                    ([FromBody] RefreshRequest refreshRequest, [FromServices] IServiceProvider sp) =\u003e\r\n                {\r\n                    var signInManager = sp.GetRequiredService\u003cSignInManager\u003cTUser\u003e\u003e();\r\n                    var refreshTokenProtector = bearerTokenOptions.Get(IdentityConstants.BearerScheme).RefreshTokenProtector;\r\n                    var refreshTicket = refreshTokenProtector.Unprotect(refreshRequest.RefreshToken);\r\n\r\n                    // Reject the /refresh attempt with a 401 if the token expired or the security stamp validation fails\r\n                    if (refreshTicket?.Properties?.ExpiresUtc is not { } expiresUtc ||\r\n                        timeProvider.GetUtcNow() \u003e= expiresUtc ||\r\n                        await signInManager.ValidateSecurityStampAsync(refreshTicket.Principal) is not TUser user)\r\n\r\n                    {\r\n                        return TypedResults.Challenge();\r\n                    }\r\n\r\n                    var newPrincipal = await signInManager.CreateUserPrincipalAsync(user);\r\n                    return TypedResults.SignIn(newPrincipal, authenticationScheme: IdentityConstants.BearerScheme);\r\n                });\r\n            }\r\n\r\n            if (removedEndpoints == null || !removedEndpoints.Contains(IdentityApiEndpoint.GetConfirmEmail))\r\n            {\r\n                routeGroup.MapGet(IdentityApiEndpoint.GetConfirmEmail, async Task\u003cResults\u003cContentHttpResult, UnauthorizedHttpResult\u003e\u003e\r\n                    ([FromQuery] string userId, [FromQuery] string code, [FromQuery] string? changedEmail, [FromServices] IServiceProvider sp) =\u003e\r\n                {\r\n                    var userManager = sp.GetRequiredService\u003cUserManager\u003cTUser\u003e\u003e();\r\n                    if (await userManager.FindByIdAsync(userId) is not { } user)\r\n                    {\r\n                        // We could respond with a 404 instead of a 401 like Identity UI, but that feels like unnecessary information.\r\n                        return TypedResults.Unauthorized();\r\n                    }\r\n\r\n                    try\r\n                    {\r\n                        code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(code));\r\n                    }\r\n                    catch (FormatException)\r\n                    {\r\n                        return TypedResults.Unauthorized();\r\n                    }\r\n\r\n                    IdentityResult result;\r\n\r\n                    if (string.IsNullOrEmpty(changedEmail))\r\n                    {\r\n                        result = await userManager.ConfirmEmailAsync(user, code);\r\n                    }\r\n                    else\r\n                    {\r\n                        // As with Identity UI, email and user name are one and the same. So when we update the email,\r\n                        // we need to update the user name.\r\n                        result = await userManager.ChangeEmailAsync(user, changedEmail, code);\r\n\r\n                        if (result.Succeeded)\r\n                        {\r\n                            result = await userManager.SetUserNameAsync(user, changedEmail);\r\n                        }\r\n                    }\r\n\r\n                    if (!result.Succeeded)\r\n                    {\r\n                        return TypedResults.Unauthorized();\r\n                    }\r\n\r\n                    return TypedResults.Text(\"Thank you for confirming your email.\");\r\n                })\r\n                .Add(endpointBuilder =\u003e\r\n                {\r\n                    var finalPattern = ((RouteEndpointBuilder)endpointBuilder).RoutePattern.RawText;\r\n                    confirmEmailEndpointName = $\"{nameof(MyMapIdentityApi)}-{finalPattern}\";\r\n                    endpointBuilder.Metadata.Add(new EndpointNameMetadata(confirmEmailEndpointName));\r\n                });\r\n            }\r\n\r\n            if (removedEndpoints == null || !removedEndpoints.Contains(IdentityApiEndpoint.PostResendConfirmationEmail))\r\n            {\r\n                routeGroup.MapPost(IdentityApiEndpoint.PostResendConfirmationEmail, async Task\u003cOk\u003e\r\n                    ([FromBody] ResendConfirmationEmailRequest resendRequest, HttpContext context, [FromServices] IServiceProvider sp) =\u003e\r\n                {\r\n                    var userManager = sp.GetRequiredService\u003cUserManager\u003cTUser\u003e\u003e();\r\n                    if (await userManager.FindByEmailAsync(resendRequest.Email) is not { } user)\r\n                    {\r\n                        return TypedResults.Ok();\r\n                    }\r\n\r\n                    await SendConfirmationEmailAsync(user, userManager, context, resendRequest.Email);\r\n                    return TypedResults.Ok();\r\n                });\r\n            }\r\n\r\n            if (removedEndpoints == null || !removedEndpoints.Contains(IdentityApiEndpoint.PostForgotPassword))\r\n            {\r\n                routeGroup.MapPost(IdentityApiEndpoint.PostForgotPassword, async Task\u003cResults\u003cOk, ValidationProblem\u003e\u003e\r\n                    ([FromBody] ForgotPasswordRequest resetRequest, [FromServices] IServiceProvider sp) =\u003e\r\n                {\r\n                    var userManager = sp.GetRequiredService\u003cUserManager\u003cTUser\u003e\u003e();\r\n                    var user = await userManager.FindByEmailAsync(resetRequest.Email);\r\n\r\n                    if (user is not null \u0026\u0026 await userManager.IsEmailConfirmedAsync(user))\r\n                    {\r\n                        var code = await userManager.GeneratePasswordResetTokenAsync(user);\r\n                        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));\r\n\r\n                        await emailSender.SendPasswordResetCodeAsync(user, resetRequest.Email, HtmlEncoder.Default.Encode(code));\r\n                    }\r\n\r\n                    // Don\u0027t reveal that the user does not exist or is not confirmed, so don\u0027t return a 200 if we would have\r\n                    // returned a 400 for an invalid code given a valid user email.\r\n                    return TypedResults.Ok();\r\n                });\r\n            }\r\n\r\n            if (removedEndpoints == null || !removedEndpoints.Contains(IdentityApiEndpoint.PostResetPassword))\r\n            {\r\n                routeGroup.MapPost(IdentityApiEndpoint.PostResetPassword, async Task\u003cResults\u003cOk, ValidationProblem\u003e\u003e\r\n                    ([FromBody] ResetPasswordRequest resetRequest, [FromServices] IServiceProvider sp) =\u003e\r\n                {\r\n                    var userManager = sp.GetRequiredService\u003cUserManager\u003cTUser\u003e\u003e();\r\n\r\n                    var user = await userManager.FindByEmailAsync(resetRequest.Email);\r\n\r\n                    if (user is null || !(await userManager.IsEmailConfirmedAsync(user)))\r\n                    {\r\n                        // Don\u0027t reveal that the user does not exist or is not confirmed, so don\u0027t return a 200 if we would have\r\n                        // returned a 400 for an invalid code given a valid user email.\r\n                        return CreateValidationProblem(IdentityResult.Failed(userManager.ErrorDescriber.InvalidToken()));\r\n                    }\r\n\r\n                    IdentityResult result;\r\n                    try\r\n                    {\r\n                        var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(resetRequest.ResetCode));\r\n                        result = await userManager.ResetPasswordAsync(user, code, resetRequest.NewPassword);\r\n                    }\r\n                    catch (FormatException)\r\n                    {\r\n                        result = IdentityResult.Failed(userManager.ErrorDescriber.InvalidToken());\r\n                    }\r\n\r\n                    if (!result.Succeeded)\r\n                    {\r\n                        return CreateValidationProblem(result);\r\n                    }\r\n\r\n                    return TypedResults.Ok();\r\n                });\r\n            }\r\n\r\n            var accountGroup = routeGroup.MapGroup(\"/manage\").RequireAuthorization();\r\n            if (removedEndpoints == null || !removedEndpoints.Contains(IdentityApiEndpoint.PostTwoFa))\r\n            {\r\n                accountGroup.MapPost(IdentityApiEndpoint.PostTwoFa, async Task\u003cResults\u003cOk\u003cTwoFactorResponse\u003e, ValidationProblem, NotFound\u003e\u003e\r\n                    (ClaimsPrincipal claimsPrincipal, [FromBody] TwoFactorRequest tfaRequest, [FromServices] IServiceProvider sp) =\u003e\r\n                {\r\n                    var signInManager = sp.GetRequiredService\u003cSignInManager\u003cTUser\u003e\u003e();\r\n                    var userManager = signInManager.UserManager;\r\n                    if (await userManager.GetUserAsync(claimsPrincipal) is not { } user)\r\n                    {\r\n                        return TypedResults.NotFound();\r\n                    }\r\n\r\n                    if (tfaRequest.Enable == true)\r\n                    {\r\n                        if (tfaRequest.ResetSharedKey)\r\n                        {\r\n                            return CreateValidationProblem(\"CannotResetSharedKeyAndEnable\",\r\n                                \"Resetting the 2fa shared key must disable 2fa until a 2fa token based on the new shared key is validated.\");\r\n                        }\r\n                        else if (string.IsNullOrEmpty(tfaRequest.TwoFactorCode))\r\n                        {\r\n                            return CreateValidationProblem(\"RequiresTwoFactor\",\r\n                                \"No 2fa token was provided by the request. A valid 2fa token is required to enable 2fa.\");\r\n                        }\r\n                        else if (!await userManager.VerifyTwoFactorTokenAsync(user, userManager.Options.Tokens.AuthenticatorTokenProvider, tfaRequest.TwoFactorCode))\r\n                        {\r\n                            return CreateValidationProblem(\"InvalidTwoFactorCode\",\r\n                                \"The 2fa token provided by the request was invalid. A valid 2fa token is required to enable 2fa.\");\r\n                        }\r\n\r\n                        await userManager.SetTwoFactorEnabledAsync(user, true);\r\n                    }\r\n                    else if (tfaRequest.Enable == false || tfaRequest.ResetSharedKey)\r\n                    {\r\n                        await userManager.SetTwoFactorEnabledAsync(user, false);\r\n                    }\r\n\r\n                    if (tfaRequest.ResetSharedKey)\r\n                    {\r\n                        await userManager.ResetAuthenticatorKeyAsync(user);\r\n                    }\r\n\r\n                    string[]? recoveryCodes = null;\r\n                    if (tfaRequest.ResetRecoveryCodes || (tfaRequest.Enable == true \u0026\u0026 await userManager.CountRecoveryCodesAsync(user) == 0))\r\n                    {\r\n                        var recoveryCodesEnumerable = await userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\n                        recoveryCodes = recoveryCodesEnumerable?.ToArray();\r\n                    }\r\n\r\n                    if (tfaRequest.ForgetMachine)\r\n                    {\r\n                        await signInManager.ForgetTwoFactorClientAsync();\r\n                    }\r\n\r\n                    var key = await userManager.GetAuthenticatorKeyAsync(user);\r\n                    if (string.IsNullOrEmpty(key))\r\n                    {\r\n                        await userManager.ResetAuthenticatorKeyAsync(user);\r\n                        key = await userManager.GetAuthenticatorKeyAsync(user);\r\n\r\n                        if (string.IsNullOrEmpty(key))\r\n                        {\r\n                            throw new NotSupportedException(\"The user manager must produce an authenticator key after reset.\");\r\n                        }\r\n                    }\r\n\r\n                    return TypedResults.Ok(new TwoFactorResponse\r\n                    {\r\n                        SharedKey = key,\r\n                        RecoveryCodes = recoveryCodes,\r\n                        RecoveryCodesLeft = recoveryCodes?.Length ?? await userManager.CountRecoveryCodesAsync(user),\r\n                        IsTwoFactorEnabled = await userManager.GetTwoFactorEnabledAsync(user),\r\n                        IsMachineRemembered = await signInManager.IsTwoFactorClientRememberedAsync(user),\r\n                    });\r\n                });\r\n            }\r\n\r\n            if (removedEndpoints == null || !removedEndpoints.Contains(IdentityApiEndpoint.GetInfo))\r\n            {\r\n                accountGroup.MapGet(IdentityApiEndpoint.GetInfo, async Task\u003cResults\u003cOk\u003cInfoResponse\u003e, ValidationProblem, NotFound\u003e\u003e\r\n                    (ClaimsPrincipal claimsPrincipal, [FromServices] IServiceProvider sp) =\u003e\r\n                {\r\n                    var userManager = sp.GetRequiredService\u003cUserManager\u003cTUser\u003e\u003e();\r\n                    if (await userManager.GetUserAsync(claimsPrincipal) is not { } user)\r\n                    {\r\n                        return TypedResults.NotFound();\r\n                    }\r\n\r\n                    return TypedResults.Ok(await CreateInfoResponseAsync(user, userManager));\r\n                });\r\n            }\r\n\r\n            if (removedEndpoints == null || !removedEndpoints.Contains(IdentityApiEndpoint.PostInfo))\r\n            {\r\n                accountGroup.MapPost(IdentityApiEndpoint.PostInfo, async Task\u003cResults\u003cOk\u003cInfoResponse\u003e, ValidationProblem, NotFound\u003e\u003e\r\n                    (ClaimsPrincipal claimsPrincipal, [FromBody] InfoRequest infoRequest, HttpContext context, [FromServices] IServiceProvider sp) =\u003e\r\n                {\r\n                    var userManager = sp.GetRequiredService\u003cUserManager\u003cTUser\u003e\u003e();\r\n                    if (await userManager.GetUserAsync(claimsPrincipal) is not { } user)\r\n                    {\r\n                        return TypedResults.NotFound();\r\n                    }\r\n\r\n                    if (!string.IsNullOrEmpty(infoRequest.NewEmail) \u0026\u0026 !_emailAddressAttribute.IsValid(infoRequest.NewEmail))\r\n                    {\r\n                        return CreateValidationProblem(IdentityResult.Failed(userManager.ErrorDescriber.InvalidEmail(infoRequest.NewEmail)));\r\n                    }\r\n\r\n                    if (!string.IsNullOrEmpty(infoRequest.NewPassword))\r\n                    {\r\n                        if (string.IsNullOrEmpty(infoRequest.OldPassword))\r\n                        {\r\n                            return CreateValidationProblem(\"OldPasswordRequired\",\r\n                                \"The old password is required to set a new password. If the old password is forgotten, use /resetPassword.\");\r\n                        }\r\n\r\n                        var changePasswordResult = await userManager.ChangePasswordAsync(user, infoRequest.OldPassword, infoRequest.NewPassword);\r\n                        if (!changePasswordResult.Succeeded)\r\n                        {\r\n                            return CreateValidationProblem(changePasswordResult);\r\n                        }\r\n                    }\r\n\r\n                    if (!string.IsNullOrEmpty(infoRequest.NewEmail))\r\n                    {\r\n                        var email = await userManager.GetEmailAsync(user);\r\n\r\n                        if (email != infoRequest.NewEmail)\r\n                        {\r\n                            await SendConfirmationEmailAsync(user, userManager, context, infoRequest.NewEmail, isChange: true);\r\n                        }\r\n                    }\r\n\r\n                    return TypedResults.Ok(await CreateInfoResponseAsync(user, userManager));\r\n                });\r\n            }\r\n\r\n            return new IdentityEndpointsConventionBuilder(routeGroup);\r\n        }\r\n\r\n        private static ValidationProblem CreateValidationProblem(string errorCode, string errorDescription) =\u003e\r\n            TypedResults.ValidationProblem(new Dictionary\u003cstring, string[]\u003e {\r\n                { errorCode, [errorDescription] }\r\n            });\r\n\r\n        private static ValidationProblem CreateValidationProblem(IdentityResult result)\r\n        {\r\n            // We expect a single error code and description in the normal case.\r\n            // This could be golfed with GroupBy and ToDictionary, but perf! :P\r\n            Debug.Assert(!result.Succeeded);\r\n            var errorDictionary = new Dictionary\u003cstring, string[]\u003e(1);\r\n\r\n            foreach (var error in result.Errors)\r\n            {\r\n                string[] newDescriptions;\r\n\r\n                if (errorDictionary.TryGetValue(error.Code, out var descriptions))\r\n                {\r\n                    newDescriptions = new string[descriptions.Length + 1];\r\n                    Array.Copy(descriptions, newDescriptions, descriptions.Length);\r\n                    newDescriptions[descriptions.Length] = error.Description;\r\n                }\r\n                else\r\n                {\r\n                    newDescriptions = [error.Description];\r\n                }\r\n\r\n                errorDictionary[error.Code] = newDescriptions;\r\n            }\r\n\r\n            return TypedResults.ValidationProblem(errorDictionary);\r\n        }\r\n\r\n        private static async Task\u003cInfoResponse\u003e CreateInfoResponseAsync\u003cTUser\u003e(TUser user, UserManager\u003cTUser\u003e userManager)\r\n            where TUser : class\r\n        {\r\n            return new()\r\n            {\r\n                Email = await userManager.GetEmailAsync(user) ?? throw new NotSupportedException(\"Users must have an email.\"),\r\n                IsEmailConfirmed = await userManager.IsEmailConfirmedAsync(user),\r\n            };\r\n        }\r\n\r\n        // Wrap RouteGroupBuilder with a non-public type to avoid a potential future behavioral breaking change.\r\n        private sealed class IdentityEndpointsConventionBuilder(RouteGroupBuilder inner) : IEndpointConventionBuilder\r\n        {\r\n            private IEndpointConventionBuilder InnerAsConventionBuilder =\u003e inner;\r\n\r\n            public void Add(Action\u003cEndpointBuilder\u003e convention) =\u003e InnerAsConventionBuilder.Add(convention);\r\n            public void Finally(Action\u003cEndpointBuilder\u003e finallyConvention) =\u003e InnerAsConventionBuilder.Finally(finallyConvention);\r\n        }\r\n\r\n        [AttributeUsage(AttributeTargets.Parameter)]\r\n        private sealed class FromBodyAttribute : Attribute, IFromBodyMetadata\r\n        {\r\n        }\r\n\r\n        [AttributeUsage(AttributeTargets.Parameter)]\r\n        private sealed class FromServicesAttribute : Attribute, IFromServiceMetadata\r\n        {\r\n        }\r\n\r\n        [AttributeUsage(AttributeTargets.Parameter)]\r\n        private sealed class FromQueryAttribute : Attribute, IFromQueryMetadata\r\n        {\r\n            public string? Name =\u003e null;\r\n        }\r\n    }\r\n    ```\r\n\u003c/details\u003e\r\n\r\nSome remarks:\r\n1. It is not complete. I have only extracted the register function\r\n2. I had to disable the email confirmation because there is still some plumbing to do. Specifically, I had to rescope certain variables and now I would have to make the entire class generic because of the `TUser`. Still looking for a good solution here.\r\n3. I have added an option to conditionally enable endpoints but had to resort to poor man\u0027s string enums.\r\n\r\nBut other than that it seems to be working fine. \r\nHere is my Program.cs setup:\r\n```cs\r\n// Disable the routes /register and /info\r\napp.MapGroup(\"/auth\").MyMapIdentityApi\u003cAuthUser\u003e([IdentityApiEndpoint.PostRegister, IdentityApiEndpoint.GetInfo]);\r\n```\r\nand here is my custom registration endpoint\r\n```cs\r\n[AllowAnonymous]\r\n[HttpPost(\"register\")]\r\npublic async Task\u003cResults\u003cOk, ValidationProblem\u003e\u003e Register([FromBody] RegisterRequestDTO registration)\r\n{\r\n    if (string.IsNullOrEmpty(registration.FirstName.Trim()))\r\n    {\r\n        Dictionary\u003cstring, string[]\u003e err = new() { { \"RequiredFieldEmpty\", [\"First Name must not be empty\"] } };\r\n        return TypedResults.ValidationProblem(err);\r\n    }\r\n    if (string.IsNullOrEmpty(registration.LastName.Trim()))\r\n    {\r\n        Dictionary\u003cstring, string[]\u003e err = new() { { \"RequiredFieldEmpty\", [\"Last Name must not be empty\"] } };\r\n        return TypedResults.ValidationProblem(err);\r\n    }\r\n\r\n    AuthUser user = new()\r\n    {\r\n        FirstName = registration.FirstName,\r\n        LastName = registration.LastName,\r\n    };\r\n\r\n    RegisterRequest reg = new()\r\n    {\r\n        Email = registration.Email,\r\n        Password = registration.Password\r\n    };\r\n\r\n    return await MyIdentityApiEndpointRouteBuilderExtensions.Register(_serviceProvider, reg, HttpContext, user);\r\n}\r\n```\r\n",
                                           "updatedAt":  "2023-12-29T22:39:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85wUI-Q",
                                           "createdAt":  "2024-01-10T07:33:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agdgb",
                                           "body":  "\u003e \u003e Apologies for the potentially silly question but can we not just have the identity endpoints exposed as regular functions?\r\n\u003e \r\n\u003e This is a very good question. I think maybe these should be exposed as regular functions. It\u0027s a nice in-between solution in case you don\u0027t want just the default behavior, but you also don\u0027t want to copy hundreds of lines of code.\r\n\u003e \r\n\u003e The reason we didn\u0027t do it immediately in .NET 8 is because it would limit some of the changes we could make. For example, we\u0027d potentially have to keep around legacy overloads of functions that don\u0027t accept all the parameters supported by future versions of the given endpoint.\r\n\u003e \r\n\u003e This is the same basic reason the request and response DTOs were not public in early .NET 8 previews, but we switched course on that to improve customizability. If we feel people are happy enough with the current core implementation of these endpoint functions and there\u0027s enough demand, we\u0027d certainly consider making these public. If someone wants to take a stab at and API proposal, please do.\r\n\u003e \r\n\u003e [Here\u0027s the \"API proposal\" issue template](https://github.com/dotnet/aspnetcore/issues/new?assignees=\u0026labels=api-suggestion\u0026projects=\u0026template=30_api_proposal.md\u0026title=). Feel free to just copy the markdown into this issue if you want to keep the context. We can apply the right labels to this issue so it shows up on https://apireview.net/?g=aspnetcore for review.\r\n\r\n\u003e ### \"The reason we didn\u0027t do it immediately in .NET 8 is because it would limit some of the changes we could make. For example, we\u0027d potentially have to keep around legacy overloads of functions that don\u0027t accept all the parameters supported by future versions of the given endpoint.\" \r\n\r\nDoes that mean it\u0027s *considered* to expose the full api methods in future? This will be amazing!! ",
                                           "updatedAt":  "2024-01-10T07:33:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86IEeid",
                                           "createdAt":  "2024-08-11T20:09:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODy6VUg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "abdielcs",
                                                                               "createdAt":  "2024-09-19T23:59:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "toddlucas",
                                           "body":  "I just wanted to say that copying the extension methods class into my project is a great bridge solution. Combined with the interface based stores with generic parameters for the entities, it gives me all the flexibility I need.",
                                           "updatedAt":  "2024-08-11T20:09:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86rG8qw",
                                           "createdAt":  "2025-05-12T03:50:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mguinness",
                                           "body":  "Similar issue https://github.com/dotnet/aspnetcore/issues/44660 regarding email being used for username.  Extensibility also asked about in [How to customize \".NET 8 Identity\" routes - MapIdentityApi](https://stackoverflow.com/questions/77765859/) which has been viewed 8k times.  Also see [ASP.NET Core 8 Web API endpoint does not contain my custom fields](https://stackoverflow.com/questions/77499218/).  Identity endpoints need a better solution for customization rather than hacks.\n",
                                           "updatedAt":  "2025-05-12T03:50:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86rNFv8",
                                           "createdAt":  "2025-05-12T12:19:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhH7IA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "mguinness",
                                                                               "createdAt":  "2025-05-12T15:31:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "MxNbrt",
                                                                               "createdAt":  "2025-07-26T07:42:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "Dzivo",
                                                                               "createdAt":  "2025-09-05T22:30:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "mikekistler",
                                           "body":  "[Support for scaffolding the Identity endpoints](https://github.com/dotnet/aspnetcore/issues/53343) is on the [Roadmap for .NET 10](https://github.com/dotnet/aspnetcore/issues/59443). I think that will address most of the use cases described here.",
                                           "updatedAt":  "2025-05-12T12:19:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86rUwWP",
                                           "createdAt":  "2025-05-12T22:29:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mguinness",
                                           "body":  "That\u0027s awesome Mike, thanks for posting.  I\u0027ve added a comment to Stack Overflow question to link back to this issue.",
                                           "updatedAt":  "2025-05-12T22:29:49Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Extensibility for Identity Endpoints (MapIdentity\u003cTUser\u003e)",
        "labels":  [
                       "enhancement",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/50904",
        "createdAt":  "2023-09-24T19:55:18Z",
        "number":  50904,
        "author":  "augustevn",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC2WlvQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "simone-devoti",
                                            "createdAt":  "2024-03-01T09:15:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gionapaolini",
                                            "createdAt":  "2024-03-06T22:38:59Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-02-13T01:23:23Z",
        "body":  "## Background and Motivation\r\n\r\nI\u0027d like an optional `string? CallbackUrl` since I\u0027ll likely have **multiple** frontends on different (sub)domains, consuming the same Auth API.\r\nPassing that (sub)domain URL all the way through, would enable that.\r\n\r\nFor example, https://www.leashr.com \u0026 https://www.belgiandoggos.be use the same API for authentication \u0026 authorization.\r\nSetting either one in my `appSettings.json` won\u0027t cut it.\r\n\r\nSo, I prefer you just make the parameters available so we can form our own URLs and decide whether it goes to a frontend or backend. Then, I can also choose to use route parameters rather than query string parameters on my Blazor frontends.\r\n\r\nFeel free to watch my implementation of RC1: https://youtu.be/yGYpN1hFPAg?si=zlLykBIas_WBjXWN\r\n\r\n## Proposed API\r\n\r\n```csharp\r\n\r\n    Task SendConfirmationEmailAsync\u003cTUser\u003e(TUser user, string email, string code, string confirmationLink, string? callbackUrl) where TUser : class\r\n    {\r\n        return SendEmailAsync(email, code, confirmationLink, callbackUrl);\r\n    }\r\n\r\n    // Merged ResetCode \u0026 ResetLink into one.\r\n    Task SendPasswordResetEmailAsync\u003cTUser\u003e(TUser user, string email, string resetCode, string resetLink, string? callbackUrl) where TUser : class\r\n    {\r\n        return SendEmailAsync(email, resetCode, resetLink, callbackUrl);\r\n    }\r\n\r\n```\r\n\r\n```csharp\r\n\r\n    public sealed class NoOpEmailSender : IEmailSender\r\n    {\r\n        public Task SendEmailAsync(string email, string code, string link, string? callbackUrl) =\u003e Task.CompletedTask;\r\n    }\r\n\r\n```\r\n\r\n#### DTO\r\n\r\nYou\u0027ll need to add the `string? CallbackUrl` property to your request \u0026 response DTO\u0027s as well to pass the value all the way down and back to the consumer.\r\n\r\n## Usage Examples\r\n\r\n```csharp\r\n\r\n    public async Task SendConfirmationEmailAsync\u003cTUser\u003e(TUser user, string email, string code, string confirmationLink, string? callbackUrl) where TUser : class\r\n    {\r\n        var frontendConfirmationLink = $\"\u003ca href=\u0027{callbackUrl}/{user.UserId}/{code}\u0027\u003eclicking here\u003c/a\u003e\";\r\n        \r\n        await SendEmailAsync(email, $\"{user.Name}, confirm your email\", $\"Please confirm message (in my native language) {frontendConfirmationLink}.\");\r\n    }\r\n    \r\n    // Merged ResetCode \u0026 ResetLink into one.\r\n    public async Task SendPasswordResetEmailAsync\u003cTUser\u003e(TUser user, string email, string resetCode, string resetLink, string? callbackUrl) where TUser : class\r\n    {\r\n        var frontendResetLink = $\"\u003ca href=\u0027{callbackUrl}/{email}/{resetCode}\u0027\u003eclicking here\u003c/a\u003e\";\r\n    \r\n        await SendEmailAsync(email, $\"{user.Name}, reset your password\", $\"Reset password message (in my native language): {frontendResetLink}\");\r\n    }\r\n\r\n```\r\n\r\n## Alternative Designs\r\n\r\nThe formed links are fine as an example but a pain to extract from \u0026 reformat.\r\nThe subject \u0026 message are likely to be translated or changed, so mainly serve as an example as well.\r\nI don\u0027t think you need either of the above but feel free to leave those in.\r\n\r\n## Risks\r\n\r\nWill need good documentation to prevent confusion about being able to use the provided link but also to use the parameters to form your own link.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOa8AY2w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85qL3XH",
                                           "createdAt":  "2023-10-26T16:54:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-10-26T16:54:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85qrm8x",
                                           "createdAt":  "2023-11-01T23:13:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "There was a bug in RC1 where the links passed to the `IEmailSender` were relative rather than absolute (#50296). Now that that\u0027s fixed, the `confirmationLink` should actually be usable without an extra `callbackUrl`.\r\n\r\nI think that accepting an optional `redirectUrl` could be interesting for the `SendConfirmationEmailAsync` so the user ends up somewhere more useful than a plaintext page that says \"Thank you for confirming your email.\", but I don\u0027t think it makes too much sense for `SendPasswordResetCodeAsync` since there\u0027s no GET endpoint associated with it to link to. `SendPasswordResetCodeAsync` expects the app to have custom UI that accepts the reset code and POSTs it to the `/resetPassword` endpoint using something like `HttpClient` or `fetch` without navigating the browser to that page.\r\n\r\nEven for email confirmation, you could encode the real `confirmationLink` in the query string of your frontend URL and then have the frontend make a GET request to the real `confirmationLink` it decodes from the query string in the background.\r\n\r\nWe cannot remove the existing `IEmailSender\u003cTUser\u003e` methods at this point without breaking people. We can add new overloads, but that risks overwhelming people with too many overloads. Another option might be to flow through an `IDictionary\u003cstring, object?\u003e` property bag to `HttpContext.Items` or `AuthenticationProperties.Parameters` for maximum flexibility.\r\n\r\nIf you do not need to customize the `callbackUrl` per email, but instead it\u0027s per-user or per-application config, you could configure the `callbackUrl` as an field on `TUser` or the `IEmailSender\u003cTUser\u003e`. Last resort, you can just copy `IdentityApiEndpointRouteBuilderExtensions` which contains `MapIdentityApi\u003cTUser\u003e` and send emails however you want. It only references public API from other classes, so it should be easy to copy.",
                                           "updatedAt":  "2023-11-01T23:15:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85qu6uh",
                                           "createdAt":  "2023-11-02T13:01:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "augustevn",
                                           "body":  "\u003e There was a bug in RC1 where the links passed to the `IEmailSender` were relative rather than absolute (#50296). Now that that\u0027s fixed, the `confirmationLink` should actually be usable without an extra `callbackUrl`.\r\n\u003e\r\n\u003e I think that accepting an optional `redirectUrl` could be interesting for the `SendConfirmationEmailAsync` so the user ends up somewhere more useful than a plaintext page that says \"Thank you for confirming your email.\", but I don\u0027t think it makes too much sense for `SendPasswordResetCodeAsync` since there\u0027s no GET endpoint associated with it to link to. `SendPasswordResetCodeAsync` expects the app to have custom UI that accepts the reset code and POSTs it to the `/resetPassword` endpoint using something like `HttpClient` or `fetch` without navigating the browser to that page.\r\n\u003e\r\n\u003e Even for email confirmation, you could encode the real `confirmationLink` in the query string of your frontend URL and then have the frontend make a GET request to the real `confirmationLink` it decodes from the query string in the background.\r\n\u003e\r\n\u003e We cannot remove the existing `IEmailSender\u003cTUser\u003e` methods at this point without breaking people. We can add new overloads, but that risks overwhelming people with too many overloads. Another option might be to flow through an `IDictionary\u003cstring, object?\u003e` property bag to `HttpContext.Items` or `AuthenticationProperties.Parameters` for maximum flexibility.\r\n\u003e\r\n\u003e If you do not need to customize the `callbackUrl` per email, but instead it\u0027s per-user or per-application config, you could configure the `callbackUrl` as an field on `TUser` or the `IEmailSender\u003cTUser\u003e`. Last resort, you can just copy `IdentityApiEndpointRouteBuilderExtensions` which contains `MapIdentityApi\u003cTUser\u003e` and send emails however you want. It only references public API from other classes, so it should be easy to copy.\r\n\r\n---\r\n\r\nNo, I understood that from other threads. The absolute URI seems fixed in RC2 but it leads to my API which very unusual for an SPA + API setup.\r\n\r\nFor both confirmation or resetting the password, I\u0027d prefer to have the user end up on a well formatted / dynamic front-end Blazor page. Now, I construct that link myself by extracting the information like the `code` \u0026 `userId` to lead the user to a \u0027reset password form\u0027 or the \u0027login form\u0027 page using route parameters instead of query string parameters.\r\n\r\nI don\u0027t find it user-friendly for the user to have to copy their code into my API or a front-end field somewhere, hence a link that they simply click on, would be preferred. One that doesn\u0027t lead to my API. Setting one in my `appSettings.json` doesn\u0027t cover the multiple front-ends on one API scenario.\r\n\r\nI\u0027m not sure about the passing extra properties on the TUser, aren\u0027t you using DTOs that strip away all the extra properties that I\u0027d pass on `/register` or on `/forgotPassword`?\r\n_**I think that is exactly the flexibility that we\u0027re missing. Passing down extra properties on the TUser or just all the way down.**_\r\n\r\nI like the property bag idea \u0026 I\u0027ll take a look at `IdentityApiEndpointRouteBuilderExtensions`.\r\n\r\nThanks for taking your time to respond.\r\n",
                                           "updatedAt":  "2023-11-02T15:04:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85qvBKw",
                                           "createdAt":  "2023-11-02T13:18:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "augustevn",
                                           "body":  "I just tested passing extra info on the TUser, doesn\u0027t work. That would be the requirement to pass extra data on `/register`, `/forgotPassword` etc.\r\n\r\nI used this Entity model: \r\n\r\n```csharp\r\npublic class User : IdentityUser\r\n{\r\n    public string? Name { get; set; }\r\n    \r\n    public DateTime CreatedAt { get; set; }\r\n    public string? CreatedBy { get; set; }\r\n    public DateTime? LastModifiedAt { get; set; }\r\n    public string? LastModifiedBy { get; set; }\r\n}\r\n```\r\n\r\nIf I `/register` a user and pass along:\r\n\r\n```\r\n{\r\n   \"name\": \"auguste\",\r\n  \"email\": \"test@gmail.com\",\r\n  \"password\": \"Test1234\"\r\n}\r\n```\r\n\r\nThe name doesn\u0027t end up in the database so that wouldn\u0027t work for any other properties either. I think that\u0027s the last improvement on flexibility you could do to make these endpoints the preferred way over custom JWT stateless SPA + API auth.\r\n\r\nIt doesn\u0027t come out of the `SendConfirmationLinkAsync(User user, string email, string confirmationLink)` either due to the DTO usage, I assume. So for now, that TUser parameter is not useful.\r\n\r\n![image](https://github.com/dotnet/aspnetcore/assets/77939574/e20ba596-a77c-4771-b621-ef234bc19e38)\r\n",
                                           "updatedAt":  "2023-11-02T14:43:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85qv2Gm",
                                           "createdAt":  "2023-11-02T15:11:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "augustevn",
                                           "body":  "\u003e Even for email confirmation, you could encode the real confirmationLink in the query string of your frontend URL and then have the frontend make a GET request to the real confirmationLink it decodes from the query string in the background.\r\n\r\nIs a good suggestion but also not feasable on the multiple front-end, one API scenario. As long a we can\u0027t pass extra variables (due to DTOs) all the way down, we\u0027re stuck hard-coding a front-end URL, which only support one SPA on one API scenario.\r\n\r\nThe only solution I see:\r\nPass extra properties on DTOs `RegisterUserRequest`, `ForgotPasswordRequest`, ... And to get them back from the `SendConfirmationEmailAsync` \u0026 `SendResetPasswordResetCodeAsync`.\r\n\r\nWhether that happens through the `TUser` or as extra `RedirectUrl` parameter, doesn\u0027t matter to me. Although, it would be nice to store more user info than just the email at `/register`. ",
                                           "updatedAt":  "2023-11-11T13:53:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85rwBjb",
                                           "createdAt":  "2023-11-13T09:23:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "augustevn",
                                           "body":  "An additional question arose on how to validate extra passed data.",
                                           "updatedAt":  "2023-11-13T09:23:43Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Identity Endpoints API - Optional \"CallbackUrl\"",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "api-suggestion"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/51123",
        "createdAt":  "2023-10-04T06:16:12Z",
        "number":  51123,
        "author":  "universorum",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-13T01:22:28Z",
        "body":  "## Summary\r\n\r\nUserManager.ValidateUserAsync will ignored failed if IUserValidator.ValidateAsync return IdentityResult.Failed() without error, \r\n\r\n## Motivation and goals\r\n\r\nBy docs `https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.identity.identityresult.failed?view=aspnetcore-7.0`,\r\nIdentityError is optional, but empty error collection may lead to ValidateUserAsync ignored the fail.\r\n\r\nMake ValidateUserAsync\u0027 returned value depending on failed is exists or not, not count of error.\r\nCan avoid unexpected store writing operate when validator already returned fail.\r\n\r\n## In scope\r\n\r\nCheck user entity meet all condition for DB schema, but not need to provide the descriptions of failure.\r\n\r\n## Risks / unknowns\r\n\r\nExists project may configure to depend the count of error and ignored success status. If so, this design may break the exists code.\r\n\r\n## Examples\r\n\r\n```\r\npublic async Task\u003cIdentityResult\u003e ValidateAsync(UserManager\u003cApplicationUser\u003e manager, ApplicationUser user)\r\n{\r\n    if (!user.Roles.Any()) { return IdentityResult.Success; }\r\n\r\n    var roleIds = user.Roles.Select(x =\u003e x.Id).ToArray();\r\n    var exists  = await _context.Roles.CountAsync(x =\u003e roleIds.Contains(x.Id));\r\n\r\n    if (roleIds.Length == exists) { return IdentityResult.Success; }\r\n\r\n    return IdentityResult.Failed(); // Returned Failed without IdentityError\r\n}\r\n```\r\nThe user\u0027s role may be a mock entity and attached to ef. Coder may want to ensure all role is exists in db\r\n`Context.Role.Attach(role);` \r\n\r\n\r\nCurrent version of UserManager.ValidateUserAsync will ignored this failed and reutrn IdentityResult.Success because they can not collect any error.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/f49c1c7f7467c184ffb630086afac447772096c6/src/Identity/Extensions.Core/src/UserManager.cs#L2319-L2327",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOai9HOg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85qL0c6",
                                           "createdAt":  "2023-10-26T16:46:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-10-26T16:46:30Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Allow IUserValidator.ValidateAsync return IdentityResult.Failed() without IdentityError",
        "labels":  [
                       "bug",
                       "area-identity",
                       "design-proposal"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/51289",
        "createdAt":  "2023-10-11T09:40:05Z",
        "number":  51289,
        "author":  "augustevn",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-13T01:21:40Z",
        "body":  "              \u003e I don\u0027t know if this is an issue or not but just want to mention that no matter what _lifetime_ the `IEmailSender` is added by user, It will always be created once.\r\n\r\nThat is a good point. That\u0027s the way I made `MapIdentityApi` work prior to this PR, but it is different from the Identity UI razor pages. The default no-op implementation is registered as a singleton.\r\n\r\nDo you think it\u0027s common to need or want services from the request scope? I guess it probably wouldn\u0027t hurt. It\u0027s just another parameter to pass around.\r\n\r\n_Originally posted by @halter73 in https://github.com/dotnet/aspnetcore/issues/50301#issuecomment-1696365240_\r\n\r\n---\r\n\r\nAfter testing with a few email integrations, I noticed there were scoping issues for working with `FluentEmail` SMTP.\r\n\r\nA custom MailKit SMTP mailer worked fine.\r\n            ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOajTUYA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85qLycp",
                                           "createdAt":  "2023-10-26T16:40:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-10-26T16:40:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85qNJKO",
                                           "createdAt":  "2023-10-26T20:11:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kahbazi",
                                           "body":  "@halter73 Do you think this is something that needs to be done in v8.0? If so I can send a PR for this issue.",
                                           "updatedAt":  "2023-10-26T20:11:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85qNNRg",
                                           "createdAt":  "2023-10-26T20:25:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "It\u0027s too late for this kind of change in .NET 8. We\u0027ll consider making it a breaking change in .NET 9. In the meantime, you can work around this issue with `IHttpContextAccessor` and `RequestServices` or copy [IdentityApiEndpointRouteBuilderExtensions](https://github.com/dotnet/aspnetcore/blob/6c1b3dfb66a1b66cc32ee26bbc23f6472f1dc985/src/Identity/Core/src/IdentityApiEndpointRouteBuilderExtensions.cs) which contains `MapIdentityApi` and resolve the service in a scope yourself. Everything you need should be contained in that single file now that the DTO types are public.",
                                           "updatedAt":  "2023-10-26T20:25:19Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Identity Endpoints - Lifetime IEmailSender",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "feature-identity-service"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/51401",
        "createdAt":  "2023-10-16T07:29:58Z",
        "number":  51401,
        "author":  "voroninp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-13T01:21:03Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nIf API has another convention for urls `confirm-email` instead of `confirmEmail` adding Identity endpoints will make naming incosistent.\n\n### Describe the solution you\u0027d like\n\nThere should be a way to change the url of each identity endpoint.\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObXsMVQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85qLx59",
                                           "createdAt":  "2023-10-26T16:39:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 9 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-10-26T16:39:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85tewxV",
                                           "createdAt":  "2023-12-01T21:09:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-12-01T21:09:44Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Allow urls of identity endpoints be customizable",
        "labels":  [
                       "enhancement",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/51635",
        "createdAt":  "2023-10-25T10:44:12Z",
        "number":  51635,
        "author":  "erossini",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-05T10:15:10Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI\u0027m creating a new website with Blazor and the NET8 framework using the boilerplate from Visual Studio 2022 Preview. The source code of this test is on [GitHub](https://github.com/erossini/NET8BlazorIdentity).\r\n\r\nI\u0027m trying to customize the pages and in particular the _Index.razor_ under _Components \u003e Pages \u003e Account \u003e Manage_.  So, I added the properties in the `ApplicationUser` model. After those changes, when I click around the page, I often get this error\r\n\r\n\u003e A second operation was started on this context instance before a previous operation completed. This is usually caused by different threads concurrently using the same instance of DbContext. For more information on how to avoid threading issues with DbContext, see https://go.microsoft.com/fwlink/?linkid=2097913.\r\n\r\nI recorded my actions in this screenshot.\r\n\r\n![blazoridentity-error](https://github.com/dotnet/aspnetcore/assets/9497415/4fadda0c-346a-45f0-9463-c2d38af6a028)\r\n\n\n### Expected Behavior\n\nNot get this error\n\n### Steps To Reproduce\n\nIn my repo on [GitHub](https://github.com/erossini/NET8BlazorIdentity) you have the full source code. \n\n### Exceptions (if any)\n\nA second operation was started on this context instance before a previous operation completed. This is usually caused by different threads concurrently using the same instance of DbContext. For more information on how to avoid threading issues with DbContext, see https://go.microsoft.com/fwlink/?linkid=2097913.\n\n### .NET Version\n\n8.0.0-rc.2.23480.1\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOa7I1nQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85qq0z1",
                                           "createdAt":  "2023-11-01T20:14:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "This appears to be the same issue raised in #43687 which was treated as a discussion question and closed as answered. Because Blazor components can be rendered in parallel, if you have multiple components accessing the `UserManager`, you can get concurrency failures. One workaround is to create a new DI scope per additional component that needs to use the `UserManager`.\r\n\r\nThis is what your server-side `AuthenticationStateProvider` [already](https://github.com/erossini/NET8BlazorIdentity/blob/f496bd93ce31cb8da50dc78c14bf4ebfb3125f27/BlazorIdentity/Identity/PersistingRevalidatingAuthenticationStateProvider.cs#L44-L46) does in `ValidateAuthenticationStateAsync` to get the latest security stamp.\r\n\r\nI opened a PR with this fix at https://github.com/erossini/NET8BlazorIdentity/pull/1.\r\n\r\nAnother option for metadata that\u0027s used frequently like `string FirstName` is to include that in the `ClaimsPrincipal`, but that doesn\u0027t make much sense for something potentially expensive like a `byte[] ProfilePicture`.\r\n\r\nI\u0027m going to leave this issue open but remove the milestone and assignment to see if we can make Identity work better with concurrently-rendered Razor Components. Creating new DI scopes everywhere is not convenient.\r\n\r\n",
                                           "updatedAt":  "2023-11-01T20:14:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85qwoFq",
                                           "createdAt":  "2023-11-02T17:03:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkArtakMSFT",
                                           "body":  "We feel like there is room for improvement here but have no clear vision of what a good path forward is. We\u0027re going to keep this on the backlog to accumulate more feedback, which hopefully will help define a good solution in the future.",
                                           "updatedAt":  "2023-11-02T17:03:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85qwoKY",
                                           "createdAt":  "2023-11-02T17:03:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-11-02T17:03:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85q1D-0",
                                           "createdAt":  "2023-11-03T11:44:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "erossini",
                                           "body":  "Thank you so much for your comments.",
                                           "updatedAt":  "2023-11-03T11:44:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85rsjWd",
                                           "createdAt":  "2023-11-11T15:14:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dschuesae",
                                           "body":  "When I create a new project with the most actual templates I get this error or did I already change some code?",
                                           "updatedAt":  "2023-11-11T15:14:38Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "NET8 and Blazor in the user profile with Microsoft Identity raises an error",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "feature-blazor-server-auth"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/52200",
        "createdAt":  "2023-11-20T05:29:36Z",
        "number":  52200,
        "author":  "alexlogiclab",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC78-DA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "licon4812",
                                            "createdAt":  "2023-11-20T12:30:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "benholtsclaw",
                                            "createdAt":  "2024-03-24T13:35:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "arm-grigoryan",
                                            "createdAt":  "2024-04-30T10:21:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Akwaduk",
                                            "createdAt":  "2024-08-07T04:18:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ar-schraml",
                                            "createdAt":  "2024-10-18T13:36:50Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2025-05-02T21:16:09Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI have an existing project that I upgraded to .NET 8 from 7 which went fine except for the Identity component (can\u0027t find a guide on how to migrate from 7 to 8 for Identity).  I thought I would re-scaffold these so it generated Razor files, but that doesn\u0027t work, it only creates cshtml files.\r\n\r\nI then tried creating a brand new blank .NET 8 Blazor project using the \"Blazor Web App\" template but adding the Identity components after the project was created.  This creates the same issue.\r\n\r\nThe only way to get it create the right Razor files is to specify Identity when using the template and creating a brand new project.  Then it will create the Razor pages correctly.\n\n### Expected Behavior\n\nIt should create Razor pages if the project is .NET 8 based when \"New Scaffold Item\" -\u003e Identity is selected especially if the template to create the project is \"Blazor Web App\".\n\n### Steps To Reproduce\n\nCreate a new project and select \"Blazor Web App\" template.  Set \"Authentication type\" to Non when creating project.\r\n\r\nRight click on the project and select \"Add Scaffold Item\".  Select \"Identity\" then add pages to override.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.100\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqcMSAg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85st282",
                                           "createdAt":  "2023-11-23T08:17:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "@alexbitsnz thanks for contacting us.\r\n\r\nI don\u0027t believe we have an Identity scaffolder yet for Razor pages, precisely because of the fact that the pages ship in the template.",
                                           "updatedAt":  "2023-11-23T08:17:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85sx4Ib",
                                           "createdAt":  "2023-11-24T00:15:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexlogiclab",
                                           "body":  "\u003e @alexbitsnz thanks for contacting us.\r\n\u003e \r\n\u003e I don\u0027t believe we have an Identity scaffolder yet for Razor pages, precisely because of the fact that the pages ship in the template.\r\n\r\nThanks for the explanation, but I do feel it\u0027s a bit silly not to have it in there.  It\u0027s easy to start work on a new project and realise that Identity has not be added yet.  Without being able to scaffold the necessary pages it means starting over and copying everything over to a new project.\r\n\r\nHope that makes sense.  I\u0027m sure it will come eventually.",
                                           "updatedAt":  "2023-11-24T00:15:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85s0Wlc",
                                           "createdAt":  "2023-11-24T13:15:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "@alexbitsnz thanks for the feedback.\r\n\r\nAs always, it\u0027s a matter of cost and maintenance, for .NET 8.0 we focused on having a new experience available, we\u0027ll iterate over it based on feedback.",
                                           "updatedAt":  "2023-11-24T13:15:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85s0Wr-",
                                           "createdAt":  "2023-11-24T13:15:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-11-24T13:15:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85s0WyZ",
                                           "createdAt":  "2023-11-24T13:16:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "@JeremyLikness @halter73 in case you have thoughts or can dupe it against any other issue.",
                                           "updatedAt":  "2023-11-24T13:16:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85s2CUM",
                                           "createdAt":  "2023-11-24T21:55:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexlogiclab",
                                           "body":  "Honestly I am really enjoying this new version and there is a lot of amazing changes so totally understand that in the scheme of things this isn\u0027t on the top of the list.  Keep up the good work folks :-)",
                                           "updatedAt":  "2023-11-24T21:55:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86pwxIC",
                                           "createdAt":  "2025-05-02T21:15:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "darkdragon002",
                                           "body":  "I just experienced this bug as well, but it was with scaffolded item in general.  using .net 8 LTS and blazor, as well as vs enterprise\n\n\ni was following a blazor web course on linkedin learning, and they said to make a blazor web app, which i did. then next i made a class file that will be used for database stuff (as the model). \n\nthen they said to right click pages, click add - new scaffolded item.\nonce the menu opens, click on razor pages, then on razor pages using entity framework (crud)\nclick add\n\nfill in the model class (one made earlier). \nmake a new dbcontext class, then use the default sql server that pops up.\nclick add.\n\nafter about 5 -10 minutes it makes the pages, but they are all cshtml pages instead of razor. (create, delete, details, edit, and index)\n",
                                           "updatedAt":  "2025-05-02T21:16:08Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Scaffolding Identity in Blazor .NET 8 app creates cshtml rather than Razor pages",
        "labels":  [
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/52314",
        "createdAt":  "2023-11-22T20:27:34Z",
        "number":  52314,
        "author":  "voroninp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-05T21:17:53Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nIt\u0027s very easy to forget adding `base.OnModelCreating(modelBuilder);` call when switching inheritance from `DbContext` to `IdentityDbContext`\r\n\r\nAnd as a result, one will get the following exception from EF Core:\r\n\r\n\u003e System.InvalidOperationException : The entity type \u0027IdentityUserLogin\u003cstring\u003e\u0027 requires a primary key to be defined.\r\n\r\nIMO, this is a very unfriendly message, because it\u0027s not telling how to fix the problem in the first place. Unless you google and find the answer on [Stack Overflow](https://stackoverflow.com/questions/40703615/the-entity-type-identityuserloginstring-requires-a-primary-key-to-be-defined). I believe framework should guide with errors, not frighten.\n\n### Describe the solution you\u0027d like\n\nAn easy solution is to provide an analyzer that will check for the base call, or even an interceptor to fix the issue silently.\r\n\r\nThe ideal solution for me would be, if C#/CLR allowed implementing Template Method pattern with reusing the name:\r\n\r\n```\r\nclass IdentityContext\r\n{\r\n    protected override sealed void OnModelCreating(ModelBuilder modelBuilder)\r\n    {\r\n        ...\r\n        new.OnModelCreating(modelBuilder);\r\n    }\r\n \r\n    new protected virtual void OnModelCreating(ModelBuilder modelBuilder)\r\n    {\r\n    }\r\n}\r\n```\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Identity: Check/ensure that base.OnModelCreating is called when AppDbContext inherits from IdentityDbContext.",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "analyzer",
                       "Pillar: Dev Experience"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/52504",
        "createdAt":  "2023-12-01T08:44:23Z",
        "number":  52504,
        "author":  "aburgett87",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-13T01:13:24Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nThe nullability of `IdentityUserClaim.ClaimType` and `IdentityUserClaim.ClaimValue` properties are misleading for users modifying the data directly. If a user does modify the data directly and sets a null value, `IdentityUserClaim.ToClaim()` will throw an `ArgumentNullException` because of the `Claim` class\u0027s constructor. \r\n\r\nWhile I understand the intent of this is not to modify the data directly, there will be cases where some users will do it and they will assume that a null is valid value.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nUnsure of which way to go on it and I think it needs a larger discussion.\r\n\r\nOne approach would be to remove the nullability for `IdentityUserClaim.ClaimType` and `IdentityUserClaim.ClaimValue` and force a migration on users\r\n\r\nAnother approach could be to change `IdentityUserClaim.ToClaim()` to return `Claim?`, which would imply if either  `IdentityUserClaim.ClaimType` or`IdentityUserClaim.ClaimValue` is `null` then return `null`.\r\n\r\nAnother approach would be to document and recommend users adjust their DbContext accordingly, which would allow them to opt-in to the migration.\r\n\r\n### Additional context\r\n\r\nI can see that a similar issue https://github.com/dotnet/aspnetcore/issues/18679 exists and is closed, though I would like to see some guidance on how to approach the issue",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObclYWA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85tv-yQ",
                                           "createdAt":  "2023-12-05T17:36:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-12-05T17:36:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85tyVhY",
                                           "createdAt":  "2023-12-06T01:11:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1pWJw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "pvlst",
                                                                               "createdAt":  "2024-10-10T19:11:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "halter73",
                                           "body":  "\u003e Another approach would be to document and recommend users adjust their DbContext accordingly, which would allow them to opt-in to the migration.\r\n\r\nI think this is the only thing we\u0027d be willing to do. We could add something to the `ToClaim()` doc comment indicating that `Claim` requires non-null type and value which means it will throw if `ClaimType` and/or `ClaimValue` is null.\r\n\r\nI don\u0027t think this is a common enough issue to warrant a breaking change.\r\n\r\nMaking `IdentityUserClaim.ClaimType` and `IdentityUserClaim.ClaimValue` non-nullable would be way too breaking since null is the default value for these properties right after constructing `IdentityUserClaim\u003cTKey\u003e`. We\u0027d have to remove the default constructor or make the properties [required](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/required) which is not a direction we\u0027re willing to go. \r\n\r\nMaking `ToClaim()` sometimes return null risks changing the `ArgumentNullException` thrown `ToClaim()` into an `NullReferenceException` at some later point that would likely be harder to debug.",
                                           "updatedAt":  "2023-12-06T01:11:51Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Remove/mitigate the nullability of IdentityUserClaim\u0027s ClaimType and ClaimValue properties",
        "labels":  [
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/52682",
        "createdAt":  "2023-12-09T05:10:15Z",
        "number":  52682,
        "author":  "wasker",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODIuvNg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Kahbazi",
                                            "createdAt":  "2023-12-09T07:28:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Takhoffman",
                                            "createdAt":  "2024-08-13T19:12:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Dreamescaper",
                                            "createdAt":  "2025-07-28T09:21:36Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-02-13T20:28:46Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWhen authorization fails, [DefaultAuthorizationService](https://github.com/dotnet/aspnetcore/blob/main/src/Security/Authorization/Core/src/DefaultAuthorizationService.cs) calls [_logger.UserAuthorizationFailed](https://github.com/dotnet/aspnetcore/blob/52364da7f2d8e8956085a92c2f6b9dae48ac130d/src/Security/Authorization/Core/src/LoggingExtensions.cs#L17). The latter will always log an unhelpful \"Fail() was explicitly called.\" message, even if `AuthorizationHandlerContext.Fail(new AuthorizationFailureReason(this, \"Some helpful message.\"))` was called.\r\n\r\n### Expected Behavior\r\n\r\nIf `AuthorizationHandlerContext.Fail(new AuthorizationFailureReason(this, \"Some helpful message.\"))` was called, I\u0027d like to see `\"Authorization failed due to:\" + Environment.NewLine + string.Join(Environment.NewLine, failure.FailureReasons)` message being logged, which would be much better than \"Fail() was explicitly called.\" today.\r\n\r\n### Steps To Reproduce\r\n\r\n```csharp\r\nusing System;\r\nusing System.Globalization;\r\nusing System.Linq;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.AspNetCore.Authorization;\r\nusing Microsoft.AspNetCore.Http;\r\n\r\npublic class AuthorizationHandler : IAuthorizationHandler\r\n{\r\n    public Task HandleAsync(AuthorizationHandlerContext context)\r\n    {\r\n        if (context.Resource is HttpContext httpContext)\r\n        {\r\n            context.Fail(new AuthorizationFailureReason(this, \"Authentication failed earlier.\"));\r\n        }\r\n\r\n        return Task.CompletedTask;\r\n    }\r\n}\r\n\r\nusing Microsoft.AspNetCore.Authorization;\r\nusing Microsoft.AspNetCore.Builder;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Options;\r\n\r\npublic static class AuthorizationExtensions\r\n{\r\n    public static void ConfigureAuthorization(this WebApplicationBuilder appBuilder)\r\n    {\r\n        appBuilder.Services.AddAuthorization();\r\n\r\n        appBuilder.Services.AddSingleton\u003cIAuthorizationHandler, AuthorizationHandler\u003e();\r\n    }\r\n}\r\n```\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n7.0, 8.0\r\n\r\n### Anything else?\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "UserAuthorizationFailed log message loses information about FailureReasons",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "feature-observability"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/52707",
        "createdAt":  "2023-12-10T14:05:25Z",
        "number":  52707,
        "author":  "sandrohanea",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBXeCA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TorbenK",
                                            "createdAt":  "2024-04-05T11:11:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nenadvicentic",
                                            "createdAt":  "2024-08-07T09:10:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jorik90",
                                            "createdAt":  "2025-04-18T13:28:51Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-02-13T20:26:41Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nRedirect to Login: [here]( https://github.com/dotnet/aspnetcore/blob/52364da7f2d8e8956085a92c2f6b9dae48ac130d/src/Security/Authentication/Cookies/src/CookieAuthenticationHandler.cs#L485C22-L485C37) is using Request.Scheme in order to generate the Login URL.\r\n\r\n\r\nIn case we are using a proxy, we will use `UseForwardedHeaders` in order to consider `ForwardedHeaders.XForwardedProto` .\r\n\r\nThe new blazor template for authentication, doesn\u0027t contain `UseAuthorization` and `UseAuthentication` and these middlewares are added automatically during app build. [I think here](https://github.com/dotnet/aspnetcore/blob/52364da7f2d8e8956085a92c2f6b9dae48ac130d/src/DefaultBuilder/src/WebApplicationBuilder.cs#L433)\r\n\r\nAny person who is searching about this problem, will find that they need to use `UseForwardedHeaders` but that will only add the middleware after the Authentication and Autorization middlewares are already in the pipeline, so the transformation of the Request.Scheme was not applied yet when redirect to login in happening.\r\n\r\n```\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\n// add my services\r\n...\r\n\r\n\r\nvar app = builder.Build();\r\n\r\napp.UseForwardedHeaders(new ForwardedHeadersOptions\r\n{\r\n    ForwardedHeaders = ForwardedHeaders.XForwardedProto | ForwardedHeaders.XForwardedHost | ForwardedHeaders.XForwardedFor\r\n});\r\n\r\n// Use rest of the middlewares\r\n...\r\n\r\napp.Run();\r\n\r\n\r\n```\r\n\r\nOne solution is to add the `UseAuthorization` and `UseAuthentication` after the forwarded headers:\r\n\r\n// Use rest of the middlewares\r\n```\r\n\r\nvar app = builder.Build();\r\n\r\napp.UseForwardedHeaders(new ForwardedHeadersOptions\r\n{\r\n    ForwardedHeaders = ForwardedHeaders.XForwardedProto | ForwardedHeaders.XForwardedHost | ForwardedHeaders.XForwardedFor\r\n});\r\n\r\napp.UseAuthentication();\r\napp.UseAuthorization();\r\n\r\n...\r\n\r\napp.Run();\r\n```\r\n\r\nThis way we ensure that the correct order is applied.\n\n### Expected Behavior\n\nI think the best scenario would be so that automatically added `AuthorizationMiddleware` and `AuthenticationMiddleware` would be added after the `ForwardedHeadersMiddleware` if that was specifically registered, but that is probably quite hard to archive.\r\n\r\nThe alternative would be at least to update the docs to clearly say that using `UseForwardedHeaders` will require you to specifically add `UseAuthentication` and `UseAuthorization` as those which are automatically registered will not consider forwarded headers.\r\n\r\nAlso, explicitly adding `UseAuthentication` and `UseAuthorization` to the blazor template with authentication can be considered. In that case, people will add `UseForwardedHeaders` before that.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.100\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[Blazor] [Authentication] RedirectToLogin from CookieHandler is not working behind a proxy",
        "labels":  [
                       "Docs",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/52815",
        "createdAt":  "2023-12-14T12:49:11Z",
        "number":  52815,
        "author":  "augustevn",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODKzmLw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "imhmdi",
                                            "createdAt":  "2024-01-07T09:57:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "michaelTBF",
                                            "createdAt":  "2024-02-16T17:31:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cheng93",
                                            "createdAt":  "2024-03-09T21:31:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FatuityCookie",
                                            "createdAt":  "2024-03-18T07:55:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tisquip",
                                            "createdAt":  "2024-04-01T07:17:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "githubfanster",
                                            "createdAt":  "2024-04-06T14:41:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bagatka",
                                            "createdAt":  "2024-04-07T08:36:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ramin-guliyev",
                                            "createdAt":  "2024-04-14T08:09:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gbryer",
                                            "createdAt":  "2024-05-11T16:18:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jimmyville",
                                            "createdAt":  "2024-06-18T21:57:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "irfansagir",
                                            "createdAt":  "2024-06-23T23:25:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Laftek",
                                            "createdAt":  "2024-08-05T18:35:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ShlomoCode",
                                            "createdAt":  "2025-03-06T06:46:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lukechu10",
                                            "createdAt":  "2025-07-19T20:50:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "okankrdg",
                                            "createdAt":  "2025-08-06T22:15:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "antheus-s",
                                            "createdAt":  "2025-08-12T06:34:31Z"
                                        }
                                    ],
                          "totalCount":  16
                      },
        "updatedAt":  "2024-08-05T18:35:13Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nDecrease the risk of compromised refresh tokens being reused / decrease replay attacks.\r\n\r\nI noticed that a refresh token issued by the .NET 8 Identity Endpoints can be used over and over and over to get new tokens. As long as it hasn\u0027t expired, a week+?\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nAs soon as a refresh token is used to get new tokens, the used refresh token should be invalidated / inactive so it can no longer be used to get new tokens.\r\n\r\nIt\u0027s usually done by storing the issued refresh token in a database table. In which its column e.g. `IsUsed` is updated to true whenever a refresh is requested. At refresh a lookup happens in that table for an existing refresh token, this is another way of knowing that the token was issued by \u0027us\u0027. The `IsUsed` value is also checked, if true, don\u0027t continue / don\u0027t accept it.\r\n\r\nIs it an idea to use that `AspNetUserTokens` table for that?\r\n\r\n### Additional context\r\n\r\nBy now I\u0027m more aware of the inner workings and intentions of the .NET 8 Identity Endpoints. Regardless, this request is a small security improvement, not a request to support beyond simple scenario\u0027s. I understand it\u0027s not meant to become a full-fledged token server.\r\n\r\nInteresting read: https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them/#Refresh-Token-Rotation \r\n\r\nPs, as a European I detest cookie banners so I try to avoid those at all costs. That\u0027s partly why I\u0027m hoping these Identity Endpoints could become a go-to solution for SPA + API auth regardless of whether cookies are supported.\r\n\r\nIf you need some inspiration:\r\n- https://www.youtube.com/watch?v=mPEH1iYKQF8\u0026t=715s\u0026ab_channel=Keepitsimple%2Cstupid.\r\n- https://www.youtube.com/watch?v=NpYpQCXYZJI\u0026t=202s\u0026ab_channel=Keepitsimple%2Cstupid.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh0hoxg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86HSGjG",
                                           "createdAt":  "2024-08-05T18:35:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Laftek",
                                           "body":  "Any updates?",
                                           "updatedAt":  "2024-08-05T18:35:12Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Refresh Token Rotation Identity Endpoints .NET 8",
        "labels":  [
                       "enhancement",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/52834",
        "createdAt":  "2023-12-15T08:11:13Z",
        "number":  52834,
        "author":  "DaRosenberg",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODO2KhA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JosieBigler",
                                            "createdAt":  "2023-12-29T01:55:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fidesachates",
                                            "createdAt":  "2024-01-10T03:42:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mayvazyan",
                                            "createdAt":  "2024-02-08T12:52:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "marcaldo",
                                            "createdAt":  "2024-03-18T15:21:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nslindtner",
                                            "createdAt":  "2024-03-21T09:45:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "githubfanster",
                                            "createdAt":  "2024-04-06T14:41:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ajayfoo",
                                            "createdAt":  "2024-05-25T12:37:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RecepCil",
                                            "createdAt":  "2024-09-08T14:09:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "raky291",
                                            "createdAt":  "2024-11-27T14:46:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ryuuc",
                                            "createdAt":  "2024-11-28T08:57:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "boukenka",
                                            "createdAt":  "2024-11-28T09:12:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adamowski10",
                                            "createdAt":  "2024-12-12T00:31:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ihsanashi",
                                            "createdAt":  "2024-12-24T01:10:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rajmondburgaj",
                                            "createdAt":  "2025-03-05T22:53:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tevariou",
                                            "createdAt":  "2025-04-10T14:40:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MxNbrt",
                                            "createdAt":  "2025-07-26T07:39:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Dzivo",
                                            "createdAt":  "2025-09-06T20:41:26Z"
                                        }
                                    ],
                          "totalCount":  17
                      },
        "updatedAt":  "2024-12-25T05:56:37Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nWe are building a SPA application using the new Identity API endpoints. As per recommendations for single-origin scenarios, we\u0027re using cookies rather than tokens, i.e. calling the `/login` endpoint with `?useCookies=true`. In this scenario, the user logging out is mostly a matter of deleting the authentication cookie.\r\n\r\nHowever, Identity provides no API endpoint to do this, which seems like an omission to us.\r\n\r\nSo we have to either:\r\n- Add a custom endpoint that clears the cookie\r\n- Clear the cookie directly in the browser using front-end code\r\n\r\nHere\u0027s an example workaround we\u0027re currently doing for lack of better options:\r\n\r\n```cs\r\napp.MapIdentityApi\u003cUser\u003e();\r\napp.MapPost(\"/logout\", async (SignInManager\u003cUser\u003e signInManager) =\u003e\r\n{\r\n\tawait signInManager.SignOutAsync().ConfigureAwait(false);\r\n});\r\n```\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nThe Identity API endpoints (mapped using `MapIdentityApi\u003cUser\u003e()`) should really include a `POST /logout` endpoint. This endpoint should invoke all the relevant server-side identity events related to logging out, and should also clear any authentication cookie from the client browser.\r\n\r\n### Additional context\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmK7l3Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85vj3Rz",
                                           "createdAt":  "2023-12-29T01:56:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEDb91w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fidesachates",
                                                                               "createdAt":  "2024-01-10T03:42:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ajayfoo",
                                                                               "createdAt":  "2024-05-25T12:37:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aybezz",
                                                                               "createdAt":  "2025-01-21T17:13:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "JosieBigler",
                                           "body":  "A default logout would be nice. My solution is very similar. \r\n\r\n```\r\napp.MapPost(\"/logout\", async (SignInManager\u003cIdentityUser\u003e signInManager) =\u003e\r\n{\r\n    await signInManager.SignOutAsync().ConfigureAwait(false);\r\n});\r\n``` ",
                                           "updatedAt":  "2023-12-29T01:56:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85wtdH-",
                                           "createdAt":  "2024-01-14T14:11:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEE3tqQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DaRosenberg",
                                                                               "createdAt":  "2024-01-14T16:29:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "marcaldo",
                                                                               "createdAt":  "2024-03-18T15:22:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Magdagasikara",
                                                                               "createdAt":  "2024-11-20T12:55:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aybezz",
                                                                               "createdAt":  "2025-01-21T17:14:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ThomLaGreca",
                                                                               "createdAt":  "2025-02-01T22:35:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "someonestolemyusername",
                                           "body":  "I assume the reason there isn\u0027t one out of the box is because historically it would lend itself to CSRF denial of service - another website could include your logout URL in an iframe and log your users out. Annoying!\r\n\r\nThese days, I think most browsers support same site cookies, which stops that kind of CSRF behaviour, so maybe it isn\u0027t a huge problem any more for most people?\r\n\r\nIf you wanted to improve your solution, I would add a `.RequireAuthorization()` to your endpoint - that way, it won\u0027t log your users out unless the auth cookie is sent with the request - meaning, it will only log users out if the request comes from your website with the auth cookie included.\r\n\r\nOr, you could add a check in the handler, and if the user is not logged in, simply take no action.",
                                           "updatedAt":  "2024-01-14T14:11:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85wtlr-",
                                           "createdAt":  "2024-01-14T16:33:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DaRosenberg",
                                           "body":  "@someonestolemyusername very insightful, thank you! I have added your improvement to our workaround. 👍🏻 ",
                                           "updatedAt":  "2024-01-14T16:33:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde850Zu9V",
                                           "createdAt":  "2024-02-19T17:12:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEADrVw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karthik2265",
                                                                               "createdAt":  "2024-04-30T13:56:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RecepCil",
                                                                               "createdAt":  "2024-09-08T14:10:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ihsanashi",
                                                                               "createdAt":  "2024-12-24T01:13:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "dennisreimann",
                                           "body":  "There is a [sample logout action in the docs](https://learn.microsoft.com/en-us/aspnet/core/security/authentication/identity-api-authorization?view=aspnetcore-8.0\u0026preserve-view=true#log-out).\r\n\r\nThis works only for the cookie session. It\u0027d be nice to have a way of invalidating the bearer token too.",
                                           "updatedAt":  "2024-02-19T17:12:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86S_S7L",
                                           "createdAt":  "2024-11-09T05:51:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "raky291",
                                           "body":  "I created this extensions class in case someone want to use it\n\n```\nusing Microsoft.AspNetCore.Identity;\n\npublic static class IdentityApiAdditionalEndpointsExtensions\n{\n    public static IEndpointRouteBuilder MapIdentityApiAdditionalEndpoints\u003cTUser\u003e(this IEndpointRouteBuilder endpoints)\n            where TUser : class, new()\n    {\n        ArgumentNullException.ThrowIfNull(endpoints);\n\n        var routeGroup = endpoints.MapGroup(\"\");\n\n        var accountGroup = routeGroup.MapGroup(\"/account\").RequireAuthorization();\n\n        accountGroup.MapPost(\"/logout\", async (SignInManager\u003cTUser\u003e signInManager) =\u003e\n        {\n            await signInManager.SignOutAsync();\n            return Results.Ok();\n        });\n\n        return endpoints;\n    }\n}\n```\n\nhow to use it\n\n```\napp.MapIdentityApi\u003cApplicationUser\u003e();\napp.MapIdentityApiAdditionalEndpoints\u003cApplicationUser\u003e();\n```",
                                           "updatedAt":  "2024-11-09T05:51:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86VWHE2",
                                           "createdAt":  "2024-11-28T09:06:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ryuuc",
                                           "body":  "No logging out endpoint actually was shipped in .NET 9 https://github.com/dotnet/aspnetcore/blob/main/src/Identity/Core/src/IdentityApiEndpointRouteBuilderExtensions.cs#L32 \n![Image](https://github.com/user-attachments/assets/65972c0a-5c56-4719-8905-34fb84406016)\n",
                                           "updatedAt":  "2024-11-28T09:06:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86YruXd",
                                           "createdAt":  "2024-12-25T04:21:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEBGr-g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ryuuc",
                                                                               "createdAt":  "2025-01-06T01:49:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "josephr5000",
                                           "body":  "@ryuuc \n\n\u003e No logging out endpoint actually was shipped in .NET 9 https://github.com/dotnet/aspnetcore/blob/main/src/Identity/Core/src/IdentityApiEndpointRouteBuilderExtensions.cs#L32 !\n\nThe comments might say that, but if you read the source code you will find that \"/logout\" is **not mapped**.",
                                           "updatedAt":  "2024-12-25T05:56:37Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Add logout to Identity API endpoints",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "feature-identity-apis"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/52842",
        "createdAt":  "2023-12-15T16:25:47Z",
        "number":  52842,
        "author":  "bluedot2",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-22T18:01:56Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nIf I POST to the /manage/info Identity API endpoint with a new email, but another user already exists with that email/username, the call succeeds (with no changes to the user\u0027s account yet); when the user clicks the link in the confirmation email (resulting in a call to the /confirmEmail endpoint), it results in an error, but the user\u0027s email has in fact been changed (but not the username). This contradicts the policy of the email and username always being the same, and the user now has an email that is the same as another user\u0027s email/username.\n\n### Expected Behavior\n\nI would expect an error to occur if a POST to /manage/info includes a request to change the email to one used by another user.\r\n\r\nHowever, it\u0027s possible that after the change request is made (POST to /manage/info) but before the user clicks the link in the confirmation email (/confirmEmail), a new account could have been created with the same email/username requested in the change. In this case an error should occur and the account should be left unchanged. \n\n### Steps To Reproduce\n\n1. Create two accounts (say A and B) using the /register endpoint.\r\n2. Call the /login endpoint to get an access token for account A.\r\n3. POST to the /manage/info endpoint (using the access token) with newEmail set to account B\u0027s email/username. This call will succeed.\r\n4. Click the link in the confirmation email. It will fail with a 401 error, but A\u0027s email will now be the same as B\u0027s email/username.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.100\n\n### Anything else?\n\nASP.NET Core version: 8.0.0",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOd8aV4w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde853xpXj",
                                           "createdAt":  "2024-03-20T12:54:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BillyMartin1964",
                                           "body":  "This has always been a confusing issue since Identity assumes the username will be the email address. Maybe a boolean for make username the email?",
                                           "updatedAt":  "2024-03-20T12:54:41Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Attempt to change email to another user\u0027s email/username using Identity API results in mismatch between email and username",
        "labels":  [
                       "bug",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/52906",
        "createdAt":  "2023-12-19T14:44:19Z",
        "number":  52906,
        "author":  "jaslam94",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAt-ow==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lonix1",
                                            "createdAt":  "2024-03-12T04:35:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dsparkplug",
                                            "createdAt":  "2025-04-01T12:21:18Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-12-04T09:34:51Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\n**Problem**\r\nI have been getting an \"InvalidToken\" response from the `ConfirmEmailAsync` [method](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.identity.usermanager-1.confirmemailasync?view=aspnetcore-7.0) in a .NET 7-based API project. Error description contains \"Invalid token\". The token can be invalid for multiple reasons, including missing characters, inconsistent data protection key and expiration. The reason should be logged otherwise debugging this problem becomes almost impossible.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nThe proper detailed reason for the email confirmation token being \"invalid\" should be logged by the framework.\r\n\r\n### Additional context\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlgGxZg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde852oeF9",
                                           "createdAt":  "2024-03-12T04:34:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lonix1",
                                           "body":  "From my closed issue #12672:\r\n\r\n## Background\r\n\r\nIdentity\u0027s `UserManager` does not behave consistently when confirming tokens.\r\n\r\nExamples:\r\n\r\nI can call `userManager.ConfirmEmailAsync(...)` multiple times, and it will succeed each time even though the token was already redeemed. This tells me that although the token was redeemed, it is still valid and unexpired.\r\n\r\nI can call `userManager.ChangeEmailAsync(...)` only once successfully, and will return errors afterwards. This tells me that the token is 1) invalid or 2) expired or 3) redeemed.\r\n\r\nThere are other such methods, with the same inconsistency.\r\n\r\n## Problem\r\n\r\nThis inconsistency makes it difficult/impossible to correctly interpret errors for the user.\r\n\r\nIs the token \"invalid\", or is it expired, or is it simply already redeemed? Those are different errors, and they lead to two different actions by the user.\r\n\r\nThis is a source of friction for our users, who end up in a never-ending loop of redoing some action, then incorrectly interpreting the error and asking for another token, etc. And eventually they call us and we need to make the changes manually.\r\n\r\n## Solution\r\n\r\nPlease return a standard result from these related methods, so we can tell whether:\r\n\r\n1. the token is invalid (possibly due to hacking, etc.), so no action was taken\r\n2. the token is valid, but is expired, so no action was taken\r\n3. the token is valid, but it has already been redeemed, so no action was taken\r\n4. the token is valid, unexpired and unredeemed, so the action was taken\r\n\r\nEven the MS security guru @blowdart agreed to backlog it, but it was closed.\r\n\r\nI disagree it\u0027s related to \"dev experience\" - the API in a security-oriented feature has problems.",
                                           "updatedAt":  "2024-03-12T04:34:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86WAbFm",
                                           "createdAt":  "2024-12-04T09:34:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "meccar",
                                           "body":  "\u003e From my closed issue [#12672](https://github.com/dotnet/aspnetcore/issues/12672):\n\u003e \n\u003e ## Background\n\u003e Identity\u0027s `UserManager` does not behave consistently when confirming tokens.\n\u003e \n\u003e Examples:\n\u003e \n\u003e I can call `userManager.ConfirmEmailAsync(...)` multiple times, and it will succeed each time even though the token was already redeemed. This tells me that although the token was redeemed, it is still valid and unexpired.\n\u003e \n\u003e I can call `userManager.ChangeEmailAsync(...)` only once successfully, and will return errors afterwards. This tells me that the token is 1) invalid or 2) expired or 3) redeemed.\n\u003e \n\u003e There are other such methods, with the same inconsistency.\n\u003e \n\u003e ## Problem\n\u003e This inconsistency makes it difficult/impossible to correctly interpret errors for the user.\n\u003e \n\u003e Is the token \"invalid\", or is it expired, or is it simply already redeemed? Those are different errors, and they lead to two different actions by the user.\n\u003e \n\u003e This is a source of friction for our users, who end up in a never-ending loop of redoing some action, then incorrectly interpreting the error and asking for another token, etc. And eventually they call us and we need to make the changes manually.\n\u003e \n\u003e ## Solution\n\u003e Please return a standard result from these related methods, so we can tell whether:\n\u003e \n\u003e 1. the token is invalid (possibly due to hacking, etc.), so no action was taken\n\u003e 2. the token is valid, but is expired, so no action was taken\n\u003e 3. the token is valid, but it has already been redeemed, so no action was taken\n\u003e 4. the token is valid, unexpired and unredeemed, so the action was taken\n\u003e \n\u003e Even the MS security guru [@blowdart](https://github.com/blowdart) agreed to backlog it, but it was closed.\n\u003e \n\u003e I disagree it\u0027s related to \"dev experience\" - the API in a security-oriented feature has problems.\n\nAgree",
                                           "updatedAt":  "2024-12-04T09:34:50Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Logging the reason behind \"InvalidToken\" response from UserManager.ConfirmEmailAsync method",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "Pillar: Dev Experience"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/52939",
        "createdAt":  "2023-12-21T05:48:33Z",
        "number":  52939,
        "author":  "parsa-eng01",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4rorQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ignacy130",
                                            "createdAt":  "2024-06-17T12:31:33Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-22T18:01:56Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWhen I tried to remove a role during a test I noticed my tests failed because `IsInRole` still shows the user in the role.\r\nhere are my test conditions \r\n- Win 11\r\n- .NET 8.0\r\n- xUnit project\r\n- MySql 8.0.27\r\n\r\nMy configs\r\n```\r\nservices.AddDbContextPool\u003cUserDbContext\u003e(opt =\u003e\r\n    {\r\n      var connection = configuration.GetConnectionString(\"UserDb\");\r\n      opt.UseMySql(connection, ServerVersion.AutoDetect(connection),\r\n        mySql_opt =\u003e mySql_opt.EnableRetryOnFailure(3).CommandTimeout(120));\r\n      opt.UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);\r\n    });\r\n\r\n    services.AddIdentityCore\u003cTiUser\u003e(setup =\u003e\r\n    {\r\n      setup.User.RequireUniqueEmail = false;\r\n      setup.User.AllowedUserNameCharacters =\r\n        \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.-_@+\";\r\n\r\n      setup.Password.RequireNonAlphanumeric = false;\r\n      setup.Password.RequireUppercase = false;\r\n      setup.Password.RequireLowercase = false;\r\n      setup.Password.RequireDigit = false;\r\n\r\n      //setup.Stores.ProtectPersonalData = true;\r\n\r\n      setup.Lockout.AllowedForNewUsers = true;\r\n      setup.Lockout.MaxFailedAccessAttempts = 5;\r\n      setup.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(5);\r\n    })\r\n      .AddRoles\u003cIdentityRole\u003cGuid\u003e\u003e()\r\n      .AddRoleManager\u003cRoleManager\u003cIdentityRole\u003cGuid\u003e\u003e\u003e()\r\n      .AddEntityFrameworkStores\u003cUserDbContext\u003e();\r\n```\r\nTest Method\r\n```\r\npublic async Task RemoveRoleSuccess(string role)\r\n  {\r\n    var email = \"add-role@test.local\";\r\n    var dashboard = \"x\";\r\n    var password = \"123456\";\r\n\r\n    // login admin\r\n    await LoginAdmin();\r\n\r\n    // add user\r\n    var user = await AddUser(nameof(RemoveRoleSuccess), email, true, password);\r\n    var roles = await _userManager.GetRolesAsync(user);\r\n    if (!roles.Contains(role))\r\n      await _userManager.AddToRoleAsync(user, role);\r\n    var isInRole = await _userManager.IsInRoleAsync(user, role);\r\n    Assert.True(isInRole);\r\n\r\n    var model = new RemoveRoleViewModel { Email = email, Dashboard = dashboard, Role = role };\r\n    var response = await _client.PostAsJsonAsync($\"api/v1/admin/RemoveRole\", model);\r\n    Assert.Equal(HttpStatusCode.OK, response.StatusCode);\r\n\r\n    var body = await response.Content.ReadAsStringAsync();\r\n    Assert.NotNull(body);\r\n    Assert.IsType\u003cstring\u003e(body);\r\n    Assert.Contains(\"Role removed from user successfully\", body);\r\n\r\n    roles = await _userManager.GetRolesAsync(user);\r\n    Assert.DoesNotContain(role, roles); // passed\r\n\r\n    isInRole = await _userManager.IsInRoleAsync(user, role);\r\n    Assert.False(isInRole); // failed\r\n  }\r\n```\r\n\n\n### Expected Behavior\n\nI expect to see the same result from both methods `GetRoleAsync` and `IsInRoleAsync` when user is not in role.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.100\n\n### Anything else?\n\nThese are packages I used in my project\r\n\r\nMicrosoft.AspNetCore.Identity.EntityFrameworkCore Version=\"8.0.0\"\r\nMicrosoft.EntityFrameworkCore Version=\"8.0.0\"\r\nPomelo.EntityFrameworkCore.MySql Version=\"8.0.0-beta.2\"",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlMLyAg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86UkUDh",
                                           "createdAt":  "2024-11-21T23:17:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "If you call `user = await _userManager.FindByIdAsync(user.Id)` after `await _client.PostAsJsonAsync($\"api/v1/admin/RemoveRole\", model)`, does that fix your issue?",
                                           "updatedAt":  "2024-11-21T23:17:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86UwvIC",
                                           "createdAt":  "2024-11-24T04:40:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "parsa-eng01",
                                           "body":  "\u003e If you call `user = await _userManager.FindByIdAsync(user.Id)` after `await _client.PostAsJsonAsync($\"api/v1/admin/RemoveRole\", model)`, does that fix your issue?\n\nThe issue is old I didn\u0027t check if it is already fixed.\nBut your answer is no, the end point did its job fine. :))",
                                           "updatedAt":  "2024-11-24T04:40:37Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "UserManager.IsInRoleAsync(user, \"rolename\") still shows user in role after deleting role.",
        "labels":  [
                       "investigate",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/52970",
        "createdAt":  "2023-12-22T17:34:37Z",
        "number":  52970,
        "author":  "csharpfritz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC1pAKQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mgtechbiz",
                                            "createdAt":  "2024-02-04T23:51:49Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-22T18:01:56Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWhen attempting to add Roles to Identity in a Blazor project, errors are returned and its unable to proceed.\r\n\r\nGiven the default configuration in the Blazor Web template:\r\n\r\n```csharp\r\nbuilder.Services.AddIdentityCore\u003cApplicationUser\u003e(options =\u003e options.SignIn.RequireConfirmedAccount = true)\r\n\t\t.AddEntityFrameworkStores\u003cApplicationDbContext\u003e()\r\n\t\t.AddSignInManager()\r\n\t\t.AddDefaultTokenProviders();\r\n```\r\n\r\nWhen `.AddRoles\u003cIdentityRole\u003e()` is added the following error is reported:\r\n\r\n```\r\nSystem.AggregateException: \u0027Some services are not able to be constructed (Error while validating the service descriptor \u0027ServiceType: Microsoft.AspNetCore.Identity.RoleManager`1[Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]] Lifetime: Scoped ImplementationType: Microsoft.AspNetCore.Identity.RoleManager`1[Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]]\u0027: Unable to resolve service for type \u0027Microsoft.AspNetCore.Identity.IRoleStore`1[Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]]\u0027 while attempting to activate \u0027Microsoft.AspNetCore.Identity.RoleManager`1[Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]]\u0027.) (Error while validating the service descriptor \u0027ServiceType: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1[BlazorApp1.Data.ApplicationUser] Lifetime: Scoped ImplementationType: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2[BlazorApp1.Data.ApplicationUser,Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]]\u0027: Unable to resolve service for type \u0027Microsoft.AspNetCore.Identity.IRoleStore`1[Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]]\u0027 while attempting to activate \u0027Microsoft.AspNetCore.Identity.RoleManager`1[Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]]\u0027.) (Error while validating the service descriptor \u0027ServiceType: Microsoft.AspNetCore.Identity.ISecurityStampValidator Lifetime: Scoped ImplementationType: Microsoft.AspNetCore.Identity.SecurityStampValidator`1[BlazorApp1.Data.ApplicationUser]\u0027: Unable to resolve service for type \u0027Microsoft.AspNetCore.Identity.IRoleStore`1[Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]]\u0027 while attempting to activate \u0027Microsoft.AspNetCore.Identity.RoleManager`1[Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]]\u0027.) (Error while validating the service descriptor \u0027ServiceType: Microsoft.AspNetCore.Identity.ITwoFactorSecurityStampValidator Lifetime: Scoped ImplementationType: Microsoft.AspNetCore.Identity.TwoFactorSecurityStampValidator`1[BlazorApp1.Data.ApplicationUser]\u0027: Unable to resolve service for type \u0027Microsoft.AspNetCore.Identity.IRoleStore`1[Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]]\u0027 while attempting to activate \u0027Microsoft.AspNetCore.Identity.RoleManager`1[Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]]\u0027.) (Error while validating the service descriptor \u0027ServiceType: Microsoft.AspNetCore.Identity.SignInManager`1[BlazorApp1.Data.ApplicationUser] Lifetime: Scoped ImplementationType: Microsoft.AspNetCore.Identity.SignInManager`1[BlazorApp1.Data.ApplicationUser]\u0027: Unable to resolve service for type \u0027Microsoft.AspNetCore.Identity.IRoleStore`1[Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]]\u0027 while attempting to activate \u0027Microsoft.AspNetCore.Identity.RoleManager`1[Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]]\u0027.)\u0027\r\n```\r\n\r\n\n\n### Expected Behavior\n\nRoleManager is configured and we are able to use IdentityRole references in a blazor project\n\n### Steps To Reproduce\n\nAdd `.AddRoles\u003cIdentityRole\u003e()` to the configuration of Identity in a Blazor web application\n\n### Exceptions (if any)\n\nSystem.AggregateException: \u0027Some services are not able to be constructed (Error while validating the service descriptor \u0027ServiceType: Microsoft.AspNetCore.Identity.RoleManager`1[Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]] Lifetime: Scoped ImplementationType: Microsoft.AspNetCore.Identity.RoleManager`1[Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]]\u0027: Unable to resolve service for type \u0027Microsoft.AspNetCore.Identity.IRoleStore`1[Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]]\u0027 while attempting to activate \u0027Microsoft.AspNetCore.Identity.RoleManager`1[Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]]\u0027.) (Error while validating the service descriptor \u0027ServiceType: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1[BlazorApp1.Data.ApplicationUser] Lifetime: Scoped ImplementationType: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2[BlazorApp1.Data.ApplicationUser,Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]]\u0027: Unable to resolve service for type \u0027Microsoft.AspNetCore.Identity.IRoleStore`1[Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]]\u0027 while attempting to activate \u0027Microsoft.AspNetCore.Identity.RoleManager`1[Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]]\u0027.) (Error while validating the service descriptor \u0027ServiceType: Microsoft.AspNetCore.Identity.ISecurityStampValidator Lifetime: Scoped ImplementationType: Microsoft.AspNetCore.Identity.SecurityStampValidator`1[BlazorApp1.Data.ApplicationUser]\u0027: Unable to resolve service for type \u0027Microsoft.AspNetCore.Identity.IRoleStore`1[Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]]\u0027 while attempting to activate \u0027Microsoft.AspNetCore.Identity.RoleManager`1[Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]]\u0027.) (Error while validating the service descriptor \u0027ServiceType: Microsoft.AspNetCore.Identity.ITwoFactorSecurityStampValidator Lifetime: Scoped ImplementationType: Microsoft.AspNetCore.Identity.TwoFactorSecurityStampValidator`1[BlazorApp1.Data.ApplicationUser]\u0027: Unable to resolve service for type \u0027Microsoft.AspNetCore.Identity.IRoleStore`1[Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]]\u0027 while attempting to activate \u0027Microsoft.AspNetCore.Identity.RoleManager`1[Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]]\u0027.) (Error while validating the service descriptor \u0027ServiceType: Microsoft.AspNetCore.Identity.SignInManager`1[BlazorApp1.Data.ApplicationUser] Lifetime: Scoped ImplementationType: Microsoft.AspNetCore.Identity.SignInManager`1[BlazorApp1.Data.ApplicationUser]\u0027: Unable to resolve service for type \u0027Microsoft.AspNetCore.Identity.IRoleStore`1[Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]]\u0027 while attempting to activate \u0027Microsoft.AspNetCore.Identity.RoleManager`1[Microsoft.AspNetCore.Identity.IdentityRole`1[System.String]]\u0027.)\u0027\r\n\n\n### .NET Version\n\n8.0.0\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdN3JGg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85vW0rS",
                                           "createdAt":  "2023-12-23T09:39:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEbhRrg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mgtechbiz",
                                                                               "createdAt":  "2024-02-04T23:51:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "imtatjr",
                                                                               "createdAt":  "2024-04-16T21:29:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "psnx",
                                                                               "createdAt":  "2024-06-04T12:04:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JoelWakefield",
                                                                               "createdAt":  "2024-07-16T18:44:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maojsm",
                                                                               "createdAt":  "2025-07-22T20:10:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "woha",
                                           "body":  "It does work, but you have to add roles first:\n\nbuilder.Services.AddIdentityCore\u003cApplicationUser\u003e(options =\u003e options.SignIn.RequireConfirmedAccount = true)\n        .AddRoles\u003cIdentityRole\u003e()\n        .AddEntityFrameworkStores\u003cApplicationDbContext\u003e()\n        .AddSignInManager()\n        .AddDefaultTokenProviders();\n",
                                           "updatedAt":  "2023-12-23T09:39:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85vcBZs",
                                           "createdAt":  "2023-12-26T15:29:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "csharpfritz",
                                           "body":  "A slight modification to your code, adding the `IdentityRole` type to the AddRoles command and this syntax works in a new application.\r\n\r\nIn my existing application that I am migrating, I receive an error \r\n\r\n\"System.InvalidOperationException: \u0027Scheme already exists: Identity.Application\u0027\"",
                                           "updatedAt":  "2023-12-26T15:29:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85vpGas",
                                           "createdAt":  "2023-12-31T22:07:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlfranklin",
                                           "body":  "This is fine for a Server app, but what about a WebAssembly app? Is there an easy way to add roles on the client without major surgery?",
                                           "updatedAt":  "2023-12-31T22:07:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde8503cka",
                                           "createdAt":  "2024-02-23T03:41:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEZLQsA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jmasayda",
                                                                               "createdAt":  "2025-07-03T19:42:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "halter73",
                                           "body":  "`AddEntityFrameworkStores` must be called after `AddRoles` because it [reads `builder.RoleType`](https://github.com/dotnet/aspnetcore/blob/b9eaae011790c0afd86948ac3e9641a1fbd847b5/src/Identity/EntityFrameworkCore/src/IdentityEntityFrameworkBuilderExtensions.cs#L25) which needs to first be [set by AddRole](https://github.com/dotnet/aspnetcore/blob/b9eaae011790c0afd86948ac3e9641a1fbd847b5/src/Identity/Extensions.Core/src/IdentityBuilder.cs#L197). It appears to have always been that way, so I\u0027m not sure why I haven\u0027t seen complaints before. Maybe because people usually call `AddIdentity\u003cTUser, TRole\u003e`? You\u0027d think you\u0027d see the same problem with `AddDefaultIdentity\u003cTUser\u003e` though.\r\n\r\nThis doesn\u0027t seem easy to make order independent without some major surgery which I\u0027m not sure is worthwhile. I think we need to find a way to make the error clearer (possibly with an analyzer or a runtime error) if `AddEntityFrameworkStores` is called before `AddRole` and update the documentation for both `AddEntityFrameworkStores` and `AddRole` to call this out.\r\n\r\n\u003e In my existing application that I am migrating, I receive an error\r\n\u003e \r\n\u003e \"System.InvalidOperationException: \u0027Scheme already exists: Identity.Application\u0027\"\r\n\r\n@csharpfritz Do you still have access to this application? Is it possible that you is more than one call to `AddIdentity`, `AddDefaultIdentity`, `AddIdentityCookies`, `AddApplicationCookie`, and/or `AddIdentityApiEndpoints`? I wonder if it would be too breaking to not re-add the \"Identity.Application\" scheme if it has already been added, but still allow any `Action\u003cIdentityCookiesBuilder\u003e` configureCookies callbacks to run in the order they are added.",
                                           "updatedAt":  "2024-02-23T03:41:43Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Adding Roles to a Blazor Web project does not work",
        "labels":  [
                       "bug",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/53266",
        "createdAt":  "2024-01-10T11:03:59Z",
        "number":  53266,
        "author":  "guardrex",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODMgZPg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "benjaminsampica",
                                            "createdAt":  "2024-03-16T16:12:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Inspirateur",
                                            "createdAt":  "2025-08-25T13:02:45Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-09-06T19:04:19Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\n[The `\u003clabel\u003e` spec (4.10.4)](https://html.spec.whatwg.org/multipage/forms.html#the-label-element) calls for explicitly-labeled elements to have an `id` that matches the `\u003clabel\u003e`\u0027s `for` attribute. The Identity components don\u0027t have `id` set.\r\n\r\nFor example, the `InputText` component of the `Login` component doesn\u0027t set `id=\"email\"` to match the `\u003clabel\u003e`\u0027s `for` attribute ...\r\n\r\n```razor\r\n\u003cdiv class=\"form-floating mb-3\"\u003e\r\n    \u003cInputText @bind-Value=\"Input.Email\" class=\"form-control\" autocomplete=\"username\" aria-required=\"true\" placeholder=\"name@example.com\" /\u003e\r\n    \u003clabel for=\"email\" class=\"form-label\"\u003eEmail\u003c/label\u003e\r\n    \u003cValidationMessage For=\"() =\u003e Input.Email\" class=\"text-danger\" /\u003e\r\n\u003c/div\u003e\r\n```\r\n\r\nRendered ...\r\n\r\n```html\r\n\u003cdiv class=\"form-floating mb-3\"\u003e\r\n    \u003cinput autocomplete=\"off\" aria-required=\"true\" placeholder=\"name@example.com\" name=\"Input.Email\" class=\"form-control valid\" value=\"\" style=\"background-image: url(\u0026quot;moz-extension://dcb55c96-de40-4f2c-913f-d37cccad5aae/images/web_access/vault-input-disabled.svg\u0026quot;) !important; background-repeat: no-repeat !important; background-position: calc(100% - 3px) center !important; background-size: 14px !important; cursor: text;\"\u003e\r\n    \u003clabel for=\"email\" class=\"form-label\"\u003eEmail\u003c/label\u003e\r\n\u003c/div\u003e\r\n```\r\n\r\nTherefore, the `control` and `form` properties are `null` ...\r\n\r\n![image](https://github.com/dotnet/aspnetcore/assets/1622880/f9e1d4b4-679d-47ad-9b92-42ba89b73753)\r\n\r\nWhen the `InputText` element is provided with `id=\"email\"`, the `form` and `control` properties are set ...\r\n\r\n![image](https://github.com/dotnet/aspnetcore/assets/1622880/342fd7f6-1438-41d9-ba6e-d25186e383d1)\r\n\r\n\r\n### Expected Behavior\r\n\r\n`InputText` elements (and any other labeled elements) have an `id` matching the `for` attribute of `label` elements.\r\n\r\n### Steps To Reproduce\r\n\r\nNone ... it\u0027s a template thing.\r\n\r\n### Exceptions (if any)\r\n\r\nNone ... the labels just no-op.\r\n\r\n### .NET Version\r\n\r\n8.0.100\r\n\r\n### Anything else?\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcutTNA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85wfDRb",
                                           "createdAt":  "2024-01-11T13:41:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "@guardrex thanks for filing the issue.\r\n\r\nWe only set the name based on the `@bind` attribute. We could if we want to set the id too, but that\u0027s up to the developer, not something that the component needs to necessarily take care on behalf-of.\r\n\r\nNote that labels can also wrap the inputs and in that scenario they don\u0027t need to use `for=\"\u003c\u003cid\u003e\u003e\"`",
                                           "updatedAt":  "2024-01-11T13:41:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85wfDXa",
                                           "createdAt":  "2024-01-11T13:42:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 9 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2024-01-11T13:42:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85wfFIT",
                                           "createdAt":  "2024-01-11T13:46:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEff0wQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Inspirateur",
                                                                               "createdAt":  "2025-08-25T13:03:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "guardrex",
                                           "body":  "\u003e up to the developer\r\n\r\nSorry ... I should\u0027ve been more specific. This issue refers to the Identity components ***in the project template***. Therefore, this is a project template bug. Here\u0027s the ref source for the example that I show above ...\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/main/src/ProjectTemplates/Web.ProjectTemplates/content/BlazorWeb-CSharp/BlazorWeb-CSharp/Components/Account/Pages/Login.razor#L26",
                                           "updatedAt":  "2024-01-11T13:46:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85xpEAf",
                                           "createdAt":  "2024-01-23T17:39:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkArtakMSFT",
                                           "body":  "We will prioritize generating `id` s for Blazor Identity components, so that the generated template code is correct.",
                                           "updatedAt":  "2024-01-23T17:39:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85y61M0",
                                           "createdAt":  "2024-02-05T20:17:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 9 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2024-02-05T20:17:39Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Blazor Identity components don\u0027t specify `id` for labels",
        "labels":  [
                       "bug",
                       "area-identity",
                       "Priority:1",
                       "feature-templates",
                       "Pillar: Technical Debt",
                       "copilot-candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/53400",
        "createdAt":  "2024-01-16T08:49:39Z",
        "number":  53400,
        "author":  "wanttoh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-26T17:49:51Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nWe have a [forum question](https://learn.microsoft.com/en-us/answers/questions/1494456/asp-net-identity-library-delete-user-does-not-dele) here.\r\n\r\nI created a blazor web app SSR(.net 8) using the VS 2022 template choosing the Individual Account. Then I found that we have an out-of-box feature which allowing us to delete the user.\r\n![image](https://github.com/dotnet/aspnetcore/assets/33505944/b3970def-dca6-4d34-af73-db28b52ccb03)\r\n\r\nReferring to the code we could see that the \"delete\" feature only delete the user from User table: **var result = await UserManager.DeleteAsync(user);**, but not deleting user related information such as User Claims at the same time.\r\n\n\n### Describe the solution you\u0027d like\n\nI\u0027m afraid we could have a feature that allows us to choose to delete all the user-related rows stored in table if possible. For example, click an checkbox so that we could choose to delete user claims of this user at the same time.\r\n\r\nIn the meantime, I found that in .net7 when I delete the user, the user claims are deleted at the same time.\n\n### Additional context\n\nnow I\u0027m writing code to manually list and delete the user related claims before deleting user.\r\n\r\nvar claims = await UserManager.GetClaimsAsync(user);\r\nvar res = await UserManager.RemoveClaimsAsync(user, claims);\r\nvar result = await UserManager.DeleteAsync(user);",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOchVjKw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85yFWMr",
                                           "createdAt":  "2024-01-29T05:47:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teacher-zhou",
                                           "body":  "Please declare own class that derived from `UserManager` and override `DeleteAsync` method to write your own logic code",
                                           "updatedAt":  "2024-01-29T05:47:52Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Can we have a feature for deleting user claims when we delete users using the default identity in blazor .net 8?",
        "labels":  [
                       "enhancement",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/53658",
        "createdAt":  "2024-01-27T02:11:24Z",
        "number":  53658,
        "author":  "pkoronawa",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-04T16:47:11Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nIssue #5786  addresses a similar problem but doesn\u0027t describe the situation I experience.\r\n\r\nI have implemented a custom UserClaimsPrincipalFactory and a custom UserStore, which does not inherit from UserStoreBase. When the app attempts to authenticate a ticket older than 30 minutes, it forces SignOut. All I have to go on are the following messages in the Log\r\n\r\nMicrosoft.AspNetCore.Identity.SignInManager: Debug: Failed to validate a security stamp.\r\nMicrosoft.AspNetCore.Identity.SecurityStampValidator: Debug: Security stamp validation failed, rejecting cookie.\r\n\r\nSo the first problem is that SecurityStampValidator.ValidateAsync does not check if UserManager.SupportsUserSecurityStamp is true before checking if validation is required, ie. timeElapsed \u003e Options.ValidationInterval (which defaults to 30 minutes). In my case that would have avoided the problem, since my UserStore does not support IUserSecurityStampStore.\r\n\r\nThe second problem turns out to be that my CustomUserClaimsPrincipalFactory did not add UserIdClaim when creating the ClaimPrincipal, so SignManager.ValidateSecurityStampAsync fails since it doesn\u0027t know the Id of the user to validate. It\u0027s probably arguable whether it should revalidate the ticket if UserManager.SupportsUserSecurityStamp is true but it can\u0027t find the underlying user. It would be worth a LogWarning in this case at least.\n\n### Expected Behavior\n\nAuthentication should not be signed out for SecurityStamp if it is not supported\r\n\r\nAdd LogWarnings when a claim required by the authentication service is missing.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.101\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeXThBw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde855dOEH",
                                           "createdAt":  "2024-04-04T16:47:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkArtakMSFT",
                                           "body":  "Thanks for contacting us.\r\nFor now, you can register custom security stamp validator: https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.identity.isecuritystampvalidator?view=aspnetcore-8.0",
                                           "updatedAt":  "2024-04-04T16:47:10Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Always signed out after 30 minutes--more info",
        "labels":  [
                       "bug",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/53693",
        "createdAt":  "2024-01-29T15:42:19Z",
        "number":  53693,
        "author":  "Dean-NC",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-05T17:54:14Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI wasn\u0027t sure if this should be labeled as API Change or Design Proposal. `ItentityResult.Failed(params IdentityError[] errors)` is public, but if you have built a `List\u003cIdentityError\u003e`, then using that method means converting your list to array. There is `IdentityResult.Failed(List\u003cIdentityError\u003e? errors)`, but for some reason it\u0027s marked internal, and looking at the source code, I don\u0027t see a reason it couldn\u0027t be public.\n\n### Describe the solution you\u0027d like\n\nChange `IdentityResult.Failed(List\u003cIdentityError\u003e? errors)` from `internal` to `public`.\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcuUfvQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85y5R-9",
                                           "createdAt":  "2024-02-05T17:54:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2024-02-05T17:54:13Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Consider making `IdentityResult.Failed(List\u003cIdentityError\u003e? errors)` public",
        "labels":  [
                       "enhancement",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/54073",
        "createdAt":  "2024-02-16T16:18:29Z",
        "number":  54073,
        "author":  "augustevn",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_38YA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "quicksln",
                                            "createdAt":  "2024-02-24T12:00:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alvarogalhardo",
                                            "createdAt":  "2024-03-06T20:45:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Removable",
                                            "createdAt":  "2024-03-19T02:56:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BillyMartin1964",
                                            "createdAt":  "2024-03-20T12:44:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlejandroMFe",
                                            "createdAt":  "2024-03-21T00:12:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "githubfanster",
                                            "createdAt":  "2024-04-06T14:35:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EniacMlezi",
                                            "createdAt":  "2024-04-11T19:00:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TeeMaker",
                                            "createdAt":  "2024-04-24T20:17:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Snowlights2022",
                                            "createdAt":  "2024-07-20T16:19:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sanamhub",
                                            "createdAt":  "2025-03-10T01:27:39Z"
                                        }
                                    ],
                          "totalCount":  10
                      },
        "updatedAt":  "2024-04-18T16:54:31Z",
        "body":  "The Identity Endpoints are currently lacking customizability due to using DTO\u0027s we can\u0027t pass extra properties.\r\nThis may be intentional and we can certainly work around that but...\r\n\r\nI wonder if something like this is feasable:\r\n\r\n```csharp\r\napp.MapIdentityEndpoints\u003cTUser\u003e()\r\n    .AddLoginEndpoint\u003cTRequest, TResponse\u003e(\"/login\") // optionally overwriting the route.\r\n    .AddRegisterEndpoint\u003cTRequest\u003e() // this will end up in the IEmailSender implementation.\r\n    ...\r\n```\r\n\r\n* Accessing `TRequest` in the `IEmailSender` implementation might solve my previous request for `RedirectUrl`.\r\n* With some mapping inside to map to `TUser` and some contraints / validation on the minimum required props per request. This way, our own validators can also be applied.\r\n\r\nAnd leave an option for adding all endpoints at once:\r\n\r\n```csharp\r\napp.MapIdentityEndpointDefaults\u003cTUser\u003e();\r\n```\r\n\r\nIt would also be cool to be able to access re-usable methods to implement in our own API endpoints or in Blazor Server directly.\r\nCurrently it\u0027s suggested to overwrite or extend that entire class holding the endpoints with all the logic inside the endpoints.\r\n\r\nJust an idea, let me know what you think!\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOd9ykhA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde853xlq7",
                                           "createdAt":  "2024-03-20T12:47:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODcub6g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "augustevn",
                                                                               "createdAt":  "2024-04-02T16:07:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "BillyMartin1964",
                                           "body":  "This is a much needed improvement. After  spending time and effort making such a convenient feature, it\u0027s a shame we can\u0027t use it in its present state. \nJust thinking of registration alone, two properties are not enough. Thanks.",
                                           "updatedAt":  "2024-03-20T12:49:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde8533KSE",
                                           "createdAt":  "2024-03-21T00:13:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODcuaLQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "augustevn",
                                                                               "createdAt":  "2024-04-02T16:05:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AlejandroMFe",
                                           "body":  "Hi👋 @augustevn look at this #53343 what you think about can scaffold the endpoints, like the razor page!\r\nI think that would be a great help to be able to customize the endpoints, gain flexibility and be able to adapt it to each project.",
                                           "updatedAt":  "2024-03-21T00:13:44Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Customizability Identity Endpoints",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "api-suggestion"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/54634",
        "createdAt":  "2024-03-20T03:31:13Z",
        "number":  54634,
        "author":  "Choonster",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODEM2Bg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cheng93",
                                            "createdAt":  "2025-03-17T11:16:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jslatts",
                                            "createdAt":  "2025-06-18T15:12:29Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-06-20T08:53:54Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWhen calling `Microsoft.AspNetCore.Identity.UserManager.VerifyTwoFactorTokenAsync` in a .NET Framework 4.8 application, a `NullReferenceException` will be thrown due to `Rfc6238AuthenticationService.ComputeTotp` passing a `null` value to `Rfc6238AuthenticationService.ApplyModifier` for the `modifierBytes` argument.\n\n### Expected Behavior\n\n`UserManager.VerifyTwoFactorTokenAsync` should return either `true` or `false` depending on whether the token was valid.\n\n### Steps To Reproduce\n\n- Repo: https://github.com/Choonster/AspNetCoreIdentityRfc6238Error\r\n- Test code: https://github.com/Choonster/AspNetCoreIdentityRfc6238Error/blob/master/AspNetCoreIdentityRfc6238Error/Controllers/TwoFactorController.cs\r\n- Service registration: https://github.com/Choonster/AspNetCoreIdentityRfc6238Error/blob/master/AspNetCoreIdentityRfc6238Error/App_Start/ServiceConfig.cs\r\n\r\nTo reproduce:\r\n- Open the project in Visual Studio\r\n- Run the application\r\n- Click the \"Test 2FA\" button\r\n- Observe that the output below the button displays a `NullReferenceException` instead of an `IdentityResult`\n\n### Exceptions (if any)\n\n```\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Microsoft.AspNetCore.Identity.Rfc6238AuthenticationService.ApplyModifier(Span`1 input, Byte[] modifierBytes)\r\n   at Microsoft.AspNetCore.Identity.Rfc6238AuthenticationService.ComputeTotp(HashAlgorithm hashAlgorithm, UInt64 timestepNumber, Byte[] modifierBytes)\r\n   at Microsoft.AspNetCore.Identity.AuthenticatorTokenProvider`1.\u003cValidateAsync\u003ed__2.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at Microsoft.AspNetCore.Identity.UserManager`1.\u003cVerifyTwoFactorTokenAsync\u003ed__133.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at AspNetCoreIdentityRfc6238Error.Controllers.TwoFactorController.\u003cTest2faAsync\u003ed__2.MoveNext() in C:\\Users\\[USER]\\source\\repos\\AspNetCoreIdentityRfc6238Error\\AspNetCoreIdentityRfc6238Error\\Controllers\\TwoFactorController.cs:line 38\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at System.Threading.Tasks.TaskHelpersExtensions.\u003cCastToObject\u003ed__1`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at System.Web.Http.Controllers.ApiControllerActionInvoker.\u003cInvokeActionAsyncCore\u003ed__1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at System.Web.Http.Controllers.ActionFilterResult.\u003cExecuteAsync\u003ed__5.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at System.Web.Http.Dispatcher.HttpControllerDispatcher.\u003cSendAsync\u003ed__15.MoveNext()\r\n```\n\n### .NET Version\n\n.NET Framework 4.8\n\n### Anything else?\n\n- Microsoft.Extensions.Identity.Core version: 8.0.3\r\n- VS version: Microsoft Visual Studio Professional 2022 (64-bit) - Current - Version 17.9.2\r\n\r\nThis seems to have been introduced in https://github.com/dotnet/aspnetcore/pull/44557, which was released with .NET 8.0. Version 7.0.17 of the package doesn\u0027t have this issue.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsjzZKQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86avJ16",
                                           "createdAt":  "2025-01-16T15:37:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXTFNw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kevinhorvatin-netwrix",
                                                                               "createdAt":  "2025-01-27T20:55:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bbwilson",
                                                                               "createdAt":  "2025-02-08T23:37:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeremysalwen",
                                                                               "createdAt":  "2025-03-27T16:00:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "ankurkiet",
                                                                               "createdAt":  "2025-05-06T08:04:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Elementenfresser",
                                                                               "createdAt":  "2025-06-20T08:44:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "witvoetscreencheck",
                                           "body":  "I\u0027m using .NET 8 (so not .NET Framework), and I\u0027m having the exact same issue after updating Microsoft.Extensions.Identity.Core to v9.0.0. The previous version, v8.0.11, does work as intended.",
                                           "updatedAt":  "2025-01-16T15:37:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86iqwM5",
                                           "createdAt":  "2025-03-17T11:17:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cheng93",
                                           "body":  "Can confirm 8.0.14 works fine.\n\nIt looks like `NET6_0_OR_GREATER` directive is being ignored",
                                           "updatedAt":  "2025-03-17T11:17:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86kbQEG",
                                           "createdAt":  "2025-03-27T16:10:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeremysalwen",
                                           "body":  "I am also hitting this same error with .NET 9, and `Microsoft.Extensions.Identity.Core` version 9.0.2.",
                                           "updatedAt":  "2025-03-27T16:10:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86rS8uk",
                                           "createdAt":  "2025-05-12T20:18:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "whoward92",
                                           "body":  "I am hitting this issue to using .NET 9 and and Microsoft.Extensions.Identity.Core version 9.0.0.\n\nConfirmed working on 8.0.15",
                                           "updatedAt":  "2025-05-12T20:28:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86yPLfS",
                                           "createdAt":  "2025-06-20T08:50:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Elementenfresser",
                                           "body":  "For some reason the pre-processor symbols in https://github.com/dotnet/aspnetcore/blob/v9.0.6/src/Identity/Extensions.Core/src/Rfc6238AuthenticationService.cs (like #if NET6_0_OR_GREATER)\ndon\u0027t get applied when targeting .NET Standard - which is happening when using .NET 8 platform:\n\"...For example, if you\u0027re targeting .NET Framework 2.0, the following symbols are defined: NET20, NET20_OR_GREATER, NET11_OR_GREATER, and NET10_OR_GREATER.\" see see https://learn.microsoft.com/en-us/dotnet/standard/frameworks\n\nIn conclusion: Identity 9 doesn\u0027t really work via .Net Standard 2.0 as advertised on lower Framework versions. You either have to roll back to Identity 8 or upgrade to .NET 9",
                                           "updatedAt":  "2025-06-20T08:50:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86yPNkp",
                                           "createdAt":  "2025-06-20T08:53:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "martincostello",
                                           "body":  "\u003e For some reason the pre-processor symbols in https://github.com/dotnet/aspnetcore/blob/v9.0.6/src/Identity/Extensions.Core/src/Rfc6238AuthenticationService.cs (like #if NET6_0_OR_GREATER)\ndon\u0027t get applied when targeting .NET Standard\n\nThat\u0027s correct. .NET Standard isn\u0027t .NET 6 or greater, so they\u0027re false.\n",
                                           "updatedAt":  "2025-06-20T08:53:54Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "RFC 6238 Two-Factor Authentication service fails on .NET Framework 4.8",
        "labels":  [
                       "investigate",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/54639",
        "createdAt":  "2024-03-20T08:59:35Z",
        "number":  54639,
        "author":  "christofferbredberg",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8CJ4w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tratcher",
                                            "createdAt":  "2024-03-20T21:20:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "suikkanen-pulseon",
                                            "createdAt":  "2024-10-22T10:29:45Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-04-22T16:59:44Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nDataProtectorTokenProvider does not implement TimeProvider. Instead it uses DateTimeOffset directly.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/main/src/Identity/Core/src/DataProtectorTokenProvider.cs\n\n### Expected Behavior\n\n I expected it to use TimeProvider so that I could mock time and test custom expiration policies.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n_No response_\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "DataProtectorTokenProvider does not implement TimeProvider",
        "labels":  [
                       "enhancement",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/54840",
        "createdAt":  "2024-03-29T10:10:33Z",
        "number":  54840,
        "author":  "SteveSandersonMS",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-22T18:01:29Z",
        "body":  "\u003c!--\r\nNote this issue template is specifically for failing tests within the dotnet/aspnetcore repo.\r\n--\u003e\r\n\r\n## Failing Test(s)\r\n\r\n\u003c!--\r\nProvide the fully qualified name(s) of the failing tests.\r\n--\u003e\r\n\r\nMicrosoft.AspNetCore.Identity.FunctionalTests.MapIdentityApiTests.CanResetSharedKey\r\n\r\n\r\n## Error Message\r\n\r\n\u003c!--\r\nProvide the error message associated with the test failure, if applicable.\r\n--\u003e\r\n\r\n```text\r\nAssert.Equal() Failure\r\nExpected: BadRequest\r\nActual:   OK\r\n```\r\n\r\n## Stacktrace\r\n\r\n\u003cdetails\u003e\r\n\u003c!--\r\nProvide the stack trace associated with the test failure, if applicable.\r\n--\u003e\r\n\r\n```text\r\n   at Microsoft.AspNetCore.Identity.FunctionalTests.MapIdentityApiTests.AssertValidationProblemAsync(HttpResponseMessage response, String error) in /_/src/Identity/test/Identity.FunctionalTests/MapIdentityApiTests.cs:line 1457\r\n   at Microsoft.AspNetCore.Identity.FunctionalTests.MapIdentityApiTests.CanResetSharedKey() in /_/src/Identity/test/Identity.FunctionalTests/MapIdentityApiTests.cs:line 811\r\n   at Microsoft.AspNetCore.Identity.FunctionalTests.MapIdentityApiTests.CanResetSharedKey() in /_/src/Identity/test/Identity.FunctionalTests/MapIdentityApiTests.cs:line 816\r\n--- End of stack trace from previous location ---\r\n```\r\n\u003c/details\u003e\r\n\r\n\r\n## Logs\r\n\r\nCannot include - GitHub rejects text longer than 65KiB.\r\n\r\n## Build\r\n\r\n\u003c!--\r\nProvide a link to the build where the test failure occurred.\r\n--\u003e\r\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=622521",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Quarantine CanResetSharedKey",
        "labels":  [
                       "test-failure",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/55083",
        "createdAt":  "2024-04-11T14:39:36Z",
        "number":  55083,
        "author":  "brunocasarotti",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-25T16:54:03Z",
        "body":  "Hello, I\u0027m interested in integrating Ethereum sign-in functionality into ASP.NET Identity. I\u0027m considering creating a custom external provider to facilitate user sign-ins using signatures from their crypto wallets. Auth0 has already implemented this feature, as demonstrated [here](https://auth0.com/blog/sign-in-with-ethereum-siwe-now-available-on-auth0). Essentially, the user signs a message, and we verify the signature. Could someone please provide guidance on how to integrate this into ASP.NET Identity?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "how to create custom external provider authentication (sign-in with ethereum)",
        "labels":  [
                       "enhancement",
                       "Docs",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/55162",
        "createdAt":  "2024-04-16T13:42:45Z",
        "number":  55162,
        "author":  "gumbarros",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3QnKA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AnthonyMastrean",
                                            "createdAt":  "2024-04-16T14:17:54Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-04-30T16:35:24Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nIf the user changes at runtime the `IdentityOptions` the changes are not reflected.\r\n\r\n### Expected Behavior\r\n\r\nChanged `IdentityOptions` should be reflected.\r\n\r\n\r\n### Steps To Reproduce\r\n\r\n1. Create a simple project `dotnet new mvc --auth Individual`.\r\n2. At `Program.cs`\r\n```cs\r\nbuilder.Services.AddOptions\u003cIdentityOptions\u003e().BindConfiguration(\"Identity\");\r\n```\r\n2. Create a User\r\n3. Change the `PasswordOptions`. at `appsettings.json` or another configuration source.\r\n4. Try to create another User with the changed options, they are not reflected until another restart.\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0.204\r\n\r\n### Anything else?\r\n\r\nThe cause is this constructor, it should be `IOptionsSnapshot`\r\nhttps://github.com/dotnet/aspnetcore/blob/b83e1e159ef1bdfe638e36c8b00bc65ed2d1d857/src/Identity/Extensions.Core/src/UserManager.cs#L70",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOer00jA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde856vTSM",
                                           "createdAt":  "2024-04-16T14:22:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gumbarros",
                                           "body":  "Workaround if anyone needs, just inherit `UserManager`:\r\n```cs\r\npublic class WebPortalUserManager\u003cT\u003e(\r\n    IUserStore\u003cT\u003e store,\r\n    IOptionsSnapshot\u003cIdentityOptions\u003e optionsAccessor,\r\n    IPasswordHasher\u003cT\u003e passwordHasher,\r\n    IEnumerable\u003cIUserValidator\u003cT\u003e\u003e userValidators,\r\n    IEnumerable\u003cIPasswordValidator\u003cT\u003e\u003e passwordValidators,\r\n    ILookupNormalizer keyNormalizer,\r\n    IdentityErrorDescriber errors,\r\n    IServiceProvider services,\r\n    ILogger\u003cUserManager\u003cT\u003e\u003e logger)\r\n    : UserManager\u003cT\u003e(store, optionsAccessor, passwordHasher, userValidators, passwordValidators, keyNormalizer, errors,\r\n        services, logger)\r\n    where T : class;\r\n    \r\n```\r\n\r\n\r\nAt Program.cs\r\n\r\n```cs\r\nbuilder.Services\r\n    .AddIdentity\u003cWebPortalIdentityUser, IdentityRole\u003e()\r\n    .AddEntityFrameworkStores\u003cWebIdentityDbContext\u003e()\r\n    .AddErrorDescriber\u003cIdentityPortugueseErrorDescriber\u003e()\r\n    .AddDefaultTokenProviders()\r\n    .AddSignInManager\u003cSignInManager\u003cWebPortalIdentityUser\u003e\u003e() \r\n    .AddUserManager\u003cWebPortalUserManager\u003cWebPortalIdentityUser\u003e\u003e() //This will do the job.\r\n    .AddUserStore\u003cUserStore\u003cWebPortalIdentityUser, IdentityRole, WebIdentityDbContext, string\u003e\u003e() \r\n    .AddRoleStore\u003cRoleStore\u003cIdentityRole, WebIdentityDbContext, string\u003e\u003e();\r\n```\r\n    ",
                                           "updatedAt":  "2024-04-16T14:22:39Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Identity: `IdentityOptions` should be inside an `IOptionsSnapshot`",
        "labels":  [
                       "enhancement",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/55199",
        "createdAt":  "2024-04-18T12:59:15Z",
        "number":  55199,
        "author":  "ayodejii",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_teGw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "4fthawaiian",
                                            "createdAt":  "2024-06-25T00:53:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ahmed-abdelrazek",
                                            "createdAt":  "2025-02-28T18:48:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Outofnothing",
                                            "createdAt":  "2025-03-05T02:41:01Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-02-28T21:54:01Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nI am trying to create users with unique phone numbers.\r\n\r\nI know it\u0027s already mentioned here in this issue [25368](https://github.com/dotnet/aspnetcore/issues/25368) and many others, but I think it makes sense to have it now.\r\n\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nAs suggested in the issue I referenced above, I think there could be a provided flag when creating a user, to enforce this (or not):\r\n\r\n`await userManager.CreateAsync(user, request.Password, requireUniquePhoneNumber = true) // default could be false`\r\n\r\nor whichever way you guys deem clean.\r\n\r\nThen a `FindByPhonenumber` method in the `userManager`.\r\n### Additional context\r\n\r\nIn some countries, user identity is tied to their phone numbers, so some apps require users to register with them.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoG62Nw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86gam1z",
                                           "createdAt":  "2025-02-28T18:48:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ahmed-abdelrazek",
                                           "body":  "https://github.com/dotnet/aspnetcore/discussions/59444#discussioncomment-11916536\n\n![image](https://github.com/user-attachments/assets/5c9f442d-db3c-48b6-89c1-d2cbf5d533fb)",
                                           "updatedAt":  "2025-02-28T18:48:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86gbD8F",
                                           "createdAt":  "2025-02-28T20:00:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mguinness",
                                           "body":  "To clarify, previous poster is requesting an additional property be added to the [UserOptions](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.identity.useroptions) class as part of this change.  Hard to discern from just a screenshot.",
                                           "updatedAt":  "2025-02-28T20:00:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86gbrY3",
                                           "createdAt":  "2025-02-28T21:54:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIF2sA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mguinness",
                                                                               "createdAt":  "2025-02-28T22:15:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ahmed-abdelrazek",
                                           "body":  "@mguinness yes it\u0027s my idea on how requiring unique phone number for user might work which is the same as how requiring unique email works",
                                           "updatedAt":  "2025-02-28T21:54:00Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Support for unique phone numbers, find user by phone number in Identity",
        "labels":  [
                       "enhancement",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/55529",
        "createdAt":  "2024-05-04T14:07:13Z",
        "number":  55529,
        "author":  "akordowski",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9sJpA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xgolubev",
                                            "createdAt":  "2024-05-31T02:20:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "natthapolvanasrivilai",
                                            "createdAt":  "2024-06-09T12:46:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PanSzelescik",
                                            "createdAt":  "2024-06-17T17:48:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TheTomatoKing",
                                            "createdAt":  "2024-06-20T11:05:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AkScriptHS",
                                            "createdAt":  "2024-06-30T14:21:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "simo026q",
                                            "createdAt":  "2024-07-09T08:03:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adamowski10",
                                            "createdAt":  "2024-12-12T00:31:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jhossy",
                                            "createdAt":  "2024-12-23T20:04:14Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2025-05-12T22:39:39Z",
        "body":  "## Background and Motivation\r\n\r\nAlthough the Identity API is highly customizable one feature I am missing is the possibility to customize the Identity API endpoints. I copied the exisitng code and changed it to my needs. Below you can find the changes. If you find this feature usefull I would appreciate it if it be added to the code base.\r\n\r\n## Proposed API\r\n\r\n```diff\r\n  src/Identity/Core/src/IdentityApiEndpointRouteBuilderExtensions.cs   | 37 ++++++++++++++--------\r\n 1 file changed, 24 insertions(+), 13 deletions(-)\r\n\r\ndiff --git a/src/Identity/Core/src/IdentityApiEndpointRouteBuilderExtensions.cs b/src/Identity/Core/src/IdentityApiEndpointRouteBuilderExtensions.cs\r\nindex 115d151bdf..788dad545f 100644\r\n--- a/src/Identity/Core/src/IdentityApiEndpointRouteBuilderExtensions.cs\r\n+++ b/src/Identity/Core/src/IdentityApiEndpointRouteBuilderExtensions.cs\r\n@@ -36,8 +36,11 @@ public static class IdentityApiEndpointRouteBuilderExtensions\r\n     /// The \u003csee cref=\"IEndpointRouteBuilder\"/\u003e to add the identity endpoints to.\r\n     /// Call \u003csee cref=\"EndpointRouteBuilderExtensions.MapGroup(IEndpointRouteBuilder, string)\"/\u003e to add a prefix to all the endpoints.\r\n     /// \u003c/param\u003e\r\n+    /// \u003cparam name=\"identityApiOptionsAction\"\u003e\r\n+    /// An optional action to configure the \u003csee cref=\"IdentityApiOptions\" /\u003e for the endpoints.\r\n+    /// \u003c/param\u003e\r\n     /// \u003creturns\u003eAn \u003csee cref=\"IEndpointConventionBuilder\"/\u003e to further customize the added endpoints.\u003c/returns\u003e\r\n-    public static IEndpointConventionBuilder MapIdentityApi\u003cTUser\u003e(this IEndpointRouteBuilder endpoints)\r\n+    public static IEndpointConventionBuilder MapIdentityApi\u003cTUser\u003e(this IEndpointRouteBuilder endpoints, Action\u003cIdentityApiOptions\u003e? identityApiOptionsAction = null)\r\n         where TUser : class, new()\r\n     {\r\n         ArgumentNullException.ThrowIfNull(endpoints);\r\n@@ -50,11 +53,19 @@ public static class IdentityApiEndpointRouteBuilderExtensions\r\n         // We\u0027ll figure out a unique endpoint name based on the final route pattern during endpoint generation.\r\n         string? confirmEmailEndpointName = null;\r\n \r\n-        var routeGroup = endpoints.MapGroup(\"\");\r\n+        var identityApiOptions = new IdentityApiOptions();\r\n+        identityApiOptionsAction?.Invoke(identityApiOptions);\r\n+\r\n+        var routeGroup = endpoints.MapGroup(identityApiOptions.RouteGroup);\r\n+\r\n+        if (!string.IsNullOrWhiteSpace(identityApiOptions.RouteTag))\r\n+        {\r\n+            routeGroup = routeGroup.WithTags(identityApiOptions.RouteTag);\r\n+        }\r\n \r\n         // NOTE: We cannot inject UserManager\u003cTUser\u003e directly because the TUser generic parameter is currently unsupported by RDG.\r\n         // https://github.com/dotnet/aspnetcore/issues/47338\r\n-        routeGroup.MapPost(\"/register\", async Task\u003cResults\u003cOk, ValidationProblem\u003e\u003e\r\n+        routeGroup.MapPost(identityApiOptions.RegisterEndpoint, async Task\u003cResults\u003cOk, ValidationProblem\u003e\u003e\r\n             ([FromBody] RegisterRequest registration, HttpContext context, [FromServices] IServiceProvider sp) =\u003e\r\n         {\r\n             var userManager = sp.GetRequiredService\u003cUserManager\u003cTUser\u003e\u003e();\r\n@@ -87,7 +98,7 @@ public static class IdentityApiEndpointRouteBuilderExtensions\r\n             return TypedResults.Ok();\r\n         });\r\n \r\n-        routeGroup.MapPost(\"/login\", async Task\u003cResults\u003cOk\u003cAccessTokenResponse\u003e, EmptyHttpResult, ProblemHttpResult\u003e\u003e\r\n+        routeGroup.MapPost(identityApiOptions.LoginEndpoint, async Task\u003cResults\u003cOk\u003cAccessTokenResponse\u003e, EmptyHttpResult, ProblemHttpResult\u003e\u003e\r\n             ([FromBody] LoginRequest login, [FromQuery] bool? useCookies, [FromQuery] bool? useSessionCookies, [FromServices] IServiceProvider sp) =\u003e\r\n         {\r\n             var signInManager = sp.GetRequiredService\u003cSignInManager\u003cTUser\u003e\u003e();\r\n@@ -119,7 +130,7 @@ public static class IdentityApiEndpointRouteBuilderExtensions\r\n             return TypedResults.Empty;\r\n         });\r\n \r\n-        routeGroup.MapPost(\"/refresh\", async Task\u003cResults\u003cOk\u003cAccessTokenResponse\u003e, UnauthorizedHttpResult, SignInHttpResult, ChallengeHttpResult\u003e\u003e\r\n+        routeGroup.MapPost(identityApiOptions.RefreshEndpoint, async Task\u003cResults\u003cOk\u003cAccessTokenResponse\u003e, UnauthorizedHttpResult, SignInHttpResult, ChallengeHttpResult\u003e\u003e\r\n             ([FromBody] RefreshRequest refreshRequest, [FromServices] IServiceProvider sp) =\u003e\r\n         {\r\n             var signInManager = sp.GetRequiredService\u003cSignInManager\u003cTUser\u003e\u003e();\r\n@@ -139,7 +150,7 @@ public static class IdentityApiEndpointRouteBuilderExtensions\r\n             return TypedResults.SignIn(newPrincipal, authenticationScheme: IdentityConstants.BearerScheme);\r\n         });\r\n \r\n-        routeGroup.MapGet(\"/confirmEmail\", async Task\u003cResults\u003cContentHttpResult, UnauthorizedHttpResult\u003e\u003e\r\n+        routeGroup.MapGet(identityApiOptions.ConfirmEmailEndpoint, async Task\u003cResults\u003cContentHttpResult, UnauthorizedHttpResult\u003e\u003e\r\n             ([FromQuery] string userId, [FromQuery] string code, [FromQuery] string? changedEmail, [FromServices] IServiceProvider sp) =\u003e\r\n         {\r\n             var userManager = sp.GetRequiredService\u003cUserManager\u003cTUser\u003e\u003e();\r\n@@ -190,7 +201,7 @@ public static class IdentityApiEndpointRouteBuilderExtensions\r\n             endpointBuilder.Metadata.Add(new EndpointNameMetadata(confirmEmailEndpointName));\r\n         });\r\n \r\n-        routeGroup.MapPost(\"/resendConfirmationEmail\", async Task\u003cOk\u003e\r\n+        routeGroup.MapPost(identityApiOptions.ResendConfirmationEmailEndpoint, async Task\u003cOk\u003e\r\n             ([FromBody] ResendConfirmationEmailRequest resendRequest, HttpContext context, [FromServices] IServiceProvider sp) =\u003e\r\n         {\r\n             var userManager = sp.GetRequiredService\u003cUserManager\u003cTUser\u003e\u003e();\r\n@@ -203,7 +214,7 @@ public static class IdentityApiEndpointRouteBuilderExtensions\r\n             return TypedResults.Ok();\r\n         });\r\n \r\n-        routeGroup.MapPost(\"/forgotPassword\", async Task\u003cResults\u003cOk, ValidationProblem\u003e\u003e\r\n+        routeGroup.MapPost(identityApiOptions.ForgotPasswordEndpoint, async Task\u003cResults\u003cOk, ValidationProblem\u003e\u003e\r\n             ([FromBody] ForgotPasswordRequest resetRequest, [FromServices] IServiceProvider sp) =\u003e\r\n         {\r\n             var userManager = sp.GetRequiredService\u003cUserManager\u003cTUser\u003e\u003e();\r\n@@ -222,7 +233,7 @@ public static class IdentityApiEndpointRouteBuilderExtensions\r\n             return TypedResults.Ok();\r\n         });\r\n \r\n-        routeGroup.MapPost(\"/resetPassword\", async Task\u003cResults\u003cOk, ValidationProblem\u003e\u003e\r\n+        routeGroup.MapPost(identityApiOptions.ResetPasswordEndpoint, async Task\u003cResults\u003cOk, ValidationProblem\u003e\u003e\r\n             ([FromBody] ResetPasswordRequest resetRequest, [FromServices] IServiceProvider sp) =\u003e\r\n         {\r\n             var userManager = sp.GetRequiredService\u003cUserManager\u003cTUser\u003e\u003e();\r\n@@ -255,9 +266,9 @@ public static class IdentityApiEndpointRouteBuilderExtensions\r\n             return TypedResults.Ok();\r\n         });\r\n \r\n-        var accountGroup = routeGroup.MapGroup(\"/manage\").RequireAuthorization();\r\n+        var accountGroup = routeGroup.MapGroup(identityApiOptions.ManageRouteGroup).RequireAuthorization();\r\n \r\n-        accountGroup.MapPost(\"/2fa\", async Task\u003cResults\u003cOk\u003cTwoFactorResponse\u003e, ValidationProblem, NotFound\u003e\u003e\r\n+        accountGroup.MapPost(identityApiOptions.MfaEndpoint, async Task\u003cResults\u003cOk\u003cTwoFactorResponse\u003e, ValidationProblem, NotFound\u003e\u003e\r\n             (ClaimsPrincipal claimsPrincipal, [FromBody] TwoFactorRequest tfaRequest, [FromServices] IServiceProvider sp) =\u003e\r\n         {\r\n             var signInManager = sp.GetRequiredService\u003cSignInManager\u003cTUser\u003e\u003e();\r\n@@ -331,7 +342,7 @@ public static class IdentityApiEndpointRouteBuilderExtensions\r\n             });\r\n         });\r\n \r\n-        accountGroup.MapGet(\"/info\", async Task\u003cResults\u003cOk\u003cInfoResponse\u003e, ValidationProblem, NotFound\u003e\u003e\r\n+        accountGroup.MapGet(identityApiOptions.InfoEndpoint, async Task\u003cResults\u003cOk\u003cInfoResponse\u003e, ValidationProblem, NotFound\u003e\u003e\r\n             (ClaimsPrincipal claimsPrincipal, [FromServices] IServiceProvider sp) =\u003e\r\n         {\r\n             var userManager = sp.GetRequiredService\u003cUserManager\u003cTUser\u003e\u003e();\r\n@@ -343,7 +354,7 @@ public static class IdentityApiEndpointRouteBuilderExtensions\r\n             return TypedResults.Ok(await CreateInfoResponseAsync(user, userManager));\r\n         });\r\n \r\n-        accountGroup.MapPost(\"/info\", async Task\u003cResults\u003cOk\u003cInfoResponse\u003e, ValidationProblem, NotFound\u003e\u003e\r\n+        accountGroup.MapPost(identityApiOptions.InfoEndpoint, async Task\u003cResults\u003cOk\u003cInfoResponse\u003e, ValidationProblem, NotFound\u003e\u003e\r\n             (ClaimsPrincipal claimsPrincipal, [FromBody] InfoRequest infoRequest, HttpContext context, [FromServices] IServiceProvider sp) =\u003e\r\n         {\r\n             var userManager = sp.GetRequiredService\u003cUserManager\u003cTUser\u003e\u003e();\r\n```\r\n\r\n```diff\r\n src/Identity/Core/src/IdentityApiOptions.cs | 70 +++++++++++++++++++++++++++++\r\n 1 file changed, 70 insertions(+)\r\n\r\ndiff --git a/src/Identity/Core/src/IdentityApiOptions.cs b/src/Identity/Core/src/IdentityApiOptions.cs\r\nnew file mode 100644\r\nindex 0000000000..2ccbfb2269\r\n--- /dev/null\r\n+++ b/src/Identity/Core/src/IdentityApiOptions.cs\r\n@@ -0,0 +1,70 @@\r\n+// Licensed to the .NET Foundation under one or more agreements.\r\n+// The .NET Foundation licenses this file to you under the MIT license.\r\n+\r\n+namespace Microsoft.AspNetCore.Identity;\r\n+\r\n+/// \u003csummary\u003e\r\n+/// Represents all the options you can use to configure the identity api endpoints.\r\n+/// \u003c/summary\u003e\r\n+public class IdentityApiOptions\r\n+{\r\n+    /// \u003csummary\u003e\r\n+    /// The value for the route tag.\r\n+    /// \u003c/summary\u003e\r\n+    public string? RouteTag { get; set; }\r\n+\r\n+    /// \u003csummary\u003e\r\n+    /// The value for the route group.\r\n+    /// \u003c/summary\u003e\r\n+    public string RouteGroup { get; set; } = \"\";\r\n+\r\n+    /// \u003csummary\u003e\r\n+    /// The value for the register endpoint.\r\n+    /// \u003c/summary\u003e\r\n+    public string RegisterEndpoint { get; set; } = \"/register\";\r\n+\r\n+    /// \u003csummary\u003e\r\n+    /// The value for the login endpoint.\r\n+    /// \u003c/summary\u003e\r\n+    public string LoginEndpoint { get; set; } = \"/login\";\r\n+\r\n+    /// \u003csummary\u003e\r\n+    /// The value for the refresh endpoint.\r\n+    /// \u003c/summary\u003e\r\n+    public string RefreshEndpoint { get; set; } = \"/refresh\";\r\n+\r\n+    /// \u003csummary\u003e\r\n+    /// The value for the confirm email endpoint.\r\n+    /// \u003c/summary\u003e\r\n+    public string ConfirmEmailEndpoint { get; set; } = \"/confirmEmail\";\r\n+\r\n+    /// \u003csummary\u003e\r\n+    /// The value for the resend confirmation email endpoint.\r\n+    /// \u003c/summary\u003e\r\n+    public string ResendConfirmationEmailEndpoint { get; set; } = \"/resendConfirmationEmail\";\r\n+\r\n+    /// \u003csummary\u003e\r\n+    /// The value for the forgot password endpoint.\r\n+    /// \u003c/summary\u003e\r\n+    public string ForgotPasswordEndpoint { get; set; } = \"/forgotPassword\";\r\n+\r\n+    /// \u003csummary\u003e\r\n+    /// The value for the reset password endpoint.\r\n+    /// \u003c/summary\u003e\r\n+    public string ResetPasswordEndpoint { get; set; } = \"/resetPassword\";\r\n+\r\n+    /// \u003csummary\u003e\r\n+    /// The value for the manage route group.\r\n+    /// \u003c/summary\u003e\r\n+    public string ManageRouteGroup { get; set; } = \"manage\";\r\n+\r\n+    /// \u003csummary\u003e\r\n+    /// The value for the 2fa endpoint.\r\n+    /// \u003c/summary\u003e\r\n+    public string MfaEndpoint { get; set; } = \"/2fa\";\r\n+\r\n+    /// \u003csummary\u003e\r\n+    /// The value for the info endpoint.\r\n+    /// \u003c/summary\u003e\r\n+    public string InfoEndpoint { get; set; } = \"/info\";\r\n+}\r\n\r\n```\r\n\r\n## Usage Examples\r\n\r\nWith the propsed changes the API endpoints can be configured like followed:\r\n\r\n```csharp\r\napp.MapIdentityApi\u003cUser\u003e(options =\u003e\r\n{\r\n    options.RouteTag = \"auth\";\r\n    options.RouteGroup = \"/auth\";\r\n    options.ConfirmEmailEndpoint = \"/confirm-email\";\r\n    options.ResendConfirmationEmailEndpoint = \"/resend-confirmation-email\";\r\n    options.ForgotPasswordEndpoint = \"/forgot-password\";\r\n    options.ResetPasswordEndpoint = \"/reset-password\";\r\n});\r\n```\r\n![screenshot](https://github.com/dotnet/aspnetcore/assets/9746197/785401d6-345f-4c14-91b0-550e72d2b33d)\r\n\r\n## Risks\r\n\r\nI don\u0027t see any risks as the changes are implemented as an optional parameter.\r\n\r\nLooking forward to your feedback. Thank you for the consideration.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOq1M7gA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde859SL0x",
                                           "createdAt":  "2024-05-09T04:37:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEUPZ1A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danielkrash",
                                                                               "createdAt":  "2024-05-26T14:14:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TheTomatoKing",
                                                                               "createdAt":  "2024-06-20T11:06:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Snowlights2022",
                                                                               "createdAt":  "2024-07-20T16:31:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Thomas-Dumont-Pro",
                                                                               "createdAt":  "2024-08-04T16:20:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "akordowski",
                                                                               "createdAt":  "2024-08-05T11:49:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KMastalerz",
                                                                               "createdAt":  "2024-09-21T12:47:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TomatoDotDev",
                                                                               "createdAt":  "2024-12-23T13:25:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "thylux",
                                                                               "createdAt":  "2025-04-17T11:53:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "klinki",
                                                                               "createdAt":  "2025-05-29T08:59:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  9
                                                         },
                                           "author":  "tcortega",
                                           "body":  "It would be beneficial to have an option to either disable endpoints or fully customize them via delegates. My primary issue with the API was the inability to implement login via email. This limitation stems from the current design, which searches for users by username as seen here:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/d6c161969965bfeff71110ea5b3462afacfa9f24/src/Identity/Core/src/IdentityApiEndpointRouteBuilderExtensions.cs#L99\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/d6c161969965bfeff71110ea5b3462afacfa9f24/src/Identity/Core/src/SignInManager.cs#L356\r\n\r\nAnd honestly it\u0027s also really confusing that the api asks for an email but searches for the username. Maybe this should be an issue after all?",
                                           "updatedAt":  "2024-05-09T04:38:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86HKMtx",
                                           "createdAt":  "2024-08-04T16:28:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Thomas-Dumont-Pro",
                                           "body":  "Same here, I encounter an issue with the generic call to add the Endpoint, only on the registration. \r\nI use a custom IdentityUser and some new properties are mandatory. \r\nBut since I cannot overrite RegisterRequest and change part of the API, I need to copy the endpoint mapping to manage my own delegate and change the RegisterRequest.\r\n\r\nMaybe this part can be improve to offer more customisation.",
                                           "updatedAt":  "2024-08-04T16:28:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86YkhB7",
                                           "createdAt":  "2024-12-23T13:26:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TomatoDotDev",
                                           "body":  "\u003e It would be beneficial to have an option to either disable endpoints or fully customize them via delegates. My primary issue with the API was the inability to implement login via email. This limitation stems from the current design, which searches for users by username as seen here:\n\u003e \n\u003e [aspnetcore/src/Identity/Core/src/IdentityApiEndpointRouteBuilderExtensions.cs](https://github.com/dotnet/aspnetcore/blob/d6c161969965bfeff71110ea5b3462afacfa9f24/src/Identity/Core/src/IdentityApiEndpointRouteBuilderExtensions.cs#L99)\n\u003e \n\u003e Line 99 in [d6c1619](/dotnet/aspnetcore/commit/d6c161969965bfeff71110ea5b3462afacfa9f24)\n\u003e \n\u003e  var result = await signInManager.PasswordSignInAsync(login.Email, login.Password, isPersistent, lockoutOnFailure: true); \n\u003e [aspnetcore/src/Identity/Core/src/SignInManager.cs](https://github.com/dotnet/aspnetcore/blob/d6c161969965bfeff71110ea5b3462afacfa9f24/src/Identity/Core/src/SignInManager.cs#L356)\n\u003e \n\u003e Line 356 in [d6c1619](/dotnet/aspnetcore/commit/d6c161969965bfeff71110ea5b3462afacfa9f24)\n\u003e \n\u003e  var user = await UserManager.FindByNameAsync(userName); \n\u003e And honestly it\u0027s also really confusing that the api asks for an email but searches for the username. Maybe this should be an issue after all?\n\nhad this exact same issue when trying to seed a default user and wondering for ages why it was not signing in - this gotcha with the username and email being forced to be the same is a strange behaviour.",
                                           "updatedAt":  "2024-12-23T13:26:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86rUzuA",
                                           "createdAt":  "2025-05-12T22:39:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOER29gQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "akordowski",
                                                                               "createdAt":  "2025-05-13T05:31:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mguinness",
                                           "body":  "[Add ability to scaffold identity endpoints in project and override these](https://github.com/dotnet/aspnetcore/issues/53343) has been added to the .NET 10 roadmap.",
                                           "updatedAt":  "2025-05-12T22:39:38Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Add configuration for Identity API endpoints",
        "labels":  [
                       "area-identity",
                       "api-suggestion"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/55772",
        "createdAt":  "2024-05-17T16:51:09Z",
        "number":  55772,
        "author":  "CollectorOfBolts",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9rb2g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ignacy130",
                                            "createdAt":  "2024-06-20T06:21:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "armintodev",
                                            "createdAt":  "2024-07-29T05:59:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Atulin",
                                            "createdAt":  "2024-12-23T10:02:07Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-07-28T13:03:56Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWhen adding multiple roles or generally updating a user\u0027s roles, `UserManager.AddToRolesAsync()` will fail upon finding that the user already has one of the given roles. Similary, `UserManager.RemoveFromRolesAsync()` will fail if the user does not have any of the given roles to be removed.\n\n### Expected Behavior\n\n`UserManager.AddToRolesAsync()` should add all given roles to the user and simply skip any that the user already has and `UserManager.RemoveFromRolesAsync()` should remove all given roles from the user and simply skip any that the user does not have.\n\n### Steps To Reproduce\n\n``` CSharp\r\n// with userManager coming from dependency injection and user being the IdentityUser object for some user\r\nstring role1 = \"Role1\";\r\nawait userManager.AddToRoleAsync(user, role1); // success\r\nstring[] roleGroup = [ \"Role1\", \"Role2\", \"Role3\" ];\r\nIdentityResult result = await userManager.AddToRolesAsync(user, roleGroup);\r\nif (!result.Succeeded) { throw new Exception(\"Failed to add roles\"); } // will always throw here\r\n```\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.101\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhmEhfw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86GYSF_",
                                           "createdAt":  "2024-07-28T13:03:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hussnainwithss",
                                           "body":  "@MackinnonBuck is anyone working on this? can i take this?",
                                           "updatedAt":  "2024-07-28T13:03:55Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "UserManager.AddToRolesAsync() and RemoveFromRolesAsync() fail on any conflict",
        "labels":  [
                       "enhancement",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/55792",
        "createdAt":  "2024-05-19T16:40:59Z",
        "number":  55792,
        "author":  "VasuInukollu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODQXKPg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PanSzelescik",
                                            "createdAt":  "2024-06-17T17:48:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TheTomatoKing",
                                            "createdAt":  "2024-06-20T11:05:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "simo026q",
                                            "createdAt":  "2024-07-09T08:01:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jhossy",
                                            "createdAt":  "2024-12-23T20:02:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Matthew-nop",
                                            "createdAt":  "2024-12-31T17:04:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cecilphillip",
                                            "createdAt":  "2025-01-29T13:23:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "paulirwin",
                                            "createdAt":  "2025-02-03T14:42:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MxNbrt",
                                            "createdAt":  "2025-07-26T07:38:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jksware",
                                            "createdAt":  "2025-09-14T05:43:58Z"
                                        }
                                    ],
                          "totalCount":  9
                      },
        "updatedAt":  "2024-05-22T16:39:09Z",
        "body":  "## Background and Motivation\r\n\r\nThe Identity API endpoints are a much need addition to Identity framework. The current API endpoint route implementation (IdentityApiEndpointRouteBuilderExtensions.cs) has a single API to add all/multiple endpoints to the pipeline. \r\n\r\nIt would great to have control on which endpoints will be available if we don\u0027t want to have some functionality in the application. \r\n\r\nA way to allow individual API endpoints to be added will help in plenty of scenarios.\r\n\r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace Microsoft.AspNetCore.Routing;\r\n\r\npublic static class IdentityApiEndpointRouteBuilderExtensions\r\n{\r\n\r\n    public static IEndpointConventionBuilder MapIdentityApi\u003cTUser\u003e(this IEndpointRouteBuilder endpoints)\r\n\r\n+    public static IEndpointConventionBuilder MapIdentityRegisterApi\u003cTUser\u003e(this IEndpointRouteBuilder endpoints)\r\n+    public static IEndpointConventionBuilder MapIdentityLoginApi\u003cTUser\u003e(this IEndpointRouteBuilder endpoints)\r\n+    public static IEndpointConventionBuilder MapIdentityRefreshApi\u003cTUser\u003e(this IEndpointRouteBuilder endpoints)\r\n\r\n}\r\n```\r\n\r\n\r\n## Usage Examples\r\n\r\nWe can add the required mapping for each endpoint.\r\n\r\n```csharp\r\n\r\napp.MapIdentityLoginApi\u003cIdentityUser\u003e();\r\napp.MapIdentityRefreshApi\u003cIdentityUser\u003e();\r\n\r\n```\r\n\r\n## Alternative Designs\r\n\r\nWe have the option of adding the full code from this URL into the project and remove the unwanted parts. But that\u0027s not a great experience.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/main/src/Identity/Core/src/IdentityApiEndpointRouteBuilderExtensions.cs\r\n\r\n## Risks\r\n\r\nNothing that I can think of.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfqzonQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85-rOid",
                                           "createdAt":  "2024-05-22T16:38:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "Seems related to https://github.com/dotnet/aspnetcore/issues/55529",
                                           "updatedAt":  "2024-05-22T16:38:41Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Split MapIdentityApi\u003cTUser\u003e() into multiple APIs and allow selective end points to be enabled",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "api-suggestion",
                       "feature-identity-apis"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/56409",
        "createdAt":  "2024-06-23T16:14:12Z",
        "number":  56409,
        "author":  "latuconsinafr",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODDUVlA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ko-vasilev",
                                            "createdAt":  "2025-06-05T13:40:48Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-06-24T16:49:52Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI am trying to create a project following the Domain-Driven Design (DDD) approach (to solve several problems in complex domains). Most of the time when writing the model/entity using this approach, people will avoid primitives for IDs (for example: `UserId` for `User` or `RoleId` for `Role`).\r\n\r\nUntil I tried to extend the existing `IdentityUser` and `IdentityRole` for example to something like this:\r\n\r\n```cs\r\n// ApplicationUser.cs\r\npublic class ApplicationUser : IdentityUser\u003cUserId\u003e\r\n{\r\n}\r\n\r\n// ApplicationRole.cs\r\npublic class ApplicationRole : IdentityRole\u003cRoleId\u003e\r\n{\r\n}\r\n```\r\n\r\nThen I stuck into the problem when I tried to update the `ApplicationDbContext`:\r\n\r\n```cs\r\npublic class AppDbContext(DbContextOptions\u003cAppDbContext\u003e options) : IdentityDbContext\u003cApplicationUser, ApplicationRole, UserId\u003e(options) // Here is the problem TKey will be applied to Role as well\r\n{\r\n}\r\n```\n\n### Describe the solution you\u0027d like\n\nRather than using all the TKey for all base class like [here](https://github.com/dotnet/aspnetcore/blob/96559b6c1978e5a64e17fb48718cd60b4b6316f0/src/Identity/EntityFrameworkCore/src/IdentityDbContext.cs#L49), the TKey could be specified for each type or base class.\r\n\r\n```cs\r\npublic class AppDbContext(DbContextOptions\u003cAppDbContext\u003e options) : IdentityDbContext\u003cApplicationUser\u003cUserId\u003e, ApplicationRole\u003cRoleId\u003e\u003e(options)\r\n{\r\n}\r\n```\r\n\r\nOr probably the team considered the pros and cons for every data type that is applied to the primary key and then decided to use another data type for every type or base class (in this case using primitives, int auto increment vs guid):\r\n\r\n```cs\r\npublic class AppDbContext(DbContextOptions\u003cAppDbContext\u003e options) : IdentityDbContext\u003cApplicationUser\u003cint\u003e, ApplicationRole\u003cGuid\u003e\u003e(options)\r\n{\r\n}\r\n```\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Separate type of the primary key for users, roles, etc in the identity entities ",
        "labels":  [
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/56885",
        "createdAt":  "2024-07-18T22:21:34Z",
        "number":  56885,
        "author":  "SaebAmini",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODL9A0w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "olsnacky",
                                            "createdAt":  "2024-07-31T08:17:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bobinush",
                                            "createdAt":  "2025-08-20T14:15:17Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-02-17T14:34:48Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nCurrently, the recommended way to require authenticated users by default on all routes seems to be [setting the fallback policy](https://learn.microsoft.com/en-us/aspnet/core/security/authorization/secure-data?view=aspnetcore-8.0#require-authenticated-users):\r\n\r\n```\r\nbuilder.Services.AddAuthorization(options =\u003e\r\n{\r\n    options.FallbackPolicy = new AuthorizationPolicyBuilder()\r\n        .RequireAuthenticatedUser()\r\n        .Build();\r\n});\r\n```\r\n\r\nWith .NET 8\u0027s new Identity features, you can add a bunch of endpoints via `app.MapIdentityApi\u003cMyUser\u003e();`.\r\n\r\nHowever, the endpoints that are supposed to be anonymous (like `/register` and `/login`) don\u0027t work correctly with the above fallback policy, because (I\u0027m assuming) they somehow get the fallback policy applied as well, which looks like a bug to me.\r\n\r\nHere\u0027s an example of a register call that results in an infinite redirect loop:\r\n\r\n```\r\n\u003e POST /register HTTP/1.1\r\n\u003e Host: localhost:7100\r\n\u003e Content-Type: application/json\r\n\u003e Accept: */*\r\n\u003e Content-Length: 54\r\n\r\n| {\r\n|   \"email\": \"foo@bar.com\",\r\n|   \"password\": \"***********\"\r\n| }\r\n\r\n\u003c HTTP/1.1 302 Found\r\n\u003c Content-Length: 0\r\n\u003c Date: Thu, 18 Jul 2024 21:53:11 GMT\r\n\u003c Server: Kestrel\r\n\u003c Location: http://localhost:7100/Account/Login?ReturnUrl=%2Fregister\r\n\r\n\r\n\u003e GET /Account/Login?ReturnUrl=%2Fregister HTTP/1.1\r\n\u003e Host: localhost:7100\r\n\u003e Content-Type: application/json\r\n\u003e Accept: */*\r\n\r\n\u003c HTTP/1.1 302 Found\r\n\u003c Content-Length: 0\r\n\u003c Date: Thu, 18 Jul 2024 21:53:11 GMT\r\n\u003c Server: Kestrel\r\n\u003c Location: http://localhost:7100/Account/Login?ReturnUrl=%2FAccount%2FLogin%3FReturnUrl%3D%252Fapi%252Faccount%252Fregister\r\n\r\n\r\n\u003e GET /Account/Login?ReturnUrl=%2FAccount%2FLogin%3FReturnUrl%3D%252Fapi%252Faccount%252Fregister HTTP/1.1\r\n\u003e Host: localhost:7100\r\n\u003e Content-Type: application/json\r\n\u003e Accept: */*\r\n\r\n\u003c HTTP/1.1 302 Found\r\n\u003c Content-Length: 0\r\n\u003c Date: Thu, 18 Jul 2024 21:53:11 GMT\r\n\u003c Server: Kestrel\r\n\u003c Location: http://localhost:7100/Account/Login?ReturnUrl=%2FAccount%2FLogin%3FReturnUrl%3D%252FAccount%252FLogin%253FReturnUrl%253D%25252Fapi%25252Faccount%25252Fregister\r\n\r\n\r\n\u003e GET /Account/Login?ReturnUrl=%2FAccount%2FLogin%3FReturnUrl%3D%252FAccount%252FLogin%253FReturnUrl%253D%25252Fapi%25252Faccount%25252Fregister HTTP/1.1\r\n\u003e Host: localhost:7100\r\n\u003e Content-Type: application/json\r\n\u003e Accept: */*\r\n\r\n\u003c HTTP/1.1 302 Found\r\n\u003c Content-Length: 0\r\n\u003c Date: Thu, 18 Jul 2024 21:53:11 GMT\r\n\u003c Server: Kestrel\r\n\u003c Location: http://localhost:7100/Account/Login?ReturnUrl=%2FAccount%2FLogin%3FReturnUrl%3D%252FAccount%252FLogin%253FReturnUrl%253D%25252FAccount%25252FLogin%25253FReturnUrl%25253D%2525252Fapi%2525252Faccount%2525252Fregister\r\n\r\n```\r\n\r\nA workaround could be exposing a mechanism to have more control over the generated endpoints and to possibly apply `[AllowAnonymous]` to them, but I couldn\u0027t find anything to that effect, which has practically blocked me from using the above two features together.\n\n### Expected Behavior\n\nThe generated identity endpoints that are supposed to be accessible anonymously, such as `/register`, have `[AllowAnonymous]` applied to them so they don\u0027t follow the fallback policy.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.202\n\n### Anything else?\n\nASP.NET Core 8, following https://devblogs.microsoft.com/dotnet/whats-new-with-identity-in-dotnet-8",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnr7XBA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86evtcE",
                                           "createdAt":  "2025-02-17T14:34:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jacob7395",
                                           "body":  "Did you try;\n\n```\napp.MapIdentityApi\u003c\u003e().AllowAnonymous();\n```\n\nIt might not map as expected in this use case.",
                                           "updatedAt":  "2025-02-17T14:34:46Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ASP.NET Core 8 Identity Endpoints not compatible with FallbackPolicy that requires authenticated users by default",
        "labels":  [
                       "bug",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/57361",
        "createdAt":  "2024-08-16T07:32:11Z",
        "number":  57361,
        "author":  "akoeplinger",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-22T18:02:45Z",
        "body":  "While looking at https://github.com/dotnet/aspnetcore/pull/57303 I discovered the `UserManagerWillUseTokenProviderInstanceOverDefaults` test from src/Identity/test/Identity.Test/UserManagerTest.cs doesn\u0027t actually throw a NotImplementedException, but no exception at all.\r\n\r\nWe didn\u0027t notice because we didn\u0027t await the Assert.ThrowsAsync.\r\n\r\nFiling this issue for tracking.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Test failure: no exception in UserManagerWillUseTokenProviderInstanceOverDefaults",
        "labels":  [
                       "test-failure",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/57803",
        "createdAt":  "2024-09-11T16:48:08Z",
        "number":  57803,
        "author":  "mikekistler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-22T18:01:31Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nThe `MapIdentityAPIs` extension method added in .NET 8 gives users an easy way to add APIs for ASP.NET Identity to their app. However, these APIs lack certain metadata to describe their functionality and features in a generated OpenAPI document. In particular\r\n- endpoints do not have a summary or description\r\n- request body properties do not have descriptions or validation information (e.g. allowed characters, min/max length for strings, formats such as email)\r\n- response body properties do not have descriptions\r\n\r\nLack of this metadata makes the APIs hard to consume both for humans and tooling such as AI-powered test generation tooling or GPT plugins.\n\n### Describe the solution you\u0027d like\n\nIdentityAPI endpoints should include\r\n- summary or description on all endpoints\r\n- description on all request body properties\r\n- validation attributes on request body properties where appropriate\r\n- description on all response body properties\n\n### Additional context\n\nLack of API metadata is more important now that ASP.NET has added support for generation of OpenAPI documents in .NET 8.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Add metadata to the endpoints created by the MapIdentityAPI extension method.",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "feature-identity-apis"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/57806",
        "createdAt":  "2024-09-11T16:57:53Z",
        "number":  57806,
        "author":  "mikekistler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8otHw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "diegosasw",
                                            "createdAt":  "2024-10-26T13:37:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "unchartedshark",
                                            "createdAt":  "2024-11-14T00:59:57Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-08-22T18:01:32Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nAn application that uses the new `MapIdentityApis` extension method in .NET 8 is adding ASP.NET Identity as an AuthN/AuthZ scheme in their application. But this auth scheme is not reflected in OpenAPI documented generated by the (new) built-in ASP.NET OpenAPI document generation feature. Some users will want to see this information reflected in the OpenAPI doc for their application.\n\n### Describe the solution you\u0027d like\n\nThe `MapIdentityApis` extension method should either automatically add the appropriate security schemes and security requirements metadata or provide a simple means to add this optionally.\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Add securitySchemes and security requirements for endpoints created by MapIdentityApis",
        "labels":  [
                       "enhancement",
                       "area-identity",
                       "feature-identity-apis"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/57856",
        "createdAt":  "2024-09-13T12:07:07Z",
        "number":  57856,
        "author":  "Ben555555",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-22T18:00:57Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI\u0027m using AutoSaveChanges = false on a custom UserStore implementation. Unfortunately, when I call multiple methods of UserManager which internally call \"UpdateUserAsync(user)\" I get a DbUpdateConcurrencyException. I took me a lot of time to figure out when this happens exactly. Is it possible that the UpdateUserAsync implementation attaches the same UserEntity multiple times? If so, can this be fixed please?\n\n### Expected Behavior\n\nNo DbUpdateConcurrencyException.\n\n### Steps To Reproduce\n\nvar userEntity = dbContext.Users.First();\r\n\r\nawait userManager.UpdateAsync(userEntity);\r\n\r\nawait userManager.RemoveAuthenticationTokenAsync(user, \"provider\", \"tokenname\");\r\n\r\nawait dbContext.SaveChangesAsync(cancellationToken);\n\n### Exceptions (if any)\n\nMicrosoft.EntityFrameworkCore.DbUpdateConcurrencyException: The database operation was expected to affect 1 row(s), but actually affected 0 row(s); data may have been modified or deleted since entities were loaded. See https://go.microsoft.com/fwlink/?LinkId=527962 for information on understanding and handling optimistic concurrency exceptions.\r\n   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ThrowAggregateUpdateConcurrencyExceptionAsync(RelationalDataReader reader, Int32 commandIndex, Int32 expectedRowsAffected, Int32 rowsAffected, CancellationToken cancellationToken)\r\n\n\n### .NET Version\n\n8\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjGgutw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86MQQWj",
                                           "createdAt":  "2024-09-16T14:21:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marcominerva",
                                           "body":  "Could it be related to https://github.com/dotnet/aspnetcore/issues/18407?",
                                           "updatedAt":  "2024-09-16T14:21:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86MaC63",
                                           "createdAt":  "2024-09-17T12:40:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ben555555",
                                           "body":  "@marcominerva It might be the same issue yes. I figured out in the meantime that the code of the UserStore is a bit problematic.\r\n\r\nhttps://github.com/aspnet/Identity/blob/8003a5550e7c9b02de035de04b0758f898d8237f/src/EF/UserStore.cs#L185\r\n\r\nI had to make a custom implementation like this:\r\n\r\n```\r\npublic class CustomUserStore : UserStore\u003cUserEntity, IdentityRole\u003cGuid\u003e, MyDbContext, Guid\u003e\r\n{\r\n    public CustomUserStore(MyDbContext context)\r\n        : base(context)\r\n    {\r\n        // Do not auto save changes (e.g. UserManager.Create), we want to handle this manually\r\n        // to ensure that changes are saved in one transaction\r\n        AutoSaveChanges = false;\r\n    }\r\n\r\n    /// \u003cinheritdoc /\u003e\r\n    public override async Task\u003cIdentityResult\u003e UpdateAsync(UserEntity user, CancellationToken cancellationToken = default(CancellationToken))\r\n    {\r\n        cancellationToken.ThrowIfCancellationRequested();\r\n        ThrowIfDisposed();\r\n        ArgumentNullException.ThrowIfNull(user);\r\n\r\n        // Do not attach multiple times causing DbUpdateConcurrencyException\r\n        var entry = Context.Entry(user);\r\n        if (entry.State == EntityState.Detached)\r\n        {\r\n            Context.Attach(user);\r\n        }\r\n            \r\n        user.ConcurrencyStamp = Guid.NewGuid().ToString();\r\n\r\n        // Do not call Update because this can set the state Added to Modified resulting in an error\r\n        // Context.Update(user);\r\n\r\n        try\r\n        {\r\n            await SaveChanges(cancellationToken);\r\n        }\r\n        catch (DbUpdateConcurrencyException)\r\n        {\r\n            return IdentityResult.Failed(ErrorDescriber.ConcurrencyFailure());\r\n        }\r\n        return IdentityResult.Success;\r\n    }\r\n}\r\n```\r\n\r\nDbContext.Attach is called every time, which is not necessary when an entity is already tracked. Also an entity can be added in the same unit of work when Update is executed as well. Currently everytime DbContext.Update is executed which sets the entity\u0027s state to \"Modified\", BUT it could still be \"Added\" when the changes have not been saved yet.",
                                           "updatedAt":  "2024-09-17T12:46:56Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "DbUpdateConcurrencyException when using AutoSaveChanges",
        "labels":  [
                       "investigate",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/57899",
        "createdAt":  "2024-09-16T18:41:45Z",
        "number":  57899,
        "author":  "KMastalerz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-t5kg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "los93sol",
                                            "createdAt":  "2024-09-16T19:06:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jhossy",
                                            "createdAt":  "2024-12-23T20:01:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "paulirwin",
                                            "createdAt":  "2025-02-03T14:42:27Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-09-26T16:42:11Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI\u0027ve been searching for documentation and solutions, but I couldn\u0027t find anything from Microsoft regarding hiding or disabling specific ASP.NET Core Identity endpoints. My use case is as follows:\r\n\r\nHide Default Identity Endpoints: I would like to use my own custom registration process and prevent exposure of the default Identity registration endpoint. While I know that I can override or replace these endpoints by creating extensions, I’m wondering if there is a built-in way to disable or hide specific Identity endpoints without manual intervention.\r\n\r\n`SignInManager` and Bearer Token Support: I am also considering creating a custom login flow using `SignInManager`. However, I have noticed that `SignInManager` does not support generating and returning bearer tokens. It requires manual token generation and additional configuration for authentication, which can be cumbersome and this is tomething I wanted to avoid.\r\n\r\nIt would be useful if `SignInManager` could optionally return bearer tokens directly upon successful login, avoiding the need for developers to handle token generation and authentication configuration separately. This would simplify development in cases where we want to use ASP.NET Core Identity but prefer not to handle token generation ourselves. But also would not limit us, to create out own Tokens when we do not want to. \n\n### Describe the solution you\u0027d like\n\nProvide a way to hide or disable specific ASP.NET Core Identity endpoints, such as registration, login, etc., either through configuration or built-in mechanisms.\r\n\r\nAdd support for returning bearer tokens directly via SignInManager without requiring manual token generation and configuration.\n\n### Additional context\n\nI want to Login with phone/email/login but also other thru other contexts, like customed ID, although this one is for desktop app. This is due to how original application had worked. \r\n\r\nIm creating my own Registration endpoint, since I want more details to be required on registration. Including my own User table fields. \r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjPmuDw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86MdFNZ",
                                           "createdAt":  "2024-09-17T16:49:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "The ability to map identity endpoints separately is tracked by https://github.com/dotnet/aspnetcore/issues/55792.\r\n\r\n`SignInManager` does support generating Bearer tokens - see https://learn.microsoft.com/aspnet/core/security/authentication/identity-api-authorization#use-token-based-authentication.\r\n\r\nDoes this meet your needs? If not, could you elaborate on what additional requirements you have?",
                                           "updatedAt":  "2024-09-17T16:49:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86M-a4P",
                                           "createdAt":  "2024-09-21T12:42:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KMastalerz",
                                           "body":  "It\u0027s not really what i need. \r\n\r\nYes i can map them separately, and i do that in form of extension, althouth i find it not clean at all. \r\n\r\nBut the biggest issue is `AccessTokenResponse`, what id like to be able to do, is to return `CustomAccessTokenResponse`, so my predefined object, which contains more infromation than standard `AccessTokenResponse`. \r\n\r\nRight now it\u0027s possible, but i would have to also handle generation and Authentication of tokens myself. But id like to use `signInManager` to do so. \r\n\r\nSo for example I want to implement my own login, as login by email which is name is confusing and not sufficient.  \r\n\r\nId like to do somthing in lines of: \r\n\r\n```\r\nvar user = await usermanager.findbyemailasync(login.email) ??\r\n\tawait usermanager.findbynameasync(login.email) ?? \r\n\tthrow new notfoundexception(nameof(user), login.email);\r\n\r\nvar result = await signInManager.PasswordSignInAsync(user, login.Password, isPersistent, lockoutOnFailure: true);\r\n\r\n```\r\n\r\nThe other issue even if this would be resolver is fact that there are other entities that allow login in my app. And support for this has to maintained but i styll can narrow down `user` so `PasswordSignInAsync` would suffice.  \r\n\r\nLast but not least I\u0027d like to return a different object from login and not have to make two separete HTTP Requests for them. \r\n\r\nFor instance, this is current response format: \r\n\r\n```\r\n{\r\n  \"tokenType\": \"string\",\r\n  \"accessToken\": \"string\",\r\n  \"expiresIn\": 0, \r\n  \"refreshToken\": \"string\"\r\n}\r\n```\r\n\r\nId like to return for isntance: \r\n\r\n```\r\n{\r\n  \"tokenType\": \"string\",\r\n  \"accessToken\": \"string\",\r\n  \"expiresIn\": 0, \r\n  \"refreshToken\": \"string\",\r\n  \"encryptionKey\": \"string\", // needed to encrypt cookie/session and local storage\r\n  \"userRole\": \"string\" // main role for the user which is used for routes\r\n}\r\n```\r\n\r\nThe problem is that `signInManager` at `PasswordSignInAsync` is laready producing response. Id like to mitigate that behaviour and return tokens instead to result from calling the `PasswordSignInAsync`. Which would allow me to return custome response. But, in addition to that I would love to also maintain functionality, where I do not have to configure `builder.Services.AddAuthentication();`. \r\n\r\n",
                                           "updatedAt":  "2024-09-21T13:05:57Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Feature Request: Hide or Disable Specific ASP.NET Core Identity Endpoints and Return Bearer Tokens via SignInManager",
        "labels":  [
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/58793",
        "createdAt":  "2024-11-05T07:52:47Z",
        "number":  58793,
        "author":  "pmaytak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODDQkJQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "boukenka",
                                            "createdAt":  "2025-06-04T11:01:31Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-05-02T13:47:40Z",
        "body":  "## Background and Motivation\n\n.NET 4.5 introduced [`ClaimsIdentity`](https://learn.microsoft.com/en-us/dotnet/api/system.security.claims.claimsidentity?view=net-8.0), [`ClaimsPrincipal`](https://learn.microsoft.com/en-us/dotnet/api/system.security.claims.claimsprincipal?view=net-8.0), and [`Claim`](https://learn.microsoft.com/en-us/dotnet/api/system.security.claims.claim?view=net-8.0) as a standard way to represent the claims in a [`SecurityToken`](https://learn.microsoft.com/en-us/dotnet/api/system.identitymodel.tokens.securitytoken?view=net-8.0). Since then there are performance and consistency improvements that can be made.\n\nASP.NET Core uses Microsoft.IdentityModel.* 7.x packages. In this version, when IdentityModel reads an incoming token, it parses it into a [`JsonWebToken`](https://learn.microsoft.com/en-us/dotnet/api/microsoft.identitymodel.jsonwebtokens.jsonwebtoken?view=msal-web-dotnet-latest) instance and the claims are stored in a dictionary. The [`JsonWebToken.Claims`](https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/96b6b365dc468b4068d798181b0c514a1aa15f3f/src/Microsoft.IdentityModel.JsonWebTokens/JsonWebToken.cs#L604) collection is lazily created by [iterating through that dictionary](https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/96b6b365dc468b4068d798181b0c514a1aa15f3f/src/Microsoft.IdentityModel.JsonWebTokens/Json/JsonClaimSet.cs#L39) and creating and adding a new `Claim` instance for each claim value. When `ClaimsIdentity` is requested and IdentityModel creates one, [it iterates through a collection of JsonWebToken.Claims](https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/96b6b365dc468b4068d798181b0c514a1aa15f3f/src/Microsoft.IdentityModel.JsonWebTokens/JsonWebTokenHandler.cs#L280), creates a new `Claim`, and adds it to an instance of `ClaimsIdentity` to be returned. When `ClaimsIdentity` methods like `HasClaim` and `FindFirst` are called, they operate on the [`IEnumerable\u003cClaim\u003e`](https://learn.microsoft.com/en-us/dotnet/api/system.security.claims.claimsidentity.claims?view=net-8.0#system-security-claims-claimsidentity-claims) in that `ClaimsIdentity` instance. The full `Claim` collection is created even if only one claim is needed. Methods like `HasClaim` have to iterate through the whole `Claim` collection.\n\n## Proposed API\n\nIdentityModel introduces a new type, `SecurityTokenClaimsIdentity`, which will derive from `ClaimsIdentity`. When ASP.NET uses IdentityModel an instance of this new type will be returned. `SecurityTokenClaimsIdentity` holds a backing instance of `JsonWebToken` (it\u0027s of more general type `SecurityToken`, but currently only `JsonWebToken` supported). Operations like `HasClaim` and `FindFirst` will now look in the claims dictionary. `Claim` collection will be generated only when all claims are requested and only once. \n\n[This PR](https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/pull/2858) shows initial in-progress proposal. The [initial performance results](https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/pull/2858#issuecomment-2410334031) show ~65% reduction in latency and ~40% reduction in allocations for `FindFirst` and `HasClaim`. \n\nThis change does mean that the `ClaimsIdentity` is now case-sensitive. IdentityModel 8 already [introduced `CaseSensitiveClaimsIdentity`](https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/releases/tag/8.0.0) and uses it by default. The goal is for the behavior of `SecurityTokenClaimsIdentity` operations to match the behavior of `ClaimsIdentity` (except the case-sensitivity).\n\nOnce `SecurityTokenClaimsIdentity` is generally available, ASP.NET can upgrade the IdentityModel package and use that type internally. IdentityModel will provide a flag to enable or disable the use of this new type by default.\n\nASP.NET can also expose a flag, like` UseSecurityTokenClaimsIdentity` in an options class like `JwtBearerOptions`, `OpenIdConnectOptions`.\n\n## Usage Examples\n\nASP.NET can still use `ClaimsIdentity` as a return type in methods, only the implementation and case sensitive behavior will change as stated above. The users can use the new ASP.NET version without any changes in their code.\n\n## Alternative Designs\n\nASP.NET can make this new `ClaimsIdentity` behavior opt-in and expose an options flag to enable it.\n\n## Risks\n\n- The new `ClaimsIdentity` type will be case-sensitive, which is a breaking change.\n- `JsonWebToken` doesn\u0027t support adding and removing claims; `ClaimsIdentity` does. Also for these operations, `ClaimsIdentity` does a comparison by `Claim` reference while `JsonWebToken` compares by claim type and claim value. Work will need to be done to make sure `SecurityTokenClaimsIdentity` behavior is on par with `ClaimsIdentity` in these cases.\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqbWphQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86Sc7qg",
                                           "createdAt":  "2024-11-05T12:36:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOENZRLw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jennyf19",
                                                                               "createdAt":  "2024-11-05T16:58:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "keegan-caruso",
                                                                               "createdAt":  "2024-11-05T17:24:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kllysng",
                                                                               "createdAt":  "2024-11-05T17:25:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "brentschmaltz",
                                                                               "createdAt":  "2024-11-05T17:27:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pmaytak",
                                                                               "createdAt":  "2024-11-05T18:07:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kaayo",
                                                                               "createdAt":  "2025-04-08T19:31:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "javiercn",
                                           "body":  "@pmaytak thanks for letting us know.\n\nIn general, if IdentityModel provides a better implementation we will likely adopt it provided there are no drawbacks.",
                                           "updatedAt":  "2024-11-05T12:36:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86mnD2e",
                                           "createdAt":  "2025-04-10T22:00:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "@pmaytak, does `Microsoft.IdentityModel` still plan to add the new `SecurityTokenClaimsIdentity` type?",
                                           "updatedAt":  "2025-04-10T22:00:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86n4Vyf",
                                           "createdAt":  "2025-04-19T06:16:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pmaytak",
                                           "body":  "\u003e [@pmaytak](https://github.com/pmaytak), does `Microsoft.IdentityModel` still plan to add the new `SecurityTokenClaimsIdentity` type?\n\nThat work is postponed for now.",
                                           "updatedAt":  "2025-04-19T06:16:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86ptamF",
                                           "createdAt":  "2025-05-02T13:47:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikekistler",
                                           "body":  "Removing this feature from the .NET 10 milestone because dependent features have been postponed.",
                                           "updatedAt":  "2025-05-02T13:47:29Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Improve performance of ClaimsIdentity",
        "labels":  [
                       "Perf",
                       "area-identity",
                       "api-suggestion"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/58966",
        "createdAt":  "2024-11-14T23:49:31Z",
        "number":  58966,
        "author":  "SoftCircuits",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-11-19T00:03:52Z",
        "body":  "I need a way to lock out a user. Not from too many login attempts. But because I want to deny them access to the site without deleting their account.\n\nI\u0027ve found you can set `LockoutEnd` to a date and time in the future, and that user will not be able to log in. However, by default, users don\u0027t need to log in every time they go to the site. The site remembers their login for something like 30 days. So they would be able to continue using the site for up to 30 days!\n\nIs there any way to lock them out immediately?\n\nIs there any way this sort of feature could be baked in? Does this require me to write my own middleware? If so, has anyone done this already?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlBVOYg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86UCuUJ",
                                           "createdAt":  "2024-11-18T17:57:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danroth27",
                                           "body":  "There isn\u0027t currently a convenient built-in way to do this. You could invalidate the security stamp and then check for that in a cookie authentication event. We can consider making this easier in the future.",
                                           "updatedAt":  "2024-11-18T17:57:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86UDZgQ",
                                           "createdAt":  "2024-11-18T19:25:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SoftCircuits",
                                           "body":  "@danroth27 Thanks for the reply. Unfortunately, this isn\u0027t an area I\u0027m that familiar with. I don\u0027t suppose you\u0027d have a link showing your suggestion in more detail?",
                                           "updatedAt":  "2024-11-18T19:25:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86UFP7M",
                                           "createdAt":  "2024-11-18T23:46:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "\u003e The site remembers their login for something like 30 days. So they would be able to continue using the site for up to 30 days!\n\nThe default value for `CookieAuthenticationOptions.ExpireTimeSpan` is 14 days, and `SlidingExpiration` is `true` by default, so someone might stay signed indefinitely without reentering their password as long as they refresh their cookie at least once every two weeks. These defaults can be overridden though. So, depending on your needs, if you just need to lock someone out withing a day for example, you could do something like the following:\n\n```csharp\nbuilder.Services.ConfigureApplicationCookie(cookieAuthOptions =\u003e\n{\n    cookieAuthOptions.ExpireTimeSpan = TimeSpan.FromHours(24);\n    cookieAuthOptions.SlidingExpiration = false;\n});\n```\nhttps://learn.microsoft.com/en-us/aspnet/core/security/authentication/cookie?view=aspnetcore-9.0\nhttps://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.authentication.cookies.cookieauthenticationoptions?view=aspnetcore-9.0\n\n\nSomewhat orthogonally, you can also limit the cookie to persist just for the duration of the current browser session (which can last an arbitrarily long time, so don\u0027t treat this as a replacement for expiration), you can use `isPersistent: false` for your call to `SignInManager\u003cTUser\u003e.PasswordSignInAsync(TUser user, string password, bool isPersistent, bool lockoutOnFailure)`\n\n```csharp\nvar result = await _signInManager.PasswordSignInAsync(Input.Email, Input.Password, isPersistent: false, lockoutOnFailure: true);\n```\n\nhttps://learn.microsoft.com/en-us/aspnet/core/security/authentication/identity?view=aspnetcore-9.0\u0026tabs=visual-studio#log-in\n\nOf course, this would force everyone to log in every 24 hours or every new browser session (whichever comes first if you do both) even if they\u0027re not locked out. You might also want to lock people out immediately or at least with less than a 24-hour delay. It\u0027s more complicated, but this is where Identity\u0027s security stamp feature is helpful. It\u0027s basically a random value that\u0027s stored inside the cookie and the database that has to match for the user to authenticate. So, after you update `LockoutEnd`, you can call `UserManager\u003cTUser\u003e.UpdateSecurityStampAsync(TUser user)` and the given user will be forced to attempt to sign in again (which will of course now fail due to the lockout) as soon as the `SecurityStampValidatorOptions.ValidationInterval` elapses which defaults to only 30 minutes.\n\nIf you need to reduce to `ValidationInterval`, I recommend not going below one minute, but you can lower the `ValidationInterval` all the way to `TimeSpan.Zero` if you desire. Just beware that setting the validation interval to zero can have a significant perf impact since it forces an extra database query for every single request that needs to validate the cookie.\n\nhttps://learn.microsoft.com/en-us/aspnet/core/security/authentication/identity-configuration?view=aspnetcore-9.0#isecuritystampvalidator-and-signout-everywhere\nhttps://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.identity.securitystampvalidatoroptions?view=aspnetcore-9.0\nhttps://dotnetdocs.ir/Post/31/invalid-cookies-after-changing-users-passwords\n\nhttps://github.com/dotnet/aspnetcore/issues/32318#issuecomment-830796758 explains why we don\u0027t call `UpdateSecurityStampAsync` automatically inside of `SetLockoutEndDateAsync`. Basically, it\u0027d be an easy denial of service attack vector. But if you\u0027re setting a lockout for some reason other than failed access attempts or anything else that could be triggered by an anonymous attacker, it could be reasonable to manually update the security stamp manually after setting up the lockout in order to force close active sessions.",
                                           "updatedAt":  "2024-11-18T23:58:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86UFU5i",
                                           "createdAt":  "2024-11-19T00:03:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SoftCircuits",
                                           "body":  "@halter73 Wow! Greatly appreciated. Thanks!",
                                           "updatedAt":  "2024-11-19T00:03:51Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Is there any way to lock out a user? Could this be added?",
        "labels":  [
                       "enhancement",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/59216",
        "createdAt":  "2024-11-29T09:19:39Z",
        "number":  59216,
        "author":  "Rita003",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-02T17:25:05Z",
        "body":  "**INSTALL STEPS**\n1. Clean machine: Mac OS\n2. Install SDK 8.0.404\n\n**REPRO STEPS**\n1. Create a MVC InAuth project in CLI\n```\ndotnet new mvc --auth individual -o MVC1\ncd MVC1\n```\n2. Run the project with https in CMD, and open URL in the Safari browser\n`dotnet run -lp https`\n3. Register and login account in the web page, close the browser and stop debug\n4. Run the project with http in CMD, and open URL in the Safari browser\n`dotnet run`\n5. Register and login account in the web page\n\n**Note:**\n1. This issue only repro on Safari browser, this issue not repro on Edge browser.\n\n**ACTUAL**\nIt can\u0027t register and login account\n![Image](https://github.com/user-attachments/assets/a041f0d3-8e88-4c3c-92c8-99e08017622c)\n\n**Workaround**\n1. Open Safari Settings \u003e Click \"Manage Website Data\" in privacy page \u003e Click \"Remove All\" to clear the localhost cookie history, then register and login account again",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "After running the project with https and logging in to the account, stop and run the project again with http, unable to log into account in Safari browser on Mac OS.",
        "labels":  [
                       "investigate",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/59233",
        "createdAt":  "2024-11-30T12:39:55Z",
        "number":  59233,
        "author":  "rhysgodfrey",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-15T14:58:33Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nThe latest 8.x release of Microsoft.AspNetCore.Identity.UI (8.0.11) has a dependecy on jquery-validate 1.19.5.\n\nNewer versions of jquery-validate have a security fix (https://github.com/jquery-validation/jquery-validation/pull/2462).\n\nThe 9.x version has been updated to have the latest version https://github.com/dotnet/aspnetcore/pull/57863.\n\nIs a backport of these updates to 8.x planned?\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n_No response_\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxEGVNA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86WGOy6",
                                           "createdAt":  "2024-12-04T18:26:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "Thanks for reaching out, @rhysgodfrey.\n\nIs there a CVE for this? I wasn\u0027t able to find one. If it\u0027s high severity, we\u0027re likely to backport the dependency update.",
                                           "updatedAt":  "2024-12-04T18:26:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86Wao2Z",
                                           "createdAt":  "2024-12-06T15:57:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rhysgodfrey",
                                           "body":  "Hi @MackinnonBuck ,\n\nI can\u0027t find a CVE either, we\u0027ve checked with our pen testers who also don\u0027t have a CVE for this, but one of their tools flagged it as an issue as the version in use has a potential XSS vulnerability in the showLabel method, which was fixed in version 1.20.0. The only info we have is the issue in the jquery-validate repository (https://github.com/jquery-validation/jquery-validation/pull/2462). ",
                                           "updatedAt":  "2024-12-06T15:57:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86o9bTJ",
                                           "createdAt":  "2025-04-28T09:57:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mzros",
                                           "body":  "Hi @MackinnonBuck ,\n\nwe also received a notice of our external pentesters regarding this vulnerability.\n\nThey provided us with the following additional infos:\n[https://security.snyk.io/package/npm/jquery-validation/1.19.5](https://security.snyk.io/package/npm/jquery-validation/1.19.5)\nwhich points to [CVE-2025-3573](https://www.cve.org/CVERecord?id=CVE-2025-3573)\n\nCan this be fixed or is there a known workaround except upgrading to .NET 9?",
                                           "updatedAt":  "2025-04-28T09:57:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87EQZU0",
                                           "createdAt":  "2025-09-15T14:58:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RichElse",
                                           "body":  "Hi @MackinnonBuck \n\nAny progress on this Issue? We are just approaching Pen Test Season! 🎯",
                                           "updatedAt":  "2025-09-15T14:58:33Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "jquery-validate dependency out of date in 8.x for Microsoft.AspNetCore.Identity.UI",
        "labels":  [
                       "area-identity",
                       "feature-identity-ui",
                       "Needs: Attention :wave:"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/60181",
        "createdAt":  "2025-02-03T20:58:57Z",
        "number":  60181,
        "author":  "bgi-jerry-king",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-12T18:43:34Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nWhen using ASP.NET Identity, under certain conditions, the method `UserManager.AccessFailedAsync()` fails with an overflow exception if the `DefaultLockoutTimeSpan` is too large.\n\nAn example scenario of where this may occur is, when a call is made to `SignInManager\u003cTIdentityUser\u003e.TwoFactorySignInAsync()` that results in a failed MFA sign-in, the method `UserManager.AccessFailedAsync()` will be called.\n\nThe problem is this line:\n```csharp\nawait store.SetLockoutEndDateAsync(user, DateTimeOffset.UtcNow.Add(Options.Lockout.DefaultLockoutTimeSpan),\n    CancellationToken).ConfigureAwait(false);\n```\n\nThe use-case here is that, the `DefaultLockoutTimeSpan` was being set to `TimeSpan.MaxValue` as a way to basically enforce lockouts are not automatically removed as a way to lock an account for investigation of suspicious activity for certain operations - such as entering many invalid MFA codes over and over again.\n\n### Expected Behavior\n\nI think this should be more forgiving or have a way to set an indefinite lockout timespan. The only alternative currently available is setting to something large, but arbitrary, such as `TimeSpan.FromDays(50000)` which just looks worse - if you see 12/31/9999 as an end date, you have an idea that it\u0027s basically forever, but if you see 2/4/4737, for example, it doesn\u0027t mean anything.\n\nSo in UserManager either update the call to something like this:\n\n```csharp\nvar now = DateTimeOffset.UtcNow;\nDateTimeOffset lockoutEnd = now \u003e DateTimeOffset.MaxValue - Options.Lockout.DefaultLockoutTimeSpan? DateTimeOffset.MaxValue : now.Add(Options.Lockout.DefaultLockoutTimeSpan);\n\nawait store.SetLockoutEndDateAsync(user, lockoutEnd,CancellationToken).ConfigureAwait(false);\n```\n\nOr a new option added to specify an endless lockout.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n.NET 9\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnjlj7g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86eOSe9",
                                           "createdAt":  "2025-02-12T18:35:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Looks like this issue has been identified as a candidate for community contribution. If you\u0027re considering sending a PR for this issue, look for the `Summary Comment` link in the issue description. That comment has been left by an engineer on our team to help you get started with handling this issue. You can learn more about our Help Wanted process [here](https://aka.ms/aspnet/processes/help-wanted)\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-12T18:35:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86eOS3u",
                                           "createdAt":  "2025-02-12T18:36:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGJ0Yw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bgi-jerry-king",
                                                                               "createdAt":  "2025-02-12T18:40:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mikekistler",
                                           "body":  "The proposal to add an option for permanent lockout seems like the better choice.",
                                           "updatedAt":  "2025-02-12T18:36:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86eOWPu",
                                           "createdAt":  "2025-02-12T18:43:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOER8DPA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ngyyuusora",
                                                                               "createdAt":  "2025-05-13T14:50:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "bgi-jerry-king",
                                           "body":  "\u003e The proposal to add an option for permanent lockout seems like the better choice.\n\nI don\u0027t disagree that that wouod be morr clear, but that still leaves the door open for unexpected runtime overflow exceptions of someone does happen to specify a large `DefaultLockoutTimeSpan`. \n\nI feel as though _both_ changes probably should be made.",
                                           "updatedAt":  "2025-02-12T18:43:32Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "UserManager.AccessFailedAsync results in overflow if DefaultLockoutTimeSpan is too large",
        "labels":  [
                       "help wanted",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/60195",
        "createdAt":  "2025-02-04T18:23:10Z",
        "number":  60195,
        "author":  "JJong-nl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-26T18:11:31Z",
        "body":  "The `IdentityApiEndpointRouteBuilderExtensions` should never create a ConfirmationLink but must be dealing with codes only.\n\nWhen we see the implementation of `IEmailSender\u003cTUser\u003e`\nWe see `SendConfirmationLinkAsync`, `SendPasswordResetCodeAsync` and `SendPasswordResetLinkAsync`\n\nHere the `SendPasswordResetLinkAsync` and the `SendConfirmationLinkAsync` should be removed and a `SendConfirmationCodeAsync` should be added.\n\nThe `SendPasswordResetCodeAsync` is used in the ApiEndpoint but `SendPasswordResetLinkAsync` is never used in the Api.\nOnly in the UI implementation.\n\nWhen we want to generate a link instead of using the code, we should generating the link inside the `IEmailSender\u003cTUser\u003e` implementation.\n\nSo only `SendConfirmationCodeAsync` and `SendPasswordResetCodeAsync` sould be sufficient in the `IEmailSender\u003cTUser\u003e` interface\n\n**IdentityApiEndpointRouteBuilderExtensions.cs**\nhttps://github.com/dotnet/aspnetcore/blob/65f485e825c60908e1c6496dd59b981a54d2ab0e/src/Identity/Core/src/IdentityApiEndpointRouteBuilderExtensions.cs#L214-L217\n\n**ForgotPassword.cshtml.cs**\nhttps://github.com/dotnet/aspnetcore/blob/65f485e825c60908e1c6496dd59b981a54d2ab0e/src/Identity/UI/src/Areas/Identity/Pages/V5/Account/ForgotPassword.cshtml.cs#L75-L83\n\nThe ForgotPassword.cshtml.cs should also be using the `SendPasswordResetCodeAsync` inside the implementation of the emailsender we sould generate the callbackUrl.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOn9fMqw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86dI3Lg",
                                           "createdAt":  "2025-02-05T10:32:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JJong-nl",
                                           "body":  "Maybe,\nRename the `IEmailSender\u003cTUser\u003e` to the following\n\n```\npublic interface IIdentityCoreEventHandler\u003cTUser\u003e where TUser : class\n{\n    Task UserLogedInAsync(TUser user);\n    Task UserLogedOutAsync(TUser user);\n    Task EmailConfirmedAsync(TUser user);\n    Task EmailChangedAsync(TUser user, string oldEmail, string newEmail);\n    Task PasswordChangedAsync(TUser user, string oldPassword, string newPassword);\n    Task EmailChangedAsync(TUser user, string oldEmail, string newEmail);\n    Task SendConfirmationCodeAsync(TUser user, string email, string confirmationCode);\n    Task SendPasswordResetCodeAsync(TUser user, string email, string resetCode);\n    . . .\n}\n```",
                                           "updatedAt":  "2025-02-05T10:32:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86fHBu0",
                                           "createdAt":  "2025-02-19T18:15:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "Thanks for reaching out.\n\nCould you please clarify what the motivation behind this change is? What\u0027s your exact scenario? Is the purpose of this API just to create more consistency?",
                                           "updatedAt":  "2025-02-19T18:15:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86f18yr",
                                           "createdAt":  "2025-02-25T11:58:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JJong-nl",
                                           "body":  "In my first two comment i pull out two isseus.\n1) The confirmation url endpoint should not be created in the IdentityApiEndpointRouteBuilderExtensions \u0027and\u0027 not go to the API endpoint.\n2) More intercepters on \u0027every\u0027 outcoming of the API that can be handled with an IIdentityCoreEventHandler\u003cTUser\u003e (instead of two handlers in the IEmailSender\u003cTUser\u003e)\n\nFirst explaining the first issue.\nWhen we host a application on domain A and the API is hosted on domain B.\nThe application \u0027can\u0027 access the API serverside, and the API has non-public access.\n\nTherefore the user does only interact with domain A.\nThe problem here is that the API is creating a direct link to domain B.\n\nWhen we see the /forgotPassword `SendPasswordResetCodeAsync` only a code is returned.\nThe developer has to know the api endpoint of the /resetPassword and send this from domain A to the API on domain B.\n\nThis should also be the solution for the confirmation.\nThe /register and /resendConfirmationEmail endpoints should only call the emailSender with the code, not the url of the confirmation.\nThan withing the logic of the emailSender the confirmation url can be constructed this can be a link to domain A with querystring, and domain A has the knowledge what to do with it. (construct and call confirmation endpoint on domain B)\n\nSecond: more eventhandlers for every scenarion of the API. (success and failure)\nWith this approach the developer has total freedom to do what he fits best in every scenario.\nThis will also replace the `IEmailSender\u003cTuser\u003e` to for example `IIdentityCoreEventHandler\u003cTUser\u003e`\nFor example when there are 3 failed login attempts for a single user (`UserLoginFailedAsync`), the user can be notified with an email. \nOr when a user is requesting to change his email, also a notification to his \u0027old\u0027 emailadress can be send.\nOr when a success login is called extra checks can be inplemented. (new login on a machine? user can be notified)\n```\npublic interface IIdentityCoreEventHandler\u003cTUser\u003e where TUser : class\n{\n    Task UserLogedInAsync(TUser user);\n    Task UserLoginFailedAsync(string email, SignInResult result);\n    Task UserLogedOutAsync(TUser user);\n    Task EmailConfirmedAsync(TUser user);\n    Task EmailChangedAsync(TUser user, string oldEmail, string newEmail);\n    Task PasswordChangedAsync(TUser user, string oldPassword, string newPassword);\n    Task SendConfirmationCodeAsync(TUser user, string email, string confirmationCode);\n    Task SendPasswordResetCodeAsync(TUser user, string email, string resetCode);\n    . . .\n    . . .\n}\n```",
                                           "updatedAt":  "2025-02-25T12:05:13Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "IdentityApiEndpointRouteBuilderExtensions should not create the ConfirmationLink",
        "labels":  [
                       "enhancement",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/60252",
        "createdAt":  "2025-02-07T09:00:42Z",
        "number":  60252,
        "author":  "equist",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-26T14:41:30Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nWe have made an override of UpdatePasswordHash, but it turns out it is only invoked by ResetPasswordAsync. For all other operations (CreateAsync, AddPasswordAsync, CheckPasswordAsync, RemovePasswordAsync) the private implementation with a password store is invoked. From an API perspective this is a very strange behavior since we had expected all updates of password hashes to use our override.\n\nOur end goal was actually to extend the ValidatePasswordAsync method but it isn\u0027t virtual.\n\n### Expected Behavior\n\nThe protected virtual UpdatePasswordHash should be called so the customized logic is used for all operations and not only one. All operations should behave in the same way.\n\n### Steps To Reproduce\n\nMake a custom UserManager class that derives from the built-in. Override the UpdatePasswordHash method and add some custom logic. This logic will only be invoked when resetting passwords and never in any other situation.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n.NET 6, 7, 8 and 9\n\n### Anything else?\n\nSomewhat related to https://github.com/dotnet/aspnetcore/issues/12344",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrXKdNg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86fHF-E",
                                           "createdAt":  "2025-02-19T18:23:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "@equist Could you clarify what you\u0027re trying to do in `UpdatePasswordHash`? Would it work to use an `IPasswordHasher`?",
                                           "updatedAt":  "2025-02-19T18:23:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86fHPaq",
                                           "createdAt":  "2025-02-19T18:42:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "equist",
                                           "body":  "@MackinnonBuck we override UpdatePasswordHash because we have to do a new implementation of ValidatePasswordAsync, which isn\u0027t virtual, so to make sure that our custom validation method is used we needed to override UpdatePasswordHash too.\n\nValidatePasswordAsync is overriden because we have validators for breached passwords (could be more than one), but we also have some special handling around how we handle errors (special error code for breached passwords) from our breach validators depending on configuration.\n\nFrom an API perspective, I would argue that it is impossible to understand that a virtual method (UpdatePasswordHash) is just called from 1 of 5 (don\u0027t remember the exact number) places. As current implementation allows to override the actual behavior it shouldn\u0027t be virtual or it should always be used.",
                                           "updatedAt":  "2025-02-19T18:42:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86ffN0h",
                                           "createdAt":  "2025-02-21T22:38:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "I did some digging, and it appears that the intention behind making UpdatePasswordHash protected was to allow calling it from other overridden methods like CreateAsync, AddPasswordAsync, CheckPasswordAsync, RemovePasswordAsync. It appears that no real thought was put into whether it actually needed to be virtual or where it should be called given that it is. See https://github.com/aspnet/Identity/pull/1028 for context. \n\nIt\u0027s annoying, because making the change now to call it in more places theoretically could break existing applications that weren\u0027t expecting the overridden to be called from the new places. However, I doubt many people are actually overiding UpdatePasswordHash today given all the places it isn\u0027t called, so I\u0027m comfortable with changing the behavior to always call the virtual.",
                                           "updatedAt":  "2025-02-21T22:38:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86tcp02",
                                           "createdAt":  "2025-05-26T14:39:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SourceCodeWhen",
                                           "body":  "Hi there,\n\nWas taking a look into this issue and can see that it\u0027s a little tricker to fix that expected due to the UpdatePasswordHash virtual method requiring a non-nullable string type, whereas the private method can take a nullable type which is used for, what is essentially, password hash deletions.\n\nChanging the UpdatePasswordHash virtual method to allow nullable strings would constitute a change to the Public API, at least as far as Roslyn is concerned. Alternatively, I could see a case for a \"Delete/RemovePasswordHash\" method being added to allow for this functionality in a way that\u0027s more easy to understand what\u0027s happening at a glance.\n\nHappy to take a look at either of these if someone more familiar with the codebase could weigh in on best approach. :)\n\nThanks!",
                                           "updatedAt":  "2025-05-26T14:40:27Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "The virtual UpdatePasswordHash is only invoked by ResetPasswordAsync",
        "labels":  [
                       "bug",
                       "help wanted",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/60310",
        "createdAt":  "2025-02-11T12:33:37Z",
        "number":  60310,
        "author":  "javiercn",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-_p9Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "matt-goldman",
                                            "createdAt":  "2025-02-11T21:26:24Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-02-11T13:47:01Z",
        "body":  "This comes from feedback in https://github.com/dotnet/aspnetcore/issues/60236\n\n\u003ePre-scaffolding all identity pages when choosing individual accounts feels overwhelming to me",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[Identity] Non-scaffolded version of the Identity Pages in the template",
        "labels":  [
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/61595",
        "createdAt":  "2025-04-22T02:26:14Z",
        "number":  61595,
        "author":  "arthuridea",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-15T17:13:14Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nCall `AddApiEndpoints()` after `AddSignInManager\u003cCustomSignInManager\u003e` cause custom SignInManager replaced by default SignInManager.\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n``` CSharp\n\nusing Microsoft.AspNetCore.Authentication;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Identity.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Options;\n\nnamespace SignInManagerReplacement\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var builder = WebApplication.CreateBuilder(args);\n\n            // Add services to the container.\n            builder.Services.AddDbContext\u003cIdentityDbContext\u003e(options =\u003e\n            {\n                options.UseInMemoryDatabase(\"InMemoryDb\");\n            });\n\n            builder.Services.AddHttpContextAccessor(); // Add this line to register IHttpContextAccessor\n            builder.Services.AddAuthentication();\n\n            var identityBuilder = builder.Services.AddIdentityCore\u003cIdentityUser\u003e(options =\u003e\n            {\n                // Configure identity options here\n                options.User.RequireUniqueEmail = false;\n            })\n            .AddEntityFrameworkStores\u003cIdentityDbContext\u003e()\n            //.AddApiEndpoints() // \u003c-- call before AddSignInManager works fine\n            .AddSignInManager\u003cCustomSignInManager\u003e()\n            .AddUserManager\u003cUserManager\u003cIdentityUser\u003e\u003e()\n            .AddDefaultTokenProviders()\n            .AddApiEndpoints() // \u003c-- call this after AddSignInManager... breaks custom configuration.\n            ;\n\n            builder.Services.AddControllers();\n            builder.Services.AddEndpointsApiExplorer();\n            builder.Services.AddSwaggerGen();\n\n            var app = builder.Build();\n\n            // Configure the HTTP request pipeline.\n            if (app.Environment.IsDevelopment())\n            {\n                app.UseSwagger();\n                app.UseSwaggerUI();\n            }\n\n            app.UseHttpsRedirection();\n\n            app.UseAuthentication();\n            app.UseAuthorization();\n\n\n            app.MapControllers();\n            // use identity api endpoints\n            app.MapIdentityApi\u003cIdentityUser\u003e();\n\n            using (var scope = app.Services.CreateScope())\n            {\n                // aquire the SignInManager from the DI container\n                var signInManager = scope.ServiceProvider\n                    .GetRequiredService\u003cSignInManager\u003cIdentityUser\u003e\u003e();\n                // !!!!!!!check the type of the SignInManager expected to be `CustomSignInManager`\n                Console.WriteLine($\"Resolved SignInManager type: {signInManager.GetType().FullName}\");\n            }\n\n            app.Run();\n        }\n        #region Identity sample  \n        internal class IdentityDbContext : IdentityDbContext\u003cIdentityUser\u003e\n        {\n            public IdentityDbContext(DbContextOptions\u003cIdentityDbContext\u003e options)\n                : base(options)\n            {\n            }\n        }\n        // custom SignInManager\n        internal class CustomSignInManager: SignInManager\u003cIdentityUser\u003e\n        {\n            public CustomSignInManager(\n                UserManager\u003cIdentityUser\u003e userManager,\n                IHttpContextAccessor contextAccessor,\n                IUserClaimsPrincipalFactory\u003cIdentityUser\u003e claimsFactory,\n                IOptions\u003cIdentityOptions\u003e optionsAccessor,\n                ILogger\u003cSignInManager\u003cIdentityUser\u003e\u003e logger,\n                IAuthenticationSchemeProvider schemes,\n                IUserConfirmation\u003cIdentityUser\u003e confirmation)\n                : base(userManager, contextAccessor, claimsFactory, optionsAccessor, logger, schemes, confirmation)\n            {\n            }\n        }\n        #endregion\n    }\n}\n\n```\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0\n\n### Anything else?\n\n`AddApiEndpoints()`  call `builder.AddSignInManager();` which will breaks the custom configuration.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwr7_Tg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86pB4-y",
                                           "createdAt":  "2025-04-28T16:38:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEQEybw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "arthuridea",
                                                                               "createdAt":  "2025-04-29T07:43:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "We think the fix would be for `AddApiEndpoints()` to use `TryAdd` so that it doesn\u0027t override any already-registered `SignInManager`.",
                                           "updatedAt":  "2025-04-28T16:38:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86tdHT3",
                                           "createdAt":  "2025-05-26T15:22:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SourceCodeWhen",
                                           "body":  "Hi there,\n\nHappy to take a look at this! Just checking before I start however, would adding the TryAdd be inside of SignInManager on anything with Builder.Services? Not sure of any way to override the extension method to attempt adding, so otherwise it\u0027d be changing all the instances that return a Service Collection.\n\nCheers! :)",
                                           "updatedAt":  "2025-05-26T15:22:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde862f7Hb",
                                           "createdAt":  "2025-07-11T11:04:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jnzhsh",
                                           "body":  "\nCurrently, `AddApiEndpoints()` internally calls `builder.AddSignInManager()`, which unconditionally registers the default `SignInManager\u003cTUser\u003e`. This causes any previously registered custom `SignInManager` (e.g., via `AddSignInManager\u003cCustomSignInManager\u003e()`) to be overridden, which can lead to unexpected behavior.\n\n**Suggestion:**\n\nWould it make sense to use `TryAddScoped` instead of `AddScoped` inside the `AddSignInManager` implementation?\n\nCurrent code (`IdentityBuilderExtensions.cs`, line 56-62):\n\nhttps://github.com/dotnet/aspnetcore/blob/9f85d05eb639afd92f3a7b4ce16ccc5042202852/src/Identity/Core/src/IdentityBuilderExtensions.cs#L56-L62\n\nI want to add a new method  `TryAddSignInManager`  in this file，and replace  this line to use new method\n\nhttps://github.com/dotnet/aspnetcore/blob/9f85d05eb639afd92f3a7b4ce16ccc5042202852/src/Identity/Core/src/IdentityBuilderExtensions.cs#L99\n\n\n`TryAddSignInManager`  Method Implement\n``` csharp\npublic static IdentityBuilder TryAddSignInManager(this IdentityBuilder builder)\n{\n        builder.AddSignInManagerDeps();\n        var managerType = typeof(SignInManager\u003c\u003e).MakeGenericType(builder.UserType);\n        builder.Services.TryAddScoped(managerType);\n        return builder;\n}\n```\n\nNew `AddApiEndpoints` Method Implement\n``` csharp\n    public static IdentityBuilder AddApiEndpoints(this IdentityBuilder builder)\n    {\n        ArgumentNullException.ThrowIfNull(builder);\n\n        //   replace this line \n        //  builder.AddSignInManager(); \n        builder.TryAddSignInManager(); \n        builder.AddDefaultTokenProviders();\n        builder.Services.TryAddTransient(typeof(IEmailSender\u003c\u003e), typeof(DefaultMessageEmailSender\u003c\u003e));\n        builder.Services.TryAddTransient\u003cIEmailSender, NoOpEmailSender\u003e();\n        builder.Services.TryAddEnumerable(ServiceDescriptor.Singleton\u003cIConfigureOptions\u003cJsonOptions\u003e, IdentityEndpointsJsonOptionsSetup\u003e());\n        return builder;\n    }\n```\n\nThis would preserve any custom SignInManager configuration the developer may have registered before calling AddApiEndpoints().\n\nLet me know if this sounds reasonable—I\u0027d be happy to submit a PR if needed.",
                                           "updatedAt":  "2025-07-11T11:04:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87Cvv9O",
                                           "createdAt":  "2025-09-08T17:44:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "We probably want to update `AddSignInManagerDeps` to use TryAdd too if we go this route. This would fix the same issue in `AddDefaultUI` which also calls `AddSignInManager`.",
                                           "updatedAt":  "2025-09-08T17:44:17Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[Identity] AddApiEndpoints() breaks custom SignInManager\u003cTUser\u003e.",
        "labels":  [
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/61726",
        "createdAt":  "2025-04-28T18:52:52Z",
        "number":  61726,
        "author":  "piskov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-30T20:17:19Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nIn .NET 7 @adityamandaleeka [introduced](https://github.com/dotnet/aspnetcore/commit/b56bb17db3ae73ce5a8664a2023a9b9af89499dd) breaking changes.\n\n`PasswordHasherCompatibilityMode.IdentityV3` logic was modified: algo changed to `HMACSHA512` from `HMACSHA256`, iterations count changed to 100k from 10k, etc.\n\nWe recently upgraded from .net 6 to .net 9 and some of our legacy systems (still under .net framework, not .net core) now fail to login after they login in .net core app under the same account.\n\nIf I understand correctly, this is due to the introduced mandatory rehashing of v3 (old) to v3 (new) password on login. Which completely broke auth logic for .net framework (not .net core) clients as they under v3 compatibility expect previous values.\n\nPlease fix this because people still have great deal of legacy .NET Framework code.\n\nFrom what I understand (most likely incorrect) this should never happened and instead of changes of v3 logic, `PasswordHasherCompatibilityMode.IdentityV4` should have been introduced. Because — duh :) — that was the purpose of different compatibility modes in the first place.\n\n### Expected Behavior\n\nLog in under .net 7+ and IdentityV3 compatibility shouldn’t rehash passwords from sha256 and 10k to sha512 and 100k iterations. For that new compatibility level v4 should be introduced.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n.net7+\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqXcetw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86pcLqi",
                                           "createdAt":  "2025-04-30T17:22:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "Thanks for reaching out, @piskov.\n\nShort of a custom password hasher implementation in the .NET Framework app, we probably should have introduced an `IdentityV4` here.",
                                           "updatedAt":  "2025-04-30T17:22:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86pc2Cl",
                                           "createdAt":  "2025-04-30T18:23:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "Introducing V4 was considered and deemed unnecessary at the time (https://github.com/dotnet/aspnetcore/issues/37032#issuecomment-1077893078) cc: @GrabYourPitchforks \n\nDid we just miss the NetFX compat angle?\n\n",
                                           "updatedAt":  "2025-04-30T18:23:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86pdm4J",
                                           "createdAt":  "2025-04-30T19:49:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "piskov",
                                           "body":  "As a workaround in .net core 7+ I’ve used custom PasswordHasher with simple logic to disable rehashing\n\n```\n var result = base.VerifyHashedPassword(user, hashedPassword, providedPassword);\n        return result switch\n        {\n            PasswordVerificationResult.SuccessRehashNeeded =\u003e PasswordVerificationResult.Success,\n            _ =\u003e result,\n        };\n```\n\nThe issue is any already rehashed password (before the fix like the above) are completely broken and needed to be reset under previous logic (ie from app with .net 6 or .net framework 4). I just copied old hashes from the DB backup, but anyone else would be royally screwed.",
                                           "updatedAt":  "2025-04-30T19:51:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86pdx63",
                                           "createdAt":  "2025-04-30T20:09:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "piskov",
                                           "body":  "Just for the sake of complete set of details:\n- we have .net apps since 2010;\n- first we had asp membership;\n- then at some point in time we’ve migrated to asp identity using something like [this](https://travis.io/blog/2015/03/24/migrate-from-aspnet-membership-to-aspnet-identity/);\n- now we have .net core and some .net framework apps that still await the upgrade;\n- in .net framework apps we have some custom implementations of AppUserManager, IdentityCoreCompat and UniversalPasswordHasher, with the latter supporting all three versions of password hashes:\n\n```\n        /* =======================\n         * HASHED PASSWORD FORMATS\n         * =======================\n         *\n         * Version 1:\n         * SHA-1 (legacy, from Membership)\n         * Format: password + \u0027|\u0027 + 1 + \u0027|\u0027 + salt\n         * Implementation taken from: https://travis.io/blog/2015/03/24/migrate-from-aspnet-membership-to-aspnet-identity/\n         *\n         * Version 2:\n         * PBKDF2 with HMAC-SHA1, 128-bit salt, 256-bit subkey, 1000 iterations.\n         * (See also: SDL crypto guidelines v5.1, Part III)\n         * Format: { 0x00, salt, subkey }\n         * Implementation is copied as-is from the original PasswordHasher from Identity.\n         *\n         * Version 3:\n         * PBKDF2 with HMAC-SHA256, 128-bit salt, 256-bit subkey, 10000 iterations.\n         * Format: { 0x01, prf (UInt32), iter count (UInt32), salt length (UInt32), salt, subkey }\n         * (All UInt32s are stored big-endian.)\n         * Implementation is based on Identity.Core\u0027s code, rewritten to use Rfc2898DeriveBytes.\n         */\n```\n\nObviously, this code depended upon v3 being SHA256 with 10k iterations, which changed in .net 7.\n\nI guess anyone with codebase of 15+ years (and who started with own asp accounts db from membership era) would have something like this. It’s probably a rare case, sure, but should not be uncommon in the enterprise sector.\n\nLike I’ve said, we catheterized this by disabling rehashing under .net core login (until we migrate to .net core entirely) =  it’s easier than to update our own UniversalPasswordHasher for legacy .net to support logic changed in .net 7\n",
                                           "updatedAt":  "2025-04-30T20:17:18Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Breaking changes in identity hashing algorythms check",
        "labels":  [
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/62347",
        "createdAt":  "2025-06-13T19:15:24Z",
        "number":  62347,
        "author":  "MackinnonBuck",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODQSRJA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "splitt3r",
                                            "createdAt":  "2025-06-14T20:08:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "abergs",
                                            "createdAt":  "2025-06-16T08:50:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "boukenka",
                                            "createdAt":  "2025-06-16T10:25:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mikekistler",
                                            "createdAt":  "2025-06-16T16:44:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Vlaaaaaaad",
                                            "createdAt":  "2025-06-20T11:29:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Frulfump",
                                            "createdAt":  "2025-06-26T13:09:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2025-06-26T15:35:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "utilsites",
                                            "createdAt":  "2025-06-26T16:44:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "reflectronic",
                                            "createdAt":  "2025-07-16T00:23:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vanillajonathan",
                                            "createdAt":  "2025-07-24T13:47:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "juliushardt",
                                            "createdAt":  "2025-09-13T11:06:29Z"
                                        }
                                    ],
                          "totalCount":  11
                      },
        "updatedAt":  "2025-08-27T17:13:40Z",
        "body":  "https://github.com/dotnet/aspnetcore/pull/62112 adds support for passkeys in ASP.NET Core Identity and extends the Blazor Web App template to support passkey management and authentication. However, there are some follow-up items we should consider:\n- [ ] Update scaffolding to include passkey support\n---\n- [ ] Support passwordless account creation\n- [ ] Support [conditional create](https://developer.chrome.com/docs/identity/webauthn-conditional-create) to allow the user to seamlessly upgrade a password to a passkey after signing in\n- [ ] Use the [signals API](https://developer.chrome.com/docs/identity/webauthn-signal-api) to, e.g., inform the authenticator when a passkey was revoked so it doesn\u0027t get presented to the user as an option when signing in\n- [ ] Make it easy to configure [well-known passkey endpoints](https://w3c.github.io/webappsec-passkey-endpoints/passkey-endpoints.html) so that authenticators can automatically upgrade passwords to passkeys without requiring the customer to visit the site\n- [ ] Update `MapIdentityApi()` to add endpoints for passkeys\n- [ ] Update `Microsoft.AspNetCore.Identity.UI` to support the same passkey UI that got added to the Blazor Web App template\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuvJD4A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86xXPMJ",
                                           "createdAt":  "2025-06-16T08:54:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "abergs",
                                           "body":  "This issue tracks the considerations I raised [here](https://github.com/dotnet/aspnetcore/issues/62287#issuecomment-2975615926). Since my comment also adressess the API proposal I\u0027ll leave it be for now.",
                                           "updatedAt":  "2025-06-16T08:54:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86xhxGJ",
                                           "createdAt":  "2025-06-16T22:55:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEYC6ZA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Frulfump",
                                                                               "createdAt":  "2025-06-26T13:09:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mguinness",
                                           "body":  "Are there plans to integrate the new passkey support into the [MapIdentityApi](https://learn.microsoft.com/en-us/aspnet/core/security/authentication/identity-api-authorization#the-mapidentityapituser-endpoints) endpoints?",
                                           "updatedAt":  "2025-06-19T16:27:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86zLeKq",
                                           "createdAt":  "2025-06-25T20:58:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mguinness",
                                           "body":  "\u003e Are there plans to integrate the new passkey support into the [MapIdentityApi](https://learn.microsoft.com/en-us/aspnet/core/security/authentication/identity-api-authorization#the-mapidentityapituser-endpoints) endpoints?\n\n@mikekistler Asking if passkey support will be included the identity API endpoints via [IdentityApiEndpointRouteBuilderExtensions](https://github.com/dotnet/aspnetcore/blob/main/src/Identity/Core/src/IdentityApiEndpointRouteBuilderExtensions.cs).  Maybe this could be added as a sub-issue here where it can be upvoted by others?",
                                           "updatedAt":  "2025-06-25T20:58:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde866xX0b",
                                           "createdAt":  "2025-07-29T17:58:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mguinness",
                                           "body":  "@danroth27 - Not getting a response regarding passkey support for [MapIdentityApi](https://learn.microsoft.com/en-us/aspnet/core/security/authentication/identity-api-authorization#the-mapidentityapituser-endpoints) endpoints.  Simply need to know if this is being considered or not?",
                                           "updatedAt":  "2025-07-29T17:58:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde866x6ul",
                                           "createdAt":  "2025-07-29T18:44:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maartenba",
                                           "body":  "Can https://github.com/dotnet/aspnetcore/pull/62917 be considered?",
                                           "updatedAt":  "2025-07-29T18:44:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde8661Ofy",
                                           "createdAt":  "2025-07-30T00:41:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcfn1g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mguinness",
                                                                               "createdAt":  "2025-07-30T13:41:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mikekistler",
                                           "body":  "@mguinness Sorry I missed this earlier. I agree we should add a sub issue for API support for Passkeys.\n\nAt this point we are out of runway for a feature like this to get into .NET 10. We had an item on the .NET 10 Roadmap to provide scaffolding support for the identity APIs, but this had to be dropped due to resource constraints. I believe that scaffolding support is the best strategic solution and we\u0027ll probably try again to put that out in .NET 11.",
                                           "updatedAt":  "2025-07-30T00:41:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde8668kPg",
                                           "createdAt":  "2025-07-30T13:49:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mguinness",
                                           "body":  "Thanks for addressing that Mike and for creating the corresponding issue.",
                                           "updatedAt":  "2025-07-30T13:49:13Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Follow-ups for passkey support in ASP.NET Core Identity",
        "labels":  [
                       "enhancement",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/62796",
        "createdAt":  "2025-07-18T09:39:25Z",
        "number":  62796,
        "author":  "bpiccand",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-30T17:21:52Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI am trying to implement integration tests in my application that uses the Identity package. I want to test that the user lockout feature is correctly configured in my application and am using the [TimeProvider](https://learn.microsoft.com/en-us/dotnet/api/system.timeprovider?view=net-8.0) and [FakeTimeProvider](https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.time.testing.faketimeprovider?view=net-8.0) which where introduced with .NET 8 to ensure the user is not locked anymore after the desired amount of time.\n\nUnfortunately, the [UserManager ](https://github.com/dotnet/aspnetcore/blob/main/src/Identity/Extensions.Core/src/UserManager.cs) class still uses the static DateTimeOffset instead of the new TimeProvider and therefore does not react to time changes in my tests.\n\n### Describe the solution you\u0027d like\n\nReplace the DateTimeOffset class with the TimeProvider to determine the current time in the Identity package\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuv4WrQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde864HiFu",
                                           "createdAt":  "2025-07-18T10:33:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "martincostello",
                                           "body":  "Looks like the two relevant places are here:\n\nhttps://github.com/dotnet/aspnetcore/blob/1efded674b348dfe77e6a772ebb67b3a0d7a9c5f/src/Identity/Extensions.Core/src/UserManager.cs#L2070\n\nhttps://github.com/dotnet/aspnetcore/blob/1efded674b348dfe77e6a772ebb67b3a0d7a9c5f/src/Identity/Extensions.Core/src/UserManager.cs#L2189-L2190\n\nFeels like this could be relatively trivially fixed without needing to change the constructor (and thus needing an API change to be approved) by adding a new method like this:\n\n```csharp\nprivate DateTimeOffset UtcNow()\n{\n    var timeProvider = ServiceProvider.GetService\u003cTimeProvider\u003e();\n    return timeProvider?.GetUtcNow() ?? DateTimeOffset.UtcNow;\n}\n```\n\nThen changing the two usages to:\n\n```diff\n- await store.SetLockoutEndDateAsync(user, DateTimeOffset.UtcNow.Add(Options.Lockout.DefaultLockoutTimeSpan),\n+ await store.SetLockoutEndDateAsync(user, UtcNow().Add(Options.Lockout.DefaultLockoutTimeSpan),\n```\n\n```diff\n- return lockoutTime \u003e= DateTimeOffset.UtcNow;\n+ return lockoutTime \u003e= UtcNow();\n```\n\nWould you like to submit a PR to fix it for .NET 10?\n",
                                           "updatedAt":  "2025-07-18T10:33:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde864JPZ9",
                                           "createdAt":  "2025-07-18T13:06:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEbGPkg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "martincostello",
                                                                               "createdAt":  "2025-07-18T13:39:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "bpiccand",
                                           "body":  "Yes, will do",
                                           "updatedAt":  "2025-07-18T13:06:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde866_hat",
                                           "createdAt":  "2025-07-30T17:21:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Looks like this issue has been identified as a candidate for community contribution. If you\u0027re considering sending a PR for this issue, look for the `Summary Comment` link in the issue description. That comment has been left by an engineer on our team to help you get started with handling this issue. You can learn more about our Help Wanted process [here](https://aka.ms/aspnet/processes/help-wanted)\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-30T17:21:52Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Use TimeProvider instead of DateTimeOffset in UserManager",
        "labels":  [
                       "help wanted",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/62998",
        "createdAt":  "2025-07-30T00:45:21Z",
        "number":  62998,
        "author":  "mikekistler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-11T17:25:11Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nThis is needed for users that want to support Passkeys in API applications.\n\n### Describe the solution you\u0027d like\n\nExpose APIs for Registration and Attestation of Passkeys in the MapIdentityApi endpoints.\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Add passkey support into the MapIdentityApi endpoints",
        "labels":  [
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/63142",
        "createdAt":  "2025-08-06T12:00:53Z",
        "number":  63142,
        "author":  "JJong-nl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-20T19:42:57Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nWhen we host the IdentityApi in a non-public environment and we call an api-method for sending the conformation.\nThe conformationlink has the host address of the api application.\n\nhttps://github.com/dotnet/aspnetcore/blob/b52c80fef2b8bf5239c7643d9c79d1029bb6c988/src/Identity/Core/src/IdentityApiEndpointRouteBuilderExtensions.cs#L390\n\n### Expected Behavior\n\nThat an Event is called/raised with the parameters to be processed. (user, userid, code)\n\nFor example\n```\n    public interface IIdentityCoreHandler\u003cTUser\u003e where TUser : class\n    {\n        Task LoggedIn(string email);\n        Task LoggedInFailure(string email, string errorMessage);\n        Task EmailConfirmed(TUser user);\n        Task SendConfirmationEmailAsync(TUser user, string? userId, string email, string code, bool isChange = false);\n        Task SendPasswordResetCodeAsync(TUser user, string email, string resetCode);\n    }\n```\n\nwith implementation\n```\npublic class IdentityCoreHandler\u003cTUser\u003e : IIdentityCoreHandler\u003cTUser\u003e\n    where TUser : class\n{\n    /*private readonly IPublisher _eventPublisher;*/\n    private readonly IHttpContextAccessor _httpContextAccessor;\n    private readonly IEmailSender\u003cTUser\u003e _emailSender;\n    private readonly LinkGenerator _linkGenerator;\n\n    public IdentityCoreHandler(/*IPublisher eventPublisher,*/ IHttpContextAccessor httpContextAccessor, IEmailSender\u003cTUser\u003e emailSender, LinkGenerator linkGenerator)\n    {\n        /*_eventPublisher = eventPublisher;*/\n        _httpContextAccessor = httpContextAccessor;\n        _emailSender = emailSender;\n        _linkGenerator = linkGenerator;\n    }\n\n    public Task EmailConfirmed(TUser user)\n        =\u003e Task.CompletedTask;\n\n    // we could do extra checks for success login\n    // Maybe first login from \u0027unknown\u0027 location? Than we could notify the user\n    public Task LoggedIn(string email)\n        =\u003e Task.CompletedTask;\n\n    public Task LoggedInFailure(string email, string errorMessage)\n        =\u003e Task.CompletedTask;\n\n    public async Task SendConfirmationEmailAsync(TUser user, string? userId, string code, string email, bool isChange = false)\n    {\n        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));\n        var routeValues = new RouteValueDictionary()\n        {\n            [\"userId\"] = userId,\n            [\"code\"] = code,\n        };\n\n        if (isChange)\n        {\n            // This is validated by the /confirmEmail endpoint on change.\n            routeValues.Add(\"changedEmail\", email);\n        }\n\n        var confirmEmailUrl = _linkGenerator.GetUriByName(_httpContextAccessor.HttpContext!, ConfirmEmailEndpointStore.ConfirmEmailEndpointName, routeValues)\n            ?? throw new NotSupportedException($\"Could not find endpoint named \u0027{ConfirmEmailEndpointStore.ConfirmEmailEndpointName}\u0027.\");\n\n        // When developer/usecase wants to create his own IIdentityHandler, he can inject IConfiguration\n        // and set a different host for the confirmEmailUrl by a appsettings.json key/value\n\n        await _emailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(confirmEmailUrl));\n    }\n\n    public async Task SendPasswordResetCodeAsync(TUser user, string email, string resetCode)\n    {\n        //we could publish an event with mediatr, and let the domain solve that to do with it..\n        //var @event = new Domain.Model.Identity.Events.SendPasswordResetCodeEvent\u003cTUser\u003e(user, email, resetCode);\n        //await _eventPublisher.Publish(@event);\n        await Task.CompletedTask;\n    }\n}\n```\n\n\nthan we can change the SendConfirmationEmailAsync in the IdentityApiEndpointRouteBuilderExtensions to\n\n\n```\n            async Task SendConfirmationEmailAsync(TUser user, UserManager\u003cTUser\u003e userManager, HttpContext context, string email, bool isChange = false)\n            {\n                var code = isChange\n                    ? await userManager.GenerateChangeEmailTokenAsync(user, email)\n                    : await userManager.GenerateEmailConfirmationTokenAsync(user);\n                var userId = await userManager.GetUserIdAsync(user);\n\n                await identityCoreHandler.SendConfirmationEmailAsync(user, userId, code, email, isChange: isChange);\n            }\n```\n\nchange line 47\nvar emailSender = endpoints.ServiceProvider.GetRequiredService\u003cIEmailSender\u003cTUser\u003e\u003e();\ninto\nvar identityCoreHandler = endpoints.ServiceProvider.GetRequiredService\u003cIIdentityCoreHandler\u003cTUser\u003e\u003e();\n\nNow we have full controll what we want to do in every scanario\n\n\n### Steps To Reproduce\n\nHost the IdentityApi in a non-public environment.\n\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n_No response_\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvpp_6g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde868i3Yv",
                                           "createdAt":  "2025-08-07T09:18:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JJong-nl",
                                           "body":  "ps: in the `IdentityApiEndpointRouteBuilderExtensions` the endpoint for confirmEmail got extra metadata.\nWhen this is named in the api version. It should also named in the MVC version. (can be done with `IConfigureOptions\u003cRazorPagesOptions\u003e`)",
                                           "updatedAt":  "2025-08-07T09:19:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86906yx",
                                           "createdAt":  "2025-08-13T17:10:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "Do you have a public URL you can use to confirm emails? Perhaps you could call `MapIdentityApi()` on a public endpoint as well? Or you could define your own endpoint that calls `UserManager.ConfirmEmailAsync()`.\n\nBy default, the host header is used when generating the confirmation link. You could consider implementing a custom [`LinkGenerator`](https://learn.microsoft.com/aspnet/core/fundamentals/routing?view=aspnetcore-9.0#url-generation-concepts) service to override this behavior. Alternatively, you can register a custom `IEmailSender\u003cTUser\u003e` and modify the confirmation link directly.\n\nCould you please let us know if any of these approaches work for you?",
                                           "updatedAt":  "2025-08-13T17:10:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86-MW7S",
                                           "createdAt":  "2025-08-15T08:13:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JJong-nl",
                                           "body":  "Modifying the confirmation link in the IEmailSender\u003c\u003e sounds like a hacky trick.\nNot realy SOLID\n\nWhen we want to \u0027notify\u0027 the user (not always email, right?)\nwe as programmers knows the endpoints etc.. but what to send we must get from the component.\nSo, it would more natural to only retreive a code/userid and let your own \u0027notifier\u0027 handles what to do with it.\nso, conformation url generation should be done in the emailsender\u003cTUser\u003e.\n\nThen second part,\nwhy are there multiple methods for password reset?\nHere you can se allready the problem.\n\nhttps://github.com/dotnet/aspnetcore/blob/main/src/Identity/Core/src/IEmailSenderOfT.cs#L10\n\n`Task SendPasswordResetLinkAsync(TUser user, string email, string resetLink)`\nThis method is called in MVC raxzor pages, and a full url is given.\n\n`Task SendPasswordResetCodeAsync(TUser user, string email, string resetCode);`\nThis method is called in API endpoints, where the emailsender\u003cTUser\u003e should handle the code to something usefull.\n\nThe MVC Razor method here should be obsolute and all logic for url construction must be in the emailsender\u003cTUser\u003e\n\nThan the method `SendConfirmationLinkAsync` should be renamed to `SendConfirmationCodeAsync`\n",
                                           "updatedAt":  "2025-08-15T08:13:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86-mn_q",
                                           "createdAt":  "2025-08-18T17:23:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "Thanks for following up, @JJong-nl.\n\nIt sounds like we should consider making it possible to confirm your email using a code, similar to how password reset works.\n\nMoving this to the backlog to gather additional community feedback.",
                                           "updatedAt":  "2025-08-18T17:23:07Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "The SendConfirmationLinkAsync is sending confirmationLink to non-public address",
        "labels":  [
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/63191",
        "createdAt":  "2025-08-08T15:21:15Z",
        "number":  63191,
        "author":  "danroth27",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODKePng==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "Copilot",
                                            "createdAt":  "2025-08-08T15:39:06Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-18T17:29:37Z",
        "body":  "[Bootstrap 4 reached end of life status on Jan 1, 2024](https://getbootstrap.com/docs/4.6/end-of-life/). We should consider obsoleting the Bootstrap 4 support in the [default Identity UI package](https://www.nuget.org/packages/Microsoft.AspNetCore.Identity.UI).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Consider obsoleting Bootstrap 4 support in the default Identity UI package",
        "labels":  [
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/63275",
        "createdAt":  "2025-08-15T13:45:03Z",
        "number":  63275,
        "author":  "mahdiyar021",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-17T15:43:39Z",
        "body":  "Summary\nWhen creating a Blazor Web App in Interactive Server mode with authentication set to Individual Accounts and opting out of the sample pages, the project does not include Bootstrap. As a result, the authentication UI (login/register/manage) renders unstyled, despite the template assuming Bootstrap-based styles.\n\nSteps to reproduce\n- Create project (CLI):\n`dotnet new blazor --interactivity Server --auth Individual --empty true -o BlazorAuthNoSamples`\n Run the app:\n```\ncd BlazorAuthNoSamples\ndotnet run\n```\n- Navigate:\n- Go to the login or register pages.\n- Observe:\n- Authentication pages are unstyled (no Bootstrap classes rendered as expected).\n\nExpected behavior\n- Bootstrap included: The template should include Bootstrap (CSS link and, optionally, JS) when authentication is set to Individual Accounts, even if sample pages are excluded.\n- Styled auth UI: Identity/auth components should render with expected Bootstrap styling out of the box.\n\nActual behavior\n- No Bootstrap reference: The generated project omits Bootstrap when --empty true (or “Do not include sample pages”) is selected.\n- Unstyled pages: Authentication-related pages render without styling.\n\nEnvironment\n- .NET SDK: [e.g., 8.0.x or 9.0.x]\n- Template: Blazor Web App\n- Interactivity: Server\n- Auth: Individual\n- Include sample pages: No (--empty true)\n- OS: Windows 11 (build/version)\n- IDE: [e.g., Visual Studio 2022 17.x]\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxOjdjw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86-PMtD",
                                           "createdAt":  "2025-08-15T14:36:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "@mahdiyar021 thanks for contacting us.\n\nI suspect this is by design as the layout is provided for the app and you explicitly asked for no samples (which is a bad name, because it also means no styling and so on).",
                                           "updatedAt":  "2025-08-15T14:36:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87E6N2P",
                                           "createdAt":  "2025-09-17T15:43:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "melikaDaa",
                                           "body":  "It seems that when --empty true is used, the template skips adding Bootstrap even though Individual Accounts auth assumes it.",
                                           "updatedAt":  "2025-09-17T15:43:39Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Blazor Interactive Server with Individual Accounts lacks Bootstrap when sample pages are excluded",
        "labels":  [
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/63296",
        "createdAt":  "2025-08-17T05:15:30Z",
        "number":  63296,
        "author":  "CoreDX9",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODMZqqA==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "Cfun1",
                                            "createdAt":  "2025-08-24T00:02:22Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-09-15T23:20:46Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nUserManager.AddToRoleAsync() will throw InvalidOperationException with message: The instance of entity type \u0027IdentityUser\u0027 cannot be tracked because another instance with the same key value for {\u0027Id\u0027} is already being tracked..\nAll packages versioned 9.0.8.\n\n### Expected Behavior\n\nSuccess to add user to role.\n\n### Steps To Reproduce\n\n1. Create an ASP.NET Core Razor pages application with Identity.\n2. Add `RoleManager` and api controllers to application. Edit `Program.Main()`\n``` csharp\n            builder.Services.AddDefaultIdentity\u003cIdentityUser\u003e(options =\u003e options.SignIn.RequireConfirmedAccount = true)\n                .AddRoles\u003cIdentityRole\u003e() // add this line\n                .AddEntityFrameworkStores\u003cApplicationDbContext\u003e();\n\n            builder.Services.AddMvc(); // replace razor pages to mvc\n\n            app.MapControllers(); // map api controller\n```\n3. Add controller to call `AddToRoleAsync()`\n``` csharp\n[Route(\"api/[controller]\")]\npublic class TestController : ControllerBase\n{\n    [HttpGet(nameof(AddRole))]\n    public async Task\u003cIActionResult\u003e AddRole()\n    {\n        var roleManager = HttpContext.RequestServices.GetRequiredService\u003cRoleManager\u003cIdentityRole\u003e\u003e();\n\n        if(!await roleManager.RoleExistsAsync(\"test\"))\n        {\n            await roleManager.CreateAsync(new() { Name = \"test\" });\n        }\n\n        return Ok();\n    }\n\n    [HttpGet(nameof(AddToRole))]\n    public async Task\u003cIActionResult\u003e AddToRole()\n    {\n        var requestProvider = HttpContext.RequestServices;\n\n        IdentityUser? user = null;\n        IdentityRole? role = null;\n        await using (var scope = requestProvider.CreateAsyncScope())\n        {\n            var provider = scope.ServiceProvider;\n            var userManager = provider.GetRequiredService\u003cUserManager\u003cIdentityUser\u003e\u003e();\n            var roleManager = provider.GetRequiredService\u003cRoleManager\u003cIdentityRole\u003e\u003e();\n\n            user = await userManager.FindByNameAsync(\"admin@aaa.com\");\n            role = await roleManager.FindByNameAsync(\"test\");\n        }\n\n        if (user != null \u0026\u0026 role != null)\n        {\n            // Use new scope to ensure not tracked.\n            await using var scope = requestProvider.CreateAsyncScope();\n            var provider = scope.ServiceProvider;\n            var userManager = provider.GetRequiredService\u003cUserManager\u003cIdentityUser\u003e\u003e();\n\n            var res = await userManager.AddToRoleAsync(user, role.Name!);\n        }\n\n        return Ok();\n    }\n}\n```\n4. Register user named \"admin@aaa.com\" using web page.\n5. Access endpoint \"/api/test/addrole\" to add role named \"test\".\n6. Access endpoint \"/api/test/addtorole\" to call `AddToRoleAsync()`. \n\n### Exceptions (if any)\n\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware[1]\n      An unhandled exception has occurred while executing the request.\n      System.InvalidOperationException: The instance of entity type \u0027IdentityUser\u0027 cannot be tracked because another instance with the same key value for {\u0027Id\u0027} is already being tracked. When attaching existing entities, ensure that only one entity instance with a given key value is attached. Consider using \u0027DbContextOptionsBuilder.EnableSensitiveDataLogging\u0027 to see the conflicting key values.\n         at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.ThrowIdentityConflict(InternalEntityEntry entry)\n         at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(TKey key, InternalEntityEntry entry, Boolean updateDuplicate)\n         at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(TKey key, InternalEntityEntry entry)\n         at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NullableKeyIdentityMap`1.Add(InternalEntityEntry entry)\n         at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTracking(InternalEntityEntry entry)\n         at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState oldState, EntityState newState, Boolean acceptChanges, Boolean modifyProperties)\n         at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState entityState, Boolean acceptChanges, Boolean modifyProperties, Nullable`1 forceStateWhenUnknownKey, Nullable`1 fallbackState)\n         at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.PaintAction(EntityEntryGraphNode`1 node)\n         at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.TraverseGraph[TState](EntityEntryGraphNode`1 node, Func`2 handleNode)\n         at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.AttachGraph(InternalEntityEntry rootEntry, EntityState targetState, EntityState storeGeneratedWithKeySetTargetState, Boolean forceStateWhenUnknownKey)\n         at Microsoft.EntityFrameworkCore.DbContext.SetEntityState(InternalEntityEntry entry, EntityState entityState)\n         at Microsoft.EntityFrameworkCore.DbContext.SetEntityState[TEntity](TEntity entity, EntityState entityState)\n         at Microsoft.EntityFrameworkCore.DbContext.Attach[TEntity](TEntity entity)\n         at Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.UpdateAsync(TUser user, CancellationToken cancellationToken)\n         at Microsoft.AspNetCore.Identity.UserManager`1.UpdateUserAsync(TUser user)\n         at Microsoft.AspNetCore.Identity.UserManager`1.AddToRoleAsync(TUser user, String role)\n         at TestUserRole.Controllers.TestController.AddToRole() in F:\\source\\repos\\TestUserRole\\TestUserRole\\Controllers\\TestController.cs:line 45\n         at TestUserRole.Controllers.TestController.AddToRole() in F:\\source\\repos\\TestUserRole\\TestUserRole\\Controllers\\TestController.cs:line 45\n         at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)\n         at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.\u003cInvokeActionMethodAsync\u003eg__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)\n         at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.\u003cInvokeNextActionFilterAsync\u003eg__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n         at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)\n         at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State\u0026 next, Scope\u0026 scope, Object\u0026 state, Boolean\u0026 isCompleted)\n         at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.\u003cInvokeInnerFilterAsync\u003eg__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n         at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.\u003cInvokeNextResourceFilter\u003eg__Awaited|25_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n         at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResourceExecutedContextSealed context)\n         at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State\u0026 next, Scope\u0026 scope, Object\u0026 state, Boolean\u0026 isCompleted)\n         at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.\u003cInvokeFilterPipelineAsync\u003eg__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n         at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.\u003cInvokeAsync\u003eg__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)\n         at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.\u003cInvokeAsync\u003eg__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)\n         at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\n         at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\n         at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)\n\n### .NET Version\n\n9.0.8\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxFr6fw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86_xvkV",
                                           "createdAt":  "2025-08-24T00:02:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Cfun1",
                                           "body":  "I believe i have a similar issue in .NET8, same exception got thrown.\n\nI have two entities with a one-to-one relationship without navigation properties \n`builder.Entity\u003cCustomUser\u003e().HasOne\u003cIdentityUser\u003e().WithOne().HasForeignKey\u003cCustomUser\u003e(u =\u003e u.Id);`\n\nThe below code throws an exception on the last line (call to `AddToRoleAsync()`) (even that with AsNoTracking):\n```\nvar idUser = await context.Users.FindAsync(userId);\nvar customUser = await context.CustomUsers.AsNoTracking().FirstAsync(u =\u003e u.Id == userId);\n\nawait userManager.AddToRoleAsync(idUser, \"roleName\");   //happens also with RemoveFromRoleAsync()\n```\n\nEven that I intentionally used `AsNoTracking` to test, still the exception occurs, which leads me to think this is a bug.\n\nA potential workaround to explore is to define a navigation property (which I do not need in my case), and load both in the same query using `.Include()`.\nps: even if workaround works it\u0027s is not optimal in all scenarios, especially if an entity is not initially required and conditionally loaded later in a branch.",
                                           "updatedAt":  "2025-08-24T00:12:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87BXlcl",
                                           "createdAt":  "2025-09-02T07:47:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CoreDX9",
                                           "body":  "[repro project](https://github.com/CoreDX9/UserManagerTrackBugSample)",
                                           "updatedAt":  "2025-09-02T07:47:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87EWvZ0",
                                           "createdAt":  "2025-09-15T23:20:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "It seems that the exception is due to the fact that `AddToRoleAsync()` materializes an `IdentityUser` instance while performing an internal query, but the original, detached `IdentityUser` instance still gets passed through to `DbContext.Attach()`.\n\n@CoreDX9, would you mind clarifying what scenario requires reusing the same `IdentityUser` instance across multiple scopes? In the repro you provided, the issue can be resolved by injecting `UserManager\u003cIdentityUser\u003e` directly into the `TestController` class and removing all async scopes.",
                                           "updatedAt":  "2025-09-15T23:20:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87EWvp_",
                                           "createdAt":  "2025-09-15T23:20:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Hi @@CoreDX9. We have added the \"Needs: Author Feedback\" label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-15T23:20:45Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "UserManager.AddToRoleAsync() will throw InvalidOperationException because of entity already tracked",
        "labels":  [
                       "investigate",
                       "Needs: Author Feedback",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/63370",
        "createdAt":  "2025-08-21T21:51:27Z",
        "number":  63370,
        "author":  "arthuredgarov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-18T20:04:28Z",
        "body":  "https://github.com/dotnet/aspnetcore/blob/d520252e4c9124eb0ee7019144161aa68c17deea/src/Identity/EntityFrameworkCore/src/UserStore.cs#L66\n\nOn the line mentioned above, documentation states that generic parameter defines type of the primary key for a role. This is clearly false statement since the `TKey` is used as generic parameter for user and role entities\u0027 primary key.\n\nThere are several occurrences of this text in the class documentation (copy-paste artifact), there is no place where this statement is true.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxUKaBA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde87D8WSv",
                                           "createdAt":  "2025-09-13T02:09:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Daifaizonaldridge",
                                           "body":  "Hi, im a beginner to doing open source development but want to tackle this issue.",
                                           "updatedAt":  "2025-09-13T02:09:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87E7U0B",
                                           "createdAt":  "2025-09-17T17:10:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Looks like this issue has been identified as a candidate for community contribution. If you\u0027re considering sending a PR for this issue, look for the `Summary Comment` link in the issue description. That comment has been left by an engineer on our team to help you get started with handling this issue. You can learn more about our Help Wanted process [here](https://aka.ms/aspnet/processes/help-wanted)\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-17T17:10:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87E7VDo",
                                           "createdAt":  "2025-09-17T17:10:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "@Daifaizonaldridge, we\u0027ve just marked the issue as `help wanted` - feel free to contribute a fix if you wish to do so.",
                                           "updatedAt":  "2025-09-17T17:10:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87FQpoE",
                                           "createdAt":  "2025-09-18T20:04:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "daniloneto",
                                           "body":  "Hi, I noticed this issue was marked as help wanted. Since there’s been no update for a week, I’d be happy to work on it. Please let me know if that’s okay.",
                                           "updatedAt":  "2025-09-18T20:04:28Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Misleading documentation in UserStore",
        "labels":  [
                       "help wanted",
                       "area-identity"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/63630",
        "createdAt":  "2025-09-10T22:09:44Z",
        "number":  63630,
        "author":  "MackinnonBuck",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODQRPow==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Vlaaaaaaad",
                                            "createdAt":  "2025-09-10T23:22:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "boukenka",
                                            "createdAt":  "2025-09-11T06:30:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maartenba",
                                            "createdAt":  "2025-09-12T09:48:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rogihee",
                                            "createdAt":  "2025-09-13T06:57:13Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-09-17T17:19:45Z",
        "body":  "The Blazor Web App project template currently requires that users enter a passkey display name after creation, and if the user doesn\u0027t provide one (e.g., by navigating away to a different page), then the default name is \"Unnamed passkey\".\n\nWe should consider matching the credential\u0027s AAGUID against a set of well known authenticators to construct a better default passkey name. The user would then only be required to provide a passkey name when the authenticator model is unknown.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Implement better passkey display name inference",
        "labels":  [
                       "area-identity"
                   ]
    }
]
