[
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5978",
        "createdAt":  "2016-01-27T16:28:01Z",
        "number":  5978,
        "author":  "cwe1ss",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODImNQA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RehanSaeed",
                                            "createdAt":  "2019-01-04T08:46:39Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "RehanSaeed",
                                            "createdAt":  "2019-01-04T08:46:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xivk",
                                            "createdAt":  "2019-01-05T12:56:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "asbjornu",
                                            "createdAt":  "2019-03-20T10:15:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tuscen",
                                            "createdAt":  "2019-12-13T01:59:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colgreen",
                                            "createdAt":  "2020-02-13T17:38:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kwinkel",
                                            "createdAt":  "2020-04-27T09:04:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maknapp",
                                            "createdAt":  "2020-06-18T14:00:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JonAnders",
                                            "createdAt":  "2020-08-10T14:36:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "oshimish",
                                            "createdAt":  "2020-09-23T17:28:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "grbell-ms",
                                            "createdAt":  "2020-10-08T21:09:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Zerotask",
                                            "createdAt":  "2020-10-22T09:38:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "megakid",
                                            "createdAt":  "2021-01-19T14:46:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vdachev",
                                            "createdAt":  "2021-02-15T12:56:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "arturomonge",
                                            "createdAt":  "2021-03-07T15:54:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ulrichb",
                                            "createdAt":  "2021-05-05T13:06:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ycrumeyrolle",
                                            "createdAt":  "2021-08-11T15:16:12Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "ycrumeyrolle",
                                            "createdAt":  "2021-08-11T15:16:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Trivivium",
                                            "createdAt":  "2021-10-17T13:45:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Bouke",
                                            "createdAt":  "2021-10-27T17:10:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vlushn",
                                            "createdAt":  "2022-09-13T11:34:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ryanelian",
                                            "createdAt":  "2022-10-17T03:27:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ruslan528",
                                            "createdAt":  "2023-11-22T19:21:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "k-takio",
                                            "createdAt":  "2024-03-29T03:17:24Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2024-07-26T07:12:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "latonz",
                                            "createdAt":  "2024-08-09T02:31:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aetos382",
                                            "createdAt":  "2024-11-19T09:32:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "caleblloyd",
                                            "createdAt":  "2024-11-27T17:44:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "koen-lee",
                                            "createdAt":  "2024-12-24T12:34:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ts72",
                                            "createdAt":  "2025-02-17T15:44:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Cyberboss",
                                            "createdAt":  "2025-03-17T03:38:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "derekchristensen",
                                            "createdAt":  "2025-07-16T16:21:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2025-07-26T00:00:39Z"
                                        }
                                    ],
                          "totalCount":  33
                      },
        "updatedAt":  "2024-03-02T01:07:32Z",
        "body":  "There is now a standard for the most common X-Forwarded-\\* headers. It was introduced with RFC 7239: \"[Forwarded HTTP Extension](https://tools.ietf.org/html/rfc7239)\". \n\nExample: `Forwarded: for=192.0.2.60;proto=http;by=203.0.113.43`\n\nIt would be great if this could be supported.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOU3xkxA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE3NTc0NDE2MQ==",
                                           "createdAt":  "2016-01-27T16:59:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Yes, we\u0027ve seen it. Are you aware of any proxies that actually set that new header?\n",
                                           "updatedAt":  "2016-01-27T16:59:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE3NTgyNzM0Mg==",
                                           "createdAt":  "2016-01-27T20:04:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cwe1ss",
                                           "body":  "No - but I haven\u0027t looked either. I recently built a small ASP.NET gateway proxy for Azure Service Fabric and that\u0027s why I stumbled upon this RFC. I guess this definitely isn\u0027t high priority since there won\u0027t be anyone who\u0027s setting just this header for a looong time. It would just be good to support it someday since it is a standard and will eventually get more common.\n",
                                           "updatedAt":  "2016-01-27T20:06:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE5MTUyNzI0NA==",
                                           "createdAt":  "2016-03-03T01:28:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lantrix",
                                           "body":  "I have a scenario whereby we have a reverse proxy (internally) passing requests to backend api’s and web apps; and one of the api\u0027s is ASP.NET 5 and using the BasicMiddleware classes to handle the headers from the upstream proxies. The team had implemented the newer RFC so BasicMiddleware can\u0027t handle `Forwarded` headers from the [RFC](https://tools.ietf.org/html/rfc7239).\n",
                                           "updatedAt":  "2016-03-03T01:28:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NTEwMDczMA==",
                                           "createdAt":  "2018-01-03T19:17:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBCuZ3g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "damianh",
                                                                               "createdAt":  "2020-04-30T10:02:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "asbjornu",
                                           "body":  "We\u0027re using `Forwarded` and plan to implement it in the proxies we use, [such as NGINX](https://www.nginx.com/resources/wiki/start/topics/examples/forwarded/). The header is becoming more mainstream and it would be good of Microsoft to advocate for its use over the (non-standard) `X-Forwarded-*` headers.",
                                           "updatedAt":  "2019-03-20T10:17:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MzUwODY2Ng==",
                                           "createdAt":  "2018-12-02T13:43:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "damianh",
                                           "body":  "Would also like to have ability to extend the \u0027Forwared\u0027 header with a `PathBase` parameter as well as support for that with the current implementation i.e. `X-Forwarded-PathBase`\r\n\r\n(somewhat) Related: https://github.com/aspnet/Hosting/issues/1120 ",
                                           "updatedAt":  "2018-12-02T20:00:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MzUxNzk5Ng==",
                                           "createdAt":  "2018-12-02T15:55:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "@damianh do you expect PathBase to be different per request? That Hosting issue is about getting one value at startup.",
                                           "updatedAt":  "2018-12-02T15:55:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MzUzNzYyNg==",
                                           "createdAt":  "2018-12-02T20:07:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "damianh",
                                           "body":  "Yes, I would certainly like to be able to do so on a per-request basis. This will allow two scenarios where generated URLs and paths (fully qualified, rooted, relative) would \"just work\":\r\n\r\n1. Re-configuring the proxy to a new path base (e.g. `http://proxy/foo/` -\u003e `http://backend/` to `http://proxy/bar/` -\u003e `http://backend/` ) *without* having to reconfigure and restart the backend server.\r\n\r\n2. Having one backend server responding on two separate paths (e.g. `http://proxy/foo/` | `http://proxy/bar/` -\u003e `http://backend/`). Useful if \"migrating\" to a new route without breaking clients in situ.",
                                           "updatedAt":  "2018-12-02T20:08:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MzU0MjEwNQ==",
                                           "createdAt":  "2018-12-02T21:07:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "damianh",
                                           "body":  "@Tratcher This is what I use near top of my `Configure(IApplicationBuilder app)`:\r\n\r\n            var forwardedHeadersOptions = new ForwardedHeadersOptions\r\n            {\r\n                ForwardedHeaders = ForwardedHeaders.All\r\n            };\r\n            app.UseForwardedHeaders(forwardedHeadersOptions);\r\n            app.Use((context, next) =\u003e {\r\n                if (context.Request.Headers.TryGetValue(\"X-Forwarded-PathBase\", out var pathBases))\r\n                {\r\n                    context.Request.PathBase = pathBases.First();\r\n                }\r\n                return next();\r\n            });",
                                           "updatedAt":  "2018-12-02T21:07:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NTg4Mzg1Mg==",
                                           "createdAt":  "2020-02-13T17:45:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODNYdpQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0x53A",
                                                                               "createdAt":  "2020-03-09T10:44:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kwinkel",
                                                                               "createdAt":  "2020-04-27T09:04:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "apeeters",
                                                                               "createdAt":  "2020-07-07T09:39:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JonAnders",
                                                                               "createdAt":  "2020-08-11T08:06:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "asbjornu",
                                                                               "createdAt":  "2020-08-17T11:17:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ahaeber",
                                                                               "createdAt":  "2023-02-09T12:33:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ruslan528",
                                                                               "createdAt":  "2023-11-22T19:24:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "colgreen",
                                           "body":  "\u003e \"Are you aware of any proxies that actually set that new header?\"\r\n\r\nArguably that point is somewhat circular, i.e. maybe if ASP.NET Core supported the \u0027Forwarded\u0027 header there would be more pressure on the reverse proxy implementations to support it. It is after all the only approach that actually has a formal specification (rfc7239).",
                                           "updatedAt":  "2020-02-13T17:45:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMTczNjk2Mw==",
                                           "createdAt":  "2020-04-30T10:02:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "damianh",
                                           "body":  "\u003e Would also like to have ability to extend the \u0027Forwared\u0027 header with a `PathBase` parameter as well as support for that with the current implementation i.e. `X-Forwarded-PathBase`\r\n\r\n\r\nJust to mention that I\u0027ve shipped a package that supports this https://github.com/ProxyKit/HttpOverrides",
                                           "updatedAt":  "2020-04-30T10:02:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NDczMzY1Ng==",
                                           "createdAt":  "2020-07-07T09:44:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBNjNpA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colgreen",
                                                                               "createdAt":  "2020-07-07T09:51:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "asbjornu",
                                                                               "createdAt":  "2020-08-17T11:17:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "apeeters",
                                           "body":  "\u003e \u003e \"Are you aware of any proxies that actually set that new header?\"\r\n\u003e \r\n\u003e Arguably that point is somewhat circular, i.e. maybe if ASP.NET Core supported the \u0027Forwarded\u0027 header there would be more pressure on the reverse proxy implementations to support it. It is after all the only approach that actually has a formal specification (rfc7239).\r\n\r\nIndeed. If no one starts implementing the standard, it will never gain traction. Also: Spring has support for this `Forwarded` header since 2016...\r\n",
                                           "updatedAt":  "2020-07-07T09:44:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NDc1NjAxMA==",
                                           "createdAt":  "2020-07-07T10:23:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colgreen",
                                           "body":  "Perhaps someone could reach out to the YARP team to get their views, i.e. e.g. are they planning to implement rfc7239\r\n\r\n[microsoft/reverse-proxy](https://github.com/microsoft/reverse-proxy)",
                                           "updatedAt":  "2020-07-07T10:26:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2ODAwODEyMQ==",
                                           "createdAt":  "2020-08-03T12:58:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NatMarchand",
                                           "body":  "\u003e Yes, we\u0027ve seen it. Are you aware of any proxies that actually set that new header?\r\n\r\n@Tratcher, it is the documented way for Azure APIM : https://docs.microsoft.com/en-us/azure/api-management/policies/set-header-to-enable-backend-to-construct-urls",
                                           "updatedAt":  "2020-08-03T12:58:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2ODAxMzI0Ng==",
                                           "createdAt":  "2020-08-03T13:09:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "\u003e Perhaps someone could reach out to the YARP team to get their views, i.e. e.g. are they planning to implement rfc7239\n\u003e \n\u003e [microsoft/reverse-proxy](https://github.com/microsoft/reverse-proxy)\n\nYARP is being built by this team. We did add support for the new header in YARP but it\u0027s off by default. See https://microsoft.github.io/reverse-proxy/articles/transforms.html#forwarded\n\nDesign note: this probably should be implemented in AspNetCore as a whole new middleware, it takes very different options. I\u0027m also not sure what to do with the randomized client ids, stash them in a new request feature?",
                                           "updatedAt":  "2020-08-03T13:09:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MjAwNDI3MA==",
                                           "createdAt":  "2020-08-11T15:09:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBNjMjQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "asbjornu",
                                                                               "createdAt":  "2020-08-17T11:13:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "JonAnders",
                                           "body":  "\u003e Design note: this probably should be implemented in AspNetCore as a whole new middleware, it takes very different options. \r\n\r\n@Tratcher I think there is value in keeping it in the same middleware, if possible, as the headers are conceptually the same. A class called `ForwardedHeadersMiddleware` is where I would expect to find the standards-compliant implementation, I wouldn\u0027t keep looking for a different middleware.\r\n\r\nWhat if `Forwarded` was added to the `ForwardedHeaders` enum? To restrict the processing, in line with how `X-Forwarded-*` is configured, the enum could include `ForwardedBy`, `ForwardedFor`, `ForwardedHost` and `ForwardedProto` as well.\r\n\r\nSupport for both `Forwarded` and `X-Forwarded-*` could then be configured together, such as:\r\n```\r\napp.UseForwardedHeaders(new ForwardedHeadersOptions\r\n{\r\n    ForwardedHeaders = ForwardedHeaders.XForwardedFor | ForwardedHeaders.ForwardedFor\r\n});\r\n```\r\n\r\nThere are some options that only make sense for the `X-Forwarded-*` headers, but is that a problem? They can either be ignored or cause an exception if they are set when only support for the `Forwarded` header is configured.\r\n\r\n\r\n\u003e I\u0027m also not sure what to do with the randomized client ids, stash them in a new request feature?\r\n\r\nWould it be a plausible alternative to just provide a class for parsing the `Forwarded` header and leave the rest up to the developer when using randomized client ids?\r\n",
                                           "updatedAt":  "2020-08-11T15:09:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjE3NzMzNQ==",
                                           "createdAt":  "2020-09-14T16:44:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "\u003e Support for both `Forwarded` and `X-Forwarded-*` could then be configured together, such as:\r\n\u003e \r\n\u003e ```\r\n\u003e app.UseForwardedHeaders(new ForwardedHeadersOptions\r\n\u003e {\r\n\u003e     ForwardedHeaders = ForwardedHeaders.XForwardedFor | ForwardedHeaders.ForwardedFor\r\n\u003e });\r\n\u003e ```\r\n\r\nThat\u0027s a good example of why these shouldn\u0027t be combine into one middleware. If a request has both headers then what order should they be processed in? It\u0027s ambiguous.",
                                           "updatedAt":  "2020-09-14T16:44:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85KP95d",
                                           "createdAt":  "2022-09-13T17:07:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-09-13T17:07:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85TfGTE",
                                           "createdAt":  "2023-01-23T16:49:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEb_mwA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colgreen",
                                                                               "createdAt":  "2023-01-24T23:10:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ahaeber",
                                                                               "createdAt":  "2023-02-09T12:34:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "braiam",
                                                                               "createdAt":  "2023-04-30T19:29:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WeihanLi",
                                                                               "createdAt":  "2025-07-26T00:01:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "asbjornu",
                                           "body":  "\u003e That\u0027s a good example of why these shouldn\u0027t be combine into one middleware. If a request has both headers then what order should they be processed in? It\u0027s ambiguous.\r\n\r\nI\u0027m not disagreeing with you @Tratcher, but I do think it\u0027s easy to argue that `Forwarded` should take precedence over `X-Forwarded-*`, both due to chronology and precision.\r\n\r\n### Chronology\r\n\r\nSince `X-Forwarded-*` existed before `Forwarded`, it is most likely that `Forwarded` was added after `X-Forwarded-*` in order to accommodate middleware that supports `Forwarded`. Middleware that doesn\u0027t support `Forwarded` will just ignore it and process `X-Forwarded-*` as before.\r\n\r\nIf adding `Forwarded` to an HTTP request doesn\u0027t do anything because `X-Forwarded-*` takes precedence, it makes it very hard to evolve beyond the status quo since every new header will have to be added as a clean break with existing infrastructure.\r\n\r\n### Precision\r\n\r\n`Forwarded` also has a precisely defined processing model, which I assume most implementers prefer over the undefined behavior of `X-Forwarded-*`.\r\n\r\nWhat is a proxy supposed to do when there are an unequal amount of items added to `X-Forwarded-For`, `X-Forwarded-Host` and `X-Forwareded-Proto`, for instance? Which item corresponds to which between the three headers? Such situations may occur if a reverse proxy doesn\u0027t support all 3 headers and only modifies one or two of them.\r\n\r\nThere\u0027s also the question of whether new items should be appended or prepended to existing headers. There are numerous edge cases that are unresolved since these headers have been invented separately and never thoroughly specified in terms of a single, coherent standard.\r\n\r\nSince `Forwarded` groups `for`, `by`, `host` and `proto` together for each item and clearly defines that items should be appended to an existing header, it doesn\u0027t suffer from these problems. If issues with `Forwarded` arises, IETF has a clearly defined process to improve upon the published RFC, which will be made available in a canonical RFC that all implementers can use and reference.\r\n\r\nBecause of all of these benefits, I think it\u0027s obvious that `Forwarded` should take precedence over `X-Forwarded-*`, when both exist in an HTTP request.",
                                           "updatedAt":  "2023-01-23T16:49:42Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  "Support the new \"Forwarded\" header (RFC 7239)",
        "labels":  [
                       "enhancement",
                       "severity-minor",
                       "affected-medium",
                       "feature-forwarded-headers",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5981",
        "createdAt":  "2016-08-04T22:51:45Z",
        "number":  5981,
        "author":  "jkotalik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-11-07T10:00:52Z",
        "body":  "The whole rewrite middleware needs to be profiled. Specifically, checking for hotspots in the actual application of rules, which matters significantly more than startup time. Memory allocation should be checked too.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMDcgdw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI0Njc4Njg4NA==",
                                           "createdAt":  "2016-09-13T18:57:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "natemcmaster",
                                           "body":  "Areas for examination:\n- what happens with large numbers of rules? Does the middleware hold up or does perf cripple the server?\n- what is the startup perf of adding large numbers of rules? (e.g. in theory, adding 10000 rules from a database).\n",
                                           "updatedAt":  "2016-09-13T18:57:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1MzI5MTg0Mw==",
                                           "createdAt":  "2016-10-12T18:08:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikaelm12",
                                           "body":  "Initial perf investigation done by @natemcmaster  here https://github.com/aspnet/BasicMiddleware/pull/105\n",
                                           "updatedAt":  "2016-10-12T18:08:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwODkxOTE1OQ==",
                                           "createdAt":  "2021-03-28T16:18:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@jkotalik I\u0027m gonn mark this as help wanted. It\u0027s a reasonable task for a contribution to add some benchmarks.",
                                           "updatedAt":  "2021-03-28T16:18:53Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Performance of Rewrite Middleware",
        "labels":  [
                       "feature-rewrite-middleware",
                       "area-middleware",
                       "help candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5982",
        "createdAt":  "2016-08-15T22:33:38Z",
        "number":  5982,
        "author":  "jkotalik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-28T14:10:12Z",
        "body":  "**Features implemented in mod_rewrite:**\nTypes:\n- [x] RewriteCond\n- [x] RewriteRule\n\nFlags:\n- [x] Cookie\n- [x] Escape Back References\n- [x] End\n- [x] Forbidden\n- [x] Gone\n- [x] Last\n- [x] No Case\n- [x] Query String Append\n- [x] Query String Delete\n- [x] Redirect\n\nServer Variables:\n- [x] HTTP_ACCEPT\n- [x] HTTP_COOKIE\n- [x] HTTP_FORWARDED\n- [x] HTTP_HOST\n- [x] HTTP_REFERER\n- [x] HTTP_USER_AGENT\n- [x] CONN_REMOTE_ADDR\n- [x] QUERY_STRING\n- [x] REMOTE_ADDR\n- [x] IPV6\n- [x] REMOTE_PORT\n- [x] REQUEST_METHOD\n- [x] SCRIPT_FILENAME\n- [x] SERVER_ADDR\n- [x] SERVER_PORT\n- [x] SERVER_PROTOCOL\n- [x] TIME_YEAR\n- [x] TIME_MON\n- [x] TIME_DAY\n- [x] TIME_HOUR\n- [x] TIME_MIN\n- [x] TIME_SEC\n- [x] TIME_WDAY\n- [x] TIME\n- [x] HTTPS\n- [x] REQUEST_FILENAME\n- [x] REQUEST_SCHEME\n- [x] REQUEST_URI\n\nCondPattern:\n- [x] Integer Comparison\n- [x] String Comparison\n- [x] Is File\n- [x] Is Directory\n- [x] Size\n\n**Features that are not implemented in mod_rewrite:**\nTypes:\n- [ ] RewriteBase\n- [ ] RewriteMap\n- [ ] RewriteEngine\n\nFlags:\n- [ ] Chain\n- [ ] Discard Path\n- [ ] Env\n- [ ] Next\n- [ ] No Escape\n- [ ] Pass Through\n- [ ] Query String Last\n- [ ] Skip\n\nServer Variables:\n- [ ] PATH_INFO\n\nCondPattern:\n- [ ] Symbolic Link\n\n**Features that will most likely not be implemented (not supported)**\nTypes:\n- [ ] RewriteOptions\n\nFlags:\n- [ ] Handler\n- [ ] No Subrequest\n- [ ] No Vary\n- [ ] Proxy\n- [ ] Type\n\nServer Variables:\n- [ ] HTTP_PROXY_CONNECTION\n- [ ] AUTH_TYPE\n- [ ] CONTEXT_PREFIX\n- [ ] CONTEXT_DOCUMENT_ROOT\n- [ ] REMOTE_HOST\n- [ ] REMOTE_IDENT\n- [ ] REMOTE_USER\n- [ ] DOCUMENT_ROOT\n- [ ] SCRIPT_GROUP\n- [ ] SCRIPT_USER\n- [ ] SERVER_ADMIN\n- [ ] SERVER_NAME\n- [ ] SERVER_SOFTWARE\n- [ ] API_VERSION\n- [ ] CONN_REMOTE_ADDR\n- [ ] IS_SUBREQ\n- [ ] REMOTE_ADDR\n- [ ] THE_REQUEST\n- [ ] Segmented Lookups (Ex HTTP:header) \n\nCondPattern:\n- [ ] Existing Url via subrequest\n- [ ] Executable\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHODpIdag==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIzOTk1MDM4Mw==",
                                           "createdAt":  "2016-08-15T22:37:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotalik",
                                           "body":  "This will be updated on completion of more features/ deciding if features will not be supported.\n",
                                           "updatedAt":  "2016-08-15T22:37:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI0NDQ1NjgxMA==",
                                           "createdAt":  "2016-09-02T18:44:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOADJL7w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "muratg",
                                                                               "createdAt":  "2016-09-02T18:45:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "natemcmaster",
                                                                               "createdAt":  "2016-09-02T22:17:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotalik",
                                           "body":  ":up: :date: to this list.\n",
                                           "updatedAt":  "2016-09-02T18:44:09Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Mod Rewrite Middleware Checklist",
        "labels":  [
                       "enhancement",
                       "feature-rewrite-middleware",
                       "area-middleware",
                       "help candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5984",
        "createdAt":  "2016-08-30T18:14:05Z",
        "number":  5984,
        "author":  "natemcmaster",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-28T14:10:13Z",
        "body":  "Regex is an expensive part of the rewrite middleware a lot in order to do pattern matching. It is common for rewrite patterns to be led by a static prefix.\n\nExample:\n\"blogs/(.*)\" =\u003e \"api/blogs?id=$1\"\n\nFor this rule, the middleware can avoid unnecessary regex allocations by only running the rule when the path begins with \"/blogs/\".\n\nPossible API design:\n\n``` c#\nRewriteOptions.AddRewrite(string prefix, string pattern, string urlResult) // prefix is static, doesn\u0027t container rules. If uri doesn\u0027t start with the prefix, skip this rule\nRewriteOptions.Ignore(string prefix); // always skip rule processing for urls beginning with this prefix\n```\n\nUsage\n\n``` c#\nRewriteOptions.AddRewrite(prefix: \"/blogs/\", pattern: \"(.*)\", urlResult: \"/api/blogs?id=$1\")\nRewriteOptions.Ignore(\"/images/\")\n```\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHODxkNiw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1MzI5ODU5OA==",
                                           "createdAt":  "2016-10-12T18:32:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikaelm12",
                                           "body":  "We settled on something like \n\n`RewriteOptions.AddRewriteWithPrefix(string prefix, string regex, string replcement)`\n\nright?\n",
                                           "updatedAt":  "2016-10-12T18:32:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1MzMwMDEwNw==",
                                           "createdAt":  "2016-10-12T18:37:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "There was talk of:\n\n```\nRewriteOptions.AddWithPrefix(string prefix, builder =\u003e \n{\n  builder.AddRewrite(regex, replcement);\n});\n```\n\nBut we shouldn\u0027t do anything here without finding a large set of customer rules that would benifit.\n",
                                           "updatedAt":  "2016-10-12T18:37:57Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Perf: add API to avoid regex matching rewrite rules unless necessary",
        "labels":  [
                       "enhancement",
                       "feature-rewrite-middleware",
                       "api-suggestion",
                       "area-middleware",
                       "help candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5986",
        "createdAt":  "2016-09-02T18:55:24Z",
        "number":  5986,
        "author":  "jkotalik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-28T23:10:23Z",
        "body":  "As an extension on my implementation of UrlRewrite, Outbound rules will look through an Http response for any regex match, and replace them appropriately. \nDocumentation here:\nhttp://www.iis.net/learn/extensions/url-rewrite-module/creating-outbound-rules-for-url-rewrite-module\nhttp://www.iis.net/learn/extensions/url-rewrite-module/url-rewrite-module-20-configuration-reference\n\nThe big problem here will be perf, as we are going to regex match on the whole body of the response. \n\nThis would probably be an extension on top of the rewriter.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJhzUtw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyNjkwNjQ2MQ==",
                                           "createdAt":  "2017-09-04T08:58:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aleq",
                                           "body":  "Is there already extension for outbound rules, I couldn\u0027t find anything about it?",
                                           "updatedAt":  "2017-09-04T09:34:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2MTA3MDUxMA==",
                                           "createdAt":  "2019-12-03T09:09:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iamsunny",
                                           "body":  "Hi, any update on the Outbound Rules?",
                                           "updatedAt":  "2019-12-03T09:09:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2MTA5MzEwNQ==",
                                           "createdAt":  "2019-12-03T10:03:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "No, we have no plans to implement them ",
                                           "updatedAt":  "2019-12-03T10:03:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2MTExNTM2Mw==",
                                           "createdAt":  "2019-12-03T10:57:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iamsunny",
                                           "body":  "thanks @davidfowl for replying. Please, do you suggest any alternate for the outbound rewrite rules? I\u0027ve a situation to replace body contents before the content is rendered. I\u0027m not sure if Regex would be costly in terms of performance. I highly appreciate any pointers, thanks.",
                                           "updatedAt":  "2019-12-03T10:57:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzOTQwNjgzMA==",
                                           "createdAt":  "2020-06-05T10:50:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MohammadMokhtarii",
                                           "body":  "Hi, any update on the Outbound Rules?\r\n@davidfowl \r\n\r\nDo You Find Any Solution ?\r\n@iamsunny \r\n\r\n",
                                           "updatedAt":  "2020-06-05T10:50:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzOTQyMzY3MQ==",
                                           "createdAt":  "2020-06-05T11:27:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iamsunny",
                                           "body":  "Not yet @mmokhtari, I\u0027m doing string replacement using Regex on the final output before rendering. Not sure why we can\u0027t have this feature out of the box?",
                                           "updatedAt":  "2020-06-05T11:27:02Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Add support for outbound rules in rewrite middleware",
        "labels":  [
                       "enhancement",
                       "feature-rewrite-middleware",
                       "affected-few",
                       "severity-major",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5987",
        "createdAt":  "2016-09-02T19:06:42Z",
        "number":  5987,
        "author":  "jkotalik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC0_D7Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Cyberboss",
                                            "createdAt":  "2020-11-06T01:08:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "barronpm",
                                            "createdAt":  "2024-01-05T15:28:24Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-08-28T23:10:22Z",
        "body":  "See title. Nate had this idea and I wanted to formally document it.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOD8w2xA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI0OTMwNzkyNQ==",
                                           "createdAt":  "2016-09-23T21:33:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "natemcmaster",
                                           "body":  "In checking file system attributes, Apache mod_rewrite supports checking if a file is a symbolic link. We might be able to imitate this behavior by checking if a file has the `FileAttributes.ReparsePoint` attribute set, but we need to verify the semantics are correct. e.g. when is ReparsePoint true? soft/hard links? junctions? etc.\n\nHere\u0027s the TODO in code:\nhttps://github.com/aspnet/BasicMiddleware/blob/ead052324c911604a18a64594672613cca211115/src/Microsoft.AspNetCore.Rewrite/Internal/ApacheModRewrite/RuleBuilder.cs#L134-L137\n\nApache RewriteCond: http://httpd.apache.org/docs/current/mod/mod_rewrite.html#rewritecond\n",
                                           "updatedAt":  "2016-09-23T21:34:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NTA0MTYwNA==",
                                           "createdAt":  "2016-12-06T02:19:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "natemcmaster",
                                           "body":  "More context: https://blogs.windows.com/buildingapps/2016/12/02/symlinks-windows-10/",
                                           "updatedAt":  "2016-12-06T02:20:06Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "See if FileAttributes.ReparsePoint can allow for symbolic link checks",
        "labels":  [
                       "feature-rewrite-middleware",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5988",
        "createdAt":  "2016-09-28T23:56:18Z",
        "number":  5988,
        "author":  "natemcmaster",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-28T23:10:22Z",
        "body":  "In #105 we remove an API from rewrite middleware because we worried it might hide potential perf problems for users. This removal requires users to explicitly declare \"skipProcessingRules\" on each call to .AddRewrite. We should reconsidering adding .AddRewrite with a default skipProcessingRules = false.\n\nSee https://github.com/aspnet/BasicMiddleware/pull/105#pullrequestreview-1880064 for more context.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOD1btgg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1NzM1NTEzOA==",
                                           "createdAt":  "2016-10-31T17:08:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "muratg",
                                           "body":  "Based on customer feedback, we may bring this back in.\n",
                                           "updatedAt":  "2016-10-31T17:08:51Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Consider re-adding .AddRewrite API with default skip flag",
        "labels":  [
                       "feature-rewrite-middleware",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5990",
        "createdAt":  "2016-10-19T19:12:38Z",
        "number":  5990,
        "author":  "natemcmaster",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-28T23:10:21Z",
        "body":  "Some rewrite rules could be cachable. We should investigate possible perf improvements by caching the result of a cachable rule instead of needing expensive regex pattern matching for every request.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Consider caching rule results",
        "labels":  [
                       "feature-rewrite-middleware",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5991",
        "createdAt":  "2016-11-09T21:27:00Z",
        "number":  5991,
        "author":  "strohhut",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-28T23:10:20Z",
        "body":  "What if I want case insensitive matching? What if I want to match https requests so I can redirect them to http? What if I want to redirect www to non-www (or vice-versa)?\r\n\r\nDo I really have to implement my own `IRule` for these simple use cases? The `RedirectRule` class and `AddRedirect` extension seem way too basic for me.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOD583_g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1OTk0NTIxNQ==",
                                           "createdAt":  "2016-11-11T12:14:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "strohhut",
                                           "body":  "I found that with `(?i)` case insesitive matching without `RegexOptions.IgnoreCase` can be done. So this is supported already.\n\nPlease also consider port and query dependent redirects besides domain and protocol ones I described above (basically all uri parts). Inverted matching would be nice too (e.g. apply a rule when the regex doesn\u0027t match). Also providing multiple match regexes to a rule that get combined (like IIS URL Rewrite).\n\nSomething like\n\n``` Csharp\nvar conditions = new [] {new UriMatchCondition(\"myPattern\", UriPart.Path, invert: false, caseInsesitive: true)};\noptions.AddRedirect(conditions, \"replacement\", requireAllConditions: true);\n```\n\nThe replacement pattern could include backreferences to named groups from the conditions\n",
                                           "updatedAt":  "2016-11-11T12:41:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1OTk5MTA2Nw==",
                                           "createdAt":  "2016-11-11T16:08:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "@strohhut thanks for the input. We\u0027re still working on getting the core infrastructure finished and then we can explore more of these scenarios.\n\nYou can also do some of these things using the UrlRewrite and ModRewrite infrastructure already added.\n\nThey way the infrastructure is setup it should be pretty easy for people to build and share custom code rules. https://github.com/aspnet-contrib may be a good place for collaberating on these.\n",
                                           "updatedAt":  "2016-11-11T16:08:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MDAwOTMxOA==",
                                           "createdAt":  "2016-11-11T17:26:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "strohhut",
                                           "body":  "Thx, for the help and considering this. `AddIISUrlRewrite` surely is a good idea if you need more than `RedirectRule` provides and if you don\u0027t want to implement your own rule classes.\n",
                                           "updatedAt":  "2016-11-11T17:26:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjA5Mjc5OA==",
                                           "createdAt":  "2016-11-21T22:50:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "muratg",
                                           "body":  "This needs design. Putting in 1.2.0 for now.",
                                           "updatedAt":  "2016-11-21T22:50:07Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Add more code-first rewrite rules",
        "labels":  [
                       "enhancement",
                       "feature-rewrite-middleware",
                       "severity-minor",
                       "affected-very-few",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5993",
        "createdAt":  "2016-12-05T16:02:19Z",
        "number":  5993,
        "author":  "davidpeden3",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-28T14:10:14Z",
        "body":  "https://www.iis.net/learn/extensions/url-rewrite-module/url-rewrite-module-20-configuration-reference#Note_about_request_headers_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMDcioA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NDkyMzUyNw==",
                                           "createdAt":  "2016-12-05T17:46:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidpeden3",
                                           "body":  "PR: https://github.com/aspnet/BasicMiddleware/pull/184",
                                           "updatedAt":  "2016-12-05T17:46:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwODkxOTcxMg==",
                                           "createdAt":  "2021-03-28T16:23:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I can\u0027t tell if we ever merged this PR. We support server variables via a feature now though so should be possible to implement.",
                                           "updatedAt":  "2021-03-28T16:23:03Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Custom request/response headers in IIS via server variables",
        "labels":  [
                       "feature-rewrite-middleware",
                       "area-middleware",
                       "help candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5994",
        "createdAt":  "2016-12-05T21:26:34Z",
        "number":  5994,
        "author":  "spboyer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCRYqlw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YZahringer",
                                            "createdAt":  "2020-05-19T10:17:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2022-03-04T04:45:16Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-10-28T14:10:15Z",
        "body":  "There are instances where compression is a detriment by comparison to the benefit. Where the time to compress and gzip payload is higher than the original payload.\r\n\r\n**ngnix** defaults to all content with the `gzip_min_length` setting used to set the minimum length of a response to that will be gzipped. \r\n\r\n**expressjs** compression module is 1k by default, uses `threshold` option to set globally.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQh35LQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NTA2NDI3Mw==",
                                           "createdAt":  "2016-12-06T05:27:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "As content-length is optional and only set by a few components, this would require buffering the response body up to that threshold before enabling compression. That\u0027s doable, but it can cause un-expected delays for streaming scenarios.",
                                           "updatedAt":  "2016-12-06T05:27:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NTEyNjQzMQ==",
                                           "createdAt":  "2016-12-06T11:24:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "spboyer",
                                           "body":  "For the streaming scenarios the threshold should be set to 0, by passing the need to for check/routine. ",
                                           "updatedAt":  "2016-12-06T11:24:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NTE4NjEzMA==",
                                           "createdAt":  "2016-12-06T15:51:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Except that streaming is only done for some requests, where this setting would be for all requests.",
                                           "updatedAt":  "2016-12-12T18:39:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NTIwMjk1Nw==",
                                           "createdAt":  "2016-12-06T16:48:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "spboyer",
                                           "body":  "So is the use case for the compression middleware only for streaming? Considering that Kestrel is not a web facing server and should be proxied. So typically, compression would be handled by IIS, nginx or apache for requests.  Trying to find to use case, or is this in an effort to get to a public facing server? ",
                                           "updatedAt":  "2016-12-06T16:48:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NjUxNDA2NA==",
                                           "createdAt":  "2016-12-12T18:40:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Yes, the main use case is for when Kestrel or WebListener are used independently. Kestrel will eventually be safe for edge deployments, and WebListener already is.\r\n\r\nStreams are not the main use case, but the middleware should not break streaming with too much buffering like the IIS implementation does.",
                                           "updatedAt":  "2016-12-12T18:40:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI4ODAxNzI4Mw==",
                                           "createdAt":  "2017-03-21T09:08:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RehanSaeed",
                                           "body":  "When the static file middleware is being used, the size of the content is known. Can\u0027t that scenario be optimized?",
                                           "updatedAt":  "2017-03-21T09:08:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwODkxOTkxMQ==",
                                           "createdAt":  "2021-03-28T16:24:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@Tratcher is this something we want to do? If so, can it be a contribution?",
                                           "updatedAt":  "2021-03-28T16:24:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwODk1MTg0Ng==",
                                           "createdAt":  "2021-03-28T20:06:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Design considerations:\r\n- This would be limited to content-length responses, we wouldn\u0027t want to buffer streamed responses to find out if they were over the threshold or not.\r\n- I don\u0027t know if we\u0027d enable it by default, the effectiveness of compression varies a lot by the content.\r\n- Would a callback that let you check the response and dynamically enable/disable compression be more useful?",
                                           "updatedAt":  "2021-03-28T20:06:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwODk1NTgzMw==",
                                           "createdAt":  "2021-03-28T20:38:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Seems we also have prior art for nginx and expressjs as data points. Whoever does this issues should report on what those other servers/frameworks do. \n\nPS: I would assume it would only apply for content length based responses as well.",
                                           "updatedAt":  "2021-03-28T20:38:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde84_H5VH",
                                           "createdAt":  "2022-03-04T10:25:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WeihanLi",
                                           "body":  "New config options for `ResponseCompressionOptions`?\r\n\r\n``` c#\r\npublic int Threshold { get; set; }\r\npublic Func\u003cHttpContext, ValueTask\u003cbool\u003e\u003e? CompressValidator { get; set; }\r\n```\r\n\r\n",
                                           "updatedAt":  "2022-03-04T10:25:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85CHfkt",
                                           "createdAt":  "2022-04-26T03:17:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pbiggar",
                                           "body":  "The [Response Compression docs](https://docs.microsoft.com/en-us/aspnet/core/performance/response-compression?view=aspnetcore-6.0#response-compression) say\r\n\r\n\u003e Don\u0027t compress files smaller than about 150-1000 bytes, depending on the file\u0027s content and the efficiency of compression. The overhead of compressing small files may produce a compressed file larger than the uncompressed file.\r\n\r\nso it feels quite surprising that the middleware being discussed in those docs does not actually support that.",
                                           "updatedAt":  "2022-04-26T03:17:48Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Compression: Add threshold for compression ",
        "labels":  [
                       "enhancement",
                       "feature-response-compression",
                       "affected-few",
                       "severity-minor",
                       "area-middleware",
                       "help candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/5996",
        "createdAt":  "2017-02-07T08:24:21Z",
        "number":  5996,
        "author":  "Lanoli",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBBZY0w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "joaopgrassi",
                                            "createdAt":  "2020-04-17T08:29:53Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-08-28T23:10:18Z",
        "body":  "X-Forwarded-Port header is not supported, only ports in X-Forwarded-Host",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVcYPMA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3ODA4NjkzNA==",
                                           "createdAt":  "2017-02-07T18:04:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Is the port in the Host inadequate / inaccurate?",
                                           "updatedAt":  "2017-02-07T18:04:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3ODE0MjAwOA==",
                                           "createdAt":  "2017-02-07T21:14:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Lanoli",
                                           "body":  "It works, but I have an existing environment that uses the X-Forwarded-Port header to communicate the port instead of putting it in the X-Forwarded-Host header. Both methods seem to be valid.",
                                           "updatedAt":  "2017-02-07T21:14:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMDk0MTY3MQ==",
                                           "createdAt":  "2017-08-08T12:31:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Abdruggi",
                                           "body":  "Libraries like Swashbuckle expect the port in a separate X-Forwarded-Port header. On the other hand, AWS Load Balancing sets the Port header (http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/x-forwarded-headers.html#x-forwarded-port). If the task is still open i would be willing to implement it.",
                                           "updatedAt":  "2017-08-08T15:23:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMDk3MTE0Nw==",
                                           "createdAt":  "2017-08-08T14:22:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "@Abdruggi does the x-forwarded-port value differ from the value included in the Host header?\r\n\r\nYou\u0027re welcome to submit a PR for this.",
                                           "updatedAt":  "2017-08-08T14:22:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMyMDk5MDA5OQ==",
                                           "createdAt":  "2017-08-08T15:22:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Abdruggi",
                                           "body":  "The x-forwarded-host header should not include a port if the x-forwarded-port header is set. I would suggest something like that: \r\n\r\nIf just the x-forwarded-port header is present:\r\n- request.Host.Port = x-forwarded-port header \r\n\r\nIf just the x-forwarded-host header is present:\r\n- request.Host.Host = x-forwarded-host header (don’t strip the port if available)\r\n\r\nif both headers are present: \r\n- request.Host.Port = x-forwarded-port header \r\n- request.Host.Host = x-forwarded-host header (strip the port if available)\r\n\r\nWhat do you think about this? \r\n",
                                           "updatedAt":  "2017-08-09T12:30:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwOTU4ODc0NA==",
                                           "createdAt":  "2018-08-01T14:11:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I\u0027ve just run into this too, only the `x-forwarded-port` header is forwarded in my setup (and `X-Forwarded-Proto`, `X-Forwarded-For`, but no `x-forwarded-host`)",
                                           "updatedAt":  "2018-08-01T14:11:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwOTc0MDc5MA==",
                                           "createdAt":  "2018-08-01T22:07:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "biaol-odata",
                                           "body":  "@Tratcher @Abdruggi Any timeline information available for resolution of this issue? If this is not going to be resolved in near future, we will probably consider alternative of patching it up in upper layer (WebApi for OData) to unblock some user scenario. Thanks.",
                                           "updatedAt":  "2018-08-01T22:07:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwOTc0OTQ5OA==",
                                           "createdAt":  "2018-08-01T22:45:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "No, we don\u0027t have any plans for this feature at the moment. What proxy is sending you that header?",
                                           "updatedAt":  "2018-08-01T22:45:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMDAwMjI2OA==",
                                           "createdAt":  "2018-08-02T17:16:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "biaol-odata",
                                           "body":  "@elevate-andrewlock ?",
                                           "updatedAt":  "2018-08-02T17:16:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMDE1MzcwOA==",
                                           "createdAt":  "2018-08-03T06:02:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "andrewlock",
                                           "body":  "Both the NGINX and HAProxy setups we currently have send that `x-forwarded-port`. I believe AWS ELBs also send this header. NGINX also sends the `x-forwarded-host` (without the port), but HAProxy does not. Consequently, we have not been able to use the `XForwardedHost` header. \r\n\r\nAs a workaround, I\u0027ve basically had to duplicate the `ForwardedHeadersMiddleware` in miniature, but it really feels like @Abdruggi\u0027s [comment](https://github.com/aspnet/BasicMiddleware/issues/204#issuecomment-320990099) would be the most logical treatment of this header.",
                                           "updatedAt":  "2018-08-03T07:07:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMDE1NDg1MA==",
                                           "createdAt":  "2018-08-03T06:09:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "@shirhatti ",
                                           "updatedAt":  "2018-08-03T06:09:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxMDM4NjYzMQ==",
                                           "createdAt":  "2018-08-03T21:57:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shirhatti",
                                           "body":  "Clearing Backlog milestone so we can re-triage and assess priority",
                                           "updatedAt":  "2018-08-03T21:57:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMDQxOTEwOA==",
                                           "createdAt":  "2018-10-16T22:10:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "muratg",
                                           "body":  "@shirhatti Can you take a look?",
                                           "updatedAt":  "2018-10-16T22:10:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMDQzNDk2MA==",
                                           "createdAt":  "2018-10-16T23:21:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shirhatti",
                                           "body":  "@Abdruggi @andrewlock  I spent some time taking a look at your suggestions. Unless I\u0027m mistaken I couldn\u0027t find any RFC that defines the behavior that you\u0027ve called out?\r\n\r\nWe\u0027d be extremely hesitant to introduce non-standard behavior.",
                                           "updatedAt":  "2018-10-16T23:21:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMDUyMjYzMw==",
                                           "createdAt":  "2018-10-17T07:37:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBBZYAw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "joaopgrassi",
                                                                               "createdAt":  "2020-04-17T08:28:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "andrewlock",
                                           "body":  "@shirhatti, no as far as I can see, there is no RFC governing X-Forwarded-Port. However, while not standard, it is extremely common. For example [AWS use X-Forwarded-Port in the Elastic Load Balancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/x-forwarded-headers.html), as does [the standard Kubernetes NGINX ingress-controller](https://github.com/kubernetes/ingress-nginx/blob/master/rootfs/etc/nginx/template/nginx.tmpl#L1074) (which is where I found the issue). Even Swashbuckle [uses the header to correctly generate links](https://github.com/domaindrivendev/Swashbuckle/blob/master/Swashbuckle.Core/Application/SwaggerDocsConfig.cs#L308).\r\n\r\nI don\u0027t feel like supporting `X-Forwarded-Port` would be a particularly controversial requirement given its widespread use, and the fact that it can be easily (optionally) added to existing behaviour. I think [This comment](https://github.com/aspnet/BasicMiddleware/issues/204#issuecomment-320990099) best describes the expected behaviour, which is to simply use the forwarded port if it\u0027s provided. We\u0027ve already seen bugs in your own products (OData) which were highlighted (\"caused\" is probably a bit strong) by this issue. \r\n\r\nI understand the reticence to add \"non standard\" behaviour, but it seems like this will be something that bites people without them realising, and can cause some tricky bugs to identify. What about that \"pit of success\" 😉. Obviously this is mostly selfish - I really don\u0027t want to have to maintain my own version of the forwarded ports middleware (as I\u0027m currently doing locally), but if you commit to _not_ implementing this I\u0027ll just publish my version on NuGet. ",
                                           "updatedAt":  "2018-10-17T07:37:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMDczMDY3OQ==",
                                           "createdAt":  "2018-10-17T18:07:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shirhatti",
                                           "body":  "\u003e I understand the reticence to add \"non standard\" behaviour, but it seems like this will be something that bites people without them realising, and can cause some tricky bugs to identify.\r\n\r\nI would love to understand these scenarios better. Given that the `X-Forwarded-Host` already contains port, I\u0027m missing these pits of failures without `X-Forwarded-Port`.",
                                           "updatedAt":  "2018-10-17T18:08:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMDkyODkzNw==",
                                           "createdAt":  "2018-10-18T08:52:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "andrewlock",
                                           "body":  "Sure, so for the examples I\u0027ve described (and experienced):\r\n\r\n* AWS ELB doesn\u0027t use `X-Forwarded-Host` at all, only `X-Forwarded-Port`. This is probably the most common occurence (they send `X-Forwarded-Port`, `X-Forwarded-Proto`, `X-Forwarded-For`, but no `X-forwarded-host`). \r\n* Some upstream proxies won\u0027t set the port in the `X-Forwarded-Host` - instead `X-Forwarded-Host` contains the hostname only, and `X-Forwarded-Port` contains the port. I can\u0027t remember the exact setup where I saw this, but I believe it was behind an HAProxy instance.",
                                           "updatedAt":  "2018-10-18T08:52:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMTEwNjExMA==",
                                           "createdAt":  "2018-10-18T18:02:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "What does ELB put in the real Host header? The back-end machine name and port? Or the original public value?",
                                           "updatedAt":  "2018-10-18T18:02:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMTExNTQzMA==",
                                           "createdAt":  "2018-10-18T18:32:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shirhatti",
                                           "body":  "As I best I can tell from ELB docs, it sends the original unmodified Host Header.\r\n\r\nFor HAProxy, there is no default behavior. The suggested configuration has this\r\n```\r\n  http-request set-header X-Forwarded-Host %[req.hdr(host)]\r\n  http-request set-header X-Forwarded-Port %[dst_port]\r\n  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }\r\n  http-request set-header X-Forwarded-Proto https if { ssl_fc }\r\n```\r\n\r\nFrom this it\u0027s evident that that `X-Forwarded-Host` still contains the port information.",
                                           "updatedAt":  "2018-10-18T18:32:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMTExNjEwOQ==",
                                           "createdAt":  "2018-10-18T18:34:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shirhatti",
                                           "body":  "If anything, this thread is testament to why we don\u0027t like to ship non-standard behavior 😄 \r\n\r\nI\u0027m going to backlog this for now, unless we have evidence that there seems to be consensus among what different proxies do.",
                                           "updatedAt":  "2018-10-18T18:34:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Vxg8w",
                                           "createdAt":  "2023-02-21T20:19:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "amccool",
                                           "body":  "\u003e I understand the reticence to add \"non standard\" behaviour, but it seems like this will be something that bites people without them realising, and can cause some tricky bugs to identify. What about that \"pit of success\" 😉. Obviously this is mostly selfish - I really don\u0027t want to have to maintain my own version of the forwarded ports middleware (as I\u0027m currently doing locally), but if you commit to _not_ implementing this I\u0027ll just publish my version on NuGet.\r\n\r\n@andrewlock did you end up publishing your own version of `ForwardedHeadersMiddleware` ?\r\n",
                                           "updatedAt":  "2023-02-21T20:34:09Z"
                                       }
                                   ],
                         "totalCount":  21
                     },
        "title":  "No support for X-Forwarded-Port",
        "labels":  [
                       "enhancement",
                       "affected-few",
                       "severity-minor",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/6002",
        "createdAt":  "2017-09-01T17:28:57Z",
        "number":  6002,
        "author":  "jkotalik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-28T14:10:16Z",
        "body":  "We missed implementing the URL parameter in IIS Url Rewrite rules. The URL parameter will just return the original request url. Ex:\r\n\r\n```xml\r\n\u003crule name=\"LowerCaseRule1\" enabled=\"true\" stopProcessing=\"true\"\u003e\r\n    \u003cmatch url=\"[A-Z]\" ignoreCase=\"false\" /\u003e\r\n    \u003caction type=\"Redirect\" url=\"{ToLower:{URL}}\" /\u003e\r\n\u003c/rule\u003e\r\n```\r\n\r\nthe ToLower:{URL} would return the lower cased request url. \r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMDdVVg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwODkzMjY5NA==",
                                           "createdAt":  "2021-03-28T17:56:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This looks like a good up for grabs",
                                           "updatedAt":  "2021-03-28T17:56:46Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "IISUrlRewrite \"URL\" parameter",
        "labels":  [
                       "area-middleware",
                       "help candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/6003",
        "createdAt":  "2017-12-19T22:37:28Z",
        "number":  6003,
        "author":  "jkotalik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-28T14:10:16Z",
        "body":  "Regex timeouts that are used across [UrlRewrite](https://github.com/aspnet/BasicMiddleware/blob/dev/src/Microsoft.AspNetCore.Rewrite/Internal/IISUrlRewrite/UrlRewriteRuleBuilder.cs#L13), ApacheModRewrite, and [code rules](https://github.com/aspnet/BasicMiddleware/blob/03b63e2c2a5ec27deef4be692ff2119188b67d73/src/Microsoft.AspNetCore.Rewrite/Internal/RewriteRule.cs) are not consistent. The are set at 1 second or 1 millisecond in different places. Secondly, 1 millisecond is too short for a regex expression; it should be 1 second as the timeout is mostly for making sure your server isn\u0027t locked. Also if the expression timeouts, it returns a 500 server error as the exception is unhandled. Thirdly, the timeout should be configurable in RewriteOptions. \r\n\r\nPlan of action:\r\n- Timeouts should be increased to 1 second across the board.\r\n- For 2.1, we should make Regex timeouts configurable a\r\n- The timeouts should be backported to 2.0 and 1.1\r\n\r\n@Eilon @muratg this is a patch candidate. Workarounds are very difficult. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOFU2KPw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1MjkwOTE4MA==",
                                           "createdAt":  "2017-12-19T22:42:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eilon",
                                           "body":  "Need to consult with @blowdart on a good timeout. I agree 1ms is waaaay too small.",
                                           "updatedAt":  "2017-12-19T22:42:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1MjkxMTA4MQ==",
                                           "createdAt":  "2017-12-19T22:50:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAQrYcA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotalik",
                                                                               "createdAt":  "2017-12-19T23:05:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "blowdart",
                                           "body":  "1.1 milliseconds.\r\n\r\nMerry Christmas ⛄️ \r\n\r\nOh ok, 1 second is fine as a default, as long as it\u0027s configurable.",
                                           "updatedAt":  "2017-12-19T22:50:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1MjkyNjIwNw==",
                                           "createdAt":  "2017-12-20T00:15:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eilon",
                                           "body":  "@blowdart but in a patch, we might not make it configurable. Would 1sec be reasonable in the patch? (With a switch to restore the original bizarre 1ms timeout.)",
                                           "updatedAt":  "2017-12-20T00:15:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1Mjk3ODI1Nw==",
                                           "createdAt":  "2017-12-20T06:37:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotalik",
                                           "body":  "The patch is a simple fix. However the redesign would require more work. When calling options.AddRedirect(), options.AddIISUrlRewrite, etc, we eagerly create the Regex object, which is too early as options would now store the regex timeout. Someone could do:\r\n```\r\noptions.AddRedirect(...); // Creates a regex object with default timeout of 1 ms\r\noptions.RegexTimeout = TimeSpan.FromSeconds(1);\r\noptions.AddRewrite(...);\r\n```\r\nwhich would set the timeout of 1 ms instead of 1 second for the regex expression. We shouldn\u0027t have options apis that need to be ordered.\r\nWe could either create the regex objects on first request or use a different pattern to know when rules are done being added. \r\n",
                                           "updatedAt":  "2017-12-20T06:37:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1MzEwNTM4Ng==",
                                           "createdAt":  "2017-12-20T16:07:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Config would be better, but if we can\u0027t do that for a patch, then, ugh, ok fix it at 1 second.",
                                           "updatedAt":  "2017-12-20T16:07:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1MzEzNzM5OQ==",
                                           "createdAt":  "2017-12-20T18:00:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eilon",
                                           "body":  "@jkotalik yeah I don\u0027t think having a property on the options would be the right way to do it. It would have to be a parameter on each `.AddXyz()` call.",
                                           "updatedAt":  "2017-12-20T18:00:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1MzQ0NTM5NQ==",
                                           "createdAt":  "2017-12-21T20:05:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "`options.RegexTimeout = TimeSpan.FromSeconds(1); ` looks like a simple, piratical solution. Changing it to DefaultRegexTimeout might make it\u0027s usage a little more clear. The ordering restriction is not a hard thing to explain to users.\r\n\r\nPassing in the timeout to every .Add API looks like overkill, you\u0027ll add a lot of overloads that very few people will use, and they\u0027ll have to specify it on every rule.",
                                           "updatedAt":  "2017-12-21T20:05:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1MzY5NjY2Ng==",
                                           "createdAt":  "2017-12-23T00:51:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotalik",
                                           "body":  "Adding timeouts through each of the `.AddXyz()` calls would be bloated for sure. I guess we can add it to options and throw if someone does:\r\n```csharp\r\noptions.AddRule();\r\noptions.RegexTimeout = TimeSpan.FromSeconds(1); // throw\r\n```",
                                           "updatedAt":  "2017-12-23T00:51:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NDE0ODc3OA==",
                                           "createdAt":  "2017-12-27T17:41:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAQ3y3w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotalik",
                                                                               "createdAt":  "2017-12-27T17:42:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "muratg",
                                                                               "createdAt":  "2017-12-27T17:42:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Tratcher",
                                                                               "createdAt":  "2017-12-27T17:46:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "Eilon",
                                           "body":  "Or don\u0027t throw and make it work: have every call to `.AddXyz()` capture the \"current\" RegexTimeout and use it.",
                                           "updatedAt":  "2017-12-27T17:41:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NTEyMDc1OA==",
                                           "createdAt":  "2018-01-03T20:39:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotalik",
                                           "body":  "#280 for an initial fix to dev. Will make PRs to 1.1.x and 2.0.x branches and then address fixes to 2.1.x.",
                                           "updatedAt":  "2018-01-03T20:39:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NzQwMzE5OQ==",
                                           "createdAt":  "2018-01-13T02:28:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eilon",
                                           "body":  "FYI, we ended up deciding no to patch this. But for 2.1 we can consider if we want some fancier behavior(s).",
                                           "updatedAt":  "2018-01-13T02:28:33Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Regex Timeout are too short, not consistent, and not configurable in RewriteMiddleware",
        "labels":  [
                       "enhancement",
                       "feature-rewrite-middleware",
                       "severity-minor",
                       "affected-very-few",
                       "area-middleware",
                       "help candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/2396",
        "createdAt":  "2018-01-01T20:15:31Z",
        "number":  2396,
        "author":  "aspnet-hello",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-28T14:10:07Z",
        "body":  "_From @anurse on Wednesday, November 1, 2017 3:22:31 PM_\r\n\r\nSome events listed below. The goal is to add events that will help users solve problems so if these aren\u0027t going to do that job, feel free to suggest/discuss others!\r\n\r\n* `Microsoft-AspNetCore-Session` EventSource\r\n    * `SessionsCreated` - Counts sessions created\r\n    * `SessionsLoaded` - Counts the number of times a session is loaded from the provider (this happens on each request for a session)\r\n    * `SessionsCommitted` - Counts the number of times a session is commited to the provider (again, happens on each request)\r\n    * We can\u0027t track abandoned or timed-out sessions any more as they are handled by caching now and we don\u0027t provide a way to explicitly abandon a session. We could detect \"empty\" sessions (with no data) but such a session could always be added to again later.\r\n\r\nSee https://gist.github.com/anurse/af1859663ac91c6cf69c820cebe92303 for some guidance on adding EventSources and EventCounters to ASP.NET projects.\r\n\r\n_Copied from original issue: aspnet/Session#200_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Add EventSource/EventCounter tracing and metrics for Session",
        "labels":  [
                       "enhancement",
                       "feature-session",
                       "severity-nice-to-have",
                       "affected-few",
                       "area-middleware",
                       "help candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/2438",
        "createdAt":  "2018-01-01T21:29:04Z",
        "number":  2438,
        "author":  "aspnet-hello",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-28T23:10:30Z",
        "body":  "_From @sebastienros on Tuesday, November 14, 2017 6:16:05 PM_\r\n\r\nBecause it\u0027s missing an entry in the default `IContentTypeProvider`\r\nSome files like `acme-challenge` (used by Let\u0027s Encrypt) or Apple application ids, don\u0027t use extensions.\r\n\r\nI\u0027d like to know if it could be reconsidered. \r\n\r\n_Copied from original issue: aspnet/StaticFiles#223_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOFSP2xw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NDY3ODQ2NA==",
                                           "createdAt":  "2018-01-01T21:29:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aspnet-hello",
                                           "body":  "_From @Tratcher on Tuesday, November 14, 2017 9:38:07 PM_\r\n\r\nThis acme-challenge spec?\r\nhttps://github.com/ietf-wg-acme/acme/blob/0b172d509a725336633b9a76998e907a8e0002e3/draft-ietf-acme-acme.md#L1992\r\nThis doesn\u0027t look like static content, it looks like a dynamic challenge-response handshake.\r\n\r\nApple app ids look like they\u0027re domain name based, or am I missing something?\r\nhttps://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/AppID.html",
                                           "updatedAt":  "2018-01-01T21:29:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NDY3ODQ2OQ==",
                                           "createdAt":  "2018-01-01T21:29:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aspnet-hello",
                                           "body":  "_From @sebastienros on Wednesday, November 15, 2017 9:08:00 AM_\r\n\r\nThis is the set of files I personally needed for Let\u0027s Encrypt, you\u0027ll notice they don\u0027t have extensions\r\n\r\n![image](https://user-images.githubusercontent.com/1165805/32849368-cc4acb68-c9e3-11e7-904f-b497687e9931.png)\r\n\r\nHere is the documentation on how to configure Stripe with apple pay id (it\u0027s not apple application id, my bad)\r\n\r\n![image](https://user-images.githubusercontent.com/1165805/32849442-024c7e32-c9e4-11e7-9107-ef94346a8f87.png)\r\n\r\nI believe many developers would lose some time understanding why it doesn\u0027t work, or even not be able to update the app that easily as it needs a new deployment.\r\n\r\n",
                                           "updatedAt":  "2018-01-01T21:29:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NDY3ODQ3MQ==",
                                           "createdAt":  "2018-01-01T21:29:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aspnet-hello",
                                           "body":  "_From @sebastienros on Wednesday, November 15, 2017 9:42:27 AM_\r\n\r\nI can confirm that there is no other way to serve these file than setting `ServeUnknownFileTypes` and optionally `DefaultContentType`. Registering a custom `IContentTypeProvider` and adding `\"\"` or `\".\"` won\u0027t have any effect. So it\u0027s all or nothing in this case.",
                                           "updatedAt":  "2018-01-01T21:29:07Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Extensionless files are not served by default",
        "labels":  [
                       "enhancement",
                       "feature-static-files",
                       "affected-few",
                       "severity-minor",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/2455",
        "createdAt":  "2018-01-01T21:40:45Z",
        "number":  2455,
        "author":  "aspnet-hello",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-28T14:10:08Z",
        "body":  "_From @NickAb on Sunday, February 28, 2016 6:26:46 AM_\r\n\r\n`DefaultFiles` middleware allows routing to default files at request subpath if no file was found, but for angular or other single page apps we would need to always route to `/wwwroot/index.html` for any subpath, i.e.:\n- `http://localhost:5000/` -\u003e `wwwroot/index.html`\n- `http://localhost:5000/some-sub-path` -\u003e `wwwroot/index.html`\n\nCurrently we have to write custom middleware to handle this case (see [stackoverflow](http://stackoverflow.com/questions/34628536/asp-net-5-angular-2-routing-template-page-not-reloading/34643314) for example). But it seems that adding option to `DefaultFiles` to route to `wwwroot` will be a good solution for such a common case.\n\nhttps://github.com/aspnet/StaticFiles/blob/dev/src/Microsoft.AspNetCore.StaticFiles/DefaultFilesMiddleware.cs#L67\n\r\n\r\n_Copied from original issue: aspnet/StaticFiles#115_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOFSP5ZQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NDY3OTEzMg==",
                                           "createdAt":  "2018-01-01T21:40:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aspnet-hello",
                                           "body":  "_From @muratg on Monday, February 29, 2016 2:11:17 PM_\r\n\r\n@NickAb By \"custom middleware\" do you mean the example in http://stackoverflow.com/questions/31184446/asp-net-5-html5-history/34882405#34882405? \n",
                                           "updatedAt":  "2018-01-01T21:40:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NDY3OTEzMw==",
                                           "createdAt":  "2018-01-01T21:40:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aspnet-hello",
                                           "body":  "_From @NickAb on Monday, February 29, 2016 6:30:16 PM_\r\n\r\nFor the moment I use this instead:\n\n``` cs\napp.Use(async (context, next) =\u003e\n{\n    await next();\n\n    if (context.Response.StatusCode == 404 \u0026\u0026 IsGetOrHeadMethod(context.Request.Method))\n    {\n        context.Request.Path = \"/\"; // Put your Angular root page here \n        await next();\n    }\n});\n```\n\nAlso there is an [Angular Middleware](https://github.com/a11smiles/AngularMiddleware/blob/master/AngularMiddleware/AngularRequestMiddleware.cs) on github.\n",
                                           "updatedAt":  "2018-01-01T21:40:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NDY3OTEzOQ==",
                                           "createdAt":  "2018-01-01T21:40:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aspnet-hello",
                                           "body":  "_From @Tratcher on Tuesday, March 1, 2016 8:50:09 PM_\r\n\r\nPossibly related to https://github.com/aspnet/StaticFiles/issues/111\n",
                                           "updatedAt":  "2018-01-01T21:40:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NDY3OTE0MQ==",
                                           "createdAt":  "2018-01-01T21:40:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aspnet-hello",
                                           "body":  "_From @Tratcher on Wednesday, April 27, 2016 11:37:19 AM_\r\n\r\nI think it would be an option like IncludeSubDirectories on PhysicalFileProvider.\n",
                                           "updatedAt":  "2018-01-01T21:40:53Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Option to look for default files at the root of wwwroot path only, not at subpath",
        "labels":  [
                       "enhancement",
                       "feature-static-files",
                       "affected-few",
                       "severity-minor",
                       "area-middleware",
                       "help candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/2456",
        "createdAt":  "2018-01-01T21:41:06Z",
        "number":  2456,
        "author":  "aspnet-hello",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-28T23:10:29Z",
        "body":  "_From @Tratcher on Tuesday, February 16, 2016 9:01:28 AM_\r\n\r\nAdd an event at the beginning of the static file middleware when the request first arrives that would let you map any path to any file, and pick the content-type. Then the middleware could process that file normally (e-tags, if-modified-since, range, etc..).\n\r\n\r\n_Copied from original issue: aspnet/StaticFiles#111_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOFSP5dQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NDY3OTE1Nw==",
                                           "createdAt":  "2018-01-01T21:41:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aspnet-hello",
                                           "body":  "_From @Eilon on Saturday, February 20, 2016 10:55:18 PM_\r\n\r\nMoving to backlog as we\u0027re trying to limit new features at this time.\n",
                                           "updatedAt":  "2018-01-01T21:41:07Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Add event for customizing file selection",
        "labels":  [
                       "enhancement",
                       "feature-static-files",
                       "severity-nice-to-have",
                       "affected-very-few",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/2622",
        "createdAt":  "2018-01-02T01:08:59Z",
        "number":  2622,
        "author":  "aspnet-hello",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCuOzKA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "antonioortizpola",
                                            "createdAt":  "2018-04-20T00:07:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rventuri76",
                                            "createdAt":  "2020-03-20T20:56:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "seangwright",
                                            "createdAt":  "2020-10-07T03:24:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "saxmaster79",
                                            "createdAt":  "2020-12-03T12:23:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jrkd",
                                            "createdAt":  "2021-03-21T05:07:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "database64128",
                                            "createdAt":  "2021-07-19T09:59:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pburndorfer",
                                            "createdAt":  "2021-10-08T08:22:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cmxl",
                                            "createdAt":  "2022-02-03T15:18:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KingLurchi",
                                            "createdAt":  "2022-02-03T16:38:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colotiline",
                                            "createdAt":  "2022-12-07T07:18:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "johannesmols",
                                            "createdAt":  "2023-02-04T10:08:02Z"
                                        }
                                    ],
                          "totalCount":  11
                      },
        "updatedAt":  "2023-10-28T14:09:31Z",
        "body":  "_From @JunTaoLuo on Thursday, September 15, 2016 2:15:48 PM_\r\n\r\nCurrently we only set the absolute timeouts for cache entries. There is no mechanism to explicitly invalidate a cache entry before expiry. Also, how would applications/users interact with this feature?\n\nNote that invalidation is required by the RFC for unsafe methods, e.g. a successful PUT should invalidate any previous cached resources at the same URI.\n\r\n\r\n_Copied from original issue: aspnet/ResponseCaching#38_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOT9_kxw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NDY5MDExOQ==",
                                           "createdAt":  "2018-01-02T01:08:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aspnet-hello",
                                           "body":  "_From @refactorthis on Friday, March 31, 2017 9:38:12 AM_\r\n\r\nendpoints that mutate state should invalidate the previous cached item by default as you mention. It would also be beneficial to have the ability to inject a service that allows invalidating cached items on demand. For example an event received over a bus may mutate the objects state which would require invalidation. This may however be out of scope and better handled by abstracting the cache to a different layer?",
                                           "updatedAt":  "2018-01-02T01:08:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NDY5MDEyMQ==",
                                           "createdAt":  "2018-01-02T01:09:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aspnet-hello",
                                           "body":  "_From @muratg on Thursday, May 25, 2017 3:42:26 PM_\r\n\r\n@glennc If we want to do this in the future, we should get together and agree on a design.",
                                           "updatedAt":  "2018-01-02T01:09:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NDY5MDEyNA==",
                                           "createdAt":  "2018-01-02T01:09:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aspnet-hello",
                                           "body":  "_From @justintubbs on Wednesday, August 9, 2017 12:19:14 PM_\r\n\r\nAny update on this?  Cache invalidation would be a killer feature both for REST API interactions, but also SignalR or other types of event buffers/message queues that cause the underlying data to mutate.",
                                           "updatedAt":  "2018-01-02T01:09:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MDU5ODMwOA==",
                                           "createdAt":  "2020-08-07T16:22:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCBWxYg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "deagleD",
                                                                               "createdAt":  "2020-08-07T16:31:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "justintubbs",
                                                                               "createdAt":  "2020-08-07T18:00:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "seangwright",
                                                                               "createdAt":  "2020-10-07T03:24:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mjrousos",
                                                                               "createdAt":  "2020-10-09T18:47:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jrkd",
                                                                               "createdAt":  "2021-03-21T05:08:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "catalin-ifacts",
                                                                               "createdAt":  "2021-11-05T12:59:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "xantari",
                                           "body":  "How is this not solved yet? This is a common use case:\r\n\r\n1. Server caches result of page\r\n2. We receive a cache eviction event notification from a headless CMS\r\n3. We should be able to clear the response output cache and load the new CMS data!",
                                           "updatedAt":  "2020-08-07T16:22:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNjM0NTk3OQ==",
                                           "createdAt":  "2020-10-09T18:47:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mjrousos",
                                           "body":  "@muratg @glennc, just checking in. Any updates on this one? I\u0027m working with a customer whose scenario sounds similar to @xantari\u0027s. Being able to invalidate items from the cache would make response caching a lot more useful in that scenario.",
                                           "updatedAt":  "2020-10-09T18:47:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyODI0OTk4Ng==",
                                           "createdAt":  "2020-11-16T18:40:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JunTaoLuo",
                                           "body":  "This is something we\u0027d want to keep in mind when designing Output Cache: https://github.com/dotnet/aspnetcore/issues/2627.",
                                           "updatedAt":  "2020-11-16T18:40:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1MjI1MzM3OA==",
                                           "createdAt":  "2020-12-29T21:51:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xantari",
                                           "body":  "Our current workaround to this limitation so that we can still have the extreme performance that response output caching provides when surfacing our headless CMS data is that we have set our response output cache to 2 hours.\r\n\r\nThis poses several problems for our content management system (CMS) editors however. It has the following ramifications:\r\n\r\n1. Edits to pages in the headless CMS are not reflected to end users for up to 2 hours as we can\u0027t immediately evict the changed pages.\r\n2. We can\u0027t cache the page indefinitely which would increase server performance. Instead we load it every 2 hours as it\u0027s the only way to render page changes due to the inability to evict items from the response output cache.\r\n\r\nIdeally this issue would be solved and we would just set the response output cache to something like 24 or 48 hours and our servers would just be sitting idle since the servers wouldn\u0027t have to think about rendering new pages anymore unless it receives a cache eviction notification that tells the system it needs to evict the response output cache and the next hit to that page would go through the normal MVC rendering process.",
                                           "updatedAt":  "2022-02-14T18:04:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde845VNwl",
                                           "createdAt":  "2021-11-05T12:37:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD8yB_A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MBDev2k",
                                                                               "createdAt":  "2021-11-05T18:38:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cmxl",
                                                                               "createdAt":  "2022-02-03T15:18:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KingLurchi",
                                                                               "createdAt":  "2022-02-03T16:38:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xantari",
                                                                               "createdAt":  "2022-02-14T18:00:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "johannesmols",
                                                                               "createdAt":  "2023-02-04T10:08:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ErroneousFatality",
                                                                               "createdAt":  "2024-11-27T22:22:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "catalin-ifacts",
                                           "body":  "OMG, I am stunned. No ResponseCache invalidation în .NET Core? November 2021 here.....\r\n!@#$@!#",
                                           "updatedAt":  "2021-11-05T12:48:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde8498P-4",
                                           "createdAt":  "2022-02-14T15:14:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "oezoezoe",
                                           "body":  "Below a simplefied workaround we use:\r\n\r\n\r\n```\r\n[ApiController]\r\n    [Route(\"[controller]\")]\r\n    public class TimeController : ControllerBase\r\n    {\r\n        private int _version = 0;\r\n\r\n        [HttpGet]\r\n        public IActionResult Get()\r\n        {\r\n            return RedirectToAction(\"GetInternal\", new { version = _version });\r\n        }\r\n\r\n        [HttpGet(\"{version:int}\")]\r\n        [ApiExplorerSettings(IgnoreApi = true)]\r\n        [ResponseCache(Duration = 3600, VaryByQueryKeys = new[] { \"version\" })]\r\n        public async Task\u003cIActionResult\u003e GetInternal(int version)\r\n        {\r\n            await Task.Delay(2000);\r\n            return Ok(DateTime.Now);\r\n        }\r\n\r\n        [HttpPut]\r\n        public IActionResult ClearCache()\r\n        {\r\n            _version++;\r\n            return Ok();\r\n        }\r\n    }\r\n    \r\n```\r\nThe consumer can use the normal get method and via a different call the version gets updated and thereby invalidating the old version.",
                                           "updatedAt":  "2022-02-14T15:14:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85P3-TH",
                                           "createdAt":  "2022-12-06T22:07:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODcyugg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "carlreinke",
                                                                               "createdAt":  "2024-04-03T05:17:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "xantari",
                                           "body":  "Not sure, but is this now solved via #27387 in .net 7?",
                                           "updatedAt":  "2022-12-06T22:07:46Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Cache invalidation",
        "labels":  [
                       "Needs: Design",
                       "enhancement",
                       "feature-response-caching",
                       "severity-nice-to-have",
                       "affected-few",
                       "area-middleware",
                       "help candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/6004",
        "createdAt":  "2018-01-23T11:35:22Z",
        "number":  6004,
        "author":  "SniC",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCuYyYw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JarFrank",
                                            "createdAt":  "2023-02-14T10:11:48Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-08-28T23:10:16Z",
        "body":  "Using server variable REQUEST_URI does not seem to work when working with query strings.\r\n\r\nThis does not work:\r\n\r\n```xml\r\n\u003crewrite\u003e\r\n  \u003crules\u003e\r\n   \u003crule name=\"rulename\" stopProcessing=\"true\"\u003e\r\n      \u003cmatch url=\".*\" /\u003e\r\n      \u003cconditions logicalGrouping=\"MatchAll\"\u003e\r\n        \u003cadd input=\"{Map_Name:{REQUEST_URI}}\" pattern=\"(.+)\" /\u003e\r\n      \u003c/conditions\u003e\r\n      \u003caction type=\"Redirect\" url=\"{C:1}\" appendQueryString=\"false\" redirectType=\"Permanent\"  /\u003e\r\n    \u003c/rule\u003e\r\n  \u003c/rules\u003e\r\n\r\n  \u003crewriteMaps\u003e\r\n    \u003crewriteMap name=\"Map_Name\" defaultValue=\"\"\u003e\r\n      \u003cadd key=\"/url/with/querystring.html?a=b\" value=\"/other/url.html\" /\u003e\r\n    \u003c/rewriteMap\u003e\r\n  \u003c/rewriteMaps\u003e\r\n\u003c/rewrite\u003e\r\n```\r\n\r\nAs a workaround, I appended the QUERY_STRING variable to the condition. But this does not seem to be in line with the [IIS documentation](https://docs.microsoft.com/en-us/iis/extensions/url-rewrite-module/url-rewrite-module-configuration-reference#accessing-url-parts-from-a-rewrite-rule) I found\r\n\r\nThis is the workaround:\r\n\r\n```xml\r\n\u003crewrite\u003e\r\n  \u003crules\u003e\r\n   \u003crule name=\"rulename\" stopProcessing=\"true\"\u003e\r\n      \u003cmatch url=\".*\" /\u003e\r\n      \u003cconditions logicalGrouping=\"MatchAll\"\u003e\r\n        \u003cadd input=\"{Map_Name:{REQUEST_URI}?{QUERY_STRING}}\" pattern=\"(.+)\" /\u003e\r\n      \u003c/conditions\u003e\r\n      \u003caction type=\"Redirect\" url=\"{C:1}\" appendQueryString=\"false\" redirectType=\"Permanent\"  /\u003e\r\n    \u003c/rule\u003e\r\n  \u003c/rules\u003e\r\n\r\n  \u003crewriteMaps\u003e\r\n    \u003crewriteMap name=\"Map_Name\" defaultValue=\"\"\u003e\r\n      \u003cadd key=\"/url/with/querystring.html?a=b\" value=\"/other/url.html\" /\u003e\r\n    \u003c/rewriteMap\u003e\r\n  \u003c/rewriteMaps\u003e\r\n\u003c/rewrite\u003e\r\n```\r\n\r\nI\u0027m using version 2.0.1 of the Microsoft.AspNetCore.Rewrite package",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMDd3PA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1OTg3NDUyMg==",
                                           "createdAt":  "2018-01-23T17:53:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotalik",
                                           "body":  "It looks like you are correct. Unfortunately, we may not be able to fix this until a major release as people may be relying on the REQUEST_URI not containing the query string. For now, I think you will need to stick with your workaround. \r\ncc/ @muratg ",
                                           "updatedAt":  "2018-01-23T17:53:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMDQxMTE1Mg==",
                                           "createdAt":  "2018-10-16T21:41:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "muratg",
                                           "body":  "Similar to #308.  ",
                                           "updatedAt":  "2018-10-16T21:41:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwODk0MTM3Mg==",
                                           "createdAt":  "2021-03-28T18:51:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "If we do it, it is a breaking change right?",
                                           "updatedAt":  "2021-03-28T18:51:47Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "URL rewrite module - REQUEST_URI does not contain querystring",
        "labels":  [
                       "bug",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/6006",
        "createdAt":  "2018-03-08T10:53:25Z",
        "number":  6006,
        "author":  "neilmulhy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCzwvXQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mt0321",
                                            "createdAt":  "2022-03-26T15:23:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BeniFreitag",
                                            "createdAt":  "2023-11-03T16:54:59Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-03-05T13:38:56Z",
        "body":  "Hi there,\r\n\r\nCan you please provide support for the PATH_INFO server variable on IIS. I\u0027m trying to migrate my legacy MVC website to the new one I\u0027ve built ASP.Net Core. I\u0027m trying to migrate the URL rewrite rules but they don\u0027t work as they rely on the PATH_INFO server variable.\r\n\r\nI get the following error when trying to run my application:\r\nUnrecognized parameter type: \u0027PATH_INFO\u0027, terminated at string index: \u002710\u0027\r\nMicrosoft.AspNetCore.Rewrite.Internal.IISUrlRewrite.ServerVariables.FindServerVariable(string serverVariable, ParserContext context, UriMatchPart uriMatchPart)\r\n\r\nExtract from my configure method in startup.cs which reads in an xml file:\r\n\r\n```\r\nusing (StreamReader iisUrlRewriteStreamReader =\r\n    File.OpenText(\"IISUrlRewrite.xml\"))\r\n            {\r\n                var options = new RewriteOptions()\r\n                    .AddIISUrlRewrite(iisUrlRewriteStreamReader);\r\n\r\n                app.UseRewriter(options);\r\n            }\r\n```\r\n\r\nThe example content of the IISUrlRewrite,xml file is:\r\n```\r\n\u003crewrite\u003e\r\n  \u003crules\u003e\r\n    \u003crule name=\"Redirect /foo to foo2\" stopProcessing=\"true\"\u003e\r\n      \u003cmatch url=\".*\" /\u003e\r\n      \u003cconditions\u003e\r\n        \u003cadd input=\"{PATH_INFO}\" pattern=\"^/foo$\" /\u003e\r\n      \u003c/conditions\u003e\r\n      \u003caction type=\"Redirect\" url=\"http://www.foo2.co.uk\" appendQueryString=\"false\" /\u003e\r\n    \u003c/rule\u003e\r\n  \u003c/rules\u003e\r\n\u003c/rewrite\u003e\r\n```\r\n\r\n\r\nIf I change {PATH_INFO} to {QUERY_STRING}, the application loads but this isn\u0027t the redirect I need. Can you please provide support for this ASAP please?\r\n\r\nIn the meantime, is there a workaround I can use that will support {PATH_INFO} patterns on IIS?\r\n\r\nThanks",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoP1lkQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MTQ1NTgxNA==",
                                           "createdAt":  "2018-03-08T11:04:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "neilmulhy",
                                           "body":  "I\u0027ve reviewed the serverVariables file and can see that you support HTTP_URL. I should be able to change the rules to use this instead unless you see any issues with this?",
                                           "updatedAt":  "2018-03-08T11:05:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MTU2Nzk1OA==",
                                           "createdAt":  "2018-03-08T17:52:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotalik",
                                           "body":  "From what I can tell, HTTP_URL is supposed to include the query string, however after I reread the implementation, it seems that we didn\u0027t include the query string. Try swapping PATH_INFO with HTTP_URL?",
                                           "updatedAt":  "2018-03-08T17:52:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MTc1MjQwMw==",
                                           "createdAt":  "2018-03-09T08:56:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "neilmulhy",
                                           "body":  "I\u0027ve been able to use HTTP_URL but will appreciate if you can update this issue when PATH_INFO is supported.",
                                           "updatedAt":  "2018-03-09T08:56:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86g_WWR",
                                           "createdAt":  "2025-03-05T13:38:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eqtr-ab",
                                           "body":  "+1 for this, just tried to create a rule using PATH_INFO but encountered the same error as OP. Does HTTP_URL behave in the same manner as PATH_INFO?",
                                           "updatedAt":  "2025-03-05T13:38:55Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Add support for PATH_INFO server variable",
        "labels":  [
                       "enhancement",
                       "area-middleware",
                       "help candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/2957",
        "createdAt":  "2018-03-14T10:20:29Z",
        "number":  2957,
        "author":  "angrymrt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOB7eewQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "slangeder",
                                            "createdAt":  "2018-11-27T10:17:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MohammadAkbari",
                                            "createdAt":  "2020-01-21T07:24:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yringler",
                                            "createdAt":  "2020-05-05T18:00:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ntr55",
                                            "createdAt":  "2021-05-08T10:59:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2021-09-23T09:44:09Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2025-02-10T16:45:27Z",
        "body":  "The response caching middleware uses a MemoryCache object to cache responses and it is hardcoded in the public constructor to use it. See: https://github.com/aspnet/ResponseCaching/blob/master/src/Microsoft.AspNetCore.ResponseCaching/ResponseCachingMiddleware.cs. This makes it impossible to provide your own implementation of IResponseCache. I would for example like to create a DistributedResponseCache so I can have better horizontal scaling.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnd8DVw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3Mjk3OTcwNA==",
                                           "createdAt":  "2018-03-14T10:49:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAffTtA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mabakay",
                                                                               "createdAt":  "2018-03-15T07:55:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "slangeder",
                                                                               "createdAt":  "2018-11-27T10:19:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tpeczek",
                                           "body":  "You can go around this, please take a look here: https://www.tpeczek.com/2018/03/redis-backed-response-caching-in-aspnet.html",
                                           "updatedAt":  "2018-03-14T10:49:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3Mjk4MTYwOA==",
                                           "createdAt":  "2018-03-14T10:57:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "angrymrt",
                                           "body":  "@tpeczek thanks, this is useful as a temporary hack, but I would prefer an official solution for this.",
                                           "updatedAt":  "2018-03-14T10:57:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3Mjk4NTMwMg==",
                                           "createdAt":  "2018-03-14T11:12:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tpeczek",
                                           "body":  "@angrymrt I went arround, because according to discussion [here](https://github.com/aspnet/ResponseCaching/commit/f125329ed70a5aeaa28d5ecfaf433aed8e318a59#diff-10af08b8eec1eb0744eabb7defa3c966) it has been done on purpose.",
                                           "updatedAt":  "2018-03-14T11:12:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MzY3NzAyMA==",
                                           "createdAt":  "2019-01-11T22:27:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shirhatti",
                                           "body":  "@JunTaoLuo What do think next steps here are? Is this work-around fine? Or did you already have a design in mind?",
                                           "updatedAt":  "2019-01-11T22:27:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MzY5MjA3Nw==",
                                           "createdAt":  "2019-01-11T23:40:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JunTaoLuo",
                                           "body":  "The workaround isn\u0027t ideal since it uses reflection but it does get the job done.",
                                           "updatedAt":  "2019-01-11T23:40:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MzczMTEzOQ==",
                                           "createdAt":  "2019-01-12T08:47:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "angrymrt",
                                           "body":  "@JunTaoLuo how about a dependency on an IResponseCacheFactory that has a Create(IOptions\u003cResponseCachingOptions\u003e options) method?\r\n\r\nThen just pass the IResponseCacheFactory into the internal constructor and use it to create a cache (either distributed or memory).",
                                           "updatedAt":  "2019-01-12T08:47:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NDEyNTQxNA==",
                                           "createdAt":  "2019-01-14T19:13:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JunTaoLuo",
                                           "body":  "There are certainly many ways to build this functionality. I\u0027m not sure when we\u0027ll triage this work item though.",
                                           "updatedAt":  "2019-01-14T19:13:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNDIyMzIzNQ==",
                                           "createdAt":  "2020-05-05T18:17:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yringler",
                                           "body":  "@JunTaoLuo , unfortunately that workaround no longer works, because [this commit](https://github.com/dotnet/aspnetcore/commit/cc1f23c5f8afb7d2a00405f19811d2372c4fcec2#diff-bf48ddb7e9ad4ab420a8bf38b9df508d) removes public access to the IResponseCache interface.\r\nPerhaps could that be made public again?  ",
                                           "updatedAt":  "2020-05-05T18:17:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNDIzMTYwMQ==",
                                           "createdAt":  "2020-05-05T18:34:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "slangeder",
                                           "body":  "\u003e @JunTaoLuo , unfortunately that workaround no longer works, because [this commit](https://github.com/dotnet/aspnetcore/commit/cc1f23c5f8afb7d2a00405f19811d2372c4fcec2#diff-bf48ddb7e9ad4ab420a8bf38b9df508d) removes public access to the IResponseCache interface.\r\n\u003e Perhaps could that be made public again?\r\n\r\n+1 to that. I ended up copying the AspNetCore ResponseCaching code into our repository and adapted the visibility modifiers. Not proud about that, but now we can upgrade to AspNetCore 3.1.\r\nWhy can\u0027t the ResponseCaching feature make use of the IDistributedCache interface like so many other AspNetCore features?",
                                           "updatedAt":  "2020-05-05T18:34:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNDI0NDQ3MQ==",
                                           "createdAt":  "2020-05-05T18:59:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yringler",
                                           "body":  "I\u0027m [poking around](https://github.com/yringler/distributed-middleware-cache) with maybe making a nuget package which people can use. It uses aspnetcore as a submodule.\r\nThe basic idea is to link to all the asnetcore source files through the submodule into a new project, and then add more IResponseCache implementations to that new project.\r\nThe only concern is that I end up going down a rabibit hole of linking to more and more source files... But I think it\u0027ll be ok.\r\n\r\n_update_\r\nIt works! I\u0027m sure it could be improved, but it does the job.\r\nAvailable [on nuget as DistributedResponseCachingMiddleware ](https://www.nuget.org/packages/DistributedResponseCachingMiddleware/)\r\n@slangeder, does it fulfill the requirements for you\u0027re project?",
                                           "updatedAt":  "2020-05-06T04:39:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNDY0ODgxOA==",
                                           "createdAt":  "2020-05-06T13:27:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODccgyA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "yringler",
                                                                               "createdAt":  "2020-05-06T14:57:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2024-03-30T16:15:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "slangeder",
                                           "body":  "@yringler Thank you very much for creating that package.\r\nA coworker included it in our project today, and it works perfectly.",
                                           "updatedAt":  "2020-05-06T13:27:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNzQxMTk3OA==",
                                           "createdAt":  "2020-05-12T15:19:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dustinmoris",
                                           "body":  "Possible duplicate or at least closely related to [https://github.com/dotnet/aspnetcore/issues/2617](https://github.com/dotnet/aspnetcore/issues/2617).\r\n\r\nCan we priorotise this work again? If I was to send in a PR what are the chances of you guys merging it in for the next release?\r\n\r\nEDIT:\r\n\r\nThe current response caching implementatiom is extremely frustrating. It means that an app caches the same data on every node where it\u0027s been deployed, which makes it even dumber when you think that you can run more pods in Kubernetes than physical nodes, effectively the same node caching the same data multiple times and wasting valuable and costly cloud resources. Having a configurable public interface to allow an `IDistributedCache` would make so much more sense.\r\n\r\nNot to mention that the more nodes have to cache a response the less likely it is that a cached response will be returned on a request, because there\u0027s a chance that each request hits a different node, effectively defeating the purpose of caching in the first place.\r\n\r\nNot sure why this was ever approved/shipped in this form, but it needs urgent fixing!",
                                           "updatedAt":  "2020-05-12T15:24:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNzQyMDE5NQ==",
                                           "createdAt":  "2020-05-12T15:33:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBFklQQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dustinmoris",
                                                                               "createdAt":  "2020-05-27T22:09:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "yringler",
                                           "body":  "Yes, a resolution of #2617 would also resolve this. (Unless the resolution is also done with private/internal classes.) It\u0027s a particular place where the functionality requested in this issue is needed.\r\n\r\nFeel free to take a look at [my repo](https://github.com/yringler/distributed-middleware-cache) mentioned earlier, [available on nuget](https://www.nuget.org/packages/DistributedResponseCachingMiddleware/).\r\n\r\nIt is a replacement for [Microsoft.AspNetCore.ResponseCaching](https://www.nuget.org/packages/Microsoft.AspNetCore.ResponseCaching/) which allows customizing the response cache, with a bunch of ready made implementations, for example, one which accepts an injected IDistributedCache. It\u0027s implemented with all the official Microsoft code internally via git submodule and csproj linking, so the amount of code in it which isn\u0027t coming from Microsoft is pretty tiny.\r\n\r\n@slangeder  is using it, and I have tested it at my company, although we aren\u0027t using it in production yet.\r\n\r\nIf you see something which needs improvement, it\u0027s under the MIT license if you want to fork, or you can drop me a PR.",
                                           "updatedAt":  "2020-05-12T15:34:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyODI1MDE2OQ==",
                                           "createdAt":  "2020-11-16T18:40:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JunTaoLuo",
                                           "body":  "Extensibility is something we\u0027d want to keep in mind when designing Output Cache: https://github.com/dotnet/aspnetcore/issues/2627.",
                                           "updatedAt":  "2020-11-16T18:40:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMjI4MzExNg==",
                                           "createdAt":  "2021-05-04T22:10:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brunolm",
                                           "body":  "Any updates on this? What\u0027s the current workaround?",
                                           "updatedAt":  "2021-05-04T22:10:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMjI5MzIyMg==",
                                           "createdAt":  "2021-05-04T22:37:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yringler",
                                           "body":  "The only workaround I\u0027m aware of is kinda to fork MS code 🤷 \r\nEven the nice guy I was working with on my proj, after he couldn\u0027t use it b/c of his company rules, said that they were going to use the same approach, namely to reference the MS code with CSPROJ links, to access all the internal classes.\r\nThere\u0027s a workaround [here](https://github.com/yringler/distributed-middleware-cache), which basically uses the MS code, opens it up, and adds some functionality.\r\nI\u0027ve been meaning to get around to updating the docs and republishing a nuget, but haven\u0027t yet. Feel free to take ownership of it!\r\n",
                                           "updatedAt":  "2021-05-04T22:37:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMzQ1NzQ3OA==",
                                           "createdAt":  "2021-05-06T11:43:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brunolm",
                                           "body":  "I found a way to implement a custom filter attribute that can handle server caching. This works for me on dotnet core 5.0\r\n\r\nnote: This is not fully finished, it needs to get values from params.\r\n\r\n```csharp\r\nnamespace Something\r\n{\r\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, AllowMultiple = false, Inherited = false)]\r\n    public class ActionResultCacheAttribute : ActionFilterAttribute\r\n    {\r\n        private string _cacheKey;\r\n\r\n        /// \u003csummary\u003e\r\n        /// The comma separated parameters to vary the caching by.\r\n        /// \u003c/summary\u003e\r\n        public string VaryByParam { get; set; }\r\n        public string VaryByHeader { get; set; }\r\n        public string VaryByQueryKeys { get; set; }\r\n        public bool VaryByAuth { get; set; } = false;\r\n\r\n\r\n        public int Duration { get; set; }\r\n        public int SlidingDuration { get; set; }\r\n\r\n        public override async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next)\r\n        {\r\n            var _cache = context.HttpContext.RequestServices\r\n                .GetService(typeof(IDistributedCache)) as IDistributedCache;\r\n\r\n            this._cacheKey = GetCacheKey(context);\r\n\r\n            var resultStr = await _cache.GetStringAsync(this._cacheKey);\r\n\r\n            if (resultStr != null)\r\n            {\r\n                var result = Newtonsoft.Json.JsonConvert.DeserializeObject\u003cObjectResult\u003e(\r\n                    resultStr\r\n                );\r\n                result.Value = result.Value?.ToString();\r\n                context.Result = result;\r\n                return;\r\n            }\r\n\r\n            await base.OnActionExecutionAsync(context, next);\r\n        }\r\n\r\n        /// \u003csummary\u003e\r\n        /// Occurs when an action has executed.\r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"filterContext\"\u003eThe filter context.\u003c/param\u003e\r\n        public async override void OnActionExecuted(ActionExecutedContext filterContext)\r\n        {\r\n            if (filterContext.Exception != null || string.IsNullOrWhiteSpace(this._cacheKey))\r\n            {\r\n                return;\r\n            }\r\n\r\n            var _cache = filterContext.HttpContext.RequestServices\r\n                .GetService(typeof(IDistributedCache)) as IDistributedCache;\r\n\r\n            var result = Newtonsoft.Json.JsonConvert.SerializeObject(filterContext.Result);\r\n\r\n            await _cache.SetStringAsync(this._cacheKey, result, new DistributedCacheEntryOptions\r\n            {\r\n                AbsoluteExpirationRelativeToNow = Duration \u003e 0 ? TimeSpan.FromSeconds(Duration) : null,\r\n                SlidingExpiration = SlidingDuration \u003e 0 ? TimeSpan.FromSeconds(SlidingDuration) : null,\r\n            });\r\n        }\r\n\r\n        private string GetCacheKey(ActionExecutingContext context)\r\n        {\r\n            var routeValues = context.RouteData.Values;\r\n            var actionParameters = context.ActionArguments;\r\n            var username = context.HttpContext?.User?.Claims?.FirstOrDefault(o =\u003e o.Type == ClaimTypes.Sid)?.Value;\r\n\r\n            var sb = new StringBuilder(routeValues[\"controller\"].ToString());\r\n            sb.Append(\u0027_\u0027).Append(routeValues[\"action\"].ToString());\r\n\r\n            if (!string.IsNullOrWhiteSpace(VaryByParam))\r\n            {\r\n                sb.Append(VaryByParam);\r\n            }\r\n\r\n            if (!string.IsNullOrWhiteSpace(VaryByHeader))\r\n            {\r\n                sb.Append(VaryByHeader);\r\n            }\r\n\r\n            if (!string.IsNullOrWhiteSpace(VaryByQueryKeys))\r\n            {\r\n                sb.Append(VaryByQueryKeys);\r\n            }\r\n\r\n            if (VaryByAuth)\r\n            {\r\n                sb.Append($\"U-{username}-\");\r\n            }\r\n\r\n            return sb.ToString();\r\n        }\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2021-05-06T12:09:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85loegc",
                                           "createdAt":  "2023-09-04T11:32:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ognen67",
                                           "body":  "\u003e The only workaround I\u0027m aware of is kinda to fork MS code 🤷 Even the nice guy I was working with on my proj, after he couldn\u0027t use it b/c of his company rules, said that they were going to use the same approach, namely to reference the MS code with CSPROJ links, to access all the internal classes. There\u0027s a workaround [here](https://github.com/yringler/distributed-middleware-cache), which basically uses the MS code, opens it up, and adds some functionality. I\u0027ve been meaning to get around to updating the docs and republishing a nuget, but haven\u0027t yet. Feel free to take ownership of it!\r\n\r\nDoes this still work now with the Microsoft.AspNetCore.ResponseCaching package Version: 2.2.0 ?",
                                           "updatedAt":  "2023-09-04T11:32:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85lofUo",
                                           "createdAt":  "2023-09-04T11:35:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODFqzqA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Ognen67",
                                                                               "createdAt":  "2023-09-04T11:43:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "martincostello",
                                           "body":  "\u003e Does this still work now with the Microsoft.AspNetCore.ResponseCaching package Version: 2.2.0 ?\r\n\r\nThat NuGet package is deprecated and doesn\u0027t receive updates.\r\n",
                                           "updatedAt":  "2023-09-04T11:35:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85loihW",
                                           "createdAt":  "2023-09-04T11:45:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ognen67",
                                           "body":  "\u003e \u003e Does this still work now with the Microsoft.AspNetCore.ResponseCaching package Version: 2.2.0 ?\r\n\u003e \r\n\u003e That NuGet package is deprecated and doesn\u0027t receive updates.\r\n\r\nOkay, thanks for the prompt response.",
                                           "updatedAt":  "2023-09-04T11:45:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85loioV",
                                           "createdAt":  "2023-09-04T11:45:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ognen67",
                                           "body":  "Is there another way to achieve the same results as of now?",
                                           "updatedAt":  "2023-09-04T11:45:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86d3wNX",
                                           "createdAt":  "2025-02-10T16:45:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "samsp-msft",
                                           "body":  "@mgravell - do we still need this item?",
                                           "updatedAt":  "2025-02-10T16:45:25Z"
                                       }
                                   ],
                         "totalCount":  22
                     },
        "title":  "Response caching middleware doesn\u0027t allow injection of IResponseCache",
        "labels":  [
                       "enhancement",
                       "feature-response-caching",
                       "affected-few",
                       "severity-minor",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/28380",
        "createdAt":  "2018-11-14T05:10:56Z",
        "number":  28380,
        "author":  "epignosisx",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-06-02T03:14:28Z",
        "body":  "We\u0027ve been running into SQL Server deadlocks when using `Microsoft.Extensions.Caching.SqlServer` for Session State.\r\n\r\nWe went through this before in our ASP.NET apps. It comes down to this query:\r\n\r\nhttps://github.com/aspnet/Caching/blob/c6a7f611fb537cbc58d9ac3bbe0b61fabe79ae8a/src/Microsoft.Extensions.Caching.SqlServer/SqlQueries.cs#L55\r\n\r\n```cs\r\npublic const string DeleteExpiredCacheItemsFormat = \"DELETE FROM {0} WHERE @UtcNow \u003e ExpiresAtTime\";\r\n```\r\n\r\nThis query can easily escalate to a table lock. To reduce the potential of table locks the [recommendation](https://support.microsoft.com/en-us/help/323630/how-to-resolve-blocking-problems-that-are-caused-by-lock-escalation-in) is to perform the deletes in batches. Ex:\r\n\r\n```sql\r\nSET ROWCOUNT 50\r\ndelete_more:\r\n     DELETE FROM {0} WHERE @UtcNow \u003e ExpiresAtTime\r\nIF @@ROWCOUNT \u003e 0 GOTO delete_more\r\nSET ROWCOUNT 0\r\n```\r\n\r\nIn ASP.NET apps this was very easy to change because these were stored procedures we could change ourselves. In ASP.NET Core the queries are in code and in classes that are not extensible (internal classes).\r\n\r\nPotential for deadlocks is more common in ASP.NET Core than in ASP.NET apps because in ASP.NET apps the delete sessions query used to be a SQL Job performed by just one server, whereas in ASP.NET Core if we have 10 instances of the app running it will be 10 DELETE queries hitting the DB.\r\n\r\nSo my ask is that you make the queries easy to change. In the current state, we pretty much have to reimplement the  `Microsoft.Extensions.Caching.SqlServer` if we want to change the queries. Maybe the queries can be overriden via `SqlServerCacheOptions` or at least just this one clean up query.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMD5iFg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NzQ0MzUxNg==",
                                           "createdAt":  "2020-06-22T10:56:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elvirdolic",
                                           "body":  "What\u0027s the status of this issue? We are facing same problems with small dtu on azure sql",
                                           "updatedAt":  "2020-06-22T10:56:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MTk3MzY0MQ==",
                                           "createdAt":  "2020-07-21T16:43:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "msmaverick2018",
                                           "body":  "We are curious to know the status of this issue. We are planning to utilize SQL Server for caching and concerned about running into this issue in production. Should we refrain from using this extension until this issue is resolved? \r\n\r\n@epignosisx did you do any workaround for getting around this issue?",
                                           "updatedAt":  "2020-07-21T16:45:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NjA3NzQ2Mw==",
                                           "createdAt":  "2020-07-30T03:40:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "epignosisx",
                                           "body":  "@msmaverick2018 we disabled this cleanup query (there is a setting you can tweak) and added the optimized query as a SQL job.\n\nUltimately we ended up switching to Redis. Our app used session state heavily and SQL was not able to keep up with 3500 active sessions. DB queries would start to queue and response time would go above 1 sec.\n\nWe spent a lot time trying to make SQL work for us since we had great success in the past with ASP.NET apps. We even forked the repo and modified it to support SQL Server in-memory tables (datetimeoffset datatype is not supported). It helped but it was not enough.\n\nThe reality is that this SQL Server provider is a very simple implementation compared to the SQL Server Session State provider of ASP.NET. I looked into the provider and you could tell a lot of time went into optimizing it.\n\nMoving to Redis fixed all our issues. In our load tests we were able to reach 20K active sessions and Redis didn\u0027t break a sweat.",
                                           "updatedAt":  "2020-07-30T03:40:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NjQ5OTM2MA==",
                                           "createdAt":  "2020-07-30T16:15:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "msmaverick2018",
                                           "body":  "@epignosisx thanks for responding and the details. Agree with you, at least configuration option should have been provided to override the default DELETE query. Also, if you have a web farm, then each application would fire delete request on 30 min interval to the DB.\r\nWe do not have REDIS available yet in our infrastructure and we are planning to use SQL Server as an interim measure to cache data until we get there. Good to know that in memory tables also did not help, since we were thinking of investing some time in evaluating that approach. Our concurrent load would be around 50 req/sec. \r\n\r\nOne of the things i am curious about is also the table design for the cache, it has a wide primary key on which the clustered index is created. We plan to use guids as keys in our use case and as expected when i load data into the table the clustered index is around 99% fragmented. This would affect I/O and probably query performance, we will load test and evaluate. As of now, thinking of adding index rebuild to the cleanup job. Few queries:\r\n1) Did you guys running into issues with index fragmentation and its impact on performance?\r\n2) How often were you able to run the delete job (using batches) without running into the deadlock issue?",
                                           "updatedAt":  "2020-07-30T16:15:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NzI4NjgzNQ==",
                                           "createdAt":  "2020-07-31T18:25:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "epignosisx",
                                           "body":  "@msmaverick2018 We did not modified the primary key length because we were caching all sort of things with different key lengths. We modified the datetimeoffset columns to have precision 2 instead of 7. We found that much precision overkill. I would definitely encourage you to modify the table to match your needs.\r\n\r\nWe did not look into index fragmentation, our thought was that since this table had so much volatility it was going to be very hard to have healthy indexes.\r\n\r\nWe were running the delete query every 15 mins which is our average user session.",
                                           "updatedAt":  "2020-07-31T18:25:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczODM1MTM3Nw==",
                                           "createdAt":  "2020-12-03T22:08:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-12-03T22:08:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTM5NDcxMA==",
                                           "createdAt":  "2021-03-29T13:52:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I assume people are still running into this issue?",
                                           "updatedAt":  "2021-03-29T13:52:36Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "SQL Server deadlock with Microsoft.Extensions.Caching.SqlServer",
        "labels":  [
                       "bug",
                       "feature-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/28377",
        "createdAt":  "2019-02-20T20:35:29Z",
        "number":  28377,
        "author":  "MobesE46",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBKJMJg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dcarr42",
                                            "createdAt":  "2019-02-20T20:57:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DOMZE",
                                            "createdAt":  "2019-03-06T22:40:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tr-hagfjall",
                                            "createdAt":  "2020-07-13T11:55:03Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-02-25T14:35:24Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\nI\u0027m trying to setup Distributed SQL Caching so that is uses an AccessToken to connect to an Azure SQL database instead of using other types of credentials.  \r\n\r\n### Describe the solution you\u0027d like\r\nNow that Net Core 2.2 supports the AccessToken property on a SqlConnection, the AddDistributedSqlServerCache extension should be modified to support this as well.  Perhaps an overload could be added that takes in a delegate to retrieve an AccessToken.  The delegate would just need to be a simple factory method that does something like this:\r\n\r\n            var tokenProvider = new AzureServiceTokenProvider();\r\n            var accessToken = tokenProvider.GetAccessTokenAsync(\"https://database.windows.net/\").Result;\r\n\r\nIn a web environment, the factory should be scoped to the session.\r\n\r\nOr perhaps even build this AccessToken retrieval into the extension.\r\n\r\n### Describe alternatives you\u0027ve considered\r\nI\u0027ve considered writing my own implementation of IDistributedCache that takes advantage of the AccessToken property but I\u0027m not quite sure how to accomplish it and I don\u0027t have the time right now.  At the moment, I\u0027m just using the classic implementation of the extension which passes in a connection string that is transformed between environments in an Azure Devops pipeline.\r\n\r\n### Additional context\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOn98tCQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MDMwNjg4OA==",
                                           "createdAt":  "2019-03-06T22:41:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DOMZE",
                                           "body":  "Same problem here. Impossible to pass an access token. How are we supposed to use managed identities otherwise, without overwriting the whole library? Workarounds are appreciated @Eilon ",
                                           "updatedAt":  "2019-03-06T22:42:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1Mzg1MTM0Mg==",
                                           "createdAt":  "2019-11-14T11:42:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jacqueskang",
                                           "body":  "Hi, this is a blocking issue for our Azure migration. Since our security team doesn\u0027t accept password-based SQL authentication, we will have to refactor and switch to another caching system.\r\nIt would be nice if this can be solved in both 2.2 and 3.0",
                                           "updatedAt":  "2019-11-14T11:42:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDQ3NzgyMQ==",
                                           "createdAt":  "2019-11-15T18:35:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eilon",
                                           "body":  "I realize it\u0027s not ideal, but I think you can re-use a lot of the current cache system logic and probably types, but with a modified copy of the configuration logic. You could use the source code in this repo as a starting point and modify the code that creates the services to support other auth patterns.",
                                           "updatedAt":  "2019-11-15T18:35:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTU1Nzg2MA==",
                                           "createdAt":  "2020-05-08T00:06:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "As part of the migration of components from dotnet/extensions to dotnet/runtime (https://github.com/aspnet/Announcements/issues/411) we will be bulk closing some of the older issues. If you are still interested in having this issue addressed, just comment and the issue will be automatically reactivated (even if you aren\u0027t the author). When you do that, I\u0027ll page the team to come take a look. If you\u0027ve moved on or workaround the issue and no longer need this change, just ignore this and the issue will be closed in **7 days**.\n\nIf you know that the issue affects a package that has moved to a different repo, please consider re-opening the issue in that repo. If you\u0027re unsure, that\u0027s OK, someone from the team can help!",
                                           "updatedAt":  "2020-05-08T00:06:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNjYxNzExNQ==",
                                           "createdAt":  "2020-05-11T10:27:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yonail",
                                           "body":  "It is still a blocking issue for our Azure migration. Any update when you plan to fix it for .net core 2.2?",
                                           "updatedAt":  "2020-05-11T10:27:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNjYxNzE0Mw==",
                                           "createdAt":  "2020-05-11T10:27:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Paging @dotnet/extensions-migration ! This issue has been revived from staleness. Please take a look and route to the appropriate repository.",
                                           "updatedAt":  "2020-05-11T10:27:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNjgyODEwMQ==",
                                           "createdAt":  "2020-05-11T17:02:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "@yonibauduin .NET Core 2.2 is end of life and no longer supported.\n\nI’ll put this in the queue to consider in 5.0, which is the next opportunity to add functionality requiring new API such as this",
                                           "updatedAt":  "2020-05-11T17:02:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MjMzNjIyOQ==",
                                           "createdAt":  "2020-08-11T22:52:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ckrempp91",
                                           "body":  "Is there any update on this?",
                                           "updatedAt":  "2020-08-11T22:52:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MzA2MjcyNA==",
                                           "createdAt":  "2020-08-12T19:21:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "I believe this wouldn\u0027t make it to 5.0 as the window for that is closing this week and this is a feature request.",
                                           "updatedAt":  "2020-08-12T19:21:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MzYyMjE0OQ==",
                                           "createdAt":  "2020-08-13T17:52:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ckrempp91",
                                           "body":  "If it can\u0027t make it into 5.0, then what is the next release that this can be included?",
                                           "updatedAt":  "2020-08-13T17:52:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NDQ1NjM0OA==",
                                           "createdAt":  "2020-09-01T06:36:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Nisden",
                                           "body":  "Wow, this is still unsupported... :\u0027(",
                                           "updatedAt":  "2020-09-01T06:36:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNDM3OTkzNg==",
                                           "createdAt":  "2020-11-26T16:05:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "paul-oleary",
                                           "body":  "+1\r\n\r\nThis is a blocker for us disabling SQL authentication on our database",
                                           "updatedAt":  "2020-11-26T16:05:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczODM0MzcwOA==",
                                           "createdAt":  "2020-12-03T21:57:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-12-03T21:57:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0NDM2Njk5MQ==",
                                           "createdAt":  "2020-12-14T11:08:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Nisden",
                                           "body":  "With the addition of https://github.com/dotnet/SqlClient/pull/730 explicit support for AccessToken is no longer required, as the SqlConnection can handle this on its own. Just be aware that its currently a little broken https://github.com/dotnet/SqlClient/issues/815",
                                           "updatedAt":  "2020-12-14T11:08:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MTQ4MjI0OA==",
                                           "createdAt":  "2021-03-05T15:14:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODJ1oWg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "thegrahamking",
                                                                               "createdAt":  "2023-10-16T09:25:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hugoqribeiro",
                                           "body":  "While a better solution is not designed, wouldn\u0027t it be possible to at least provide a delegate on SqlServerCacheOptions to manipulate the SqlConnection?",
                                           "updatedAt":  "2021-03-05T15:14:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86f3y0J",
                                           "createdAt":  "2025-02-25T14:35:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "meberg",
                                           "body":  "Just in case someone else can\u0027t get it to work and comes across this thread having the same problem as me, and doesn\u0027t fully understand \"the SqlConnection can handle this on its own\" part. It\u0027s handled by the SqlInternalConnectionTds class. (I don\u0027t understand why this issue can\u0027t be closed with \"Won\u0027t fix\" or something like that though, since setting access token on your own seems completely superflous).\n\nThe below info was enough to solve it for me when AddDistributedSqlServerCache looks like this:\n\nservices.AddDistributedSqlServerCache(options =\u003e\n{\n    options.ConnectionString = DbSettings.ConnectionString;\n    options...\n});\n\nConnection string should have Authentication set as \"Active Directory Default\" when running locally and \"Active Directory Managed Identity\" when running in the cloud (combined with user id, at least if you\u0027re using user assigned managed identity.\n\nExample of a local connection string: \"Server=tcp:mydbserver.database.windows.net,1433;Database=mydatabase;Trusted_Connection=False;Encrypt=True;Connection Timeout=30;Authentication=Active Directory Default\"\n\nExample of a connection string when running in the cloud:\n\"Server=tcp:mydbserver.database.windows.net,1433;Database=mydatabase;Trusted_Connection=False;Encrypt=True;Connection Timeout=30;User ID=clientIdOfMyManagedIdentity;Authentication=Active Directory Managed Identity\"\n\nReading from MS docs that can help:\nUsing managed identity authentication: https://learn.microsoft.com/en-us/sql/connect/ado-net/sql/azure-active-directory-authentication?view=sql-server-ver16#using-managed-identity-authentication\nUsing default authentication: https://learn.microsoft.com/en-us/sql/connect/ado-net/sql/azure-active-directory-authentication?view=sql-server-ver16#using-default-authentication",
                                           "updatedAt":  "2025-02-25T14:35:22Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "Support AccessToken in config for AddDistributedSqlServerCache",
        "labels":  [
                       "enhancement",
                       "feature-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/8310",
        "createdAt":  "2019-03-08T01:25:15Z",
        "number":  8310,
        "author":  "dassociator",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-28T23:10:14Z",
        "body":  "### Describe the bug\r\nI found a bug about pathBase in RedirectRule class. (namespace: Microsoft.AspNetCore.Rewrite.Internal)\r\nIf I use pathBase in my project and set an absolute URL to the replacement parameter, an error occurs.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Using this version of ASP.NET Core App \u00272.2.0\u0027\r\n2. Run this code\r\n\r\n        public async Task CheckRewritePath(string pathBase, string regex, string replacement, string expected)\r\n        {\r\n            // Arrange\r\n            var options = new RewriteOptions().Add(new RedirectRule(regex, replacement, StatusCodes.Status302Found));\r\n            var builder = new WebHostBuilder().Configure(app =\u003e { app.UsePathBase(pathBase); app.UseRewriter(options); });\r\n            var server = new TestServer(builder);\r\n\r\n            // Act\r\n            var response = await server.CreateClient().GetAsync(pathBase + \"/\" + regex);\r\n\r\n            // Assert\r\n            Assert.Equal(expected, response.Headers.Location.OriginalString);\r\n        }\r\n3. With these arguments\r\n        [Theory]\r\n        [InlineData(\"/Test\", \"RedirectRule1\", \"https://localhost/Test/Home/Index\", \"https://localhost/Test/Home/Index\")]\r\n        [InlineData(\"/Test\", \"RedirectRule2\", \"/Home/Index\", \"/Test/Home/Index\")]\r\n        [InlineData(\"/Test\", \"RedirectRule3\", \"Home/Index\", \"/Test/Home/Index\")]\r\n4. See error\r\nrespons.Headers.Location.OrinalString returned /Testhttps://localhost/Test/RedirectRule \r\n\r\n### Expected behavior\r\nI expected to redirect absolute URL.\r\nex) https://localhost/Test/Home/Index\r\n\r\n### Screenshots\r\n![image](https://user-images.githubusercontent.com/8253350/53999829-475ac700-4188-11e9-97fd-094195e18161.png)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHED-0Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NDAyMTU4NQ==",
                                           "createdAt":  "2019-03-18T17:31:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "@jkotalik ",
                                           "updatedAt":  "2019-03-18T17:31:39Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Invalid pathBase in RedirectRule",
        "labels":  [
                       "bug",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/9813",
        "createdAt":  "2019-04-28T22:32:15Z",
        "number":  9813,
        "author":  "NinoFloris",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-28T23:10:13Z",
        "body":  "Recently merged #9370 included a new use of an async local. Prompting me to search this repo for other uses, only to happily conclude there\u0027s not many outside tests. You have #9370, an optional ActionContextAccessor and some for what looks like razor things and the well known HttpContextAccessor.\r\n\r\nAre these first two async locals not better expressed as fetching features or info from HttpContext? That would mean small changes of replacing them with a dependency on HttpContextAccessor instead. \r\n\r\nLifetime being the only open question here. Would their behavior become invalid when strictly scoped to request lifetime as HttpContextAccessor is?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHR6RjQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzQyNzA4Mw==",
                                           "createdAt":  "2019-04-29T00:09:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "Also:\r\n\r\n[`Activity.Current`](https://github.com/dotnet/corefx/blob/81c8c68d81daad033251d643e230061f38a9ae3a/src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/Activity.Current.net46.cs#L33) which [gets set in Hosting](https://github.com/aspnet/AspNetCore/blob/8e37f8477d51221369bcaceb4316f79cbb2854e8/src/Hosting/Hosting/src/Internal/HostingApplicationDiagnostics.cs#L235-L277) when logging is enabled.\r\n\r\n[LoggerExternalScopeProvider](https://github.com/aspnet/Extensions/blob/55518d79834d3319c91f40b449d028338b129ed6/src/Logging/Logging.Abstractions/src/LoggerExternalScopeProvider.cs#L14) when a logging scope is set.\r\n\r\n[CacheEntryHelper](https://github.com/aspnet/Extensions/blob/aabe8c34a62786c313e20125d70b36d3c5e72a75/src/Caching/Memory/src/CacheEntryHelper.cs) not sure when.\r\n\r\n[JSRuntime](https://github.com/aspnet/Extensions/blob/c1d8be8b980de62a299958e1816f06a81fea07bb/src/JSInterop/Microsoft.JSInterop/src/JSRuntime.cs) not sure when.",
                                           "updatedAt":  "2019-04-29T00:09:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzQyODIxNw==",
                                           "createdAt":  "2019-04-29T00:26:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "If you set `Thread.CurrentPrincipal` that will be another; so don\u0027t do that ;)\r\n\r\nIf you set `Thread.CurrentCulture` that will be another; better to flow these via a request feature\r\n\r\n",
                                           "updatedAt":  "2019-04-29T00:27:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NzQyOTA0OQ==",
                                           "createdAt":  "2019-04-29T00:39:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "In 3.0 use of `BinaryFormatter` will create one via Serialization Guard; but no one is using BinaryFormatter #amirite?\r\n\r\n`System.Transactions.Transaction` uses them, but again uncommon, and `AssemblyLoadContext` but probably also uncommon in usage.\r\n\r\n ",
                                           "updatedAt":  "2019-04-29T00:42:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4ODQ2MDkyNA==",
                                           "createdAt":  "2019-05-01T22:24:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "HeaderPropagation was a case where we expected it to be used in a multi-threaded way so direct access to HttpContext was not an option (HttpContext is not thread safe).",
                                           "updatedAt":  "2019-05-01T22:24:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4ODU0MjYwNQ==",
                                           "createdAt":  "2019-05-02T03:30:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "Can do something like https://github.com/aspnet/AspNetCore/pull/9908 for HeaderPropagation ",
                                           "updatedAt":  "2019-05-02T03:30:19Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Review AsyncLocals (HeaderPropagation and Action context)",
        "labels":  [
                       "Perf",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/28375",
        "createdAt":  "2019-05-14T19:12:53Z",
        "number":  28375,
        "author":  "jon-is-me",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC5EkNQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Vandersteen",
                                            "createdAt":  "2019-06-13T19:57:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mindex-Brandon-Key",
                                            "createdAt":  "2024-07-02T14:28:28Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-10-28T14:09:15Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\nI am trying to hookup `RedisCache` to multiple nodes in AWS ElastiCache. I have 1 primary node and _n_ replication nodes. Currently when configuring `RedisCacheOptions.ConfigurationOptions` with multiple `Endpoint`s, `RedisCache` doesn\u0027t read from the replication nodes.\r\n\r\n### Describe the solution you\u0027d like\r\nIn StackExchange.Redis there is a `CommandFlags` enum that will allow us to `PreferSlave`. I would like to add another property along the lines of `DefaultReadCommandFlag` to `RedisCacheOptions` for read commands. This will allow us to specify `PreferSlave` and distribute load across the replication nodes.\r\n\r\nCommand Flags: https://github.com/StackExchange/StackExchange.Redis/blob/c72ffa8413572262b8eb9f8f4e0c5da07f856359/src/StackExchange.Redis/Enums/CommandFlags.cs#L27-L47",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLAI0ng==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMTg1OTI0MQ==",
                                           "createdAt":  "2019-06-13T20:06:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Vandersteen",
                                           "body":  "What is the status on this one ?\r\nWe are having similar issues. I wouldn\u0027t mind creating a PR for this if the proposed solution is acceptable.",
                                           "updatedAt":  "2019-06-13T20:06:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwNjA0MjYxMQ==",
                                           "createdAt":  "2019-06-26T21:00:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "Seems reasonable to me. A PR would be reasonable, but we are starting to lock public APIs for 3.0 and don\u0027t have a place for post-3.0 contributions right now, so I don\u0027t think we have a good branch in which to accept this change.",
                                           "updatedAt":  "2019-06-26T21:00:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTU1NzQ3Mg==",
                                           "createdAt":  "2020-05-08T00:04:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "As part of the migration of components from dotnet/extensions to dotnet/runtime (https://github.com/aspnet/Announcements/issues/411) we will be bulk closing some of the older issues. If you are still interested in having this issue addressed, just comment and the issue will be automatically reactivated (even if you aren\u0027t the author). When you do that, I\u0027ll page the team to come take a look. If you\u0027ve moved on or workaround the issue and no longer need this change, just ignore this and the issue will be closed in **7 days**.\n\nIf you know that the issue affects a package that has moved to a different repo, please consider re-opening the issue in that repo. If you\u0027re unsure, that\u0027s OK, someone from the team can help!",
                                           "updatedAt":  "2020-05-08T00:04:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTYxNDY2OA==",
                                           "createdAt":  "2020-05-08T03:48:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jon-is-me",
                                           "body":  "Hi I would still like to have this issue addressed please.",
                                           "updatedAt":  "2020-05-08T03:48:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTYxNDY3Nw==",
                                           "createdAt":  "2020-05-08T03:48:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Paging @dotnet/extensions-migration ! This issue has been revived from staleness. Please take a look and route to the appropriate repository.",
                                           "updatedAt":  "2020-05-08T03:48:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczODM0MjA0Ng==",
                                           "createdAt":  "2020-12-03T21:53:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-12-03T21:53:09Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[StackExchange.Redis] Add DefaultReadCommandFlag into RedisCacheOptions for read operations",
        "labels":  [
                       "enhancement",
                       "feature-caching",
                       "area-middleware",
                       "help candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/10276",
        "createdAt":  "2019-05-15T22:54:32Z",
        "number":  10276,
        "author":  "Tratcher",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-28T23:10:12Z",
        "body":  "https://github.com/aspnet/AspNetCore/pull/10273#discussion_r284474884\r\n\r\nIt was already added to the pipeline by default for IIS out-of-proc, but now we\u0027re adding it for Azure App Services Linux scenarios.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Profile/Benchmark ForwardedHeadersMiddleware",
        "labels":  [
                       "enhancement",
                       "Perf",
                       "severity-nice-to-have",
                       "affected-few",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/10290",
        "createdAt":  "2019-05-16T10:26:14Z",
        "number":  10290,
        "author":  "stevejgordon",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCvMN0w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xsoheilalizadeh",
                                            "createdAt":  "2019-09-12T21:35:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "StanislavPrusac",
                                            "createdAt":  "2020-09-15T01:54:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alainbryden",
                                            "createdAt":  "2020-10-30T12:25:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CicherMK",
                                            "createdAt":  "2023-03-31T07:48:14Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2023-08-28T23:10:12Z",
        "body":  "\u003e tl;dr; This is a query about whether the team would accept performance optimisations for the `ResponseCachingKeyProvider` \u0026 related components?\r\n\r\nI\u0027ve recently been playing around with String.Create for an upcoming blog post and I remembered a discussion with @rynowak about ObjectPool being used to pool StringBuilder instances for some of the ASP.NET Core middleware.\r\n\r\nOne example I found is in [ResponseCachingKeyProvider](https://github.com/aspnet/AspNetCore/blob/master/src/Middleware/ResponseCaching/src/Internal/ResponseCachingKeyProvider.cs)\r\n\r\nJust for my own curiosity, I had a play with a new version of `CreateBaseKey` which doesn\u0027t require a StringBuilder and uses String.Create instead. My theory is that with the other methods updated also (if possible) then maybe the need to depend on an ObjectPoolProvider and StringBuilderPool could be removed?\r\n\r\nI did a very quick and basic version using String.Create and benchmarked it with the following results...\r\n\r\n```\r\n|         Method |     Mean |     Error |    StdDev |  Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|--------------- |---------:|----------:|----------:|-------:|------:|------:|----------:|\r\n| GetKeyOriginal | 435.5 ns | 8.2836 ns | 8.1356 ns | 0.0191 |     - |     - |     120 B |\r\n|      GetKeyNew | 341.1 ns | 0.6806 ns | 0.5313 ns | 0.0191 |     - |     - |     120 B |\r\n```\r\n\r\nIs there any value in pursuing this for this provider and perhaps others as part of the on-going performance work? If so, I\u0027d be keen to try and spend a little time looking deeper on this particular feature. Note that the code is untested and just a proof of concept at this point.\r\n\r\nPerhaps @davidfowl and @benaadams also have some thoughts on the value of this?\r\n\r\nFor completeness, my rough code used for the benchmark:\r\n\r\n```csharp\r\npublic string CreateBaseKeyStringCreate(ResponseCachingContext context)\r\n{\r\n\tif (context == null)\r\n\t{\r\n\t\tthrow new ArgumentNullException(nameof(context));\r\n\t}\r\n\r\n\tvar request = context.HttpContext.Request;\r\n\r\n\tvar length = request.Method.Length +\r\n\t\t\t\t 1 +\r\n\t\t\t\t request.Scheme.Length +\r\n\t\t\t\t 1 +\r\n\t\t\t\t request.Host.Value.Length +\r\n\t\t\t\t request.PathBase.Value.Length +\r\n\t\t\t\t request.Path.Value.Length;\r\n\r\n\tvar key = string.Create(length, (request, _options), (chars, state) =\u003e \r\n\t{\r\n\t\tvar (request, options) = state;\r\n\t\tvar position = 0;\r\n\r\n\t\trequest.Method.AsSpan().ToUpperInvariant(chars);\r\n\t\tposition += request.Method.Length;\r\n\r\n\t\tchars[position++] = KeyDelimiter;\r\n\r\n\t\trequest.Scheme.AsSpan().ToUpperInvariant(chars.Slice(position));\r\n\t\tposition += request.Scheme.Length;\r\n\r\n\t\tchars[position++] = KeyDelimiter;\r\n\r\n\t\trequest.Host.Value.AsSpan().ToUpperInvariant(chars.Slice(position));\r\n\t\tposition += request.Host.Value.Length;\r\n\r\n\t\tvar pathBaseSpan = request.PathBase.Value.AsSpan();\r\n\t\tvar pathSpan = request.Path.Value.AsSpan();\r\n\r\n\t\tif (options.UseCaseSensitivePaths)\r\n\t\t{\r\n\t\t\tpathBaseSpan.ToUpperInvariant(chars.Slice(position));\r\n\t\t\tposition += pathBaseSpan.Length;\r\n\r\n\t\t\tpathSpan.ToUpperInvariant(chars.Slice(position));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tpathBaseSpan.CopyTo(chars.Slice(position));\r\n\t\t\tposition += pathBaseSpan.Length;\r\n\r\n\t\t\tpathSpan.CopyTo(chars.Slice(position));\r\n\t\t}\r\n\t});\r\n\r\n\treturn key;\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHaH3NQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MzA5NjQzNg==",
                                           "createdAt":  "2019-05-16T14:41:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rynowak",
                                           "body":  "Generally perf improvments are something we want, especially if it\u0027s something that runs during request processing 👍 \r\n\r\n\r\n@Tratcher @anurse - who can help steve figure out if this is a good approach?",
                                           "updatedAt":  "2019-05-16T14:41:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MzEwODExNQ==",
                                           "createdAt":  "2019-05-16T15:09:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "@JunTaoLuo ",
                                           "updatedAt":  "2019-05-16T15:09:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MzE1NDMyOA==",
                                           "createdAt":  "2019-05-16T17:13:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "@rynowak is right, perf gains are generally awesome as long as they don\u0027t introduce large amounts of complexity (and even then it\u0027s a matter of risk/cost vs. reward). Switching from pooled StringBuilders to String.Create seems reasonable to me. I think the next step would be a PR to show the code change. If you don\u0027t want to iterate fully and produce a \"production-ready\" PR but could hack something together that shows the approach you could throw a Draft PR up and put me, @Tratcher, @davidfowl and @JunTaoLuo as reviewers.\r\n\r\nIncluding a benchmark in the PR and the results of said benchmark would also be good in order to show the hard data that illustrates the improvement.",
                                           "updatedAt":  "2019-05-16T17:18:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MzE1NDg1Nw==",
                                           "createdAt":  "2019-05-16T17:14:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This looks pretty nice! We should avoid object pooling at all costs if we can find a simple alternative like this.",
                                           "updatedAt":  "2019-05-16T17:14:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MzE1NjY5OA==",
                                           "createdAt":  "2019-05-16T17:19:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stevejgordon",
                                           "body":  "Thanks, @anurse and co! I\u0027m happy to take a look at this over the next week or so and get a PR pushed with some changes. I grabbed the code to a local solution just for this hack. I\u0027ll try to get the repo building properly if possible.",
                                           "updatedAt":  "2019-05-16T17:19:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MzE1ODE2MQ==",
                                           "createdAt":  "2019-05-16T17:23:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "If you get stuck, feel free to open a draft PR and mention that you\u0027re stuck on some issue. As long as you don\u0027t need to add new projects it should be simple, adding new projects is [non-trivial but not too hard](https://github.com/aspnet/AspNetCore/blob/master/docs/ReferenceResolution.md).",
                                           "updatedAt":  "2019-05-16T17:23:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MzE2MTMxNw==",
                                           "createdAt":  "2019-05-16T17:32:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JunTaoLuo",
                                           "body":  "Looks good, I can review the PR when it\u0027s ready.",
                                           "updatedAt":  "2019-05-16T17:32:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MzIxNzA5OQ==",
                                           "createdAt":  "2019-05-16T20:19:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stevejgordon",
                                           "body":  "@anurse, with regards to including benchmarks. Is there a standard preferred approach? Or would just including a console app for now be fine? Presumably can remove before merging.",
                                           "updatedAt":  "2019-05-16T20:19:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MzI0NzA4NA==",
                                           "createdAt":  "2019-05-16T22:01:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "We use [BenchmarkDotNet](https://github.com/dotnet/BenchmarkDotNet). A microbenchmark would probably be sufficient here. If there isn\u0027t already a project near the response caching project that\u0027s a bit unfortunate. Here\u0027s an example of one: https://github.com/aspnet/AspNetCore/tree/master/src/Http/perf/Microbenchmarks",
                                           "updatedAt":  "2019-05-16T22:01:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MzQwMjkwMA==",
                                           "createdAt":  "2019-05-17T10:17:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOApBlWg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "analogrelay",
                                                                               "createdAt":  "2019-05-17T20:39:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "oddbear",
                                                                               "createdAt":  "2019-05-21T10:59:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "stevejgordon",
                                           "body":  "I\u0027ll add a perf folder and a BenchmarkDotNet project for this.",
                                           "updatedAt":  "2019-05-17T10:17:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5NTE5NTcxOQ==",
                                           "createdAt":  "2019-05-23T12:22:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOApQKkw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "analogrelay",
                                                                               "createdAt":  "2019-05-24T03:25:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stevejgordon",
                                           "body":  "A small update on this. I\u0027ve progressed with adding a benchmark project and an optimised version of the code. The saving for `CreateBaseKeyStringCreate` is evident but the gain is a little less than my original test. \r\n\r\nI\u0027m working through a version of `CreateStorageVaryByKey` too which so far allocates a little less, but is slower as there\u0027s more upfront work to calculate the length. I\u0027m going to play with that some more and see if there are better options.\r\n\r\nI\u0027ll be on vacation for a week or so from this weekend so I\u0027ll likely spend more time on this when I\u0027m back.",
                                           "updatedAt":  "2019-05-23T12:22:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5NzE1Mzg0NQ==",
                                           "createdAt":  "2019-05-30T00:16:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAp4T7w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stevejgordon",
                                                                               "createdAt":  "2019-06-04T11:51:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "Putting this in the backlog since we don\u0027t plan to do optimization ourselves here in 3.0. Definitely still interested in a PR any time you\u0027re ready!",
                                           "updatedAt":  "2019-05-30T00:16:52Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "ResponseCachingKeyProvider Performance Optimisations",
        "labels":  [
                       "enhancement",
                       "severity-nice-to-have",
                       "affected-very-few",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/10302",
        "createdAt":  "2019-05-16T19:01:18Z",
        "number":  10302,
        "author":  "Tratcher",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-02T00:45:19Z",
        "body":  "Today the ForwardedHeadersMiddleware no-ops if the expected headers are missing or invalid. For our common use cases though, we expect the headers to always be there or else the proxy is misconfigured (or the request is coming from a potentially malicious side-channel?). In these scenarios it makes sense to reject the request as invalid (400).\r\n\r\nThis would be optional and only enabled for our known scenarios (IIS out-of-proc, Azure Linux, Nginx \u0026 Apache docs, etc.) because we don\u0027t know how other customers may be using it.\r\n\r\nCompare to the HostFitlering middleware that sends a 400 and an optional HTML message.\r\n\r\nDesign note: Rather than making this a bool option, consider a ForwardMinimum count that would mirror the existing ForwardLimit. E.g. There must be at least ForwardMinimum headers applied or else we fail the request. However, for all of our usages this minimum would be 1 (ForwardLimit also defaults to 1). The default would be 0.\r\n\r\n@blowdart @davidfowl \r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONSJp2A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMjkyNzA1Nw==",
                                           "createdAt":  "2021-03-19T15:45:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Here\u0027s are some test cases from another report:\r\n```\r\nX-Forwarded-For: \"2.2.2.2, 1.1.1.1\r\nX-Forwarded-For: 2.2.2.2\", 1.1.1.1\r\nX-Forwarded-For: 2.2\"2.2, 1.1.1.1\r\n```\r\nThe unpaired quote invalidates the whole header, not just the first value. See IHeaderDictionary.[GetCommaSeperatedValues](https://github.com/dotnet/aspnetcore/blob/36e5113de354b18a88113021996d0cad3e919867/src/Http/Http.Abstractions/src/Extensions/HeaderDictionaryExtensions.cs#L42).\r\n\r\nBumping from backlog for re-triage. @blowdart wants this fixed in 6.0.",
                                           "updatedAt":  "2021-03-19T17:32:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMzExMDE4OA==",
                                           "createdAt":  "2021-03-19T20:34:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\nWe\u0027re moving this issue to the `Next sprint planning` milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-03-19T20:34:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde841ImnY",
                                           "createdAt":  "2021-08-03T01:51:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-08-03T01:51:31Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Have ForwardedHeaders send 400 responses for bad/missing forwarders",
        "labels":  [
                       "bug",
                       "affected-few",
                       "severity-minor",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/10704",
        "createdAt":  "2019-05-31T18:40:33Z",
        "number":  10704,
        "author":  "analogrelay",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-28T23:10:10Z",
        "body":  "Epic #10702 \r\n\r\nWe should measure the impact of the Request Queuing middleware in the Plaintext benchmark. We may need to tune the queue depth and concurrent request limit numbers as part of this.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHawf6A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5NzgxODgxMw==",
                                           "createdAt":  "2019-05-31T18:41:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "FYI @sebastienros (just a heads-up that @DylanDmitri may be coming your way to find out a bit more about our benchmarks later on)",
                                           "updatedAt":  "2019-05-31T18:41:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5NzgxOTYyNA==",
                                           "createdAt":  "2019-05-31T18:43:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sebastienros",
                                           "body":  "I think I mentioned benchmarking to him, but didn\u0027t realize he had no idea what we can do already ;)",
                                           "updatedAt":  "2019-05-31T18:43:30Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Measure overhead of Request Queuing middleware in Plaintext benchmark",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/10705",
        "createdAt":  "2019-05-31T18:42:39Z",
        "number":  10705,
        "author":  "analogrelay",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-28T23:10:10Z",
        "body":  "Epic #10702 \r\n\r\nWe want to emit event counters similar to the \"Requests Queued\" Performance Counter in ASP.NET 4.x. I suggest:\r\n\r\n* Requests in Queue\r\n* Requests Currently Executing\r\n* Average time spent in queue\r\n\r\ncc @shirhatti (PM for Event Counters)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Request Queuing middleware should emit Event Counters",
        "labels":  [
                       "enhancement",
                       "affected-few",
                       "severity-minor",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/10706",
        "createdAt":  "2019-05-31T18:43:57Z",
        "number":  10706,
        "author":  "analogrelay",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-28T23:10:09Z",
        "body":  "Epic #10702 \r\n\r\nAfter #10703 and #10704, we\u0027ll have data to dive deeper into performance. Let\u0027s do some profiling and see if there are things we can do to make this as fast as possible. Also, we can do memory profiling to see if there are allocations to be removed (@davidfowl \u0027s favorite subject ;)).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Performance exploration in Request Queuing middleware",
        "labels":  [
                       "enhancement",
                       "severity-nice-to-have",
                       "affected-very-few",
                       "feature-rate-limit",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/11339",
        "createdAt":  "2019-06-18T18:37:34Z",
        "number":  11339,
        "author":  "analogrelay",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-28T23:10:08Z",
        "body":  "Epic https://github.com/aspnet/AspNetCore/issues/10702\r\n\r\nIn general, we need scenarios that trigger thread-pool starvation (blocking thread-pool threads is the most common trigger). We suspect that I/O bound work won\u0027t necessarily improve RPS, but would improve memory usage. CPU bound work would likely improve RPS by reducing thread context switches.\r\n\r\nWe should evaluate both kinds of scenarios (I/O bound can be simulated with `Thread.Sleep`, CPU bound can be simulated by spinning the CPU).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHf-1sA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMzI2NDAwMw==",
                                           "createdAt":  "2019-06-18T18:48:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benaadams",
                                           "body":  "\u003e I/O bound can be simulated with `Thread.Sleep`\r\n\r\nWould simulate sync blocking; though if you wanted sync-over-async starvation (double speed) `Task.Delay(nnn).Wait()` would be better",
                                           "updatedAt":  "2019-06-18T18:48:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMzI5NzQ1Ng==",
                                           "createdAt":  "2019-06-18T20:24:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "Ah yeah, because of ye olde \"need a thread to wake the thread\". Good point.",
                                           "updatedAt":  "2019-06-18T20:24:27Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Add benchmark scenarios to illustrate where Request Queuing benefits",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/11377",
        "createdAt":  "2019-06-19T17:14:56Z",
        "number":  11377,
        "author":  "analogrelay",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-28T23:10:08Z",
        "body":  "Now that we expose pipes from the request/response body we should consider converting additional middleware and components to use it:\r\n\r\n(This may be affected/invalidated by plans to unify Pipes and Stream)\r\n\r\n* Response Caching\r\n* Response Compression - Requires support for Pipes in the compression APIs\r\n* Form/Multipart reader\r\n* Request Buffering",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONyk_Bg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwNTA3MDE3Mw==",
                                           "createdAt":  "2019-06-24T15:52:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotalik",
                                           "body":  "@glennc IIRC there was a community member you talked to that was interested in this.",
                                           "updatedAt":  "2019-06-24T15:52:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxMDk0NzI0NA==",
                                           "createdAt":  "2019-07-12T16:20:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "realmont",
                                           "body":  "I don\u0027t know what I do",
                                           "updatedAt":  "2019-07-12T16:20:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNTY5MTEwOA==",
                                           "createdAt":  "2019-08-28T10:51:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SARAVANA1501",
                                           "body":  "Hi I would like to work on this issue, Can anyone explain me more?",
                                           "updatedAt":  "2019-08-28T10:51:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNjI2NDE0Mw==",
                                           "createdAt":  "2019-08-29T16:32:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotalik",
                                           "body":  "@SARAVANA1501 so one place to look as an example is the updated for 3.0: https://github.com/aspnet/AspNetCore/blob/master/src/Http/WebUtilities/src/FormPipeReader.cs. This uses pipelines internally to reduce allocations when parsing a form. This doc will also give some background: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/request-response?view=aspnetcore-3.0. ",
                                           "updatedAt":  "2019-08-29T16:32:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MDY2Mjg2Nw==",
                                           "createdAt":  "2019-10-10T16:19:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gilmishal",
                                           "body":  "Does this issue still need help or were there any changes in the last few months? I want to start contributing and it seems like a straightforward issue to start working on. ",
                                           "updatedAt":  "2019-10-10T16:19:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MDY4OTE2MQ==",
                                           "createdAt":  "2019-10-10T17:26:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "It\u0027s still an issue we\u0027d consider PRs for. Some of the components are not updated to use pipes. I don\u0027t know that I\u0027d say it\u0027s straightforward (probably shouldn\u0027t have the \"good first issue\" label, I\u0027ll fix that) since it requires an understanding of the System.IO.Pipelines API and how it differs from System.IO.Stream.\r\n\r\nIf you\u0027re interested in looking at it, we can help out though! I just want to set the context that it may take quite a bit of back-and-forth and time to get it merged.",
                                           "updatedAt":  "2019-10-10T17:26:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MTQwOTEyOA==",
                                           "createdAt":  "2019-10-13T11:10:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gilmishal",
                                           "body":  "Ok, I will read more about System.IO.Pipelines, and will probably start with a PR for Form/Multipart readers over the next few days. ",
                                           "updatedAt":  "2019-10-13T11:10:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MTQzMDM4MA==",
                                           "createdAt":  "2019-10-13T15:51:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAyneVw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotalik",
                                                                               "createdAt":  "2019-10-14T03:42:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "gilmishal",
                                           "body":  "Ok, Looked through the code for MultipartReader - I guess I should create a new MultipartPipeReader class and use the new _request.BodyReader - and replace the MultipartReader class with MultipartPipeReader that I had created.\r\n\r\nObviously I should recreate all the relevant tests as well, I will use FormPipeReader as reference.\r\n\r\nI would prefer to start working on the MultipartPipeReader class and create a pull request with what I had created to make sure with you guys that I am on the right track, and then I will create the Tests.\r\n\r\nIt totally depends on you though, if you want to review the pull request when it\u0027s finished including tests that\u0027s fine too.",
                                           "updatedAt":  "2019-10-13T15:51:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MTQ0MzA2NA==",
                                           "createdAt":  "2019-10-13T18:17:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "The multipart reader is a good one. You can make a draft PR without tests to get design feedback ",
                                           "updatedAt":  "2019-10-13T18:17:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MTQ5NDE5OQ==",
                                           "createdAt":  "2019-10-14T03:44:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotalik",
                                           "body":  "And we will definitely take an external contribution for the multipart reader. The man reason we want to do these refactors is for performance; we definitely want to make sure the performance is better in the new MultipartReader than the previous one. \r\n\r\nHowever, feel free to just make the draft PR first.",
                                           "updatedAt":  "2019-10-14T03:44:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MjIwNDMyNQ==",
                                           "createdAt":  "2019-10-15T13:12:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gilmishal",
                                           "body":  "Looking in a bit more it seems I should use the `ParseFormValuesFast/ParseFormValuesSlow` from FormPipeReader in some way to read the headers - I am still not sure how it works since I am very new to all the Span related things. But I think it would make sense to create a utility Class to hold these functions, rather than having them as private functions.",
                                           "updatedAt":  "2019-10-15T13:12:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MjIyODI5NQ==",
                                           "createdAt":  "2019-11-10T20:01:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alefranz",
                                           "body":  "I had a look at migrating the `ResponseCaching` middleware, however I am struggling to find the correct design to intercept the response without using a stream. I\u0027ve opened #16961 for discussion.\r\n",
                                           "updatedAt":  "2019-11-10T20:01:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde843KT8G",
                                           "createdAt":  "2021-09-23T01:46:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "\u003e Response Compression - Requires support for Pipes in the compression APIs\r\n\r\n@anurse @davidfowl It sounds like there\u0027s a missing feature we need to add to dotnet/runtime first. Can someone please add a bug in that repo with the details/requirements? I can help champion it if there\u0027s the need to propose new APIs.",
                                           "updatedAt":  "2021-09-23T01:46:59Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Convert existing middleware to use pipes",
        "labels":  [
                       "enhancement",
                       "affected-few",
                       "severity-minor",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/11654",
        "createdAt":  "2019-06-27T15:40:34Z",
        "number":  11654,
        "author":  "Bartmax",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-28T23:10:07Z",
        "body":  "As of right now, the [**HttpMethodOverrideMiddleware**](https://github.com/aspnet/AspNetCore/blob/c95ee2b051814b787b07f55ff224d03d550aafeb/src/Middleware/HttpOverrides/src/HttpMethodOverrideMiddleware.cs) only support overriding methods for `POST` requests, and when the method is overridable by a `HEAD` method the body is still returned.\r\n\r\nCurrently kestrel prevents body writing to `HEAD` requests but since method overriding happens later in a middleware, Kestrel has no chance to prevent the output.\r\n\r\nUnfortunately there are some clients that doesn\u0027t support `HEAD` verb and there are 2 issues with the current **HttpMethodOverrideMiddleware**\r\n\r\n1. Only support override for `POST` verbs while `HEAD` should be allowed on ANY type of request.\r\n2. It doesn\u0027t prevent body writing on `HEAD`.\r\n\r\nTo solve both issue I propose the following change to `HttpMethodOverrideMiddleware` `Invoke` method:\r\n\r\n```c#\r\npublic async Task Invoke(HttpContext context)\r\n{\r\n    var xHttpMethodOverrideValue = context.Request.Headers[xHttpMethodOverride];\r\n    // New path that checks explicitly for HEAD verb.\r\n    if (string.Equals(xHttpMethodOverrideValue, HttpMethods.Head, StringComparison.OrdinalIgnoreCase))\r\n    {\r\n        context.Request.Method = HttpMethods.Head;\r\n        // Prevents body to include data, this also sets Content-Length to 0.\r\n        context.Response.Body = Stream.Null;\r\n    }\r\n    // Previous behavior.\r\n    else if (string.Equals(context.Request.Method, \"POST\", StringComparison.OrdinalIgnoreCase))\r\n    {\r\n        // ... current code\r\n    }\r\n    await _next(context);\r\n}\r\n```\r\n\r\nIf there\u0027s interest in updating the current middleware I can submit a PR\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHjEKTQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwNjUwMTUzNA==",
                                           "createdAt":  "2019-06-27T20:36:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "It\u0027s not going to be that simple. The server has expectations based on the method and overriding the method is likely to cause the app to violate those expectations.\r\n\r\nContent-Length Example:\r\nRequest:\r\nGET [URL]\r\nx-Http-Method-Override: HEAD\r\n\r\nResponse:\r\n200 OK\r\nContent-Length: 200\r\n\r\nAt this point the server is expecting the app to provide 200 bytes or else it\u0027s an error and it will abort the connection. The client is also expecting 200 bytes, or else it\u0027s ambiguous when the next response starts.\r\n\r\nThese scenarios might work:\r\n- If the app ignores the method override and sends the body (with or without content-length). This is pretty common behavior, that\u0027s why kestrel suppresses the response body.\r\n- If the app doesn\u0027t specify the Content-Length and doesn\u0027t write any data. The server will default to Content-Length 0. This would work but is misleading for a HEAD request because the response headers are supposed to match a GET request.",
                                           "updatedAt":  "2019-06-27T20:36:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwNjUzMDM4MQ==",
                                           "createdAt":  "2019-06-27T22:13:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Bartmax",
                                           "body":  "\u003e If the app doesn\u0027t specify the Content-Length and doesn\u0027t write any data. The server will default to Content-Length 0. This would work but is misleading for a HEAD request because the response headers are supposed to match a GET request.\r\n\r\nI think that\u0027s a fair trade off",
                                           "updatedAt":  "2019-06-27T22:13:01Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "HttpMethodOverrideMiddleware is missing HEAD on GET requests.",
        "labels":  [
                       "enhancement",
                       "affected-few",
                       "severity-minor",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/12169",
        "createdAt":  "2019-07-14T18:52:19Z",
        "number":  12169,
        "author":  "alefranz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBuVOw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Rezakazemi890",
                                            "createdAt":  "2025-04-25T15:03:20Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-06-18T10:10:21Z",
        "body":  "### Describe the bug\r\nThe MessageHandler relies on the Middleware to initialize `HeaderPropagationValues.Headers` to detect misconfiguration. However this means the Messagehandler can not be used outside of an http request and currently throws:\r\n```\r\nSystem.InvalidOperationException: The HeaderPropagationValues.Headers property has not been initialized. If using this HttpClient as part of an http request, register the header propagation middleware by adding \u0027app.UseHeaderPropagation() in the \u0027Configure(...)\u0027 method. Otherwise, use HeaderPropagationProcessor.ProcessRequest() before using the HttpClient.\r\n```\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n\u003cdetails\u003e\r\n\u003csummary\u003eCode example\u003c/summary\u003e\r\n\r\n```csharp\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n    services\r\n        .AddHttpClient(\"test\")\r\n        .AddHeaderPropagation();\r\n    services.AddHostedService\u003cSampleHostedService\u003e();\r\n}\r\n```\r\n\r\n```csharp\r\npublic class SampleHostedService : IHostedService\r\n{\r\n    private readonly IHttpClientFactory _httpClientFactory;\r\n    private readonly HeaderPropagationProcessor _headerPropagationProcessor;\r\n    private readonly ILogger _logger;\r\n\r\n    public SampleHostedService(IHttpClientFactory httpClientFactory, HeaderPropagationProcessor headerPropagationProcessor, ILogger\u003cSampleHostedService\u003e logger)\r\n    {\r\n        _httpClientFactory = httpClientFactory ?? throw new ArgumentNullException(nameof(httpClientFactory));\r\n        _headerPropagationProcessor = headerPropagationProcessor ?? throw new ArgumentNullException(nameof(headerPropagationProcessor));\r\n        _logger = logger ?? throw new ArgumentNullException(nameof(logger));\r\n    }\r\n\r\n    public Task StartAsync(CancellationToken cancellationToken)\r\n    {\r\n        return DoWorkAsync();\r\n    }\r\n\r\n    private async Task DoWorkAsync()\r\n    {\r\n        _logger.LogInformation(\"Background Service is working.\");\r\n\r\n        var client = _httpClientFactory.CreateClient(\"test\");\r\n        var result = await client.GetAsync(\"http://localhost:62013/forwarded\");\r\n\r\n        _logger.LogInformation(\"Background Service:\\n{result}\", result);\r\n    }\r\n\r\n    public Task StopAsync(CancellationToken cancellationToken)\r\n    {\r\n        return Task.CompletedTask;\r\n    }\r\n}\r\n```\r\n\u003c/details\u003e\r\n\r\n### Expected behavior\r\nThe HttpClient should work if used outside of a request or, if we don\u0027t wont to support this use case, the exception should be updated to explain that such use case is not supported..\r\n\r\n### Possible solutions\r\nI had investigated possible solutions. Not sure what is your preferred options and if we are still in time to do breaking changes on this middleware.\r\nHere are some options:\r\n1. Remove the check that throws the exception which means we would not be able anymore to detect misconfiguration. Can this be replaced with an analyzer?\r\nOn top of the risk that the feature might not work due to misconfiguration, there is also the risk that having the valuefilter not execute (e.g. to set some headers with default values) when not called from outside a request can be unexpected.\r\n1. Update the exception message to also explain that a `HttpClient` with the `HeaderPropagationMessageHandler` can not be used outside of a request. This is not ideal as it means you end up duplicating your `HttpClient`s configuration.\r\n1. Extract the functionality from the Middleware to a generic Processor that can be called outside a http request. This will not change the middleware behaviour, but will allow to explicitly call the Processor when consuming an HttpClient outside of  a http request. Ideally this will also include changing the valueFactory to receive a headers collection instead of the HttpContext, so that headers can be passed in different scenarios, for example when consuming messages from a queue, however I guess this scenario is out of scope for a middleware. See draft PR #12170 . The main issue I see with this approach is that when the processor is used directly you must take extra care as you need a different async context per request.\r\n\r\nLooking forward for your feedback.\r\n\r\nThank you,\r\n Alessio\r\n\r\n/cc @rynowak ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsdXu0g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxMTYyMzY5NA==",
                                           "createdAt":  "2019-07-16T01:03:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rynowak",
                                           "body":  "\u003e The HttpClient should work if used outside of a request or, if we don\u0027t wont to support this use case, the exception should be updated to explain that such use case is not supported..\r\n\r\nCan you describe what this would even mean to \"support this use case\". Is the idea that you want to use header propagation *where possible* and then degrade gracefully?\r\n\r\nI guess I\u0027m more interested to hear about the scenario than the technical changes.",
                                           "updatedAt":  "2019-07-16T01:03:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxMjU4ODkzNQ==",
                                           "createdAt":  "2019-07-17T22:15:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEPrBwA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zhutoutou",
                                                                               "createdAt":  "2023-07-13T10:10:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Rezakazemi890",
                                                                               "createdAt":  "2025-04-25T15:03:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "alefranz",
                                           "body":  "Hi Ryan,\r\n\u003e Is the idea that you want to use header propagation where possible and then degrade gracefully?\r\nthat is what I meant. Apologies if my explanation was a bit convoluted.\r\n\r\nI believe having some background processing in an API is not so uncommon.\r\nAnd probably that background process will deal with the same dependent service that some controller\u0027s action deal with directly.\r\n\r\nWhen a user add the HeaderPropagation behavior to a client, does not probably realize that this means that the client can not be used anymore outside of a incoming HTTP request transaction (as we rely on the middleware initializing the headers collection to detect misconfiguration). \r\nSo there is a requirement of making this constraint more obvious.\r\n\r\nUnfortunately when using a typed client and relying on DI, it become convoluted to have to exact same clients just with a different configuration, so I am not sure that this behavior is acceptable.\r\n\r\nThe alternative that consuming the same client from a hosted service is made possible, but without propagating the headers, to me feels more user friendly, however there could be a scenario when the background processing is triggered by some incoming http request (e.g. storing some data on a queue for later processing by a hosted service in the same process) and a user will incorrectly assume that the headers are propagated and doesn\u0027t get any exception to warn about it.\r\nSo in this respect the current behavior is more safe, although can be a bit annoying to deal with it.\r\n\r\nDoes this answer your question or are you looking for an example?\r\n\r\nI don\u0027t have a real example of a service with such scenario (otherwise I would have caught this before 😅) but it could be a service when you get a request that involve a minimum call to a service A to get the data required to fulfill the response, and it defer to later some more expensive call to service A which is a consequence of the original request but not required to return the response (as it is only a side effect or it will be sent back with a webhook). This could be for example achieved using a a TPL Dataflow ActionBlock or a queuing mechanism than consumed by a hosted service. The key part is that the processor will have to consume the same service A.\r\n\r\nI can put together an example if that will help.\r\n\r\nThank you,\r\n Alessio\r\n",
                                           "updatedAt":  "2019-07-17T22:15:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxMzQxNDQ5MA==",
                                           "createdAt":  "2019-07-19T23:55:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEPrBiQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Rezakazemi890",
                                                                               "createdAt":  "2025-04-25T15:02:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rynowak",
                                           "body":  "\u003e Extract the functionality from the Middleware to a generic Processor that can be called outside a http request. This will not change the middleware behaviour, but will allow to explicitly call the Processor when consuming an HttpClient outside of a http request. Ideally this will also include changing the valueFactory to receive a headers collection instead of the HttpContext, so that headers can be passed in different scenarios, for example when consuming messages from a queue, however I guess this scenario is out of scope for a middleware. \r\n\r\nI don\u0027t really want to do this I guess (anymore so than we already did). The idea of adding this feature to the core was that getting the capture + propagation of values from the **current request** is a tricky problem that seemed worth ASP.NET Core solving for you.\r\n\r\nWriting a general purpose *run code to set headers* feature is too general, and something that anyone can do with a message handler in whichever way they please. \r\n\r\nPut another way: it\u0027s worth us providing opinions about how to integrate features of ASP.NET Core with each other, but it\u0027s not a great idea for us to provide opinions about all the code you write. It\u0027s better to just tell people to use the BCL features than to provide wrappers around them - for us to provide an alternative to some code you could write - there has to be some kind of value to it other than reduction in lines of code\r\n\r\n-------\r\n\r\nI think the scenario makes sense. It\u0027s a little surprising that once you opt-in to header forwarding, you can\u0027t use that client outside of a request - but it\u0027s also a reasonable explanation - but the workaround is painful (duplicate your config)\r\n\r\nI think are options are to either:\r\n- Do nothing (can always be fixed in the future)\r\n- Remove the sanity check\r\n- Add an option to bypass the sanity check\r\n\r\nWe have a few days left to address this before the release really locks down - I\u0027ve taken a while to respond because I\u0027m not sure which of the last two options is least surprising.\r\n\r\n@anurse @Tratcher @davidfowl @glennc ",
                                           "updatedAt":  "2019-07-19T23:57:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNDY3NDQ1OQ==",
                                           "createdAt":  "2019-07-24T15:12:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "\u003e We have a few days left to address this before the release really locks down\r\n\r\nBarely that even. I think this might be a good candidate to reconsider when we open a branch for 3.1 next week. I\u0027m afraid I haven\u0027t been able to catch up on the thread, but is this something that will break customer scenarios if not resolved? If so, we can evaluate it for 3.0 (based on the impact of the bug). If this is just about expanding the usefulness of the HeaderPropagation message handler, I think we\u0027ll have to move this out of 3.0. It wouldn\u0027t meet the bar.",
                                           "updatedAt":  "2019-07-24T15:12:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNDY3NDk1OQ==",
                                           "createdAt":  "2019-07-24T15:13:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAtHuow==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "analogrelay",
                                                                               "createdAt":  "2019-07-24T16:37:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rynowak",
                                           "body":  "There\u0027s no break here. \r\n\r\nWe\u0027re discussing how to best deal with a case that would throw an exception in 3.0 - and trying to decide if we want to make it more tolerant. I have no issue with moving this decision to 3.1",
                                           "updatedAt":  "2019-07-24T15:13:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNDc0NDI0Nw==",
                                           "createdAt":  "2019-07-24T18:21:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAtIx9g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "analogrelay",
                                                                               "createdAt":  "2019-07-24T20:10:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "alefranz",
                                           "body":  "Yes I agree we need to postpone it as we are waiting for more feedback on what is the best approach to take.\r\n\r\n@rynowak do we need to rephrase the exception message for 3.0? we could add something at the end to indicate that another possible reason of this exception is that the Http client is used outside of processing of a request which is unsupported.\r\n\r\nThanks!",
                                           "updatedAt":  "2019-07-24T18:21:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNDc0NTY5OA==",
                                           "createdAt":  "2019-07-24T18:25:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAtLhZA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alefranz",
                                                                               "createdAt":  "2019-07-25T10:08:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rynowak",
                                           "body":  "Sure, if you want to send a PR that updates the exception message that would be fine. We have until monday to merge it. ",
                                           "updatedAt":  "2019-07-24T18:25:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNTYyNzc4MA==",
                                           "createdAt":  "2019-07-26T23:26:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alefranz",
                                           "body":  "Raised PR https://github.com/aspnet/AspNetCore/pull/12636",
                                           "updatedAt":  "2019-07-26T23:26:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzODc2NTQyMA==",
                                           "createdAt":  "2019-10-06T16:49:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxugsA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "techgeek03",
                                                                               "createdAt":  "2020-07-16T15:51:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lawrence-laz",
                                                                               "createdAt":  "2020-09-23T08:24:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jaredwri",
                                                                               "createdAt":  "2023-02-22T15:21:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pedroarmando",
                                                                               "createdAt":  "2023-06-23T13:43:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "atereshko-baloise",
                                                                               "createdAt":  "2023-09-20T12:07:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mcastagna-sa",
                                                                               "createdAt":  "2024-09-10T19:24:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "raphaabreu",
                                           "body":  "Hello all, I am coming here from https://github.com/alefranz/HeaderPropagation/issues/6 as suggested by @alefranz.\r\n\r\nI am starting to upgrade some projects at my company and header forwarding is being an issue for us. It is awesome that there is a standard package from the AspNetCore team that we can reference and use as model to how to solve similar problems, however this particular implementation is breaking for us. The header forwarding functionality should not break the regular httpclient flow when used from outside a request context.\r\n\r\nWe can create middlewares and http message handlers to have the exact behaviour we expect, specially after seen how it is done, however it leaves me feeling this \"gap\" where I see several packages officially supported by the AspNetCore team that don\u0027t play well with each other. I would never have expected to not be able to use the same typed httpclient on a service if that service is consumed by a controller and by a background service.\r\n\r\nWould it be a problem if the header forwarder message handler simply did nothing if there was no available http context to get headers from?",
                                           "updatedAt":  "2019-10-06T16:49:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1OTUwOTUyMg==",
                                           "createdAt":  "2020-07-16T16:02:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBKt_iA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JimBobSquarePants",
                                                                               "createdAt":  "2020-07-17T18:55:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "techgeek03",
                                           "body":  "Any conclusion on this? I\u0027m with @raphaabreu on this. Throwing an exception if there is no available http context relay does not work in all cases. The best possible solution is to just remove the throwing of the exception and don\u0027t do anything.\r\n\r\nIn my case I\u0027m using Refit and also resolving the typed clients in integration tests. We mainly want to use this package to pass diagnostics headers from envoy used for distributed tracing. \r\n\r\nIf the point of that exception is to detect misconstructions; you will know the moment the headers are not being propagated :) \r\n",
                                           "updatedAt":  "2020-07-16T16:02:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MDUwMDg5NA==",
                                           "createdAt":  "2020-07-18T15:45:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alefranz",
                                           "body":  "Hi @techgeek03,\r\n\r\nThe goal of detecting misconfiguration is to avoid the problem when the headers are not propagating as expected but it goes unnoticed. I think it is about striking the right balance between pushing cusers in the right direction versus allowing maximum flexibility and, at the time, it looked like there wasn\u0027t much interesting in supporting other scenarios.\r\n\r\nRegarding your specific issues, you can use the HeaderPropagation middleware in the current state in integration tests. Are you including the middleware in your test server? Or what is the context in which you are experiencing this exception? Maybe I can help you find a workaround or having a concrete example could help make a case for this change.\r\n\r\nHowever, the recommended solution for distributed tracing in ASP.NET Core does not involve this middleware (although I believe it still doesn\u0027t support having different header names, but I could be wrong).\r\n",
                                           "updatedAt":  "2020-07-18T15:46:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxODIxNTkwNA==",
                                           "createdAt":  "2020-10-28T21:21:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ththiem",
                                           "body":  "We recently ran into this issue that broke the entire call flows of our services as a result of this exception. There are numerous real world scenarios where service A makes http calls to service B for different purposes: It could be as a direct result of an incoming request to service A, it could also be processing messages out of an event queue, it could be a background task spawned by a request in any asynchronous scenario. \r\n\r\nAnd the workaround of creating a duplicate http client just to not have the propagation is in direct violation of the [recommended guidelines](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/http-requests?view=aspnetcore-3.1#httpclient-and-lifetime-management) for proper httpclient lifetime management, where you are expected to reuse the same instance to take advantage of connection pooling to prevent socket exhaustion and reduce the delay in creation and teardown of the instances. So this really needs to be addressed sooner rather than later.",
                                           "updatedAt":  "2020-10-28T21:21:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxOTYzNDU4OQ==",
                                           "createdAt":  "2020-10-30T15:50:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "\u003e And the workaround of creating a duplicate http client just to not have the propagation is in direct violation of the recommended guidelines for proper httpclient lifetime management,\r\n\r\nYou\u0027re still expected to use a different HttpClient whenever the configuration is different. So long as you\u0027re re-using your clients and not throwing them away after each use you\u0027ll avoid the issues discussed in the guidelines.",
                                           "updatedAt":  "2020-10-30T15:50:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86ouIFp",
                                           "createdAt":  "2025-04-25T14:55:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOERXSxQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sebastian-mihai",
                                                                               "createdAt":  "2025-05-08T10:47:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulHomiuc",
                                                                               "createdAt":  "2025-05-08T10:51:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bimadeAtClearD",
                                                                               "createdAt":  "2025-05-08T17:22:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "Rezakazemi890",
                                           "body":  "I’ve run into a practical scenario that I believe this issue affects, and I’d like to share it along with a potential improvement suggestion.\n\n**Scenario:**  \nI have a `TypedClient` that is used in two different contexts within my application:\n- **During HTTP requests**, where I want to propagate certain headers using the `HeaderPropagation` middleware.\n- **Within a `BackgroundService` or `HostedService`**, where no active HTTP context exists.\n\nAs expected, when using the `TypedClient` from within an HTTP request, everything works fine. However, when it\u0027s called from the `BackgroundService`, I encounter the same `InvalidOperationException` mentioned in this issue because the `HeaderPropagationValues` have not been initialized.\n\n**Current workaround:**  \nTo handle this, we’ve had to create two separate implementations of the `TypedClient`:\n- One configured with the `HeaderPropagation` handler (for use in HTTP requests)\n- One without it (for background services)\n\nThis leads to **duplicate code and maintenance overhead**, which isn\u0027t ideal.\n\n**Proposal:**  \nIt would be helpful if the `HeaderPropagation` middleware offered an option within its configuration to control whether it should enforce the presence of an active HTTP context.  \nFor example:\n```csharp\nservices.AddHeaderPropagation(options =\u003e\n{\n    options.RequireActiveRequestContext = true; // default to true for backwards compatibility\n});\n```\n\nWhen set to `false`, the middleware would simply skip propagation if no HTTP context is available, instead of throwing an exception. This would make it much easier to use the same `TypedClient` in both HTTP and non-HTTP contexts without duplicating the implementation.\n\nWould love to hear what others think about this — I believe this could address several real-world scenarios without introducing breaking changes.\n\n@alefranz @rynowak ",
                                           "updatedAt":  "2025-04-25T14:55:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86xCt63",
                                           "createdAt":  "2025-06-13T12:44:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamrodger",
                                           "body":  "I managed to work around this issue in a background service by adding a message handler to all my `HttpClient` instances (created via `HttpClientFactory`) which ensures that the header values are never null:\n\n```cs\n    internal class MyMessageHandler : DelegatingHandler\n    {\n        private readonly IServiceProvider services;\n\n        public MyMessageHandler(IServiceProvider services)\n        {\n            this.services = services;\n        }\n\n        protected override Task\u003cHttpResponseMessage\u003e SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\n        {\n            // see: https://github.com/dotnet/aspnetcore/issues/12169 for details on why this is needed\n            var values = this.services.GetRequiredService\u003cHeaderPropagationValues\u003e();\n            values.Headers ??= ImmutableDictionary\u003cstring, StringValues\u003e.Empty;\n\n            return base.SendAsync(request, cancellationToken);\n        }\n    }\n```\n\nAs far as I know that should still allow propagation to work when called from a controller context, but also not throw when used from a non-controller context like a hosted service doing background processing.",
                                           "updatedAt":  "2025-06-13T12:44:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86x0fZf",
                                           "createdAt":  "2025-06-18T09:04:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXCXGQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Rezakazemi890",
                                                                               "createdAt":  "2025-06-18T10:08:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2025-06-18T10:24:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Herzanet002",
                                           "body":  "@adamrodger \nYou can also do it this way. First, register the collection as singleton. Then add the headers\u0027 propagation.\n```\nserviceCollection\n            .AddSingleton\u003cHeaderPropagationValues\u003e(_ =\u003e new HeaderPropagationValues\n                { Headers = ImmutableDictionary\u003cstring, StringValues\u003e.Empty })\n            .AddHeaderPropagation(options =\u003e { options.Headers.Add(HeadersConstants.HeaderKey); })\n```",
                                           "updatedAt":  "2025-06-18T09:05:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86x1e7S",
                                           "createdAt":  "2025-06-18T10:10:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rezakazemi890",
                                           "body":  "\u003e @adamrodger \n\u003e You can also do it this way. First, register the collection as singleton. Then add the headers\u0027 propagation.\n\u003e ```\n\u003e serviceCollection\n\u003e             .AddSingleton\u003cHeaderPropagationValues\u003e(_ =\u003e new HeaderPropagationValues\n\u003e                 { Headers = ImmutableDictionary\u003cstring, StringValues\u003e.Empty })\n\u003e             .AddHeaderPropagation(options =\u003e { options.Headers.Add(HeadersConstants.HeaderKey); })\n\u003e ```\n\nI\u0027ve been using this method for a while now and it\u0027s working for me.\n\nhttps://github.com/Rezakazemi890/PropagationMw",
                                           "updatedAt":  "2025-06-18T10:10:21Z"
                                       }
                                   ],
                         "totalCount":  17
                     },
        "title":  "HeaderPropagation middleware: MessageHandler throws when used outside of a request",
        "labels":  [
                       "enhancement",
                       "affected-few",
                       "severity-major",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/13170",
        "createdAt":  "2019-08-15T15:35:04Z",
        "number":  13170,
        "author":  "analogrelay",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-28T23:10:05Z",
        "body":  "Created from https://github.com/aspnet/AspNetCore/issues/12301\r\n\r\nIf the response has already started, the Exception Handler middleware exits early and doesn\u0027t write a response. This makes total sense. However, it also doesn\u0027t call the user-provided handler (if any) and it doesn\u0027t signal the diagnostic source. This makes diagnosing issues more difficult. We should consider refactoring this.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOIp3jmA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyMTczMzExMw==",
                                           "createdAt":  "2019-08-15T17:49:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "The user provided handler is also intended to generate a response, so running that seems problematic. Signaling the diagnostic source makes sense though.",
                                           "updatedAt":  "2019-08-15T17:49:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyMTczNDE2MQ==",
                                           "createdAt":  "2019-08-15T17:52:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "\u003e The user provided handler is also intended to generate a response\r\n\r\nI don\u0027t know that I\u0027d agree. The handler is a `RequestDelegate` yes, but that\u0027s not inappropriate here. There\u0027s nothing that expects the handler to generate a response here. It\u0027s just giving it the full context (the request) and the opportunity to generate responses as necessary. The handler can just as easily check if the response has started. Or it could collect all the data it wants, send it to some error reporting service and then let the response proceed as it would have before. Plus, this would allow the user control over what response gets generated if an exception occurs mid-stream.\r\n\r\nI would agree that this could be a behavior break though since the handler may not have been expecting to run when the response has already started. We can talk further about how we want to do that (or if we want to call the handler at all). Signalling the diagnostic source definitely seems like a no-brainer here :).",
                                           "updatedAt":  "2019-08-15T17:53:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNDQ5NDc2Mw==",
                                           "createdAt":  "2019-09-24T10:22:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TehWardy",
                                           "body":  "@anurse Is that something I as a consumer of the framework can hook in to and have a block of code provide a response to the request with?\r\n\r\nNo matter what we need to be able to provide some sort of response that explains either that the request was somehow not valid or that the server was unable to handle it for what ever reason.",
                                           "updatedAt":  "2019-09-24T10:22:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNDU5NTE4MQ==",
                                           "createdAt":  "2019-09-24T14:50:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAxP5rw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "analogrelay",
                                                                               "createdAt":  "2019-09-24T15:50:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "\u003e No matter what we need to be able to provide some sort of response that explains either that the request was somehow not valid or that the server was unable to handle it for what ever reason.\r\n\r\nIf the response has already started it\u0027s not possible for you to provide a different response. You\u0027d be writing in the middle of the existing response and corrupting the HTML, JSON, etc.. If you want to be able to _replace_ a response then you have to fully buffer it to prevent it from being sent to the client. This adds a lot of overhead so we don\u0027t do it by default.",
                                           "updatedAt":  "2019-09-24T14:51:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNDYyMzYxNQ==",
                                           "createdAt":  "2019-09-24T15:53:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "Yeah, I agree with @Tratcher here. This middleware is not designed to allow you to produce an error response **after the main response has already started**. If you want to be able to do that, you\u0027d need to build a new middleware that buffers the response in memory and then dumps that buffer *only* if there is no error executing the rest of the pipeline.\r\n\r\nWhat we are discussing here (and still not at all committed to) is the idea of allowing you to run code in the handler even after the response has started. You still *would not* be able to write a new response or affect the status code if the response has already started, but you could send the error to a diagnostic system of some kind (for example).",
                                           "updatedAt":  "2019-09-24T15:53:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNDYzNjEwNg==",
                                           "createdAt":  "2019-09-24T16:23:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TehWardy",
                                           "body":  "Yeh that\u0027s not unreasonable at all @Tratcher .\r\nI found a scenario where I could setup an OData controller (I know OData is not core aspnet but bear with me) ... in the business logic for the action I could construct an entity and not populate it correctly so the entity was not valid.\r\n\r\nEF for example would fail to put it in to the DB with a SQL exception.\r\nThe OData framework seems to validate properties as it serializes them resulting in the response failing during serialization so the response is literally a half backed blob of JSON.\r\n\r\nThe key issue I had there of course is that the framework just stopped processing at that point. \r\nBeing able to hook on to any part of the request lifecycle as a global catch all and at least log the true exception information is key to helping devs treat the framework right.\r\n\r\nI do also accept that some scenarios are just simply not resolvable (like my OData one) in the ideal manner.\r\n\r\n@anurse It sounds like you\u0027re proposal is much like what I would expect with some basic ability.\r\nSo a \"pseudo code\" concept (with little detail of course) of what I think the framework should do as core behaviour ...\r\n\r\n```\r\nMiddlewareObject stack;\r\ntry\r\n{\r\n     stack = BuildMiddlewareStack();\r\n     stack.ExecuteOn(request);\r\n}\r\ncatch(Exception ex)\r\n{\r\n      CallDefaultHandler(ex);\r\n      if(defined) { CallUserHandler(ex); }\r\n}\r\nfinally\r\n{\r\n     Cleanup(stack, request);\r\n}\r\n```\r\n\r\n... I\u0027m sure it\u0027s way more complex than that but this at the root level ensures that \"worst case\" the user still gets notified when the framework simply can\u0027t handle our garbage ;)",
                                           "updatedAt":  "2019-09-24T16:23:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNDY0MTAyMw==",
                                           "createdAt":  "2019-09-24T16:35:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "\u003e and at least log the true exception information \r\n\r\nThe framework should already be logging the exception at the middleware or server level, even if it can\u0027t produce a response.",
                                           "updatedAt":  "2019-09-24T16:35:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNDY0NTIzMQ==",
                                           "createdAt":  "2019-09-24T16:45:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TehWardy",
                                           "body":  "The bulk of logging that has any value seems to be dropped in to the VS console ... is that what you mean by the \"middleware or server level\"?\r\n\r\nI\u0027m thinking take that VS console stuff too and be able to handle that with the global exception handler.\r\n\r\nI\u0027m already doing this ...\r\n\r\n```\r\napp.UseExceptionHandler(errorApp =\u003e\r\n{\r\n    errorApp.Run(async context =\u003e\r\n    {\r\n        var ex = context.Features.Get\u003cIExceptionHandlerPathFeature\u003e();\r\n        log.Error(ex.Error.Message + \"\\n\" + ex.Error.StackTrace);\r\n          // code clipped out here for berevity\r\n        var innerEx = ex.Error.InnerException;\r\n        while (innerEx != null)\r\n        {\r\n            log.Error(ex.Error.Message + \"\\n\" + ex.Error.StackTrace);\r\n            innerEx = innerEx.InnerException;\r\n        }\r\n    });\r\n});\r\n```\r\n\r\n... but I\u0027ve hit scenarios where the output window in VS has information that would really help and doesn\u0027t get passed to this handler.\r\nIt would be really cool if this middleware also got all the info passed to the VS console window ... maybe if that is the case though put some flag / logging level info  in the errorApp object as it might produce a lot of noise for some scenarios that people wouldn\u0027t want.\r\n\r\nI think @anurse was talking to me about this in another ticket actually. ah yeh, it\u0027s #12301 linked above. That would probably solve both of these tickets at least in part.",
                                           "updatedAt":  "2019-09-24T16:45:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNDY0NjA0MA==",
                                           "createdAt":  "2019-09-24T16:47:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "\u003e The bulk of logging that has any value seems to be dropped in to the VS console ... is that what you mean by the \"middleware or server level\"?\r\n\r\nIt\u0027s logged to the ASP.NET Core logging system. You can plug in a number of outputs, including custom ones.",
                                           "updatedAt":  "2019-09-24T16:47:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNDY0NjE1Mw==",
                                           "createdAt":  "2019-09-24T16:48:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "See https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-3.0 for more details on logging.",
                                           "updatedAt":  "2019-09-24T16:48:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNDY1MjM5MA==",
                                           "createdAt":  "2019-09-24T17:02:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TehWardy",
                                           "body":  "I use Log4Net as my logging framework (legacy reasons basically) ... This looks really good though ... I ma have to migrate to it and see if it\u0027s any better (anything that reduces further external dependencies can\u0027t be that bad right).\r\n\r\n",
                                           "updatedAt":  "2019-09-24T17:02:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNDY4NjQ4OA==",
                                           "createdAt":  "2019-09-24T18:24:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "The advantage to integrating with the built-in framework is that the *entire ASP.NET Core framework* logs to that system, at a variety of detail levels. There are third-party providers than integrate our system with other logging frameworks, more detail on that [in the docs](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-3.0#third-party-logging-providers). I don\u0027t see log4net in that list, but a quick google search for `log4net microsoft.extensions` (The logging framework is in the `Microsoft.Extensions.Logging` namespace) does yield some results (though I don\u0027t know how well those integrations work). You can always integrate the two systems and then continue to log directly to log4net in your app, while also having `ILogger` messages go through to log4net.",
                                           "updatedAt":  "2019-09-24T18:24:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MDc3Mjc2MA==",
                                           "createdAt":  "2020-01-31T15:12:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TehWardy",
                                           "body":  "As per this issue ...\r\nhttps://github.com/OData/WebApi/issues/1858\r\n\r\n... Is there any way I can \"turn off\" result validation during the response serialization in OData controller response handling?\r\n\r\nThis is where it all began and I feel like the problem has moved in to an issue of logging when it\u0027s really an issue of response generation (the framework is forcing an exception that need not be one in the situation I have.\r\n\r\nSorry to drag an OData issue over here but I think the visibility of my issue is being lost somewhat and buried in a logging technicality (which is in all fairness not that important).",
                                           "updatedAt":  "2020-01-31T15:12:05Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Consider running user-provided exception handler even when response has started",
        "labels":  [
                       "enhancement",
                       "affected-few",
                       "severity-minor",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/13295",
        "createdAt":  "2019-08-20T19:19:38Z",
        "number":  13295,
        "author":  "mconnew",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4HYgA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2020-08-12T07:20:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pmilic021",
                                            "createdAt":  "2021-09-16T14:33:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gvkries",
                                            "createdAt":  "2022-03-03T12:25:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Kaayo",
                                            "createdAt":  "2023-03-17T00:59:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Daniel-Svensson",
                                            "createdAt":  "2024-05-23T17:34:14Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2024-02-14T20:21:20Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\nTo match functionality with WCF on .NET Framework, CoreWCF needs to be able to control the number of pending accepts. When a client connects to WCF using the NetTcp transport, there is a handshake that needs to be completed which includes authentication and security upgrade negotiation. After a connection has been established and while the handshake is ongoing, a connection is considered to be a pending connection. WCF controls the maximum number of connections which are in the pending connection state by controlling the maximum number of pending accepts to never be more than how many more pending connections are possible. For example, if the maximum number of pending connections is configured to be 100 and there are currently 95 pending connections, we limit the number of pending accepts to be no more than 5.\r\n\r\n### Describe the solution you\u0027d like\r\nI believe there should be a generic throttling interface that can be added by DI for use at any layer within an app, and a derived interface (which adds no extra methods) which is used at the transport layer. The two interfaces would be defined as:\r\n```c#\r\npublic interface IThrottle\r\n{\r\n    ValueTask\u003cbool\u003e AcquireAsync(CancellationToken cancellationToken = default(CancellationToken));\r\n    void Release();\r\n}\r\n\r\npublic interface ITransportThrottle : IThrottle { }\r\n```\r\nWhen calling AcquireAsync, one of four things can happen.\r\n1. The returned ValueTask\u003cbool\u003e is completed with a value of true meaning the throttle was acquired.\r\n2. The returned ValueTask\u003cbool\u003e is not completed and the call goes async. When a throttle can be acquired, the ValueTask is completed with a value of true meaning the throttle was acquired.\r\n3. The returned ValueTask\u003cbool\u003e is completed with a value of false meaning the throttle can not be acquired immediately. This would be used for a throttle implementation which is used when you want to fail immediately such as returning a 503 throttled HTTP response.\r\n4. The returned ValueTak\u003cbool\u003e is not completed and the call goes async. If the cancellation token is cancelled, the ValueTask is completed with a value of false meaning the throttle was not acquired. This would be used for scenarios where waiting for a throttle can time out or when shutting down the application and you need to complete the pending AcquireAsync call for cleanup.\r\n\r\nIn the code which calls Accept on the listening socket, if an ITransportThrottleexists in DI, in a loop it acquires the throttle and adds another pending accept until ITransportThrottle.AcquireAsync returns a non-completed ValueTask. It would be up to the implementation of the ITransportThrottleto ensure there\u0027s a sensible number of pending accepts. Basically the number of pending accepts is completely controlled by the ITransportThrottleif it exists.\r\n\r\nEdit: Changed IServiceThrottle to ITransportThrottle",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPOXAfw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzA1NDk5MQ==",
                                           "createdAt":  "2019-09-02T08:30:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  ":+1: \r\n\r\nNote that backpressure exists at the OS level. This is the parameter that is passed to the `Socket.Listen` call.\r\n\r\nI wonder if it makes sense to make `IThrottle` explicit part of the bedrock abstractions. For example, a parameter on the `IConnectionListener.Bind`.\r\n\r\nCC @davidfowl @ReubenBond @halter73",
                                           "updatedAt":  "2019-09-09T23:10:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzM3MDQxNw==",
                                           "createdAt":  "2019-09-03T08:59:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I see the value in this existing but I don\u0027t think it belongs on any of the existing APIs.",
                                           "updatedAt":  "2019-09-03T08:59:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzM3Mjc0OQ==",
                                           "createdAt":  "2019-09-03T09:06:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "Is the `IConnectionListener` meant to call `AquireAsync` or is it some other component?",
                                           "updatedAt":  "2019-09-03T09:06:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzM3OTIxMg==",
                                           "createdAt":  "2019-09-03T09:24:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I can\u0027t see how that can be enforced at this point. I would assume it\u0027s the caller.",
                                           "updatedAt":  "2019-09-03T09:24:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzU1MzEwNA==",
                                           "createdAt":  "2019-09-03T17:14:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mconnew",
                                           "body":  "@tmds, the backlog argument to Socket.Listen isn\u0027t back pressure. That\u0027s a buffer to accommodate bursts of incoming connections that the app isn\u0027t calling Accept fast enough to handle. If you have 0 listen backlog configured, then the OS will deny any incoming connections if there isn\u0027t an available pending Accept. That isn\u0027t what I need solved. When you are CPU contended, the OS gives each thread a quanta of time to execute before preemptively switching out to another thread to execute. During the time that a thread has the CPU, it can issue multiple asynchronous Accept calls on a listening socket before it yields the thread. Those accepts complete on IO Threads which have a different scheduling priority and the preemptive behavior is very different in the OS. So basically you can have a CPU pegged at 100% and \"worker\" threads will be preempted by IO Threads which handle the completed Accept and (hopefully) dispatch calling the handler on a worker thread. You should only be calling Accept on an IO thread (because Windows will cancel the pending IO if you close the thread so calling Accept on a worker thread causes the CLR to keep more threads alive in the thread pool so as not to cancel pending IO). So unless you have a mechanism to prevent new pending Accept calls from being made, you can get into the situation where the OS scheduling of IO threads results in you adding more work to your worker thread pool and you end up in the situation where you reduce performance because of more context switches, and any one request takes longer which can result in client timeouts which results in resubmitting of work and you can get into a death spiral.  \r\n\r\n@davidfowl, I\u0027m not suggesting adding this to an existing API. I\u0027m proposing a new interface API for throttling and suggesting a way how the connection listener (I presume the `IConnectionListener` that @tmds mentioned) can use that API to allow an application to prevent the death spiral that you can get into without it. This is a very real scenario and not just academic as I have worked with customers who have had this happen when they have set their WCF transport limits too liberally.",
                                           "updatedAt":  "2019-09-03T17:14:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzU3Mzg5NQ==",
                                           "createdAt":  "2019-09-03T18:08:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e @davidfowl, I\u0027m not suggesting adding this to an existing API. I\u0027m proposing a new interface API for throttling and suggesting a way how the connection listener (I presume the IConnectionListener that @tmds mentioned) can use that API to allow an application to prevent the death spiral that you can get into without it. \r\n\r\nSounds like an implementation detail.\r\n\r\n",
                                           "updatedAt":  "2019-09-03T18:08:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzU4MDU5Mw==",
                                           "createdAt":  "2019-09-03T18:26:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e @tmds, the backlog argument to Socket.Listen isn\u0027t back pressure. That\u0027s a buffer to accommodate bursts of incoming connections that the app isn\u0027t calling Accept fast enough to handle.\r\n\r\nIn both cases it\u0027s implementing a limited queue. I\u0027m not sure when it fits the name backpressure and when not.\r\n\r\n\u003e For example, if the maximum number of pending connections is configured to be 100 and there are currently 95 pending connections, we limit the number of pending accepts to be no more than 5.\r\n\r\nHow do you prevent this being used to do some attack in the form: make a nr of connections that perform a handshake in the slowest way possible? This stops real clients from making connections.",
                                           "updatedAt":  "2019-09-03T18:26:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzYyMzczOA==",
                                           "createdAt":  "2019-09-03T20:21:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC4AfEQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rcollina",
                                                                               "createdAt":  "2019-12-01T07:46:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "omariom",
                                                                               "createdAt":  "2019-12-05T14:28:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "kYann",
                                                                               "createdAt":  "2020-01-02T10:25:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "brcaswell",
                                                                               "createdAt":  "2020-07-03T08:54:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NMSAzulX",
                                                                               "createdAt":  "2021-07-07T09:13:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "NMSAzulX",
                                                                               "createdAt":  "2021-07-07T09:13:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kaayo",
                                                                               "createdAt":  "2023-03-17T01:00:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Kaayo",
                                                                               "createdAt":  "2023-03-17T01:00:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  8
                                                         },
                                           "author":  "mconnew",
                                           "body":  "We have a configurable timeout which limits how long a connection is allowed to take to perform the handshake. net.tcp isn\u0027t an internet protocol, it\u0027s a LAN or WAN protocol so you are running inside a trusted network. If you have a malicious host in your LAN, it\u0027s already game over as it can do things like MAC address spoofing, mess with BGP routing, mess with DHCP to do MITM attacks, perform DNS poisoning, passively snoop on the network to pick up any unencrypted data and 1001 other ways to screw with your network.  \r\n\r\nIf you must expose a web service to a hostile environment, you generally run it behind a LB or firewall which does things like limit the number of concurrent requests from a single IP and other DoS attack mechanisms. At the end of the day, if a web service is exposed to malicious clients, the only way to prevent DoS attacks is to run at scale and/or have a smart front-end like a LB which is specialized in detecting attack patterns and preventing malicious clients from getting through to the server. But these generally aren\u0027t the problem domain of WCF\u0027s net.tcp protocol.  \r\n  \r\nWCF server in .NET Framework has customers with significantly more than 150,000 clients connected to a single server. When that WCF service needs to be restarted, e.g. with a software update, if you accept connections as fast as you can, you would have so many connection handshakes in flight at once that each handshake would exceed it\u0027s timeout. When the service sends some bytes as part of the handshake and then calls ReceiveAsync, the amount of time it would take for the await continuation to execute due to the amount of contention would exceed your timeout.  \r\n\r\nEven if CPU/thread contention wasn\u0027t a limitation (you are running on a 128 core system), the security process in windows (lsass) is single threaded and limited by the speed of a single core. So the security handshake bottlenecks on the single core which queues the authorization requests and when running at 100% CPU will result in exceeding the connection timeout. So the connection is killed, most likely by the client first as the timeout firing also requires a thread to run on, and the client attempts to reconnect again. So now you have the original connection attempt still in the lsass queue, which has been abandoned by the client but there\u0027s no way to cancel a pending authorization, and you throw another one into the queue. Rinse and repeat. \r\n\r\nIf you are CPU/thread contended due to too many concurrent connection handshakes, any clients which have been able to connect, their actual service requests are competing for CPU time with the connecting clients, so their requests time out. Which causes the channel to be faulted, which means the connection needs to be re-established and that client joins the party.  \r\n\r\nIf you have control of the number of pending accepts, you can limit the number of concurrent handshakes which means you can guarantee (by tuning your service) you are not overly contended on completing those handshakes. Sure you will have clients being denied connecting to the server socket, but nobody in the listen backlog will timeout as you configure things high enough that you can accept new requests at a fast sustainable rate and you size your listen backlog to that no connection stays in the listen backlog for more than a few seconds. But if you If you don\u0027t have a way to control how many outstanding accepts you have, if you have enough clients connecting at once you can get in a death spiral that makes itself worse.  \r\n\r\nI know I could asynchronously wait after a socket has been accepted and not start the handshake, but then you are allocating resources for each incoming connection just to wait there. With the rate of allocation with a large number of incoming connection, you would be running a Gen0 GC quite regularly so all those waiting connections are likely to have their allocations get to at least Gen1 before the connection times out. So now you are churning the GC heavily by having them waiting there. You also have a lot of timers registered for expiring the wait before starting the handshake. You also run the risk of a connection making it to the handshake with very little time left on it\u0027s timer and being aborted when part way through the handshake as the timer starts when you accept a connection. It\u0027s better to distribute the timers needed on the client with a retry backoff algorithm than have timer contention on the server.  \r\n\r\nOverall, without this capability, there are some existing large scale WCF workloads that an AspNetCore based WCF solution just wouldn\u0027t be able to handle without Accept throttling. WCF is used a lot in enterprises so we can have the start of the workday connection spike where everyone sits down at their desk at about the same time and logs into an app all at once.",
                                           "updatedAt":  "2019-09-03T20:21:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzgxMzYyNQ==",
                                           "createdAt":  "2019-09-04T09:07:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "@mconnew thanks for the interesting and detailed response. So this is to maintain performance with high nr of concurrent accepts, and not for security.",
                                           "updatedAt":  "2019-09-04T09:07:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyODUyODc0MQ==",
                                           "createdAt":  "2019-09-05T19:04:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mconnew",
                                           "body":  "@tmds, correct, this is about scalability. I can\u0027t think of a scenario where this would affect regular HTTP but it could affect WebSockets or gRPC. Especially if using something like token based authentication.",
                                           "updatedAt":  "2019-09-05T19:04:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNzc4ODkxMQ==",
                                           "createdAt":  "2019-10-03T05:08:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I\u0027m going to look into a design for this. It comes up because the `ConnectionDelegate` is a push model and the server is accepting connections and dispatching. ",
                                           "updatedAt":  "2019-10-03T05:08:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNzkxOTU2Ng==",
                                           "createdAt":  "2019-10-03T12:16:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "@davidfowl at what point do you consider a connection _handled enough_ to allow a new accept?",
                                           "updatedAt":  "2019-10-03T12:16:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNzk2NDEwMA==",
                                           "createdAt":  "2019-10-03T14:13:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "That’s policy that can be implemented ",
                                           "updatedAt":  "2019-10-03T14:13:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNzk3MTQ1NQ==",
                                           "createdAt":  "2019-10-03T14:31:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "From discussing with @mconnew I think policies will be app specific, or would there be some that come with AspNetCore?",
                                           "updatedAt":  "2019-10-03T14:31:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNDI0NDA4Ng==",
                                           "createdAt":  "2020-03-26T05:53:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODi9trA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ReubenBond",
                                                                               "createdAt":  "2020-03-27T15:05:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NMSAzulX",
                                                                               "createdAt":  "2020-11-06T03:19:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Daniel-Svensson",
                                                                               "createdAt":  "2024-05-23T17:35:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "We might have a clean design for this and it looks like an `IConnectionListener` implementation that wraps the transport is the way to go here. It would look like any other connection middleware:\r\n\r\n\r\n```C#\r\noptions.ListenAnyIP(5000, listenOptions =\u003e\r\n{\r\n    listenOptions.UseConnectionThrottling(); // This is the throttling middleware\r\n    listenOptions.UseHttps(); // This is the existing HTTPS middleware\r\n});\r\n```\r\n\r\nThis works by exposing a new method on `ListenOptions`:\r\n\r\n```C#\r\npublic class ListenOptions\r\n{\r\n    public ListenOptions UseListenerFilter(Func\u003cIConnectionListener, IConnectionListener\u003e middleware);\r\n}\r\n```\r\n\r\nThis would allow you to wrap the previous `IConnectionListener` in order to handle the calls to accept. That\u0027s where this logic can be plugged in. \r\n\r\n@halter73 spiked something very similar today (for different reasons) but I think this approach has legs and doesn\u0027t introduce new concepts.",
                                           "updatedAt":  "2020-03-26T05:53:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzczNjI2NA==",
                                           "createdAt":  "2020-07-24T21:12:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\nWe\u0027re moving this issue to the `Next sprint planning` milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-07-24T21:12:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MjEzMzM3MQ==",
                                           "createdAt":  "2020-08-11T17:49:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODIDq9Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "henry701",
                                                                               "createdAt":  "2021-02-02T01:46:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "NMSAzulX",
                                                                               "createdAt":  "2021-07-07T09:15:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "omariom",
                                                                               "createdAt":  "2021-07-15T01:35:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "ALars3n",
                                                                               "createdAt":  "2023-09-28T11:57:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "Pilchie",
                                           "body":  ":eyes:",
                                           "updatedAt":  "2020-08-11T17:49:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNDY4NTkyNA==",
                                           "createdAt":  "2020-10-22T18:41:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidni",
                                           "body":  "Does this issue account for throttling policies that rely on SNI host name? YARP scenarios would benefit from being able to apply throttling bucketed by host names.",
                                           "updatedAt":  "2020-10-22T18:41:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNDgwOTgyNg==",
                                           "createdAt":  "2020-10-22T23:06:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBu3P9Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidni",
                                                                               "createdAt":  "2020-10-26T18:26:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NMSAzulX",
                                                                               "createdAt":  "2020-11-06T03:19:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TimNitsas",
                                                                               "createdAt":  "2021-06-16T03:27:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "halter73",
                                           "body":  "This can already be done using something like TlsFrameHelper.GetServerName() (see https://github.com/microsoft/reverse-proxy/pull/262) in Kestrel connection middleware. Connections need to be accepted before SNI-based throttling can take place in order to determine the requested server name.\r\n\r\n@mconnew wants a mechanism to throttle Kestrel\u0027s accept loop. Kestrel provides no mechanism to do this yet. Connection middleware cannot do this because connections are accepted before Kestrel invokes the connection middleware pipeline.",
                                           "updatedAt":  "2020-10-22T23:06:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MTIzNDEwNg==",
                                           "createdAt":  "2021-01-15T22:38:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\nWe\u0027re moving this issue to the `Next sprint planning` milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-01-15T22:38:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg4MDI2OTc0MQ==",
                                           "createdAt":  "2021-07-14T23:12:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-07-14T23:12:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde8485cB_",
                                           "createdAt":  "2022-01-25T23:04:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 7 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-01-25T23:04:04Z"
                                       }
                                   ],
                         "totalCount":  22
                     },
        "title":  "Rate Limit for Kestrel - Design mechanism to apply back pressure to accepting connections",
        "labels":  [
                       "Needs: Design",
                       "enhancement",
                       "blocked",
                       "🥌 Bedrock",
                       "feature-yarp",
                       "severity-nice-to-have",
                       "affected-very-few",
                       "Priority:1",
                       "feature-rate-limit",
                       "area-networking",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/28374",
        "createdAt":  "2019-09-30T15:52:44Z",
        "number":  28374,
        "author":  "bragma",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-06-02T03:14:23Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\nI\u0027m trying to use our Redis server from an ASP .NET Core Web Api via the IDistributedCache interface. While this is OK, I\u0027d also like to be able to use other data types/access modes from Redis via direct commands, i.e. I\u0027d like to be able to use the IDatabase private member directly, preserving the IDistributedCache interface.\r\n\r\n### Describe the solution you\u0027d like\r\nSome way to be able to use the same IDatabase _cached property directly or at least created a new one from a public Connect() method using the existing ConnectionMultiplexer object.\r\n\r\n### Describe alternatives you\u0027ve considered\r\nIn setup.cs, creating a singleton object RedisCache and keep a reference to it, also passing it as a service singleton instance. This may cause problems with the Connect() lock, though.\r\n\r\nThanks!",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLAJNxw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxOTI1Nzk1OQ==",
                                           "createdAt":  "2020-04-24T22:04:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC5Zuog==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DanielLarsenNZ",
                                                                               "createdAt":  "2021-04-13T04:46:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cilerler",
                                                                               "createdAt":  "2023-04-06T20:50:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "We won\u0027t expose the `ConnectionMultiplexer` in DI. We don\u0027t put types we don\u0027t control into the DI container because it can mess with a **lot** of different DI services.\r\n\r\nWhat we could do instead is offer a `Func\u003cConnectionMutiplexer\u003e` \"factory\" option on the RedisCacheOptions. Then you could specify your own connection and share it with other components.",
                                           "updatedAt":  "2020-04-24T22:04:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczODM0MTUxNA==",
                                           "createdAt":  "2020-12-03T21:51:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-12-03T21:51:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczODM0ODQ4Nw==",
                                           "createdAt":  "2020-12-03T22:06:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JunTaoLuo",
                                           "body":  "Related: https://github.com/dotnet/aspnetcore/issues/28379",
                                           "updatedAt":  "2020-12-03T22:06:25Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Access the singleton ConnectionMultiplexer or have a new IDatabase while also using IDistributedCache interface",
        "labels":  [
                       "enhancement",
                       "feature-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/16658",
        "createdAt":  "2019-10-30T13:29:49Z",
        "number":  16658,
        "author":  "cpkuo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-28T23:10:05Z",
        "body":  "Is there a recommended way to modify this rules collection after startup runs without having to store the RewriteOptions as a static variable before passing it to .UseRewriter(options)? The rewrite middleware builder extension method appears to call UseMiddleware\u003cRewriter\u003e(Options.Create(_options)) but the returning options wrapper is not registered anywhere.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPHszAQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0Nzk1Njc5Ng==",
                                           "createdAt":  "2019-10-30T15:13:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "No, that\u0027s not supported. Even storing the RewriteOptions and trying to modify it later is dangerous because that object is being used by multiple threads.",
                                           "updatedAt":  "2019-10-30T15:13:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MzM0NzY1Nw==",
                                           "createdAt":  "2020-06-12T15:53:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xantari",
                                           "body":  "I am also trying to do this, because we are building off of a headless CMS, where the rewrite rules are defined in the cloud hosted CMS, but our .NET Application is processing the rewrite rules from that cloud CMS system.\r\n\r\nWhen they make a change in the CMS system, we get a webhook notification of the change, but have no way of updating the rewrite rules.\r\n\r\nI tried injecting IOptions\u0026lt;RewriteOptions\u0026gt; into our controller, but the .Values is empty strangely. Even though on app startup we initialize entries into it and they work fine.\r\n\r\nThis really needs to be supported. Perhaps IOptionsSnapshot will allow you to modify the rewrites on the fly and be thread safe?",
                                           "updatedAt":  "2020-06-12T15:54:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MzM1Mzc2Mg==",
                                           "createdAt":  "2020-06-12T16:05:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xantari",
                                           "body":  "Also, couldn\u0027t you just use a ConcurrentBag or some similar threadsafe collection to store the rules to eliminate the thread safety issue?\r\n\r\nIt looks like you could do this by just changing IList\u003cIRule\u003e in RewriteOptions to be IConcurrentBag instead...",
                                           "updatedAt":  "2020-06-12T19:36:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde848ezMB",
                                           "createdAt":  "2022-01-17T16:19:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "burtonrodman",
                                           "body":  "so we haven\u0027t really answered the original question...  what is the recommended way of modifying rewrite rules after startup?  are we just expected to restart the site?\r\n\r\nI have also had the thought of using IOptionsSnapshot like @xantari .\r\n\r\nOr, if some of the internals (RewriteOptions.BranchedNext and all the rules) were made public, it would be much easier for anyone to create their own custom middleware.\r\n\r\nI am willing to collaborate on a design and submit a PR.",
                                           "updatedAt":  "2022-01-17T16:32:05Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Modify Rewrite Middleware RewriteOptions rules collection after Startup runs",
        "labels":  [
                       "enhancement",
                       "feature-rewrite-middleware",
                       "severity-minor",
                       "affected-very-few",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/18383",
        "createdAt":  "2020-01-16T10:16:07Z",
        "number":  18383,
        "author":  "Serproger",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCxXuhw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NikitiJ",
                                            "createdAt":  "2020-02-27T13:31:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "seangwright",
                                            "createdAt":  "2022-03-11T03:41:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kurthamilton",
                                            "createdAt":  "2023-07-18T08:26:10Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2023-08-28T23:10:04Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\nCurrently UseStatusCodePages and UseExceptionHandler methods support only one handler path. But there are cases when handler path can vary depending on some conditions. For example, I have different areas and handler path should depend on the area name.\r\n\r\n### Describe the solution you\u0027d like\r\nBuilt-in extensions methods for ExceptionHandlerMiddleware and StatusCodePagesMiddleware should exist that accept path generation functions. For example, for UseStatusCodePagesWithReExecute it can be something like that:\r\n```\r\npublic static IApplicationBuilder UseStatusCodePagesWithReExecute(\r\n\tthis IApplicationBuilder app,\r\n\tFunc\u003cStatusCodeContext, string\u003e generatePath,\r\n\tFunc\u003cStatusCodeContext, string\u003e generateQuery = null)\r\n{\r\n\tif (app == null)\r\n\t{\r\n\t\tthrow new ArgumentNullException(nameof(app));\r\n\t}\r\n\r\n\treturn app.UseStatusCodePages(async context =\u003e\r\n\t{\r\n\t\tvar newPath = generatePath(context);\r\n\t\tvar newQueryString = generateQuery == null ? QueryString.Empty : new QueryString(generateQuery(context));\r\n\r\n\t\tvar originalPath = context.HttpContext.Request.Path;\r\n\t\tvar originalQueryString = context.HttpContext.Request.QueryString;\r\n\t\t// Store the original paths so the app can check it.\r\n\t\tcontext.HttpContext.Features.Set\u003cIStatusCodeReExecuteFeature\u003e(new StatusCodeReExecuteFeature()\r\n\t\t{\r\n\t\t\tOriginalPathBase = context.HttpContext.Request.PathBase.Value,\r\n\t\t\tOriginalPath = originalPath.Value,\r\n\t\t\tOriginalQueryString = originalQueryString.HasValue ? originalQueryString.Value : null,\r\n\t\t});\r\n\r\n\t\t// An endpoint may have already been set. Since we\u0027re going to re-invoke the middleware pipeline we need to reset\r\n\t\t// the endpoint and route values to ensure things are re-calculated.\r\n\t\tcontext.HttpContext.SetEndpoint(endpoint: null);\r\n\t\tvar routeValuesFeature = context.HttpContext.Features.Get\u003cIRouteValuesFeature\u003e();\r\n\t\trouteValuesFeature?.RouteValues?.Clear();\r\n\r\n\t\tcontext.HttpContext.Request.Path = newPath;\r\n\t\tcontext.HttpContext.Request.QueryString = newQueryString;\r\n\t\ttry\r\n\t\t{\r\n\t\t\tawait context.Next(context.HttpContext);\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\tcontext.HttpContext.Request.QueryString = originalQueryString;\r\n\t\t\tcontext.HttpContext.Request.Path = originalPath;\r\n\t\t\tcontext.HttpContext.Features.Set\u003cIStatusCodeReExecuteFeature\u003e(null);\r\n\t\t}\r\n\t});\r\n}\r\n}\r\n```\r\n\r\nI hope such methods will be added soon :)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOIlFY-Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NTIwNTA2OA==",
                                           "createdAt":  "2020-01-16T15:29:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODA_pOQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "kurthamilton",
                                                                               "createdAt":  "2023-07-18T06:38:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Already works for both of those pieces of middleware. Instead of a RequestDelegate, they take a new pipeline (which is a super set of the functionality).\r\n\r\nUseExceptionHandler - https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.exceptionhandlerextensions.useexceptionhandler?view=aspnetcore-3.1#Microsoft_AspNetCore_Builder_ExceptionHandlerExtensions_UseExceptionHandler_Microsoft_AspNetCore_Builder_IApplicationBuilder_System_Action_Microsoft_AspNetCore_Builder_IApplicationBuilder__\r\n\r\n\r\nUseStatusCodePages - https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.statuscodepagesextensions.usestatuscodepages?view=aspnetcore-3.1#Microsoft_AspNetCore_Builder_StatusCodePagesExtensions_UseStatusCodePages_Microsoft_AspNetCore_Builder_IApplicationBuilder_System_Action_Microsoft_AspNetCore_Builder_IApplicationBuilder__",
                                           "updatedAt":  "2020-01-16T15:29:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NTQ3NTE5Ng==",
                                           "createdAt":  "2020-01-17T05:48:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODBAW-g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "seangwright",
                                                                               "createdAt":  "2022-03-11T03:41:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kurthamilton",
                                                                               "createdAt":  "2023-07-18T08:26:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Serproger",
                                           "body":  "\u003e Already works for both of those pieces of middleware. Instead of a RequestDelegate, they take a new pipeline (which is a super set of the functionality).\r\n\r\nI have seen these overloads. But I don\u0027t understand how they can help. For example, I want to implement UseStatusCodePagesWithReExecute. I found only the way given in the first post that requires copypasting of nearly all the code of corresponding built-in extension method.",
                                           "updatedAt":  "2020-01-17T05:48:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NTc1NjUzNw==",
                                           "createdAt":  "2020-01-17T19:10:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "Triage: Backlogging this for now. It\u0027s a reasonable request, but it\u0027s not something we\u0027re likely to prioritize at this time.",
                                           "updatedAt":  "2020-01-17T19:10:21Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "No dynamic paths for UseStatusCodePages and UseExceptionHandler",
        "labels":  [
                       "enhancement",
                       "severity-minor",
                       "affected-very-few",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/28373",
        "createdAt":  "2020-01-23T18:05:53Z",
        "number":  28373,
        "author":  "analogrelay",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-06-02T03:14:22Z",
        "body":  "We have a number of reports of timeouts while doing `RefreshAsync` in the Redis cache. These seem to be intermittent network issues. However, since we\u0027re generally doing refresh operations on behalf of the user, we should consider adding retry logic to improve our behavior in the presence of intermittent network issues.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLAIvYw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczODM0MDcwNw==",
                                           "createdAt":  "2020-12-03T21:50:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-12-03T21:50:12Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Consider adding retries to Redis cache refresh",
        "labels":  [
                       "enhancement",
                       "feature-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/18555",
        "createdAt":  "2020-01-24T11:39:09Z",
        "number":  18555,
        "author":  "xzxzxc",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-28T14:08:19Z",
        "body":  "### Description of the bug\r\nThe System.ArgumentException occurs while executing the method AddApacheModRewrite if passed file contains regex rules with shorthand character classes (like \\d).\r\n\r\n### To Reproduce\r\n``` C#\r\npublic static class ApplicationExtensions\r\n{\r\n\tpublic static IApplicationBuilder UseUrlRewriter(this IApplicationBuilder builder)\r\n\t{\r\n\t\tusing (var fileReader = File.OpenText(\"apache_rewrite_rules.txt\"))\r\n\t\t{\r\n\t\t\tvar rewriteOptions = new RewriteOptions()\r\n\t\t\t\t.AddApacheModRewrite(fileReader);\r\n\r\n\t\t\treturn builder.UseRewriter(rewriteOptions);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\nWhere file `apache_rewrite_rules.txt` contains:\r\n```RewriteRule\t^/(\\d)$\t/?num=$1```\r\n\r\nException message:\r\n```System.ArgumentException: \u0027parsing \u0027^/(\\d)$\u0027 - Unrecognized escape sequence \\\\d.\u0027```\r\nStack trace:\r\n```\r\n   at System.Text.RegularExpressions.RegexParser.ScanCharEscape()\r\n   at System.Text.RegularExpressions.RegexParser.Unescape(String input)\r\n   at System.Text.RegularExpressions.Regex.Unescape(String str)\r\n   at Microsoft.AspNetCore.Rewrite.Internal.ApacheModRewrite.Tokenizer.RemoveQuotesAndEscapeCharacters(IList`1 tokens)\r\n   at Microsoft.AspNetCore.Rewrite.Internal.ApacheModRewrite.Tokenizer.Tokenize(String rule)\r\n   at Microsoft.AspNetCore.Rewrite.Internal.ApacheModRewrite.FileParser.Parse(TextReader input)\r\n   at Microsoft.AspNetCore.Rewrite.ApacheModRewriteOptionsExtensions.AddApacheModRewrite(RewriteOptions options, TextReader reader)\r\n   at Middleware.ApplicationExtensions.UseUrlRewriter(IApplicationBuilder builder, Action`1 configure) in D:\\workspace\\url-rewriter\\UrlRewriter.Middleware\\ApplicationExtensions.cs:line 17\r\n   at UrlRewriter.Tests.ApacheModRewriteTests.\u003c\u003ec.\u003c.ctor\u003eb__1_0(IApplicationBuilder app) in D:\\workspace\\url-rewriter\\UrlRewriter.Tests\\ApacheModRewriteTests.cs:line 22\r\n   at Microsoft.AspNetCore.Hosting.DelegateStartup.Configure(IApplicationBuilder app)\r\n   at Microsoft.AspNetCore.Hosting.Internal.AutoRequestServicesStartupFilter.\u003c\u003ec__DisplayClass0_0.\u003cConfigure\u003eb__0(IApplicationBuilder builder)\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()\r\n```\r\n\r\n### Comments\r\nRewriteRule statement implies to use regular expressions, so it\u0027s not clear why there is a call of `Regex.Unescape` in `ApacheModRewrite.Tokenizer.RemoveQuotesAndEscapeCharacters`, seems like  it\u0027s a bug considering that `Regex.Unescape` is unable to convert sequences such as \\w, \\d or \\s, it throws an ArgumentException.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXPyjkw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMzEwMjE4Ng==",
                                           "createdAt":  "2020-10-20T19:55:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC29t3A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xzxzxc",
                                                                               "createdAt":  "2020-10-20T20:27:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jonagh",
                                                                               "createdAt":  "2022-08-18T21:24:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JaneConan",
                                                                               "createdAt":  "2023-03-01T08:46:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "jaamison",
                                           "body":  "Happy to take a crack at this if at all helpful. Looks like there are several other little quirks throughout the apache compatibility subsystem that break parity with apache itself that I\u0027d be happy to submit PRs for.",
                                           "updatedAt":  "2020-10-20T19:55:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85It80C",
                                           "createdAt":  "2022-08-18T21:53:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCq7nsA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xzxzxc",
                                                                               "createdAt":  "2022-08-22T14:07:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jonagh",
                                           "body":  "I just ran into this on a new proj. Simple things like \\d can be changed to [0-9] and \\. to [.] but \\w and \\s and others which represent a lot of chars are basically show-stoppers for using this feature with regex rules. \r\n\r\nAlso just realized RewriteMap is not supported :/\r\nGuess I\u0027ll convert all the rules to IISUrlRewrite format (hopefully that works fully).\r\n\r\nThis call should probably be renamed to AddApacheModRewriteWithOnlyLimitedSupport, so people like me know not to use it before we write a bunch of rules expected everything to work correctly.",
                                           "updatedAt":  "2022-08-18T22:09:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85c_KOT",
                                           "createdAt":  "2023-05-23T20:11:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "\u003e Happy to take a crack at this if at all helpful.\r\n\r\n@jaamison it looks like we overlooked your offer, sorry about that. In the unlikely event you are still interested in offering PR\u0027s we\u0027d be happy to have them.",
                                           "updatedAt":  "2023-05-23T20:11:59Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "ArgumentException \"unrecognized escape sequence\" in RewriteOptions.AddApacheModRewrite in case of usage of regex shorthand character classes (like \\d)",
        "labels":  [
                       "investigate",
                       "good first issue",
                       "area-middleware",
                       "help candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/28372",
        "createdAt":  "2020-01-28T18:47:17Z",
        "number":  28372,
        "author":  "maxisam",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBS_cwQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dipakyadav",
                                            "createdAt":  "2020-02-25T01:57:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adamwhitinganswer",
                                            "createdAt":  "2020-10-09T10:42:12Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-06-02T03:14:21Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\n\r\nhttps://github.com/StackExchange/StackExchange.Redis/issues/1120\r\nhttps://github.com/StackExchange/StackExchange.Redis/issues/1322\r\n\r\nCurrently when there is an exception in connection, it throws an exception \r\n\r\nhttps://github.com/dotnet/extensions/blob/3196f53061fcbe12fb2ebe81834124710d822a8d/src/Caching/StackExchangeRedis/src/RedisCache.cs#L173-L192\r\n\r\nand during get \r\n\r\nhttps://github.com/dotnet/extensions/blob/3196f53061fcbe12fb2ebe81834124710d822a8d/src/Caching/StackExchangeRedis/src/RedisCache.cs#L240\r\n\r\nIt will throw an exception as well.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nI think we should try to establish the connection during initialization and provide an event for connection status. So we can somehow check if Redis cache is available before using it.\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLAIsMw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczODMzOTg5MQ==",
                                           "createdAt":  "2020-12-03T21:49:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-12-03T21:49:14Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Handling RedisCache is not connected.",
        "labels":  [
                       "enhancement",
                       "feature-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/28370",
        "createdAt":  "2020-03-23T08:12:49Z",
        "number":  28370,
        "author":  "DanielLidstromTicket",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-06-02T03:14:19Z",
        "body":  "### Describe the bug\r\n\r\nI am seeing a scenario where the database table created for SqlServer-based DistributedCache is not being emptied properly. The number of items in the table seems to grow without bound.\r\n\r\n### To Reproduce\r\n\r\nWe are using ASP.NET Core 3.1.1:\r\n\r\n```xml\r\n\u003cPackageReference Include=\"Microsoft.Extensions.Caching.SqlServer\" Version=\"3.1.1\" /\u003e\r\n```\r\n\r\nUnfortunately I don\u0027t know how we got into this situation as I observed it just now, and I don\u0027t have specific steps to reproduce.\r\n\r\nWe store items into the cache using `AbsoluteExpirationRelativeToNow` and there is no sliding expiration.\r\n\r\n### Expected behavior\r\n\r\nI expect the cache to be emptied consistently to avoid growing out of bounds.\r\n\r\n### Screenshots\r\n\r\n```sql\r\nSELECT COUNT(*) Count, MIN(ExpiresAtTime) Oldest\r\nFROM dbo.DistributedCache\r\nWHERE GETDATE() \u003e ExpiresAtTime;\r\n```\r\n\r\nreturns\r\n\r\n| Count | Oldest |\r\n|-|-|\r\n| 139962 | 2020-03-21 02:12:05.8058460 +00:00 |\r\n\r\n### Additional context\r\n\r\nI\u0027ve looked at the code that does the delete: [src/Caching/SqlServer/src/SqlQueries.cs#L56](https://github.com/dotnet/extensions/blob/f4066026ca06984b07e90e61a6390ac38152ba93/src/Caching/SqlServer/src/SqlQueries.cs#L56). This seems a bit naive to me if there are many entries to be deleted, for some reason. If I run the code, our database seems to choke. I do see an index on `ExpiresAt` but it doesn\u0027t seem to help.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLAIkBg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwMzE5MDI5OA==",
                                           "createdAt":  "2020-03-24T11:40:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBDukFA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kuacci",
                                                                               "createdAt":  "2020-05-10T17:04:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "DanielLidstromTicket",
                                           "body":  "I should have included the time of the sql query invocation. Anyway, I\u0027ve solved this problem in our case with a database job that purges the queue on an hourly basis. Here\u0027s the SP:\r\n\r\n```sql\r\nCREATE OR ALTER PROCEDURE dbo.ClearDistributedCache\r\nAS\r\nBEGIN\r\n    SELECT Id\r\n    INTO #ToDelete\r\n    FROM dbo.DistributedCache\r\n    WHERE GETDATE() \u003e ExpiresAtTime;\r\n\r\n    -- delete in pages to avoid consuming too much resources\r\n    deleteMore:\r\n    DELETE TOP (40)\r\n    FROM dbo.DistributedCache\r\n    WHERE Id IN\r\n          (\r\n              SELECT Id FROM #ToDelete\r\n          );\r\n    IF @@ROWCOUNT \u003c\u003e 0\r\n        GOTO deleteMore;\r\nEND;\r\nGO\r\n```\r\n",
                                           "updatedAt":  "2020-03-24T11:40:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzM2NDAwNQ==",
                                           "createdAt":  "2020-10-12T21:51:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "Triage: We should log when DB operations fail. We\u0027re assuming there is some failure happening here, but any exceptions are currently ignored.\r\n\r\nDo you happen to have SQL logs that would show a failure?",
                                           "updatedAt":  "2020-10-12T21:51:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczODMzNzc5OA==",
                                           "createdAt":  "2020-12-03T21:44:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-12-03T21:44:24Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "SqlServerCache not emptying expired items",
        "labels":  [
                       "investigate",
                       "feature-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/20898",
        "createdAt":  "2020-04-16T09:46:39Z",
        "number":  20898,
        "author":  "sitepodmatt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-28T14:08:20Z",
        "body":  "https://github.com/dotnet/aspnetcore/blob/8b000d961cd3ccfcc8090fb8368fd6598bace978/src/Middleware/Session/src/DistributedSession.cs\r\n\r\nShould Load/LoadAsync be a no-op when _isNewSessionKey is true. Taking the advice to call LoadAsync prior to accessing the session with get/trygetvalue/set  I would of thought we\u0027d guard against unnecsssary chitchat to the cache if we know the session is new?  \r\n\r\nI though about doing Request.Cookies[\"sesscoookie\"] != null then await LoadAsync but then doing Get/Set/Id/IsAvailable will simply call load anyway if not _loaded isnt marked.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJjrbYg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNDg0Njk4MQ==",
                                           "createdAt":  "2020-04-16T19:20:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "That\u0027s an interesting point. The case that doesn\u0027t cover is if the session database is down, IsAvailable would not be set properly. That might be OK since that\u0027s not the general case, or we might have IsAvailable do its own check.",
                                           "updatedAt":  "2020-04-16T19:20:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNDk2MTU5Mg==",
                                           "createdAt":  "2020-04-17T00:07:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sitepodmatt",
                                           "body":  "@Tratcher if people are depending on IsAvailable having that do it\u0027s own check would be better imo instead of attempting to fetch a known non-existant key for the sake of it. ",
                                           "updatedAt":  "2020-04-17T00:07:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNDk2MjYyMQ==",
                                           "createdAt":  "2020-04-17T00:11:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "IsAvailable would have to do the same call, the distributed cache only offers read and write apis.",
                                           "updatedAt":  "2020-04-17T00:11:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNTA0OTcyOA==",
                                           "createdAt":  "2020-04-17T05:25:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sitepodmatt",
                                           "body":  "I think we\u0027re getting our wires crossed here, possibly about different issues? \r\n\r\nWhat I\u0027m saying is that _cache.Get shouldn\u0027t be called if _isNewSessionKey \r\n\r\n```\r\n  var data = _cache.Get(_sessionKey);\r\n                    if (data != null)\r\n                    {\r\n                        Deserialize(new MemoryStream(data));\r\n                    }\r\n                    else if (!_isNewSessionKey)\r\n                    {\r\n                        _logger.AccessingExpiredSession(_sessionKey);\r\n                    }\r\n```",
                                           "updatedAt":  "2020-04-17T05:25:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNTA1MjE5OA==",
                                           "createdAt":  "2020-04-17T05:34:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "I understand, it just has side effects on IsAvailable.",
                                           "updatedAt":  "2020-04-17T05:34:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNTA1MzI2NQ==",
                                           "createdAt":  "2020-04-17T05:38:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sitepodmatt",
                                           "body":  "_presumeAvailability flag?  I very much doubt people are implementing app/middleware and saying \u0027before we do work with this freshly basked session let\u0027s check the session store is actually available\u0027 or branching for both cases",
                                           "updatedAt":  "2020-04-17T05:38:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNTM4NjEwMg==",
                                           "createdAt":  "2020-04-17T18:01:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Yeah, I don\u0027t know if anyone is actually using IsAvailable but it was designed to let your site gracefully degrade functionality if the session store was unavailable. E.g. disable the Add-To-Cart button if the cart was going to be stored in session.",
                                           "updatedAt":  "2020-04-17T18:01:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNTQ0NDMzMg==",
                                           "createdAt":  "2020-04-17T20:15:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "Flagging this as a `breaking-change`. We *think* it could be done in a non-breaking way but we need to ensure we don\u0027t break `IsAvailable`.",
                                           "updatedAt":  "2020-04-17T20:15:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MTE0MzgyMA==",
                                           "createdAt":  "2020-06-09T09:06:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sitepodmatt",
                                           "body":  "Has a fix/workaround been scheduled for .Net 5?  If not, I would like to propose a warning on the main docs along the lines:\r\n\r\n\"When optimizing for performance, and thus probably using an async request pipeline, combined with using an external session store, be aware the current implementation means that the session store will be \"getted\" even for newly minted sessions, the implications (if any) will depend on your setup. \" \r\n\r\nI accept it needs two pre-requisites to occur but in .NET 3.1+ where many developers are favoring an async request pipeline, are those using an external session store such a small number that this is considered a low-priority? ",
                                           "updatedAt":  "2020-06-09T10:27:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MTM5MTQ1OA==",
                                           "createdAt":  "2020-06-09T15:46:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "\u003e Has a fix/workaround been scheduled for .Net 5?\r\n\r\nNo, it\u0027s on the backlog.\r\n\r\n\u003e where many developers are favoring an async request pipeline\r\n\r\nI don\u0027t follow, AspNetCore\u0027s request pipeline has always been async.\r\n\r\n\u003e are those using an external session store such a small number that this is considered a low-priority\r\n\r\nIt\u0027s considered low priority because:\r\n- It only affects performance, not functionality, and the severity of that performance impact has not been demonstrated. I assume fetching a non-existent key from the distributed cache is faster rather than slower than fetching an existing key?\r\n- It\u0027s been like this for multiple years and releases without causing significant issues.\r\n- It only affects the first request / new sessions. You\u0027ll have to pay the same access cost (or more) on all subsequent requests that do have session data. Amortized out, it\u0027s not clear you\u0027d save much in the long run.\r\n\r\nI\u0027m marking this as \"help wanted\" if anyone wants to try fixing it in 5.0.",
                                           "updatedAt":  "2020-06-09T15:46:09Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "LoadAsync on Session - when _isNewSessionKey is true",
        "labels":  [
                       "enhancement",
                       "Perf",
                       "breaking-change",
                       "severity-nice-to-have",
                       "affected-few",
                       "area-middleware",
                       "help candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/21157",
        "createdAt":  "2020-04-23T19:38:05Z",
        "number":  21157,
        "author":  "davidni",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-14T20:30:58Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\nNo. In the context of YARP, some routes must support header matching. If there is interest, I can submit a PR to contribute that here.\r\n\r\n### Describe the solution you\u0027d like\r\nOur implementation handles the following:\r\n* Match on the presence of a given header\r\n* Match on a given value of a header (e.g. only match if header `x-example` has value `abc`, `def` or `ace`. Custom string comparison modes are supported)\r\n* Match on a given prefix of a header value (e.g. only match if header `x-eample` starts with `abc`, `def` or `ace`. Custom string comparison modes are supported).\r\n\r\n### Additional context\r\nWe have not implemented jump tables yet. We would hope the ASP .NET Core can take that on down the line if it seems relevant.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSj_mGg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxODYzMTEyMA==",
                                           "createdAt":  "2020-04-23T19:57:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidni",
                                           "body":  "@rynowak fyi as you helped in our internal implementation.",
                                           "updatedAt":  "2020-04-23T19:57:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxODY1Mjg3MA==",
                                           "createdAt":  "2020-04-23T20:34:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rynowak",
                                           "body":  "Yes, I think we\u0027d be very interested in having your implementation contributed 👍 ",
                                           "updatedAt":  "2020-04-23T20:34:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxOTIyMTE0OQ==",
                                           "createdAt":  "2020-04-24T20:20:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "@davidni you were up to contribute this, right?",
                                           "updatedAt":  "2020-04-24T20:20:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxOTI5MDM4Nw==",
                                           "createdAt":  "2020-04-25T00:27:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBCN5og==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "analogrelay",
                                                                               "createdAt":  "2020-04-25T00:56:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidni",
                                           "body":  "@anurse yep, I filed the issue to confirm there is still interest in it and avoid unnecessary work if not. Expect something by mid next week, though no guarantees due to DRI duties.",
                                           "updatedAt":  "2020-04-25T00:27:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzNzg1Mjk3Mw==",
                                           "createdAt":  "2020-06-02T23:06:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmbull",
                                           "body":  "I\u0027m not sure if this is useful out side of reverse proxy applications, but I have a specialized reversed proxy that could use this feature. ",
                                           "updatedAt":  "2020-06-02T23:06:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MTExMDY2MA==",
                                           "createdAt":  "2020-08-26T20:37:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-08-26T20:37:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde8444TyP",
                                           "createdAt":  "2021-10-28T22:59:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "This work was contributed to YARP and should now look at porting it into ASP.NET Core.\r\n\r\nSupport for query parameter routing was a contributed to YARP.",
                                           "updatedAt":  "2021-10-28T22:59:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85KP-Ya",
                                           "createdAt":  "2022-09-13T17:09:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-09-13T17:09:09Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Support Header matching in Endpoint Routing",
        "labels":  [
                       "enhancement",
                       "feature-yarp",
                       "severity-major",
                       "affected-medium",
                       "area-networking",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/21291",
        "createdAt":  "2020-04-28T19:40:44Z",
        "number":  21291,
        "author":  "rynowak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-28T23:10:01Z",
        "body":  "See: https://github.com/dotnet/tye/issues/354\r\n\r\nThe HTTPS redirect middleware allows you to configure (via config) a single port to use for HTTPS redirects. There are cases where this isn\u0027t sophisticated enough because each hostname you\u0027re listening on has a different HTTPS port value.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJ4_89g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMTM0MTQzOQ==",
                                           "createdAt":  "2020-04-29T17:04:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Can you clarify why each host has a different port? Hosts can share ports using host headers and SNI.",
                                           "updatedAt":  "2020-04-29T17:05:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMTQ0NTExOA==",
                                           "createdAt":  "2020-04-29T20:28:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "@Tratcher well, if they\u0027re different ASP.NET Core apps, we still have the port sharing problem right? Regardless of feasibility, only one process can bind to the port.",
                                           "updatedAt":  "2020-04-29T20:28:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMTQ2MTIyNg==",
                                           "createdAt":  "2020-04-29T21:00:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Nevermind, I just read the linked issue and it\u0027s a very different scenario. The app only has one local port. The app accepts requests directly and through a proxy. The host name is the same in both cases, but the public and internal ports are different.\n\nIn this example it needs to be able to redirect myhost:80 -\u003e 443 and myhost:4567 -\u003e 4568.",
                                           "updatedAt":  "2020-04-29T21:00:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMTQ2MjE3Ng==",
                                           "createdAt":  "2020-04-29T21:02:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Why isn\u0027t the front end enforcing its own https?",
                                           "updatedAt":  "2020-04-29T21:02:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMTQ5OTA0OQ==",
                                           "createdAt":  "2020-04-29T22:25:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rynowak",
                                           "body":  "As in, have the proxy responsible for the redirect? The proxy in this case is docker I think, not a dedicated proxy server.",
                                           "updatedAt":  "2020-04-29T22:25:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMjU0MzcwOA==",
                                           "createdAt":  "2020-05-01T20:05:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "Is there a proposed new behavior here?",
                                           "updatedAt":  "2020-05-01T20:05:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMjU1NzE0NA==",
                                           "createdAt":  "2020-05-01T20:35:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "The middleware needs to be capable of doing a host+port lookup from IServerAddresses and/or a static list to get the matching https port. A collection of `KVP\u003cstring, int\u003e` is the basic structure.\r\n\r\nNote today it throws if trying to auto-configure and it finds more than one https endpoint in IServerAddresses.",
                                           "updatedAt":  "2020-05-01T20:35:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNjA0ODQwNw==",
                                           "createdAt":  "2020-05-08T22:32:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "@jkotalik Does Tye have an API proposal for this? Also, how important is this API to Tye?",
                                           "updatedAt":  "2020-05-08T22:32:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzNzExMjMxNw==",
                                           "createdAt":  "2020-06-01T21:26:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotalik",
                                           "body":  "I don\u0027t think this critical for Tye, we wouldn\u0027t be able to utilize an API change here as we are primarily targeting 3.1.",
                                           "updatedAt":  "2020-06-01T21:26:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2Mzc0NzgzMA==",
                                           "createdAt":  "2020-07-24T21:48:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-07-24T21:48:11Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Enhance HTTPS redirect middleware for multi-hostname scenarios",
        "labels":  [
                       "Needs: Design",
                       "enhancement",
                       "feature-yarp",
                       "affected-few",
                       "severity-minor",
                       "area-networking",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/21506",
        "createdAt":  "2020-05-05T17:36:18Z",
        "number":  21506,
        "author":  "dustinmoris",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOB2iuOw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "davidfowl",
                                            "createdAt":  "2020-05-05T20:17:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SergNikitinSharpDev",
                                            "createdAt":  "2020-06-10T07:55:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pinkplus",
                                            "createdAt":  "2020-08-02T14:44:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BrunoZell",
                                            "createdAt":  "2020-10-01T00:52:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xbrady",
                                            "createdAt":  "2021-08-16T21:59:08Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2023-08-28T23:10:01Z",
        "body":  "Currently the HTTPS redirection middleware always redirects to HTTPS, however this breaks stuff when the host is not the one for which the certificate has been issued or in my case when there is no certificate because the SSL termination has happened two proxies higher up.\r\n\r\nFor example, running an ASP.NET Core app hosted in Kubernetes means that there is normally 2 proxies in front of Kestrel. One is the ingress controller, which is normally configured to use a Let\u0027s Encrypt certificate and is doing the SSL termination and then a second proxy is an internal service load balancer in front of all the pods where the apps are running.\r\n\r\nKubernetes checks the health of a pod by doing readiness and liveness checks, but these are being done via the internal network on a local IP address (e.g. http://10.8.0.7/healthz). If the HTTPS redirect middleware is enabled then it will try to redirect this request to https://10.8.0.7/healthz, which cannot be resolved and the service will fail the health check and get subsequently killed.\r\n\r\nCurrently one can apply a workaround fix by specifying the X-Forwarded-Proto header for the health check inside Kubernetes, which will prevent the middleware from redirecting, but that only works in some instances. Other cloud infrastructure and 3rd party services which cannot be configured to send the X-Forwarded-Proto header will still fail to health check the service.\r\n\r\nThis could be easily prevented by configuring a list of hosts for which the https redirection middleware will redirect, otherwise not.\r\n\r\nCurrently I have to run a custom middleware before the https redirection middleware and check the host and then based on the host decide if I set the Request.Scheme to https or not in order to workaround this issue, but it would be nicer if this could be configured in one middleware.\r\n\r\nAny thoughts?\r\n\r\nEDIT:\r\n\r\nBasically what I want to do is to give the HTTPS redirect middleware a list of hosts for which it should redirect to https, otherwise do nothing:\r\n\r\n- `api.example.org`\r\n- `www.example.org`\r\n- `example.org`\r\n\r\notherwise don\u0027t redirect.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJTXHCA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNDI3MTg0Ng==",
                                           "createdAt":  "2020-05-05T19:53:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "This looks like an expansion of https://github.com/dotnet/aspnetcore/issues/21291.",
                                           "updatedAt":  "2020-05-05T19:53:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNDI3Njg5OQ==",
                                           "createdAt":  "2020-05-05T20:03:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dustinmoris",
                                           "body":  "I saw that issue and I\u0027m not sure if it\u0027s necessarily a duplicate.\r\n\r\nThere is HTTPS redirect for multiple hosts and then there is NOT redirecting for hosts except {list}.\r\n\r\nYou commented on the other issue the following:\r\n\r\n\u003e In this example it needs to be able to redirect myhost:80 -\u003e 443 and myhost:4567 -\u003e 4568.\r\n\r\nThis wouldn\u0027t fix the problem which I\u0027ve listed, because I want http://example.org to get redirected, but http://127.0.0.1 or http://10.8.0.1 to just be left alone and not redirected so internal health checks can just continue to work.",
                                           "updatedAt":  "2020-05-05T20:03:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNDI3ODIxMQ==",
                                           "createdAt":  "2020-05-05T20:06:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "You\u0027re right. I edited my comment to clarify this is an expansion of that scenario that clarifies what to do if something isn\u0027t in the given list.",
                                           "updatedAt":  "2020-05-05T20:06:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNDI4MTM1Mg==",
                                           "createdAt":  "2020-05-05T20:13:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dustinmoris",
                                           "body":  "Great, thank you!",
                                           "updatedAt":  "2020-05-05T20:13:05Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Only HTTPS redirect for a specific host (the one with a valid cert)",
        "labels":  [
                       "Needs: Design",
                       "enhancement",
                       "affected-few",
                       "severity-minor",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/22281",
        "createdAt":  "2020-05-27T17:37:04Z",
        "number":  22281,
        "author":  "mo-esmp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCxuwQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RehanSaeed",
                                            "createdAt":  "2022-02-25T17:14:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mikegoatly",
                                            "createdAt":  "2022-05-13T07:52:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tbrillet",
                                            "createdAt":  "2023-01-11T12:44:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vchirikov",
                                            "createdAt":  "2024-01-23T11:39:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Diomas",
                                            "createdAt":  "2024-09-20T09:17:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "baracoder",
                                            "createdAt":  "2024-10-08T12:10:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Entroper",
                                            "createdAt":  "2025-05-24T21:27:55Z"
                                        }
                                    ],
                          "totalCount":  7
                      },
        "updatedAt":  "2024-10-08T07:03:18Z",
        "body":  "For internal server error, there are no access-control-* headers in the response. As far as I know \r\n[this issue](https://github.com/dotnet/aspnetcore/issues/2378) should be fixed since ASP.NET Core 2.2.\r\n\r\nHere is my CORS configuration:\r\n``` C#\r\nservices.AddCors(options =\u003e\r\n{\r\n    options.AddPolicy(name: \"AllowedOrigins\",\r\n        policyBuilder =\u003e\r\n        {\r\n            var urls = Configuration.GetSection(\"Host:AllowedOrigins\").Get\u003cList\u003cstring\u003e\u003e();\r\n            policyBuilder.WithOrigins(urls.ToArray())\r\n                .AllowAnyMethod()\r\n                .AllowAnyHeader()\r\n                .SetIsOriginAllowed((host) =\u003e true)\r\n                .AllowCredentials();\r\n        });\r\n});\r\n```\r\nAnd in `Configure` method :\r\n\r\n```C#\r\napp.UseRouting();\r\n\r\napp.UseCors(\"AllowedOrigins\");\r\napp.UseAuthentication();\r\napp.UseAuthorization();\r\n\r\napp.UseEndpoints(endpoints =\u003e\r\n{\r\n    endpoints.MapControllers();\r\n});\r\n```\r\n### Further technical details\r\n```\r\n- ASP.NET Core version: 3.1\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.202\r\n Commit:    6ea70c8dca\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.202\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.4\r\n  Commit:  0c2e69caa6\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.802 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.402 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n- Visual Studio 15.6\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjv4E_Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzNTYwMDQ4Mw==",
                                           "createdAt":  "2020-05-28T20:50:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sackri10",
                                           "body":  "After seeing the Code fix done as part of Issue #2378. I feel like the fix is not considered for latest code.",
                                           "updatedAt":  "2020-05-28T21:12:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MTU0MjY1OQ==",
                                           "createdAt":  "2020-06-09T20:09:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkArtakMSFT",
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-06-09T20:09:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NjU5ODI5MQ==",
                                           "createdAt":  "2021-06-08T09:07:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODy_qPA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mo-esmp",
                                                                               "createdAt":  "2021-06-08T19:18:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "UnclearMaker",
                                                                               "createdAt":  "2021-08-02T15:51:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "baracoder",
                                                                               "createdAt":  "2021-08-13T09:22:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bcronje",
                                                                               "createdAt":  "2021-08-23T20:02:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Astrophizz",
                                                                               "createdAt":  "2021-10-07T19:03:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antmeehan",
                                                                               "createdAt":  "2022-02-14T11:44:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RehanSaeed",
                                                                               "createdAt":  "2022-02-25T17:14:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MithrilMan",
                                                                               "createdAt":  "2022-02-28T14:33:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pavlexander",
                                                                               "createdAt":  "2022-03-31T16:07:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Arahizzz",
                                                                               "createdAt":  "2022-05-11T19:10:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WeihanLi",
                                                                               "createdAt":  "2022-07-01T04:25:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CHR-LeeOlsen",
                                                                               "createdAt":  "2022-11-29T22:07:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CallStackRunner",
                                                                               "createdAt":  "2023-05-03T15:48:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nzuguem",
                                                                               "createdAt":  "2023-05-10T03:35:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jbowling-arcoro",
                                                                               "createdAt":  "2024-04-20T22:44:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Diomas",
                                                                               "createdAt":  "2024-09-20T09:17:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  16
                                                         },
                                           "author":  "Entroper",
                                           "body":  "I know this seems insignificant, but this is a thorn in my side when helping newer developers debug.  Every 500, 404, 401/403 etc. is reported by the browser as a CORS error.  A lot of time is wasted chasing these red herrings when the real issue has nothing to do with CORS.",
                                           "updatedAt":  "2021-06-08T09:07:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85AqKd5",
                                           "createdAt":  "2022-03-31T16:09:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODCGz7Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "inter-kiiva",
                                                                               "createdAt":  "2023-07-28T13:42:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "pavlexander",
                                           "body":  "hey, I\u0027ve been struggling with the same issue and following solution seems to have worked:\r\n\r\n```\r\napp.UseExceptionHandler(exceptionHandlerApp =\u003e\r\n{\r\n    exceptionHandlerApp.Run(async context =\u003e\r\n    {\r\n        context.Response.StatusCode = StatusCodes.Status500InternalServerError;\r\n    });\r\n});\r\n\r\napp.UseCors(...);\r\n```\r\n\r\nI have made an answer on StackOverflow https://stackoverflow.com/a/71695813/1215913\r\n\r\nThere is also an explanation provided by another author why the solution works.\r\n\r\nHappy coding :)\r\n\r\n",
                                           "updatedAt":  "2022-03-31T16:09:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85xvCJ8",
                                           "createdAt":  "2024-01-24T13:46:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lnxph-devops-sareno",
                                           "body":  "I had the same issue. As a workaround, I added a new middleware that act as a global exception handler:\r\n```csharp\r\nvar app = builder.Build();\r\n\r\napp.Use(async (context, next) =\u003e\r\n{\r\n        try\r\n        {\r\n            await next(context);\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            context.Response.StatusCode = StatusCodes.Status500InternalServerError;\r\n            await context.Response.WriteAsync(e.ToString());\r\n        }\r\n});\r\n\r\napp.UseCors();\r\n```",
                                           "updatedAt":  "2024-01-24T13:46:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86O_gT9",
                                           "createdAt":  "2024-10-08T07:03:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipbekic01",
                                           "body":  "We spent hours and hours trying to figure out what\u0027s wrong with internal server response. First we thought it\u0027s our proxy cutting the response but no, it\u0027s dotnet. Hope for the best. ",
                                           "updatedAt":  "2024-10-08T07:03:16Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "CORS header not being set for internal server error response",
        "labels":  [
                       "Needs: Design",
                       "investigate",
                       "enhancement",
                       "triage-focus",
                       "feature-cors",
                       "severity-nice-to-have",
                       "affected-very-few",
                       "Priority:2",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/28368",
        "createdAt":  "2020-06-15T08:14:54Z",
        "number":  28368,
        "author":  "osmansonmez",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCybH0g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DavidParks8",
                                            "createdAt":  "2020-08-26T20:30:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "timotheeguerin",
                                            "createdAt":  "2020-09-11T21:48:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RoystonS",
                                            "createdAt":  "2023-09-06T11:44:48Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2023-09-06T11:46:12Z",
        "body":  "### Describe the bug\r\n\r\nWhen change RedisCacheOptions  RedisCache dont  connect again on runtime because RedisCache is Singleton and Singleton objects uses IOptionsMonitor when configuration changes. I  Think we must change IOptions\u003cRedisCacheOptions\u003e to IOptionsMonitor\u003cRedisCacheOptions\u003e and we must write IOptionsMonitor OnChange event\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZdDdgw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MTEwNzY3OA==",
                                           "createdAt":  "2020-08-26T20:30:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DavidParks8",
                                           "body":  "This feature needs to be added to support runtime secret rotation of redis keys.",
                                           "updatedAt":  "2020-08-26T20:30:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MTEwOTA3OQ==",
                                           "createdAt":  "2020-08-26T20:33:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DavidParks8",
                                           "body":  "@Pilchie is there an owner of the stackexchange caching extension who could drive this feature?",
                                           "updatedAt":  "2020-08-26T20:33:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczODMzNTI4MA==",
                                           "createdAt":  "2020-12-03T21:38:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-12-03T21:38:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85l0N2D",
                                           "createdAt":  "2023-09-06T11:46:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RoystonS",
                                           "body":  "Without the ability to change the configuration of the singleton in place, how _are_ people working around it and coping with the rotation of keys?  In a server environment I don\u0027t really want to be having to restart my server each time I rotate a key on another database machine.",
                                           "updatedAt":  "2023-09-06T11:46:12Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "IOptions\u003cRedisCacheOptions\u003e  When change RedisCacheOptions I dont see new connection",
        "labels":  [
                       "feature-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/23218",
        "createdAt":  "2020-06-22T13:44:30Z",
        "number":  23218,
        "author":  "Alan-Hinton",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCvp0YQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tanveerbadar",
                                            "createdAt":  "2020-11-27T15:29:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ilharp",
                                            "createdAt":  "2020-12-24T09:00:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lawrencek76",
                                            "createdAt":  "2021-12-20T21:40:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mmarinchenko",
                                            "createdAt":  "2023-04-22T18:18:52Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2023-08-28T23:10:00Z",
        "body":  "\u003c!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\nPlease keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.\r\n\r\nIf you believe you have an issue that affects the SECURITY of the platform, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.\r\nFor other types of questions, consider using [StackOverflow](https://stackoverflow.com).\r\n\r\n--\u003e\r\n\r\n### Describe the bug\r\nIf you call `app.UseResponseCaching` before `app.UseCORS` in the `Startup.cs` of a .net core web api some users will see CORS errors because the response caching middle-ware fails to cache the headers produced by the CORS middle-ware.\r\n\r\nEither the the CORS middle-ware should be updated to inject the CORS headers in a way that can be cached, or the two modules should be able to generate an error if they are added in the wrong order to prevent developers making this mistake.\r\n\r\nAt the very least the documentation should point out what the required ordering is.\r\n\r\n### To Reproduce\r\n1) Run the API from this repo, it is just the basic .net core API template with CORS and ResponseCaching added, in the \u0027wrong\u0027 order, https://github.com/resgroup/CachingCORSErrorExample\r\n2) Run queries from curl on the command line to avoid client side caching getting in the way\r\n3) Run `curl \"https://localhost:44331/weatherforecast\" -i -H \"Origin:http://localhost:8080\"`, you should see the `Access-Control-Allow-Origin: http://localhost:8080` header that enables the browser to use the response.\r\n4) Run the same request again, the `Access-Control-Allow-Origin: http://localhost:8080` header will be missing and there will be an `age` header, showing that the result came from the cache.  This response would cause a CORS error in a browser.\r\n\r\nThis is unlikely to come up as an error in the browser for a single user because client side caching will successfully cache the `Access-Control-Allow-Origin\u0027 header.  But if a second user access the API they will not see the header and get a CORS error.\r\n\r\nIf you move the call to `app.UseCors` here https://github.com/resgroup/CachingCORSErrorExample/blob/7ff61a0f64a85c8f90c4838b6933f9e375631fb3/Startup.cs#L59 above the call to `app.UseResponseCaching` and repeat the test you will see the `Access-Control-Allow-Origin\u0027 header in both responses.\r\n\r\n### Exceptions (if any)\r\nNone\r\n\r\n### Further technical details\r\n- ASP.NET Core version = 3.1.3\r\n- Include the output of `dotnet --info`\r\n```\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\u003edotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.301\r\n Commit:    7feb845744\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.301\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.5\r\n  Commit:  65cd789777\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.801 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.401 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n- VS 2019 (16.6.2)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOJIQ2Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NzU0ODMyNw==",
                                           "createdAt":  "2020-06-22T14:17:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "@Alan-Hinton thanks for contacting us.\r\n\r\nWe have docs for this [here](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/?view=aspnetcore-3.1#built-in-middleware) that speak about the order, but you are right in that they are incomplete.\r\n\r\n@Rick-Anderson can you update the table here?\r\n\r\nAlso, not sure if there is a bug lurking here. CORS adds the appropriate caching headers [here](https://github.com/dotnet/aspnetcore/blob/adbedd2cfb8dea7b5af3fe9e1c0d49684596e6d5/src/Middleware/CORS/src/Infrastructure/CorsService.cs#L113-L123).\r\n\r\nIs your scenario that there are missing CORS headers in the response? Is the scenario that you ar e receiving non-cors responses on CORS requests or vice-versa?\r\n\r\nFrom what I can tell, response caching should be able to go before CORS. @JunTaoLuo @Tratcher, do you have any thoughts?",
                                           "updatedAt":  "2020-06-22T14:17:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NzYwNTkxNQ==",
                                           "createdAt":  "2020-06-22T15:44:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Alan-Hinton",
                                           "body":  "From my understanding the reason Responsecaching before CORS doesn\u0027t work is because the code you point to is eventually called from a delegate [here](https://github.com/dotnet/aspnetcore/blob/adbedd2cfb8dea7b5af3fe9e1c0d49684596e6d5/src/Middleware/CORS/src/Infrastructure/CorsMiddleware.cs#L216) and the delegate doesn\u0027t actually get executed until just before the whole response returns, so after caching happens.  Therefore the results of the CORS middleware never get cached, whatever order you add the services in.\r\n\r\nHowever if you add CORS before ResponseCaching it means CORS will be executed on every request, even if the response is cached, and will successfully add the required headers.  Not caching CORS headers has the advantage that if you access the same endpoint from multiple origins they will all hit the same cache key and therefore the load on the server will be lower.",
                                           "updatedAt":  "2020-06-22T15:44:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NzY3NzAyMg==",
                                           "createdAt":  "2020-06-22T17:42:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "@Alan-Hinton\u0027s right the issue is with when Cors adds the headers:\r\nhttps://github.com/dotnet/aspnetcore/blob/adbedd2cfb8dea7b5af3fe9e1c0d49684596e6d5/src/Middleware/CORS/src/Infrastructure/CorsMiddleware.cs#L214-L226\r\n\r\nThe caching middleware captures the headers before OnStarting is called rather than afterwards.\r\n\r\nOne fix would be for the caching middleware to shim OnStarting and run those callbacks before it captured the headers. (Complex)\r\n\r\nAnother option would be fore the cors middleware to apply the response headers before calling next. I\u0027m not sure why it\u0027s waiting for OnStarting today.",
                                           "updatedAt":  "2020-06-22T17:43:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0ODA5NDQ4Nw==",
                                           "createdAt":  "2020-06-23T11:46:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "\u003e However if you add CORS before ResponseCaching it means CORS will be executed on every request, even if the response is cached, and will successfully add the required headers. Not caching CORS headers has the advantage that if you access the same endpoint from multiple origins they will all hit the same cache key and therefore the load on the server will be lower.\r\n\r\nI\u0027m not sure what this is necessarily desirable since you might want to have different contents server per origin, and this would prevent that.",
                                           "updatedAt":  "2020-06-23T11:46:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0ODA5NTA0OQ==",
                                           "createdAt":  "2020-06-23T11:48:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "@Tratcher I\u0027m moving this to the Backlog for the time being, but lets sync on this to come up with a plan.",
                                           "updatedAt":  "2020-06-23T11:48:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0ODg0MzEzNw==",
                                           "createdAt":  "2020-06-24T14:07:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCACaoQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tanveerbadar",
                                                                               "createdAt":  "2020-11-27T15:29:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mmarinchenko",
                                                                               "createdAt":  "2021-10-27T08:26:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Alan-Hinton",
                                           "body":  "\u003e \u003e However if you add CORS before ResponseCaching it means CORS will be executed on every request, even if the response is cached, and will successfully add the required headers. Not caching CORS headers has the advantage that if you access the same endpoint from multiple origins they will all hit the same cache key and therefore the load on the server will be lower.\r\n\u003e \r\n\u003e I\u0027m not sure what this is necessarily desirable since you might want to have different contents server per origin, and this would prevent that.\r\n\r\nIf you did explicitly want to serve a different response to each origin then you could put `VaryByHeader = \"Origin\"` in you response caching attribute and I think that it would work as expected.",
                                           "updatedAt":  "2020-06-24T14:07:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde844khDZ",
                                           "createdAt":  "2021-10-22T00:19:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-10-22T00:19:24Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "It is not clear that UseCORS must come before UseResponseCaching",
        "labels":  [
                       "bug",
                       "area-mvc",
                       "affected-few",
                       "severity-minor",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/24252",
        "createdAt":  "2020-07-23T20:34:51Z",
        "number":  24252,
        "author":  "APIWT",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6j8ow==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cleftheris",
                                            "createdAt":  "2022-09-16T14:20:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adam-mccoy",
                                            "createdAt":  "2024-08-28T10:12:19Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-11-27T07:25:07Z",
        "body":  "### Describe the bug\r\nThe static file middleware does not allow any form of serving of files when used in combination with endpoint routing. Maybe I am missing something here, but this prevents me from doing stuff like this:\r\n\r\nNotice I am essentially trying to add auth to my Swagger UI without writing a custom middleware.\r\n\r\n```\r\napp.UseEndpoints(endpoints =\u003e\r\n{\r\n    endpoints.MapControllers();\r\n\r\n    var swaggerUiDelegate = endpoints.CreateApplicationBuilder().UseSwaggerUI(options =\u003e\r\n    {\r\n        // Set documentation route to /docs\r\n        options.RoutePrefix = \"docs\";\r\n    })\r\n    .Build();\r\n\r\n    endpoints.Map(\"docs/{*wildcard}\", swaggerUiDelegate).RequireAuthorization(\"Swagger\");\r\n});\r\n```\r\n\r\n### To Reproduce\r\nThe above code should work if you essentially just add Swashbuckle to your project and attempt to add auth to your Swagger UI.\r\n\r\n### Exceptions (if any)\r\nInvalidOperationException: The request reached the end of the pipeline without executing the endpoint: \u0027docs/{*wildcard}\u0027. Please register the EndpointMiddleware using \u0027IApplicationBuilder.UseEndpoints(...)\u0027 if using routing.\r\n\r\n### Further technical details\r\n- ASP.NET Core version = 3.1\r\n- Include the output of `dotnet --info`\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.201\r\n Commit:    b1768b4ae7\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.15\r\n OS Platform: Darwin\r\n RID:         osx.10.15-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/3.1.201/\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0-preview.7.20364.11\r\n  Commit:  53976d38b1\r\n\r\n.NET SDKs installed:\r\n  2.1.805 [/usr/local/share/dotnet/sdk]\r\n  3.1.201 [/usr/local/share/dotnet/sdk]\r\n  3.1.302 [/usr/local/share/dotnet/sdk]\r\n  5.0.100-preview.7.20366.6 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.17 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.17 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.6 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0-preview.7.20365.19 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.17 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.20 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.3 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.6 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0-preview.7.20364.11 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n- The IDE (VS / VS Code/ VS4Mac) you\u0027re running on, and it\u0027s version\r\nVisual Studio 2019 for Mac",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlTJTUw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzI5ODQ1Nw==",
                                           "createdAt":  "2020-07-24T00:36:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "What does this have to do with static files?\r\n*Edit* Nevermind, I see that Swagger UI embeds a StaticFile middleware. However, I don\u0027t think that\u0027s related to your issue here.\r\nhttps://github.com/domaindrivendev/Swashbuckle.AspNetCore/blob/e33dba2e416469fca6c2f4975c1c41dbac942804/src/Swashbuckle.AspNetCore.SwaggerUI/SwaggerUIMiddleware.cs#L70\r\n\r\nCan you provide a more complete Startup sample?",
                                           "updatedAt":  "2020-07-24T03:09:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzMyOTg3NQ==",
                                           "createdAt":  "2020-07-24T03:19:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Oh I get it.\r\n\r\n1. The request matches `docs/{*wildcard}`, gets assigned an Endpoint, and executes `swaggerUiDelegate`.\r\n2. The `UseSwaggerUI` middleware runs but doesn\u0027t match the request, probably because the paths aren\u0027t configured the way you expect them to be. Note `endpoints.Map` doesn\u0027t trim the matched portion off of the request path like `IApplicationBuidler.Map` does.\r\n3. The request reaches the [implicit middleware](https://github.com/dotnet/aspnetcore/blob/4d45b1803b9412ca37d45cf3d6fb63a19c0056f4/src/Http/Http/src/Builder/ApplicationBuilder.cs#L85-L102) at end of the `swaggerUiDelegate` pipeline. Normally it would 404 at this point, but because it was assigned an endpoint (that it\u0027s currently executing) you get this error message instead.\r\n\r\nI think this exception is due to a bug in `endpoints.CreateApplicationBuilder()`, it should return an app builder that only does 404s at the end, not check for endpoints again.\r\n\r\nYou\u0027ll still need to figure out your path issues, but at least you\u0027ll get the appropriate 404 rather than this weird exception.",
                                           "updatedAt":  "2020-07-24T03:19:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzM2NjM3MA==",
                                           "createdAt":  "2020-07-24T06:22:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Hah this is the issue with baking things in at the potentially wrong level. Is there a reason changing this would break one?",
                                           "updatedAt":  "2020-07-24T06:22:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzQ2NDEzOQ==",
                                           "createdAt":  "2020-07-24T10:01:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "No, it\u0027s only a safety check. It\u0027s not like you can nest endpoints.",
                                           "updatedAt":  "2020-07-24T10:01:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzUxOTAxMg==",
                                           "createdAt":  "2020-07-24T12:41:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "APIWT",
                                           "body":  "\u003e Oh I get it.\r\n\u003e \r\n\u003e     1. The request matches `docs/{*wildcard}`, gets assigned an Endpoint, and executes `swaggerUiDelegate`.\r\n\u003e \r\n\u003e     2. The `UseSwaggerUI` middleware runs but doesn\u0027t match the request, probably because the paths aren\u0027t configured the way you expect them to be. Note `endpoints.Map` doesn\u0027t trim the matched portion off of the request path like `IApplicationBuidler.Map` does.\r\n\u003e \r\n\u003e     3. The request reaches the [implicit middleware](https://github.com/dotnet/aspnetcore/blob/4d45b1803b9412ca37d45cf3d6fb63a19c0056f4/src/Http/Http/src/Builder/ApplicationBuilder.cs#L85-L102) at end of the `swaggerUiDelegate` pipeline. Normally it would 404 at this point, but because it was assigned an endpoint (that it\u0027s currently executing) you get this error message instead.\r\n\u003e \r\n\u003e \r\n\u003e I think this exception is due to a bug in `endpoints.CreateApplicationBuilder()`, it should return an app builder that only does 404s at the end, not check for endpoints again.\r\n\u003e \r\n\u003e You\u0027ll still need to figure out your path issues, but at least you\u0027ll get the appropriate 404 rather than this weird exception.\r\n\r\n@Tratcher \r\nI think we are talking about two different bugs, but I think both need to be fixed in order to accomplish my use case.\r\n\r\nInside `UseSwaggerUI`, the code looks like this:\r\nhttps://github.com/domaindrivendev/Swashbuckle.AspNetCore/blob/e33dba2e416469fca6c2f4975c1c41dbac942804/src/Swashbuckle.AspNetCore.SwaggerUI/SwaggerUIBuilderExtensions.cs#L10\r\nhttps://github.com/domaindrivendev/Swashbuckle.AspNetCore/blob/939ad54164af5820f93a926083d322899c09049f/src/Swashbuckle.AspNetCore.SwaggerUI/SwaggerUIMiddleware.cs#L71\r\n\r\nNotice that basically the SwaggerUIMiddleware will do this:\r\n1) Check if they are on \"/{prefix}\" and if so redirect them to \"/{prefix}/index.html\"\r\n2) Check if they are on \"/{prefix}/index.html\" and if so render some dynamic HTML.\r\n3) If neither of these are matched, invoke an instance of StaticFileMiddleware with an embedded resource used as the file provider: https://github.com/domaindrivendev/Swashbuckle.AspNetCore/blob/939ad54164af5820f93a926083d322899c09049f/src/Swashbuckle.AspNetCore.SwaggerUI/SwaggerUIMiddleware.cs#L86\r\n\r\nHowever, there are two problems at this point. The first problem is that StaticFileMiddleware checks if there is an endpoint set, and if so just nopes out: https://github.com/dotnet/aspnetcore/blob/19d2f6124f5d04859e350d1f5a01e994e14ef1ce/src/Middleware/StaticFiles/src/StaticFileMiddleware.cs#L71\r\n\r\nThe second issue is the bug you have highlighted.\r\n\r\nAll that being said... Is there a different way to accomplish what I am trying to do without building my own custom auth middleware that runs before `UseSwaggerUI` (assuming I don\u0027t use endpoint routing).\r\n\r\nEDIT: I almost forgot to mention. Both step 1 and step 2 above work. In other words, the redirect from \"/{prefix}\" and the dynamic \"/{prefix}/index.html\" parts have no issues (and require an authenticated user with the policy I specify in my original post. It seems that the whole issue lies in the fact that the static file middleware specifically has a check that says \"if the context has an endpoint, log and exit.",
                                           "updatedAt":  "2020-07-24T12:44:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzU3ODk3NQ==",
                                           "createdAt":  "2020-07-24T14:54:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "APIWT",
                                           "body":  "One more update. Sorry for the spam!\r\n\r\nSo I did a thing... lol:\r\n```\r\nnamespace MyApp\r\n{\r\n    using System.Threading.Tasks;\r\n    using Microsoft.AspNetCore.Builder;\r\n    using Microsoft.AspNetCore.Hosting;\r\n    using Microsoft.AspNetCore.Http;\r\n    using Microsoft.AspNetCore.StaticFiles;\r\n    using Microsoft.Extensions.Logging;\r\n    using Swashbuckle.AspNetCore.SwaggerUI;\r\n\r\n    public sealed class SwaggerUIMiddlewareWithEndpointWorkaround\r\n    {\r\n        private readonly SwaggerUIMiddleware swaggerUiMiddleware;\r\n\r\n        public SwaggerUIMiddlewareWithEndpointWorkaround(\r\n            RequestDelegate next,\r\n            IWebHostEnvironment hostingEnv,\r\n            ILoggerFactory loggerFactory,\r\n            SwaggerUIOptions options)\r\n        {\r\n            this.swaggerUiMiddleware = new SwaggerUIMiddleware(next, hostingEnv, loggerFactory, options);\r\n        }\r\n\r\n        public async Task Invoke(HttpContext httpContext)\r\n        {\r\n            var originalEndpoint = httpContext.GetEndpoint();\r\n            httpContext.SetEndpoint(null);\r\n            await this.swaggerUiMiddleware.Invoke(httpContext);\r\n            httpContext.SetEndpoint(originalEndpoint);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nthen in my startup:\r\n```\r\napp.UseEndpoints(endpoints =\u003e\r\n{\r\n    endpoints.MapControllers();\r\n\r\n    var options = new SwaggerUIOptions();\r\n    options.RoutePrefix = \"docs\";\r\n\r\n    var swaggerUiDelegate = endpoints.CreateApplicationBuilder()\r\n        .UseMiddleware\u003cSwaggerUIMiddlewareWithEndpointWorkaround\u003e(options)\r\n        .Build();\r\n\r\n    endpoints.Map(\r\n        \"docs/{*wildcard}\",\r\n        swaggerUiDelegate)\r\n    .RequireAuthorization(\"Swagger\");\r\n});\r\n```\r\n\r\nAnd the good news is, it works fine! But I can\u0027t help but feel a little dirty doing it. As you can see, in my workaround middleware I am simply wrapping an instance of SwaggerUIMiddleware and hi-jacking the HTTP context\u0027s endpoint to temporarily set it to null (restored to the original endpoint value after the invoke call is completed).\r\n\r\nHopefully this helps you guys make a decision in what can/should be done here. You can also call me out if I am totally abusing the endpoint feature.",
                                           "updatedAt":  "2020-07-24T14:54:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzYxNjUyMw==",
                                           "createdAt":  "2020-07-24T16:14:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Ah, nicely explained. Yes, that looks like a second bug.\r\n\r\nIt looks like the static files no-op was added back in 3.0 and it failed to account for placing static files within a route.\r\nhttps://github.com/dotnet/aspnetcore/commit/7e63e2da43c3a5f298e782482b2005179b8d2792\r\n\r\nI\u0027d suggest removing those checks, they only work as intended if the static files middleware is placed between UseRouting and UseEndpoints.",
                                           "updatedAt":  "2020-07-24T16:14:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzYxNzE4NA==",
                                           "createdAt":  "2020-07-24T16:16:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "APIWT",
                                           "body":  "Awesome, I appreciate your prompt response and understanding. On that note... does my workaround raise any red flags for you? And even better question... am I abusing endpoint routing for the wrong reasons?",
                                           "updatedAt":  "2020-07-24T16:16:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzYyMDI5NA==",
                                           "createdAt":  "2020-07-24T16:22:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODNyPlw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Tornhoof",
                                                                               "createdAt":  "2021-02-15T09:57:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alrz",
                                                                               "createdAt":  "2022-07-25T15:38:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "benedikt-t24",
                                                                               "createdAt":  "2023-11-28T10:15:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "It should work but I think you can simplify it. You don\u0027t need a custom middleware, or to restore the endpoint value after the middleware.\r\n\r\n```\r\napp.UseEndpoints(endpoints =\u003e\r\n{\r\n    endpoints.MapControllers();\r\n\r\n    var swaggerUiDelegate = endpoints.CreateApplicationBuilder()\r\n    .Use((context, next) =\u003e\r\n    {\r\n        context.SetEndpoint(null);\r\n        return next();\r\n    })\r\n    .UseSwaggerUI(options =\u003e\r\n    {\r\n        // Set documentation route to /docs\r\n        options.RoutePrefix = \"docs\";\r\n    })\r\n    .Build();\r\n\r\n    endpoints.Map(\"docs/{*wildcard}\", swaggerUiDelegate).RequireAuthorization(\"Swagger\");\r\n});\r\n```\r\n\r\nA completely different way of doing this is setting the FallbackPolicy so that all requests require authentication.\r\nhttps://docs.microsoft.com/en-us/aspnet/core/security/authorization/secure-data?view=aspnetcore-3.1#require-authenticated-users",
                                           "updatedAt":  "2020-07-24T16:22:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzYyMDk3MQ==",
                                           "createdAt":  "2020-07-24T16:24:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "APIWT",
                                           "body":  "You rock! Thank you very much for your help. I will watch this issue to see how the team decides to handle this.",
                                           "updatedAt":  "2020-07-24T16:24:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzczNDE5OA==",
                                           "createdAt":  "2020-07-24T21:06:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\nWe\u0027re moving this issue to the `Next sprint planning` milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-07-24T21:06:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNjMxODQ4Ng==",
                                           "createdAt":  "2020-10-09T17:47:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-10-09T17:47:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85HLpaL",
                                           "createdAt":  "2022-07-25T15:41:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODNy1Sg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cleftheris",
                                                                               "createdAt":  "2022-09-16T14:19:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "benedikt-t24",
                                                                               "createdAt":  "2023-11-28T11:48:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "alrz",
                                           "body":  "The workaround @Tratcher posted works but this seems like something to be provided out-of-the-box.\r\n\r\nAny update here? although I think the swagger package should provide such APIs, e.g. `endpoints.MapSwaggerUI()`",
                                           "updatedAt":  "2022-07-25T15:41:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85LnBTe",
                                           "createdAt":  "2022-10-05T14:32:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "miroslavgrozdanovski",
                                           "body":  "Thanks for the workaround @APIWT and @Tratcher! We are building our own library and also wanted to use the static middleware together with endpoint routing. There aren\u0027t a lot of examples on this in the wild, so it was hard to find the cause for the error.\r\n\r\n+1 for somehow supporting this out-of-the-box.\r\n\r\n",
                                           "updatedAt":  "2022-10-05T14:32:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85LnH0l",
                                           "createdAt":  "2022-10-05T14:48:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "It\u0027s interesting that `endpoints.CreateApplicationBuilder()` is essentially creating a nested middleware pipeline, but when requests flow through that nested pipeline, they start of in a position where the request already has an endpoint mapped and that endpoint is basically the nested middleware pipeline itself as a match! To be more consistent, wouldn\u0027t it be better for `endpoints.CreateApplicationBuilder()` to ensure that the endpoint was set to null initially with this context?\r\n\r\nalso @Tratcher with respect to this point:\r\n\u003e It should work but I think you can simplify it. You don\u0027t need a custom middleware, or to restore the endpoint value after the middleware.\r\n\r\nIn terms of not restoring the endpoint value.. as this is a nested middleware pipeline, there is a question as to whether the request should flow back into the parent middleware pipeline if it reaches the end without an endpoint being executed.. I think this would be a useful option to expose, i.e to enable the request space of an application to be subdivided, such that if the url space /foo was owned by some optional handler, when the handler isn\u0027t present / enabled, the request can flow back out of that space again rather than being consumed with a 404",
                                           "updatedAt":  "2022-10-05T14:49:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85LnQ_1",
                                           "createdAt":  "2022-10-05T15:15:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCtXuSw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "dazinator",
                                                                               "createdAt":  "2022-10-05T21:43:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "\u003e there is a question as to whether the request should flow back into the parent middleware pipeline if it reaches the end without an endpoint being executed..\r\n\r\nRouting endpoints are considered terminal, there\u0027s no concept right now of an optional handler. Even if the request did re-enter the main pipeline, the endpoint executing middleware is itself terminal and placed at the end of the pipeline, there\u0027d be nowhere to go but 404.",
                                           "updatedAt":  "2022-10-05T15:15:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Lo8q5",
                                           "createdAt":  "2022-10-05T22:00:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "@Tratcher ah of course! Apologies I\u0027m getting confused again. I\u0027ve done something similar with nesting middleware pipelines and rejoining, but never really properly integrated endpoint routing into that concept, and this must be why.",
                                           "updatedAt":  "2022-10-05T22:00:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86VMlNT",
                                           "createdAt":  "2024-11-27T07:25:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@javiercn is this still relevant with MapStaticAssests?",
                                           "updatedAt":  "2024-11-27T07:25:06Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  "Endpoint routing can not invoke a static file middleware",
        "labels":  [
                       "bug",
                       "area-mvc",
                       "feature-routing",
                       "affected-few",
                       "severity-minor",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/24618",
        "createdAt":  "2020-08-06T11:14:26Z",
        "number":  24618,
        "author":  "nuno-barreiro",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-28T14:08:25Z",
        "body":  "\u003c!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\nPlease keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.\r\n\r\nIf you believe you have an issue that affects the SECURITY of the platform, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.\r\nFor other types of questions, consider using [StackOverflow](https://stackoverflow.com).\r\n\r\n--\u003e\r\n\r\n### Describe the bug\r\nUsing rewrite maps in the URL attribute of a rewrite rule action doesn\u0027t seem to work.\r\nIf we have the following rules and rewrite maps defined:\r\n\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"utf-16\"?\u003e\r\n\u003crewrite xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\u003e\r\n  \u003crules\u003e\r\n    \u003crule name=\"blog redirects\" stopProcessing=\"true\"\u003e\r\n      \u003cmatch url=\".*\" /\u003e\r\n      \u003cconditions logicalGrouping=\"MatchAll\"\u003e\r\n        \u003cadd input=\"{blog-map:{REQUEST_URI}}\" pattern=\"(.+)\" /\u003e\r\n      \u003c/conditions\u003e\r\n      \u003caction type=\"Redirect\" url=\"{C:1}\" appendQueryString=\"true\" redirectType=\"Permanent\" /\u003e\r\n    \u003c/rule\u003e\r\n    \u003crule name=\"query id redirect\" stopProcessing=\"true\"\u003e\r\n      \u003cmatch url=\"(.*)\" /\u003e\r\n      \u003cconditions logicalGrouping=\"MatchAll\"\u003e\r\n        \u003cadd input=\"{QUERY_STRING}\" pattern=\"(.*)(\\bid=([0-9]+-[0-9]{4}))(.*)\" /\u003e\r\n      \u003c/conditions\u003e\r\n      \u003caction type=\"Redirect\" url=\"{R:0}?{C:1}id={id-map:{C:3}}{C:4}\" appendQueryString=\"false\" redirectType=\"Permanent\" /\u003e\r\n    \u003c/rule\u003e\r\n  \u003c/rules\u003e\r\n  \u003crewriteMaps\u003e\r\n    \u003crewriteMap name=\"blog-map\" defaultValue=\"\"\u003e\r\n      \u003cadd key=\"/somepage.html\" value=\"/otherpage.html\" /\u003e\r\n    \u003c/rewriteMap\u003e\r\n    \u003crewriteMap name=\"id-map\" defaultValue=\"\"\u003e\r\n      \u003cadd key=\"1234-1234\" value=\"ABCD-ABCD\" /\u003e\r\n    \u003c/rewriteMap\u003e\r\n  \u003c/rewriteMaps\u003e\r\n\u003c/rewrite\u003e\r\n```\r\n\r\nThe first rule works correctly and performs the redirect from `somepage.html` to `otherpage.html`.\r\nHowever, the second rules doesn\u0027t seem to work and a request to `index.html?id=1234-1234` doesn\u0027t redirect to the expected `index.html?id=ABCD-ABVD`.\r\n\r\nAlso, if the URL value of the second rule is changed to something \"hardcoded\" such as \"bing.com\", then the redirect action is performed which indicates the issue seems not to be related to the condition pattern but to the action URL.\r\n\r\n### To Reproduce\r\n\u003c!--\r\nWe ❤ code! Point us to a minimalistic repro project hosted in a GitHub repo.\r\nFor a repro project, create a new ASP.NET Core project using the template of your your choice, apply the minimum required code to result in the issue you\u0027re observing.\r\n\r\nWe will close this issue if:\r\n- the repro project you share with us is complex. We can\u0027t investigate custom projects, so don\u0027t point us to such, please.\r\n- if we will not be able to repro the behavior you\u0027re reporting\r\n--\u003e\r\n\r\n- Create a .net core web application (empty template)\r\n- Add the Microsoft.NetCore.Rewrite package \r\n- Create the rewrite file using the rules above\r\n- Configure startup.cs to load the iis rewrite file\r\n- Run the application and try with the requests mentioned on the description above\r\n\r\n[Link to the project in GitHub](https://github.com/nuno-barreiro/aspnetcore-issue-urlrewritemaps)\r\n\r\n### Exceptions (if any)\r\n\u003c!-- \r\nInclude the exception you get when facing this issue\r\n--\u003e\r\nN/A\r\n\r\n### Further technical details\r\n- ASP.NET Core version 2.1 (but it happens with 3.1 too)\r\n- Visual Studio Enterprise 2019 \r\n\r\n▶ dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.100-preview.4.20258.7\r\n Commit:    65f0fc2cad\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19042\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100-preview.4.20258.7\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0-preview.4.20251.6\r\n  Commit:  47ec733ba7\r\n\r\n.NET SDKs installed:\r\n  2.1.806 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.100-preview.4.20258.7 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0-preview.4.20257.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0-preview.4.20251.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.0-preview.4.20251.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKxGndQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MDcyNTY4NA==",
                                           "createdAt":  "2020-08-07T21:46:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-08-07T21:46:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MDcyNTk2Ng==",
                                           "createdAt":  "2020-08-07T21:48:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "Looks like a bug. Feel free to try fixing it if you\u0027re interested!\r\n\r\nSide-question: have you tried this rule with the IIS rewrite module?",
                                           "updatedAt":  "2020-08-07T21:48:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MDcyNzQzMA==",
                                           "createdAt":  "2020-08-07T21:53:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotalik",
                                           "body":  "I think you may have to work around this for now by splitting up your rule to match on the `1234-1234` first.",
                                           "updatedAt":  "2020-08-07T21:53:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MTgxMTM2NA==",
                                           "createdAt":  "2020-08-11T08:35:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nuno-barreiro",
                                           "body":  "\u003e Looks like a bug. Feel free to try fixing it if you\u0027re interested!\r\n\u003e \r\n\u003e Side-question: have you tried this rule with the IIS rewrite module?\r\n\r\nHi @BrennanConroy. \r\nYes... I\u0027ve initially created using the IIS rewrite module and worked fine.\r\n",
                                           "updatedAt":  "2020-08-11T08:35:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMjM3Mzc5OQ==",
                                           "createdAt":  "2020-10-19T18:51:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaamison",
                                           "body":  "Tracked it down to this: https://github.com/dotnet/aspnetcore/commit/65e7f7f44b5bf86d11e86e3cee70b85c56f23e76#diff-c09a7b0622d058c86ba9a1676b5c54dfe07101ced5fe769b4d5b3e433e036edeR59\r\n\r\nI first noticed that the Location header was being set in the response, even though the status was 200 (should never happen). With that premature return, the redirect status code is never set and RewriteContext.Result is never set, so RewriteMiddleware will continue evaluating subsequent rules.\r\n\r\nIt looks like the intent here was to fall back to redirecting to `/` in cases where the redirect url pattern evaluates out to nothing. Setting the pattern manually and just letting the rest of the method do its thing seems to work fine.\r\n\r\nBut that brings up another question of why the pattern is evaluating to null/empty in the first place. Here\u0027s one clue: we already know that `/index.html?id=1234-1234` =\u003e `/index.html?id=1234-1234` even though we\u0027re expecting `/index.html?id=1234-1234` =\u003e `/index.html?id=ABCD-ABCD`, but oddly, `/index.html?id=1234-12345` =\u003e `/5`. Clearly something is off with the back reference indexing. Looks like `ParserContext` is being thrown off by the nested tokens?",
                                           "updatedAt":  "2020-10-19T18:51:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMjU0MjI2NA==",
                                           "createdAt":  "2020-10-20T02:08:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaamison",
                                           "body":  "As for the remaining issues, it looks like contention over a shared `StringBuilder` is to blame: https://github.com/dotnet/aspnetcore/blob/686150953f7ccd3f56afd4d7b2f0a934c3557a10/src/Middleware/Rewrite/src/Pattern.cs#L22\r\n\r\nLogically speaking, we\u0027re building a new independent string each time a `Pattern` is evaluated, which implies a new `StringBuilder` instance locally within the `Pattern.Evaluate` method. This commit moved to a single shared StringBuilder on the `RewriteContext` presumably for perf:\r\n\r\nhttps://github.com/dotnet/aspnetcore/commit/7a560738353690fa3c6d1f5eaff43b9d384af57b#diff-7c5cf0ee81f592c0e3d8f1f078853d170504dec39a91ec80792b5d443b7c0c8fR21\r\n\r\nHowever, pattern evaluations can be recursive, which will leave us with different invocations across the call stack all appending onto the same string.\r\n\r\nInstead of going back to the naive implementation with a new StringBuilder for each evaluation, a compromise might be to share StringBuilders per Pattern? More StringBuilders will be instantiated in total than the current design, but it should only be once at startup. And I don\u0027t believe there can ever be a scenario where a Pattern instance can contains itself, meaning we won\u0027t have the buggy behavior anymore. Thoughts?",
                                           "updatedAt":  "2020-10-20T02:08:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMjU3NzI2OQ==",
                                           "createdAt":  "2020-11-05T19:02:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyLittle",
                                           "body":  "I am working on rewriting an existing web application\u0027s ASP.NET rewrite module into .NET core using this middleware, and this bug is preventing a large number of existing rewrite files/rewrite maps from being used by our new system.\r\nIs there any timeline on fixing this issue?",
                                           "updatedAt":  "2020-11-05T19:02:06Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Rewrite module - Rule action not working with rewrite maps",
        "labels":  [
                       "bug",
                       "feature-rewrite-middleware",
                       "area-middleware",
                       "help candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/26206",
        "createdAt":  "2020-09-22T22:52:52Z",
        "number":  26206,
        "author":  "marcdumont3000",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCrasgw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JakubJanowski",
                                            "createdAt":  "2022-11-11T17:00:39Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-08-28T23:09:58Z",
        "body":  "I would like to know if it\u0027s possible to localize or set back the culture in the context when an Exception occure using app.UseExceptionHandler(\"/**{culture}**/error\") in the config startup ?\r\n\r\nOr is there other ways to achieve that?\r\n\r\nthis is part of the Assembly Microsoft.AspNetCore.Diagnostics\r\n\r\nthanks\r\nMarc",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKgF_XA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5NzE0MDY4MQ==",
                                           "createdAt":  "2020-09-23T05:22:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "No this doesn\u0027t work. What are you trying to achieve?",
                                           "updatedAt":  "2020-09-23T05:22:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5Nzk0ODY2Ng==",
                                           "createdAt":  "2020-09-23T20:16:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "Is using the culture info in your error.cshtml not good enough?",
                                           "updatedAt":  "2020-09-23T20:16:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODA4NTAyNw==",
                                           "createdAt":  "2020-09-24T03:11:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marcdumont3000",
                                           "body":  "Just to give more context.....We are using localize routes like this:\r\n\r\n**Pattern**: /{culture}/home/index  and the default culture is en\r\nValide routes:\r\n/en/home/index\r\n/fr/home/index\r\n\r\nSo when an error occurs, the user is automatically redirected to the error page... I have this setup in the startup/configure:\r\n`app.UseExceptionHandler(\"/error\");`\r\n\r\nBut, every time the user gets redirected to the error page..the culture info gets reset to the default... the context for the culture is not kept when we hit the error page.\r\n\r\nSo what can we do to fix this issue?\r\nthanks\r\n\r\n",
                                           "updatedAt":  "2020-09-24T03:11:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMDMwMDM3Ng==",
                                           "createdAt":  "2020-09-28T21:51:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "You can grab the original path from the features in your error page, see the docs at https://docs.microsoft.com/aspnet/core/fundamentals/error-handling?view=aspnetcore-3.1#access-the-exception-1",
                                           "updatedAt":  "2020-09-28T21:51:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMDMwMDYyMA==",
                                           "createdAt":  "2020-09-28T21:52:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-09-28T21:52:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDc0MTIxMg==",
                                           "createdAt":  "2020-10-07T07:07:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I forgot to follow up on this issue. It\u0027s difficult to do this today and we need some tweaks to the error page middleware to handle it. Ideally you would be able to re-execute the pipeline with a callback to customize the request. ",
                                           "updatedAt":  "2020-10-07T07:07:41Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "app.UseExceptionHandler and ExceptionHandlerMiddleware.cs",
        "labels":  [
                       "enhancement",
                       "feature-diagnostics",
                       "severity-nice-to-have",
                       "affected-few",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/28367",
        "createdAt":  "2020-10-13T15:49:03Z",
        "number":  28367,
        "author":  "FWest98",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCqFGTg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wojciechrak",
                                            "createdAt":  "2021-07-27T11:27:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bjsmiley",
                                            "createdAt":  "2022-02-15T16:43:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "oguzsezer",
                                            "createdAt":  "2022-04-06T11:05:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adaniels85",
                                            "createdAt":  "2022-08-11T17:46:54Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2023-06-02T03:14:16Z",
        "body":  "Currently, the caching Redis plugin uses a simple `ConnectionMultiplexer.ConnectAsync` call with the given configuration. Unfortunately, this does not combine well with clusters with a sentinel.\r\n\r\n- The current dependent version of `StackExchange.Redis` requires two steps for connecting to a sentinel cluster: first to the sentinel, then to the appropriate master. This scenario cannot be implemented in the current API.\r\n- The latest version of `StackExchange.Redis` (2.1.58) no longer requires two steps for connecting to a sentinel cluster (https://github.com/StackExchange/StackExchange.Redis/pull/1431): when using a normal Connect-call, the code will try and detect whether you connected to a sentinel and then automatically return a normal connection to the current master. However, once the master fails and another master is elected by the sentinels, this connection object is no longer valid and the caching breaks. There is currently no way to re-instantiate the connection easily.\r\n\r\nMy current workaround is using the new library version, implementing a Redis caching HealthCheck, and simply letting all application containers fail and be restarted by the orchestrator to connect to the new Redis master. This is, of course, not ideal.\r\n\r\nIt would be very much appreciated if support for sentinels can be incorporated into the library directly. For example, in the `RedisCacheOptions` add a bool option indicating the use of sentinel, and add code to retrieve the correct master on the fly; and retry this when the connection to the current master fails.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLAIZYw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczODMzNTA3NQ==",
                                           "createdAt":  "2020-12-03T21:38:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-12-03T21:38:29Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  ".Caching.StackExchangeRedis Sentinel support",
        "labels":  [
                       "investigate",
                       "feature-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/27470",
        "createdAt":  "2020-11-02T22:52:24Z",
        "number":  27470,
        "author":  "BrennanConroy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-02T00:15:04Z",
        "body":  "* Better dev experience for serialization errors\r\n* Don\u0027t block when using Sync-IO",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSj_now==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMDc3MDAxMA==",
                                           "createdAt":  "2020-11-02T22:52:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\nWe\u0027re moving this issue to the `Next sprint planning` milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-11-02T22:52:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMDc3MDkxMQ==",
                                           "createdAt":  "2020-11-02T22:54:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "We released a preview package that does this which was last updated in 2017. It has over 500,000 downloads. https://www.nuget.org/packages/Microsoft.AspNetCore.Buffering/",
                                           "updatedAt":  "2020-11-02T22:54:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxODc5MzU5NQ==",
                                           "createdAt":  "2021-04-13T14:44:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dionrhys",
                                           "body":  "I\u0027d appreciate this feature. At the moment it\u0027s not straightforward to deal with exceptions that happen during serializing responses, e.g. exceptions that may happen while enumerating an `IEnumerable\u003cT\u003e` collection that\u0027s present on a response object\u0027s type (in an API controller).\r\n\r\nIdeally we wouldn\u0027t have these exceptions, but mistakes happen. Right now an exception that occurs during response formatting/serialization will cause JSON output to be truncated mid-response and the 200 OK status code kept (as the response has already begun writing).\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eHere\u0027s an example of how that manifested for me today:\u003c/summary\u003e\r\n\r\n```\r\n2021-04-12 12:50:52.252 +01:00 [ERR] An unhandled exception has occurred while executing the request.\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at *****.Web.Misc.*****.GetUserDefinedFields(Product product, IEnumerable`1 polygonList) in C:\\Projects\\*****\\src\\*****\\Misc\\*****.cs:line 163\r\n   at *****.Web.Controllers.EventsController.\u003c\u003ec__DisplayClass4_0.\u003cGetDataAsync\u003eb__3(ValueTuple`2 result) in C:\\Projects\\*****\\src\\*****\\Controllers\\EventsController.cs:line 266\r\n   at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(JsonWriter writer, IEnumerable values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(JsonWriter writer, Object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(JsonWriter jsonWriter, Object value, Type objectType)\r\n   at Newtonsoft.Json.JsonSerializer.SerializeInternal(JsonWriter jsonWriter, Object value, Type objectType)\r\n   at Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter.WriteObject(TextWriter writer, Object value)\r\n   at Microsoft.AspNetCore.Mvc.Formatters.JsonOutputFormatter.\u003cWriteResponseBodyAsync\u003ed__11.MoveNext()\r\n```\r\n\r\n```\r\n2021-04-12 12:50:52.288 +01:00 [WRN] The response has already started, the error page middleware will not be executed.\r\n```\r\n\r\n\u003c/details\u003e\r\n\r\nIn order to be able to deal with unexpected exceptions during serialization right now, I have to pre-serialize the response object to JSON before returning it in a `ContentResult`:\r\n\r\n```c#\r\nreturn Content(JsonHelper.Serialize(response).ToString(), \"application/json\");\r\n```\r\n\r\n This sidesteps using the built-in output formatting in ASP.NET Core, which isn\u0027t ideal from a dev perspective.\r\n\r\nI think this is a good workaround for now, but I think the right solution would be to add buffering, possibly. In this instance, I know I\u0027ll be sacrificing response writing performance (and extra memory usage) for correctness, and I\u0027m ok with that.\r\n\r\nI could just avoid having any `IEnumerable\u003cT\u003e` in my response objects and ensure everything is fully-enumerated into `List\u003cT\u003e` or something, however any dev mistake here would still cause the issue of a response being truncated mid-content while keeping 200 OK. Some people apparently experienced this issue if they had reference loops in their response objects for example: https://stackoverflow.com/questions/47419907/net-core-incomplete-json-response",
                                           "updatedAt":  "2021-04-13T14:44:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85KP-ej",
                                           "createdAt":  "2022-09-13T17:09:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-09-13T17:09:29Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Response buffering",
        "labels":  [
                       "enhancement",
                       "severity-minor",
                       "affected-medium",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/28366",
        "createdAt":  "2020-11-19T06:11:46Z",
        "number":  28366,
        "author":  "markholst",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-28T14:08:28Z",
        "body":  "### Describe the bug\r\nSerious performance issues when reading binary values, when using SQL Server Distributed Cache extension.\r\n\r\n### To Reproduce\r\nUsing SQL Server Distributed Cache, persist a value with an arbitrary value of 15MB.\r\nAccess the data using the async read operations.  Note this takes approximately 15 seconds in our environment.\r\n\r\n### Expected behavior\r\nThis should take milliseconds.\r\n\r\n### Additional context\r\nI suspect this is caused by an open SQL Client bug mentioned below.  Can you please verify if this is the case?  Is there a work-around that can be implemented in DatabaseOperations until this is resolved?\r\n\r\nhttps://github.com/dotnet/extensions/blob/master/src/Caching/SqlServer/src/DatabaseOperations.cs, line 229\r\nvalue = reader.GetFieldValue\u003cbyte[]\u003e(Columns.Indexes.CacheItemValueIndex);\r\n\r\nReading binary data asynchronously is extremely slow\r\nhttps://github.com/dotnet/SqlClient/issues/593\r\n\r\nIt looks like the SqlClient team are suggesting people use the StreamAsync operation as a work-around?\r\n\r\nOne reasonably successful work-around we have tried is to increase the TDS Packet Size up to 32,767.  What are your thoughts on this?\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLAIWqw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMDE5Mjc0NA==",
                                           "createdAt":  "2020-11-19T07:46:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markholst",
                                           "body":  "Actually, I\u0027ve changed our implementation over to use the synchronous Get method.  The more I thought about it, the more I realised this is a serious issue for scalability.\r\n\r\nIt doesn\u0027t need to be a large value being cached either, even responses of up to 1MB were enough to cause problems.\r\n\r\nUsing the asynchronous Get method allocates so much memory for a simple call, it wouldn\u0027t take many concurrent requests to take a system down.  The numbers in the related article suggest 13GB of memory was churned to service a 20MB request.  Yikes!\r\n\r\nGiven this is a front-end caching solution for ASP.NET Core based API and web applications, this can put an ASP.NET Core site at significant risk of a denial-of-service style attack.\r\n\r\nUsing the synchronous get method brings it down to \u003c 1sec for a cache read operation.",
                                           "updatedAt":  "2020-11-19T07:47:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMTQ0NDMzMg==",
                                           "createdAt":  "2020-11-20T22:42:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "\u003e The numbers in the related article suggest 13GB of memory was churned to service a 20MB request. Yikes!\r\n\r\nAssuming you\u0027re referring to [this](https://github.com/dotnet/SqlClient/issues/593#issuecomment-639801525) comment, this is only for Full framework it looks like. In a .NET Core app you\u0027ll get the lower 30MB allocations.\r\n\r\nIt looks like SQLClient should fix the issue and we could consider looking into SteamAsync in the meantime.",
                                           "updatedAt":  "2020-11-20T22:42:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjY5MzUyNA==",
                                           "createdAt":  "2020-11-24T06:54:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markholst",
                                           "body":  "Thanks @BrennanConroy, I have re-read and reached the same conclusion.\r\n\r\nI think if the SqlClient team are going to take a long time, I\u0027d suggest using the synchronous routines, as they\u0027re considerably faster!",
                                           "updatedAt":  "2020-11-24T06:54:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczODMzNDM3OQ==",
                                           "createdAt":  "2020-12-03T21:36:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-12-03T21:36:52Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "SQL Server Distributed Cache Extensions suffering significant performance issues",
        "labels":  [
                       "feature-caching",
                       "area-middleware",
                       "help candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/41948",
        "createdAt":  "2021-02-05T19:10:40Z",
        "number":  41948,
        "author":  "udlose",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-HBtg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adamcroissant",
                                            "createdAt":  "2021-02-05T20:41:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "brycebartley",
                                            "createdAt":  "2021-02-05T21:11:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eraffel-MDSol",
                                            "createdAt":  "2021-02-17T13:22:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "udlose",
                                            "createdAt":  "2021-03-22T17:53:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mleybsage",
                                            "createdAt":  "2021-04-26T14:50:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ecs-jnguyen",
                                            "createdAt":  "2021-06-29T17:21:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Broderick890",
                                            "createdAt":  "2022-03-11T02:17:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pranavacharya",
                                            "createdAt":  "2022-05-26T18:38:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "halter73",
                                            "createdAt":  "2022-06-10T20:39:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dracchini",
                                            "createdAt":  "2022-07-08T13:59:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bg-ptran",
                                            "createdAt":  "2022-07-11T19:52:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "personball",
                                            "createdAt":  "2022-11-18T10:01:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "knautilus",
                                            "createdAt":  "2023-03-24T09:47:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mindex-Brandon-Key",
                                            "createdAt":  "2024-07-02T13:16:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bartpio",
                                            "createdAt":  "2024-09-28T07:43:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Hawxy",
                                            "createdAt":  "2025-01-14T02:51:11Z"
                                        }
                                    ],
                          "totalCount":  16
                      },
        "updatedAt":  "2024-09-28T07:43:17Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\nI\u0027d like to be able to specify the usage of a Replica or Slave endpoint instead of always going to the Master.  This would allow me to offload traffic for read-only cache operations where the latest data is not critical resulting in improved performance.\r\n\r\nCurrently, the `StackExchange.Redis.IDatabase` API allows for this by use of optional [`StackExchange.Redis.CommandFlag` enum](https://github.com/StackExchange/StackExchange.Redis/blob/8612fb8a9278822c87d5476819325a7438e596ca/src/StackExchange.Redis/Enums/CommandFlags.cs#L47) that can be specified in API calls.  However, the implementation of `Microsoft.Extensions.Caching.StackExchangeRedis.RedisCache` doesn\u0027t provide these optional params to be passed thru.\r\n\r\n### Describe the solution you\u0027d like\r\nI would like for the implementation of `Microsoft.Extensions.Caching.StackExchangeRedis.RedisCache` to provide the ability to pass a flag that allows me to specify replica usage (master, slave, replica, etc.).  You would probably need to create a new interface to expose this which `Microsoft.Extensions.Caching.StackExchangeRedis.RedisCache` would implement e.g. `IDistributedRedisCache`.\r\n\r\n### Describe alternatives you\u0027ve considered\r\nUsing `StackExchange.Redis.IDatabase` directly instead of Microsoft\u0027s `IDistributedCache` wrapper.  Unfortunately, it would be a lot of work to change for our applications and we do prefer the `IDistributedCache` wrapper in general.  We also use this with [Polly](https://github.com/App-vNext/Polly) for caching and Polly provides a nice integration with `IDistributedCache` already.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjeReAA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExNDI2NDkwMDU=",
                                           "createdAt":  "2021-03-22T17:21:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-03-22T17:21:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExNDI2NDkwMDk=",
                                           "createdAt":  "2021-03-22T17:50:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "udlose",
                                           "body":  "I don\u0027t have write permissions but ill tag the lead for the area: @ericstj , @eerhardt ",
                                           "updatedAt":  "2021-03-22T17:53:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExNDI2NDkwMTU=",
                                           "createdAt":  "2021-03-22T18:16:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan, @michaelgsharp\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is your feature request related to a problem? Please describe.\r\nI\u0027d like to be able to specify the usage of a Replica or Slave endpoint instead of always going to the Master.  This would allow me to offload traffic for read-only cache operations where the latest data is not critical resulting in improved performance.\r\n\r\nCurrently, the `StackExchange.Redis.IDatabase` API allows for this by use of optional [`StackExchange.Redis.CommandFlag` enum](https://github.com/StackExchange/StackExchange.Redis/blob/8612fb8a9278822c87d5476819325a7438e596ca/src/StackExchange.Redis/Enums/CommandFlags.cs#L47) that can be specified in API calls.  However, the implementation of `Microsoft.Extensions.Caching.StackExchangeRedis.RedisCache` doesn\u0027t provide these optional params to be passed thru.\r\n\r\n### Describe the solution you\u0027d like\r\nI would like for the implementation of IDistributedCache to provide the ability to pass a flag that allows me to specify replica usage (master, slave, replica, etc.)\r\n\r\n### Describe alternatives you\u0027ve considered\r\nUsing `StackExchange.Redis.IDatabase` directly instead of Microsoft\u0027s `IDistributedCache` wrapper.  Unfortunately, it would be a lot of work to change for our applications and we do prefer the `IDistributedCache` wrapper in general.  We also use this with [Polly](https://github.com/App-vNext/Polly) for caching and Polly provides a nice integration with `IDistributedCache` already.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eudlose\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Caching`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-22T18:16:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85EG3C6",
                                           "createdAt":  "2022-05-26T20:36:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pranavacharya",
                                           "body":  "Can adding support for an extra optional parameters to IDistributedCache interface\u0027s methods solve this ?",
                                           "updatedAt":  "2022-05-26T20:36:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85EG4LW",
                                           "createdAt":  "2022-05-31T21:24:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "`IDistributedCache` wouldnt be getting Redis or StackExchange related logic in. Transferring to aspnetcore repo to carry conversation forward.",
                                           "updatedAt":  "2022-05-31T21:24:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85EbRoJ",
                                           "createdAt":  "2022-06-06T22:33:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "@udlose Can you share more about why you need this? It seems strange to modify the interface to support implementation-specific parameters.",
                                           "updatedAt":  "2022-06-06T22:33:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Ekt9w",
                                           "createdAt":  "2022-06-08T22:28:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Hi @udlose. We have added the \"Needs: Author Feedback\" label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
                                           "updatedAt":  "2022-06-08T22:28:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Eojt3",
                                           "createdAt":  "2022-06-09T18:50:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "udlose",
                                           "body":  "@adityamandaleeka, @maryamariyan  - perhaps the confusion is that I misspoke by asking that the implementation-agnostic interface of `IDistributedCache` be modified to include implementation-specific parameters pertaining to `[StackExchange.Redis.CommandFlag]`(https://github.com/StackExchange/StackExchange.Redis/blob/8612fb8a9278822c87d5476819325a7438e596ca/src/StackExchange.Redis/Enums/CommandFlags.cs#L47).\r\n\r\nI\u0027ve updated the title and feature request details to help clarify.\r\n\r\nTo rephrase, for performance reasons, I\u0027d like to be able to specify whether my Redis API call is sent to a Replica, Slave, or Master instance.  As I mention, the `Microsoft.Extensions.Caching.StackExchangeRedis.RedisCache` implementation doesn\u0027t allow for specifying these valuable params. So at a minimum, I think that ability should be added.  It would at least give users the ability to create an interface (e.g. `IDistributedRedisCache`) that exposes those params on the API interface.  Though I\u0027d argue that the `IDistributedRedisCache` interface should be implemented in the `Microsoft.Extensions.Caching.StackExchangeRedis` nuget and not place the responsibility on devs to have to create the interface.  IMO, an API should be able to be consumed without additional work on behalf of the API consumer.\r\n\r\nI am just throwing out an idea of what the implementation might look like. If you have an alternative that your more amenable to but still provides the ability to specify the `[StackExchange.Redis.CommandFlag]`, I\u0027d be happy just the same.\r\n\r\nPlease let me know if you have any more questions as I\u0027d really like to see this added.  It seems important from a performance perspective.",
                                           "updatedAt":  "2022-06-09T19:06:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85EtQqh",
                                           "createdAt":  "2022-06-10T20:29:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "Thanks @udlose. Adding this to the RedisCache implementation seems reasonable.\r\n\r\nWe don\u0027t want to create another new interface but as you mentioned, users can create that if they want it.",
                                           "updatedAt":  "2022-06-10T20:29:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85EtR6I",
                                           "createdAt":  "2022-06-10T20:36:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "We\u0027d take a contribution to add this if you\u0027re interested. Feel free to copy/paste the [issue template](https://github.com/dotnet/aspnetcore/issues/new?assignees=\u0026labels=api-suggestion\u0026template=30_api_proposal.md\u0026title=) here into a comment on this issue and we will review it.",
                                           "updatedAt":  "2022-06-10T20:36:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85EtR7x",
                                           "createdAt":  "2022-06-10T20:36:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-06-10T20:36:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85E85h4",
                                           "createdAt":  "2022-06-15T18:52:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "udlose",
                                           "body":  "\u003e Thanks @udlose. Adding this to the RedisCache implementation seems reasonable.\r\n\u003e \r\n\u003e We don\u0027t want to create another new interface but as you mentioned, users can create that if they want it.\r\n\r\n@adityamandaleeka  why are you not open to adding this interface to the `Microsoft.Extensions.Caching.StackExchangeRedis` nuget?",
                                           "updatedAt":  "2022-06-15T18:52:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85E9pG2",
                                           "createdAt":  "2022-06-15T22:23:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "To clarify, we are open to updating `Microsoft.Extensions.Caching.StackExchangeRedis.RedisCache` with the added parameter. The thing we don\u0027t think is useful is creating and consuming another new interface like IDistributedRedisCache.",
                                           "updatedAt":  "2022-06-15T22:23:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85HX3yr",
                                           "createdAt":  "2022-07-27T22:31:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "udlose",
                                           "body":  "@adityamandaleeka, @maryamariyan so I\u0027m working on submitting a PR for this change and I have a question.  I\u0027m making changes as follows to `Microsoft.Extensions.Caching.StackExchangeRedis.RedisCache`:\r\n\r\n```\r\n// THE METHOD BELOW IS EXISTING\r\n    /// \u003cinheritdoc /\u003e\r\n    public byte[]? Get(string key)\r\n    {\r\n        if (key == null)\r\n        {\r\n            throw new ArgumentNullException(nameof(key));\r\n        }\r\n\r\n        return GetAndRefresh(key, getData: true);\r\n    }\r\n\r\n// THE METHOD BELOW IS NEW\r\n    /// \u003cinheritdoc /\u003e\r\n    public byte[]? Get(string key, CommandFlags commandFlags)\r\n    {\r\n        if (key == null)\r\n        {\r\n            throw new ArgumentNullException(nameof(key));\r\n        }\r\n\r\n        return GetAndRefresh(key, getData: true, commandFlags: commandFlags);\r\n    }\r\n\r\n// THE METHOD BELOW IS EXISTING\r\n    /// \u003cinheritdoc /\u003e\r\n    public async Task\u003cbyte[]?\u003e GetAsync(string key, CancellationToken token = default(CancellationToken), CommandFlags commandFlags = CommandFlags.None)\r\n    {\r\n        //code elided\r\n    }\r\n```\r\n\r\nWhen I add my default params, to the end of the `GetAsync` method (so that I do not violate `RS0027` (https://github.com/dotnet/roslyn/blob/main/docs/Adding%20Optional%20Parameters%20in%20Public%20API.md), I get a CompilerError: [CS 1068 (CancellationToken parameters must come last)](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1068).  \r\n\r\nIf I have the new `CommandFlag` param before the optional `CancellationToken` param to satisfy CA1068, I violate binary compatibility and `RS0027`.  I don\u0027t want to break binary compatibility but I don\u0027t like ignoring compiler warnings either. \r\n\r\nWhat are your suggestions?\r\n",
                                           "updatedAt":  "2022-07-28T15:32:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85HX5zr",
                                           "createdAt":  "2022-07-27T22:39:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "udlose",
                                           "body":  "Actually it looks as if I won\u0027t be able to add the `CommandFlags` param to this signature because it then no longer implements the `IDistributedCache` signature of:\r\n\r\n`    public async Task\u003cbyte[]?\u003e GetAsync(string key, CancellationToken token = default(CancellationToken))`\r\n\r\nIf I add another signature to not break the `IDistributedCache` contract, I then break [RS0027 - Adding optional parameters to public methods](https://github.com/dotnet/roslyn/blob/main/docs/Adding%20Optional%20Parameters%20in%20Public%20API.md)\r\n\r\n`    public async Task\u003cbyte[]?\u003e GetAsync(string key, CommandFlags commandFlags, CancellationToken token)`\r\n\r\nNot sure where to go from here.\r\n",
                                           "updatedAt":  "2022-11-08T16:57:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85N71kS",
                                           "createdAt":  "2022-11-08T16:59:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "udlose",
                                           "body":  "@adityamandaleeka @maryamariyan any updates or suggestions on how to proceed? (see above comment)",
                                           "updatedAt":  "2022-11-08T16:59:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85x_OxR",
                                           "createdAt":  "2024-01-26T17:12:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODoDf7Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mindex-Brandon-Key",
                                                                               "createdAt":  "2024-07-02T13:19:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "peterdrier",
                                           "body":  "If I understand this right, since the IDistributedCache is using the IConnectionMultiplexer directly..  Perhaps a way forward would be to configure (or likely add a config option to ...) SE.Redis to PreferReplica on read operations when the multiplexer is created initially.   \r\n\r\nAnd/or adding a parameter to the RedisCacheOptions passed into AddStackExchangeRedisCache, specifying PreferReplica on reads.. \r\n\r\nThat way IDistributedCache\u0027s interface is none the wiser, but the underlying implementation can direct reads/writes appropriately.  \r\n\r\nCould that work? ",
                                           "updatedAt":  "2024-01-26T17:12:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85yNE9w",
                                           "createdAt":  "2024-01-30T03:59:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODoDf5A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mindex-Brandon-Key",
                                                                               "createdAt":  "2024-07-02T13:19:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "udlose",
                                           "body":  "\u003e If I understand this right, since the IDistributedCache is using the IConnectionMultiplexer directly.. Perhaps a way forward would be to configure (or likely add a config option to ...) SE.Redis to PreferReplica on read operations when the multiplexer is created initially.\r\n\u003e \r\n\u003e And/or adding a parameter to the RedisCacheOptions passed into AddStackExchangeRedisCache, specifying PreferReplica on reads..\r\n\u003e \r\n\u003e That way IDistributedCache\u0027s interface is none the wiser, but the underlying implementation can direct reads/writes appropriately.\r\n\u003e \r\n\u003e Could that work?\r\n\r\nAt a minimum,  that would provide at least some way to customize the behavior. It would be nice to be able to have flexibility to change behavior via API parameterss as the StackExchangeRedis API\u0027s have.",
                                           "updatedAt":  "2024-01-30T03:59:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85yNI-D",
                                           "createdAt":  "2024-01-30T04:20:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "You can\u0027t change the interface (it\u0027s a breaking change), you also can\u0027t add redis specific APIs to the  base interface, it would break the abstraction. It seems like you want a redis interface, IDistributedCache isn\u0027t it.",
                                           "updatedAt":  "2024-01-30T04:20:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85zK1NP",
                                           "createdAt":  "2024-02-07T14:55:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "peterdrier",
                                           "body":  "\u003e You can\u0027t change the interface (it\u0027s a breaking change), you also can\u0027t add redis specific APIs to the base interface, it would break the abstraction. It seems like you want a redis interface, IDistributedCache isn\u0027t it.\r\n\r\nNot sure which \"You\" that you\u0027re replying to here, so your message is ambiguous.  ",
                                           "updatedAt":  "2024-02-07T14:55:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85zLKHN",
                                           "createdAt":  "2024-02-07T15:35:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODokb7Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "udlose",
                                                                               "createdAt":  "2024-07-05T22:27:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "My bad, I was looking referring to [this comment](https://github.com/dotnet/aspnetcore/issues/41948#issuecomment-1197448427). My read of the issue is that we\u0027re trying to flow a per call (Get/Set) flag from IDistributedCache to the underlying redis implementation and that breaks the abstraction.\r\n\r\nIt seems like there\u0027s a desire for a more lightweight redis specific interface.\r\n\r\n",
                                           "updatedAt":  "2024-02-07T15:35:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85zLLFo",
                                           "createdAt":  "2024-02-07T15:37:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODzmMLw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alex-tselikovsky",
                                                                               "createdAt":  "2024-09-25T19:41:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rwasef1830",
                                           "body":  "There\u0027s an awkward workaround to use the factory option of redis distributed cache implementation to return a decorated connection multiplexer that returns decorated redis clients that can then take hints from the key name and set the appropriate flag...\r\n\r\nAwkward and tedious but would work.",
                                           "updatedAt":  "2024-02-07T15:37:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86DUmXM",
                                           "createdAt":  "2024-07-02T13:46:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhAN-A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "acasciani",
                                                                               "createdAt":  "2024-07-02T14:12:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alex-tselikovsky",
                                                                               "createdAt":  "2024-09-25T19:26:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ahilsend",
                                                                               "createdAt":  "2025-09-05T04:40:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "Mindex-Brandon-Key",
                                           "body":  "This is also causing us grief. All traffic is going to the writer and no load is able to go to the read replicas. \r\nInstead of modifying the interface, what if the CommandFlags are passed in the options during registration, then used by the RedisCache implementation?\r\n\r\nIn `RedisCacheOptions.cs` add `public CommandFlags ReadCommandFlags { get; set; }`.\r\nIn `RedisCache.GetAndRefresh` and  `RedisCache.GetAndRefreshAsync` add `_options.ReadCommandFlags` to the `cache.HashGet` call. \r\n\r\nThe scope should be pretty small. Existing uses won\u0027t be impacted - the default CommandFlags value is None, matching the HashGet\u0027s default value. Users that want to use read replicas can set `RedisCacheOptions.ReadCommandFlags = CommandFlags.PreferReplica`.",
                                           "updatedAt":  "2024-07-02T13:46:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86DVG9p",
                                           "createdAt":  "2024-07-02T14:17:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "acasciani",
                                           "body":  "This is a pain point for us as well. The changes that @Mindex-Brandon-Key suggested would fit our use case as well.",
                                           "updatedAt":  "2024-07-02T14:17:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86DVO8L",
                                           "createdAt":  "2024-07-02T14:32:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Mindex-Brandon-Key",
                                           "body":  "I just found https://github.com/dotnet/aspnetcore/issues/28375 which seems to echo the missing behavior",
                                           "updatedAt":  "2024-07-02T14:32:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86N5F4A",
                                           "createdAt":  "2024-09-28T07:43:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartpio",
                                           "body":  "Here\u0027s a [transitional approach](https://www.nuget.org/packages/StackExchangeRedisCache.Contrib/#readme-body-tab) I put together that takes advantage of the framework allowing us to supply a custom connection multiplexer, that in turn supplies `IDatabase` instances, which can be wrapped to customize `CommandFlags`.",
                                           "updatedAt":  "2024-09-28T07:43:16Z"
                                       }
                                   ],
                         "totalCount":  26
                     },
        "title":  "Add ability to leverage StackExchange.Redis.CommandFlags via IDistributedCache or IDistributedRedisCache (new)",
        "labels":  [
                       "Needs: Design",
                       "enhancement",
                       "feature-caching",
                       "area-middleware",
                       "help candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/29978",
        "createdAt":  "2021-02-08T10:21:45Z",
        "number":  29978,
        "author":  "markvincze",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-06-02T03:14:56Z",
        "body":  "### Description\r\n\r\nI would like to enable Response Caching with the `ResponseCachingMiddleware` for some specific non-`200` responses. I would specifically need this for `404` responses, but I could imagine scenarios where this would be useful for some other status codes as well, such as `204`, `301`, `303`.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nIt would be great if this could be enabled with configuration via `ResponseCachingOptions`, for example if it contained a property like this:\r\n\r\n```\r\npublic List\u003cHttpStatusCodes\u003e EnabledStatusCodes { get; } = new List\u003cHttpStatusCodes\u003e { HttpStatusCode.OK };\r\n```\r\n\r\nWhich would be consistent with the current behavior, and it could be adjusted when registering it in the `Startup`:\r\n\r\n```\r\nservices.AddResponseCaching(opts =\u003e\r\n{\r\n    opts.EnabledStatusCodes.Add(HttpStatusCode.NotFound)\r\n});\r\n```\r\n\r\nBut I\u0027m okay with any other kind of solution too.\r\n\r\n### Additional context\r\n\r\nI hope I\u0027m not missing anything related to this, and this is indeed not possible right now, I\u0027m seeing this in the docs: https://docs.microsoft.com/en-us/aspnet/core/performance/caching/middleware?view=aspnetcore-5.0#conditions-for-caching, and in the code: https://github.com/dotnet/aspnetcore/blob/main/src/Middleware/ResponseCaching/src/ResponseCachingPolicyProvider.cs#L117",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLjlPyg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NTUwNzkxNA==",
                                           "createdAt":  "2021-02-08T22:32:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-02-08T22:32:05Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Use Response Caching for non-200 status codes",
        "labels":  [
                       "enhancement",
                       "feature-response-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/31943",
        "createdAt":  "2021-04-19T19:23:11Z",
        "number":  31943,
        "author":  "jkotalik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-24T23:42:37Z",
        "body":  "https://github.com/dotnet/aspnetcore/pull/31816/files/a1364581f97f8a40e9baa0bbc9df6b99a8ed1fb2#diff-3b357eaf0c7f9256d16a88eb586e2bdb41cfff3a16989d9439d778c6ec0bc50aR15",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR1-58A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMzYwNzE5NA==",
                                           "createdAt":  "2021-04-20T21:20:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\nWe\u0027re moving this issue to the `Next sprint planning` milestone for future evaluation / consideration. Because it\u0027s not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-04-20T21:20:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde842FupM",
                                           "createdAt":  "2021-08-27T20:56:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-08-27T20:56:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85HX7nw",
                                           "createdAt":  "2022-07-27T22:49:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-07-27T22:49:34Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Add DecoderFallback for invalid/unrecognized characeters in HttpLogging Middleware",
        "labels":  [
                       "severity-minor",
                       "area-networking",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/31944",
        "createdAt":  "2021-04-19T19:31:18Z",
        "number":  31944,
        "author":  "jkotalik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-24T23:42:39Z",
        "body":  "https://github.com/dotnet/aspnetcore/pull/31816/files#diff-b66c674ede53f3dab72344fe4d48b6e8238ab71c629aa2e4b3a3822dd57493f7R64",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONhbo8A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNDMyODAyNA==",
                                           "createdAt":  "2021-04-21T20:12:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JunTaoLuo",
                                           "body":  "I\u0027ll volunteer to a look at this in preview5 since I missed part of the planning meeting.",
                                           "updatedAt":  "2021-04-21T20:12:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NTA2NDM4OA==",
                                           "createdAt":  "2021-07-06T20:36:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `Next sprint planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-07-06T20:36:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NTA2NDUyMw==",
                                           "createdAt":  "2021-07-06T20:36:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JunTaoLuo",
                                           "body":  "Unlikely to get to this, let\u0027s review in planning.",
                                           "updatedAt":  "2021-07-06T20:36:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde842Fujw",
                                           "createdAt":  "2021-08-27T20:55:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-08-27T20:55:30Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Don\u0027t always buffer if we have an invalid Encoding in HttpLogging middleware",
        "labels":  [
                       "Perf",
                       "area-networking",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/32033",
        "createdAt":  "2021-04-21T20:03:18Z",
        "number":  32033,
        "author":  "JunTaoLuo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-14T20:21:22Z",
        "body":  "This is part of the Epic: https://github.com/dotnet/aspnetcore/issues/27464\r\n\r\nThis issue tracks the adoption of the resource limit APIs in Kestrel which consists of:\r\n\r\n- Existing limits\r\n  - Min Data rates\r\n- New limits\r\n  - Rate limits for settings frames https://github.com/dotnet/aspnetcore/issues/7828\r\n  - Concurrency and rate limits for connections",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSlZCCQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NTA2NjY3OA==",
                                           "createdAt":  "2021-07-06T20:40:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-07-06T20:40:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85KVkIJ",
                                           "createdAt":  "2022-09-14T18:44:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-09-14T18:44:57Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Use resource limits in Kestrel",
        "labels":  [
                       "enhancement",
                       "feature-kestrel",
                       "feature-rate-limit",
                       "area-networking",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/32039",
        "createdAt":  "2021-04-21T21:54:54Z",
        "number":  32039,
        "author":  "JunTaoLuo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-02T00:19:53Z",
        "body":  "Part of Epic: https://github.com/dotnet/aspnetcore/issues/27464.\r\n\r\nThis issue tracks identifying places in the BCL that can benefit from resource limits for example:\r\n- Pipelines\r\n- Channels\r\n-  Streams\r\n- HttpClient",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSnor7Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NTA2NjQ5Mw==",
                                           "createdAt":  "2021-07-06T20:40:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-07-06T20:40:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Keivt",
                                           "createdAt":  "2022-09-16T15:44:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-09-16T15:44:16Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Usage of resource limit APIs in BCL",
        "labels":  [
                       "External",
                       "enhancement",
                       "feature-rate-limit",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/32246",
        "createdAt":  "2021-04-28T18:07:29Z",
        "number":  32246,
        "author":  "Tratcher",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCxV4HQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lavilaso",
                                            "createdAt":  "2022-06-27T04:16:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2023-07-17T05:12:58Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-02-14T20:24:10Z",
        "body":  "Some developers will only add the http logging middleware temporarily for debugging. In that case we want it to be easy to log all request fields, headers, etc. with minimal config.\r\n\r\nThe current design requires the developer to list specific header names to log unredacted. We should add a `bool DangerousSkipHeaderRedaction { get; set; }` for the quick debugging scenario.\r\n\r\nWe should also add a UseRequestLogging overload that directly accepts options so it can be enabled with a single code block sample. This also allows logging to be added to the pipeline multiple times to observe the effects middleware like UseForwardedHeaders have on the request.\r\n\r\n```\r\napp.UseRequestLogging(options =\u003e \r\n{\r\n options.Fields = HttpLoggingOptions.AllFieldsAndHeaders; \r\n options.DangerousSkipHeaderRedaction = true; \r\n});\r\n```\r\n\r\nHere\u0027s an example from our docs that could be replaced by this:\r\nhttps://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/proxy-load-balancer?view=aspnetcore-5.0#troubleshoot",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMWXARw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyODc1MTk0Mw==",
                                           "createdAt":  "2021-04-28T20:21:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `Next sprint planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-04-28T20:21:43Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "HttpLoggingMiddleware for quick debugging",
        "labels":  [
                       "api-suggestion",
                       "area-networking",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/32247",
        "createdAt":  "2021-04-28T18:12:49Z",
        "number":  32247,
        "author":  "Tratcher",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCB3dwg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "paleocomburo",
                                            "createdAt":  "2021-11-09T22:21:19Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-03-02T00:43:42Z",
        "body":  "HttpLoggingMiddleware will log headers, properties (method, path, query, etc.), and body. However it will not log any information about the connection (Remote IP, local IP, ports, client certificate, TLS version, etc.).\r\n\r\nHere\u0027s an example from our docs where the remote IP is relevant in the request logs:\r\nhttps://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/proxy-load-balancer?view=aspnetcore-5.0#troubleshoot\r\n\r\nWhich fields should we make available to log, and what granularity should we provide in the enum to enable them?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOU-BiWA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyODc1NjMxMg==",
                                           "createdAt":  "2021-04-28T20:29:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-04-28T20:29:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyODc1NjgyOQ==",
                                           "createdAt":  "2021-04-28T20:29:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "Triage: This will be possible with some upcoming work, question is do we want this to be a first-class feature\r\nBacklogging to see if there are customer asks for it.",
                                           "updatedAt":  "2021-04-28T20:29:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDUyODU5NQ==",
                                           "createdAt":  "2021-06-04T09:27:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kahbazi",
                                           "body":  "+1 on logging remote IP in `HttpLoggingMiddleware`. \r\n\r\nAlso could there be a shared feature between this middleware and Forwarded header middleware so we could have both remote IP and the end-user client IP?",
                                           "updatedAt":  "2021-06-04T09:27:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NTAwOTkyNA==",
                                           "createdAt":  "2021-06-04T21:32:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "\u003e +1 on logging remote IP in `HttpLoggingMiddleware`.\r\n\u003e \r\n\u003e Also could there be a shared feature between this middleware and Forwarded header middleware so we could have both remote IP and the end-user client IP?\r\n\r\nDepending on the ordering, one of those values will be available in the headers.\r\n\r\nI do still want to re-do the forwarded headers middleware to store the original values in a feature, but that\u0027s out of scope here for now.",
                                           "updatedAt":  "2021-06-04T21:32:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85T4GJY",
                                           "createdAt":  "2023-01-28T00:20:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-01-28T00:20:38Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "HttpLoggingMiddleware log connection properties",
        "labels":  [
                       "feature-diagnostics",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/32976",
        "createdAt":  "2021-05-06T12:06:18Z",
        "number":  32976,
        "author":  "chrisckc",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-28T23:09:55Z",
        "body":  "### Describe the bug\r\nWhen using `AddDatabaseDeveloperPageExceptionFilter()` a Database error should result in the  \"DatabaseErrorPage\" being rendered, however in a configuration where the DbContext is in a different assembly which is not currently loaded, the DatabaseDeveloperPageExceptionFilter throws it\u0027s own exception and blank page is rendered with a 500 status code.\r\n\r\n```\r\nfail: Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware[1]\r\n      An unhandled exception has occurred while executing the request.\r\n      Npgsql.PostgresException (0x80004005): .........\r\n\r\nfail: Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseDeveloperPageExceptionFilter[7]\r\n      An exception occurred while calculating the database error page content. Skipping display of the database error page.\r\n      System.IO.FileNotFoundException: Could not load file or assembly \u0027\u003cname of migrations assembly\u003e, Culture=neutral, PublicKeyToken=null\u0027. The system cannot find the file specified.\r\n```\r\n\r\nThe exception occurs here when attempting to get the service from the assembly:\r\nhttps://github.com/dotnet/aspnetcore/blob/e6998cb7bb7aba3b803fe8ed2622a090f3fa0fc1/src/Middleware/Diagnostics.EntityFrameworkCore/src/HttpContextDatabaseContextDetailsExtensions.cs#L47\r\n\r\n### To Reproduce\r\nYou need a solution which has a separate project containing the DbContext which is shared by more than 1 other project.\r\n\r\nWhen the DbContext is in a separate project, a migrations assembly needs to be specified, so for example,  one of the projects will need to be designated as the one from which migrations are performed, so this will need this to be specified in the project\u0027s AddDbContext options:\r\n```\r\nservices.AddDbContext\u003cAppDataContext\u003e(options =\u003e\r\n                options.UseNpgsql(connectionString, npgsqlOptions =\u003e {\r\n                    npgsqlOptions.EnableRetryOnFailure();\r\n                    npgsqlOptions.MigrationsAssembly(\"\u003cname of current assembly\");\r\n                }));\r\n```\r\n\r\nAs there can only be a single copy of the Migrations directory which will live inside one of the projects, the MigrationsAssembly name that is specified will have to be the same when the DbContext is used across other projects.\r\n\r\nThis is where the issue arises, if a database error occurs in a project which has the MigrationsAssembly set to a different project\u0027s assembly which is not a dependancy, it is not accessible as it\u0027s not loaded as part of the project.\r\n\r\nI quickly realised that the only reason the MigrationsAssembly was specified on the other project was due to copy and paste of the AddDbContext config, so I removed the MigrationsAssembly line as it was redundant in the other project, however this did not fully resolve the issue as although the DatabaseDeveloperPageExceptionFilter no longer throws an exception, a blank page is still produced with a 500 status code.\r\n\r\nThe DeveloperExceptionPageMiddleware is still kicking in and can be seen as the last entry in the log:\r\n\r\n```\r\nfail: Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware[1]\r\n      An unhandled exception has occurred while executing the request.\r\n      Npgsql.PostgresException (0x80004005): .........\r\n```\r\n\r\nThere could be another reason for this so I may have to do some more digging.\r\n\r\nThere would be no harm in wrapping `var migrationsAssembly = context.GetService\u003cIMigrationsAssembly\u003e();` in a try catch and handling the null scenario to avoid this error?\r\n\r\n\r\n### Further technical details\r\n- ASP.NET Core version\r\n5.0.202\r\n- Include the output of `dotnet --info`\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.202\r\n Commit:    db7cc87d51\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.15\r\n OS Platform: Darwin\r\n RID:         osx.10.15-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/5.0.202/\r\n\r\nHost (useful for support):\r\n  Version: 5.0.5\r\n  Commit:  2f740adc14\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONHfaUg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMzQ3NTI5Ng==",
                                           "createdAt":  "2021-05-06T12:15:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chrisckc",
                                           "body":  "Also note that the obsolete DatabaseErrorPageMiddleware:\r\nhttps://github.com/aspnet/Announcements/issues/432\r\n\r\nWorks fine for me and does not have this issue, regardless of the MigrationsAssembly setting.\r\n\r\n**Update:**\r\nActually, the DatabaseErrorPageMiddleware does fall over, but the DeveloperExceptionPageMiddleware takes over and shows the correct error, so the end result it that it works fine and shows a meaningful error.\r\n\r\n```\r\nfail: Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware[7]\r\n      An exception occurred while calculating the database error page content. Skipping display of the database error page.\r\n      System.IO.FileNotFoundException: Could not load file or assembly \u0027\u003cname of migrations assembly\u003e, Culture=neutral, PublicKeyToken=null\u0027. The system cannot find the file specified.\r\n\r\nfail: Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware[1]\r\n      An unhandled exception has occurred while executing the request.\r\n      Npgsql.PostgresException (0x80004005): ..........\r\n\r\n```\r\n\r\nNotice how the DatabaseErrorPageMiddleware is invoked before the DeveloperExceptionPageMiddleware which seems to be the correct way, unlike with the DatabaseDeveloperPageExceptionFilter which happens after the DeveloperExceptionPageMiddleware.\r\n",
                                           "updatedAt":  "2021-05-06T13:53:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMzQ3NjI1MQ==",
                                           "createdAt":  "2021-05-06T12:17:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chrisckc",
                                           "body":  "I mentioned it here in passing as I thought it might be related:\r\nhttps://github.com/dotnet/aspnetcore/issues/32076",
                                           "updatedAt":  "2021-05-06T12:17:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMzU0MzExOA==",
                                           "createdAt":  "2021-05-06T13:54:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chrisckc",
                                           "body":  "Update:\r\nI moved the migrations into the project where I have the DatabaseDeveloperPageExceptionFilter configured and set the MigrationsAssembly accordingly and then recreated the exact same same error conditions, this time it works fine.\r\n\r\nSo it seems that it\u0027s not possible to make use of the DatabaseDeveloperPageExceptionFilter in a project which does not handle migrations for a DbContext which is in a different assembly. The old DatabaseErrorPage middleware works fine in any case, so when Dotnet 6 comes out, if this isn\u0027t fixed by then I can just bring that over from 5.\r\n\r\nBtw. I notice this has been transferred to efcore repo, but I think it is actually related to AspNetCore as I originally posted it in because it is related to the way some AspNetCore middleware/filter is handling checks for outstanding migrations, its not an issue with migrations so not an issue with efcore?\r\n",
                                           "updatedAt":  "2021-05-06T13:58:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNjc0NjkwNw==",
                                           "createdAt":  "2021-05-10T14:08:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "@chrisckc We are surprised that this configuration ever worked with the database error page. Given that the error page is intended as an easy way for people to get started, this seems like a reasonable limitation to have from the EF side.\r\n\r\n@JunTaoLuo Any thoughts from the ASP.NET side?\r\n",
                                           "updatedAt":  "2021-05-10T14:08:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MzQ0NzcyNw==",
                                           "createdAt":  "2021-05-18T18:51:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndriySvyryd",
                                           "body":  "We don\u0027t think there\u0027s a reliable way of improving this experience from the EF Core side.",
                                           "updatedAt":  "2021-05-18T18:51:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NzMwNTI0NQ==",
                                           "createdAt":  "2021-05-24T20:13:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JunTaoLuo",
                                           "body":  "Hmm this seems like an issue we should address in aspnetcore",
                                           "updatedAt":  "2021-05-24T20:13:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MzM1ODA0Ng==",
                                           "createdAt":  "2021-06-02T20:22:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `Next sprint planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-06-02T20:22:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg4MDI2OTkwNg==",
                                           "createdAt":  "2021-07-14T23:13:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-07-14T23:13:16Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "DatabaseDeveloperPageExceptionFilter can be broken when DbContext is in a different assembly",
        "labels":  [
                       "feature-diagnostics",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/32857",
        "createdAt":  "2021-05-19T22:55:35Z",
        "number":  32857,
        "author":  "davidvedvick",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-06-02T03:16:42Z",
        "body":  "\u003c!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\n--\u003e\r\n\r\n### Is your feature request related to a problem? Please describe.\r\n\r\nI have begun using the Redis distributed cache implementation. I\u0027m wondering if there are some simple things that could be done to improve its performance.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nA couple of ideas spring to mind:\r\n\r\n1. Use the [FireAndForget](https://stackexchange.github.io/StackExchange.Redis/Basics.html#sync-vs-async-vs-fire-and-forget) option when performing write operations - since a cache doesn\u0027t often have the same consistency requirements as a typical datastore, it seems like setting EXPIRE/PEXPIRE, or even writing values, could use the `FireAndForget` command flag, and return sooner to the caller.\r\n2. Encapsulate read and write options in Lua scripts - rather than the above, encapsulate all the Redis commands that need to take place to cache an item (or get it and refresh the timeout) within Lua scripts. There\u0027s a nice example I came across in this [NHibernate cache](https://github.com/TheCloudlessSky/NHibernate.Caches.Redis/blob/master/src/NHibernate.Caches.Redis/RedisCache.cs#L34-L41) that could serve as inspiration.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMnBuIQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NDY1NjM0Nw==",
                                           "createdAt":  "2021-05-20T03:25:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidvedvick",
                                           "body":  "3. Possibly [Transactions](https://stackexchange.github.io/StackExchange.Redis/Transactions.html) as well or instead of one of the above?",
                                           "updatedAt":  "2021-05-20T03:25:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NjIyODk3NA==",
                                           "createdAt":  "2021-05-21T20:15:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "Do you have any performance numbers? It\u0027d be interesting to see if/how much the perf can be improved.\r\n\r\nWe aren\u0027t planning on making any changes in this area, but if you are willing to contribute changes with improved performance numbers we would be willing to review.",
                                           "updatedAt":  "2021-05-21T20:17:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NjIyOTAyNQ==",
                                           "createdAt":  "2021-05-21T20:15:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-05-21T20:15:37Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Performance Improvements for Redis cache",
        "labels":  [
                       "feature-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/34371",
        "createdAt":  "2021-07-15T06:35:13Z",
        "number":  34371,
        "author":  "fitdev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC0kT7w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KoalaBear84",
                                            "createdAt":  "2023-11-13T21:44:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "barronpm",
                                            "createdAt":  "2023-12-11T20:57:56Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-06-12T15:38:42Z",
        "body":  "It\u0027s been 3 years since #2774 was closed. However, as of DotNet 6 Preview 6 is still appears not to have been addressed. Since apparently you are adding Symlink support to BCL, can this be addressed perhaps via an option (`FollowSymLinks` property) in either `StaticFileOptions` or `PhysicalFileProvider`?\r\n\r\n### Additional context\r\nSee original issue: https://github.com/dotnet/aspnetcore/issues/2774",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgPIaSw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg4MDUwMTcyMA==",
                                           "createdAt":  "2021-07-15T08:26:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOByuOXQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adityamandaleeka",
                                                                               "createdAt":  "2021-07-15T21:19:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "So 2 things:\r\n- We need an option on StaticFileOptions (new API)\r\n- PhysicalFileProvider needs to support it (new API).\r\n\r\nGiven that, it\u0027s unlikely that we\u0027d add it for .NET 6 this late in the cycle. That said, if there was an API proposal and a pull request, that might change things 😄 ",
                                           "updatedAt":  "2021-07-15T08:26:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg4MTAyMDU5Ng==",
                                           "createdAt":  "2021-07-15T21:19:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-07-15T21:19:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg4MTAyMTE5Nw==",
                                           "createdAt":  "2021-07-15T21:20:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "Moved to backlog for now per @davidfowl\u0027s explanation.",
                                           "updatedAt":  "2021-07-15T21:20:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde8444UCa",
                                           "createdAt":  "2021-10-28T23:01:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Proposal: https://github.com/dotnet/aspnetcore/issues/5987",
                                           "updatedAt":  "2021-10-28T23:01:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde8444UXE",
                                           "createdAt":  "2021-10-28T23:04:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "cc @carlossanlop ",
                                           "updatedAt":  "2021-10-28T23:04:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Go0M8",
                                           "createdAt":  "2022-07-15T02:30:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lonix1",
                                           "body":  "When I reference a Razor Class Library using a symlink, it compiles without error, though at runtime it doesn\u0027t find or serve the library\u0027s pages. But if that library is referenced normally (not with a symlink) then it works perfectly.\r\n\r\nIs this the same underlying problem? (I didn\u0027t want to open a dupe issue.)",
                                           "updatedAt":  "2022-07-15T02:30:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86A5hRQ",
                                           "createdAt":  "2024-06-12T09:38:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fexxdev",
                                           "body":  "### Issue Description\r\n\r\nI\u0027m encountering an issue with Kestrel 8.0.1 (.NET 8.0.1) on macOS where serving static files from symlinks results in incomplete files being served. This problem does not occur on Windows. When you manually copy the files into the destination directory, they are served correctly, indicating the problem lies with how Kestrel handles symlinks on macOS.\r\n\r\n### Directory Structure and Code\r\n```\r\nmbp-fexxdev:timesheet fexxdev$ ls -lat\r\ntotal 0\r\ndrwxr-xr-x  14 fexxdev  staff  448 Jun 12 11:28 .\r\nlrwxr-xr-x   1 fexxdev  staff   96 Jun 12 11:15 styles.css.map -\u003e /Users/fexxdev/Desktop/Dev/Nebula/jarvis.automation.components/src/timesheet/dist/styles.css.map\r\nlrwxr-xr-x   1 fexxdev  staff   92 Jun 12 11:15 styles.css -\u003e /Users/fexxdev/Desktop/Dev/Nebula/jarvis.automation.components/src/timesheet/dist/styles.css\r\nlrwxr-xr-x   1 fexxdev  staff   98 Jun 12 11:15 polyfills.js.map -\u003e /Users/fexxdev/Desktop/Dev/Nebula/jarvis.automation.components/src/timesheet/dist/polyfills.js.map\r\nlrwxr-xr-x   1 fexxdev  staff   94 Jun 12 11:15 polyfills.js -\u003e /Users/fexxdev/Desktop/Dev/Nebula/jarvis.automation.components/src/timesheet/dist/polyfills.js\r\nlrwxr-xr-x   1 fexxdev  staff   87 Jun 12 11:15 media -\u003e /Users/fexxdev/Desktop/Dev/Nebula/jarvis.automation.components/src/timesheet/dist/media\r\nlrwxr-xr-x   1 fexxdev  staff   93 Jun 12 11:15 main.js.map -\u003e /Users/fexxdev/Desktop/Dev/Nebula/jarvis.automation.components/src/timesheet/dist/main.js.map\r\nlrwxr-xr-x   1 fexxdev  staff   89 Jun 12 11:15 main.js -\u003e /Users/fexxdev/Desktop/Dev/Nebula/jarvis.automation.components/src/timesheet/dist/main.js\r\nlrwxr-xr-x   1 fexxdev  staff   92 Jun 12 11:15 index.html -\u003e /Users/fexxdev/Desktop/Dev/Nebula/jarvis.automation.components/src/timesheet/dist/index.html\r\nlrwxr-xr-x   1 fexxdev  staff   93 Jun 12 11:15 favicon.ico -\u003e /Users/fexxdev/Desktop/Dev/Nebula/jarvis.automation.components/src/timesheet/dist/favicon.ico\r\nlrwxr-xr-x   1 fexxdev  staff  103 Jun 12 11:15 chunk-XSKKLE2R.js.map -\u003e /Users/fexxdev/Desktop/Dev/Nebula/jarvis.automation.components/src/timesheet/dist/chunk-XSKKLE2R.js.map\r\nlrwxr-xr-x   1 fexxdev  staff   99 Jun 12 11:15 chunk-XSKKLE2R.js -\u003e /Users/fexxdev/Desktop/Dev/Nebula/jarvis.automation.components/src/timesheet/dist/chunk-XSKKLE2R.js\r\nlrwxr-xr-x   1 fexxdev  staff   88 Jun 12 11:15 assets -\u003e /Users/fexxdev/Desktop/Dev/Nebula/jarvis.automation.components/src/timesheet/dist/assets\r\ndrwxr-xr-x@  4 fexxdev  staff  128 Jun 12 11:09 ..\r\nmbp-fexxdev:timesheet fexxdev$\r\n```\r\n\r\n### ASP.NET Core Startup Configuration:\r\n```\r\nif (Directory.Exists(ElsaServerOptions.StaticFilesLocation()))\r\n{\r\n    app.UseStaticFiles(new StaticFileOptions()\r\n    {\r\n        FileProvider = new PhysicalFileProvider(ElsaServerOptions.StaticFilesLocation()),\r\n        RequestPath = \"/static\"\r\n    });\r\n}\r\n```\r\n\r\n### Screenshots:\r\n\r\n**Incomplete index.html when server from symlink**\r\n\r\n![Screenshot 2024-06-12 at 11 28 46](https://github.com/dotnet/aspnetcore/assets/26311786/106988ae-5972-443a-966e-61d773979d40)\r\n\r\n**index.html correctly served after manual copy**\r\n\r\n```\r\ndrwxr-xr-x@  4 fexxdev  staff  128 Jun 12 11:09 ..\r\nmbp-fexxdev:timesheet fexxdev$ cp index.html index2.html\r\nmbp-fexxdev:timesheet fexxdev$ ls -lat\r\ntotal 8\r\n-rw-r--r--   1 fexxdev  staff  602 Jun 12 11:29 index2.html\r\ndrwxr-xr-x  15 fexxdev  staff  480 Jun 12 11:29 .\r\nlrwxr-xr-x   1 fexxdev  staff   96 Jun 12 11:15 styles.css.map -\u003e /Users/fexxdev/Desktop/Dev/Nebula/jarvis.automation.components/src/timesheet/dist/styles.css.map\r\nlrwxr-xr-x   1 fexxdev  staff   92 Jun 12 11:15 sty....\r\n```\r\n\r\n![Screenshot 2024-06-12 at 11 29 48](https://github.com/dotnet/aspnetcore/assets/26311786/be3e697c-9513-413c-bbf0-af5e7229dc0d)\r\n_(don\u0027t mind the fact that the page is blank, it is expected. But the content is there as you can see)_\r\n\r\nAny thoughts? Thanks!",
                                           "updatedAt":  "2024-06-12T15:38:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86A8PoS",
                                           "createdAt":  "2024-06-12T15:05:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "@fexxdev 2.2.0 is _way_ out of support, you need to be on .NET 6 or 8 these days.",
                                           "updatedAt":  "2024-06-12T15:05:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86A8hpL",
                                           "createdAt":  "2024-06-12T15:38:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fexxdev",
                                           "body":  "@Tratcher  i\u0027m sorry for the confusion, i though one thing and wrote another 😅 \r\nI\u0027m using .NET 8.0.1",
                                           "updatedAt":  "2024-06-12T15:38:22Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Re-Open of issue 2774: UseStaticFiles() will not serve files that are symbolic links",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/34809",
        "createdAt":  "2021-07-28T16:38:37Z",
        "number":  34809,
        "author":  "wtgodbe",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-07T23:25:32Z",
        "body":  "https://github.com/dotnet/aspnetcore/blob/eb0f414830a5468d0fba0c885b0a9ed0227292f0/src/Middleware/HttpLogging/src/W3CLoggerOptions.cs#L17\r\n\r\nWhen FileName changes, we should reset FileNumber back to 0 instead of continuing where we left off.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/eb0f414830a5468d0fba0c885b0a9ed0227292f0/src/Middleware/HttpLogging/src/FileLoggerProcessor.cs#L65-L80\r\n\r\n\u003e But it might be somewhat tricky - e.g. OnChange fires in the middle of execution of WriteMessagesAsync, causing the FileNumber to go back to zero. If this happens while we\u0027re scanning through some previous files to find out if they exist, it could cause us to suffix the first file with the new name with something nonzero. I\u0027ll file a follow-up issue for this one, for now I think it\u0027s fine if the numbering for the new file names pick up where the old ones left off.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONPTBrA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde8409MGs",
                                           "createdAt":  "2021-07-28T16:38:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-07-28T16:38:39Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "FileLoggerProcessor should update FileNumber suffix when FileName changes",
        "labels":  [
                       "area-middleware",
                       "feature-http-logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/35154",
        "createdAt":  "2021-08-08T08:55:14Z",
        "number":  35154,
        "author":  "Kahbazi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-02T00:45:20Z",
        "body":  "## Background and Motivation\r\nThe default session provider in ASP.NET Core loads session records from the underlying IDistributedCache backing store asynchronously only if the ISession.LoadAsync method is explicitly called before the TryGetValue, Set, or Remove methods. If LoadAsync isn\u0027t called first, the underlying session record is loaded synchronously, which can incur a performance penalty at scale.\r\n\r\nWe could provide a new endpoint metadata with `SessionState` property for session which controls the behavior of `SessionMiddleware`.\r\n\r\n- SessionState.Default:  The current behavior which creates a session key, set the session feature, set cookie if needed.\r\n- SessionState.EagerLoad: Calls LoadAsync in session middleware [Needs a better name than EagerLoad!]\r\n- SessionState.Disabled: Do nothing in session middleware, not even setting the session feature\r\n- SessionState.ReadOnly:  Calls LoadAsync in session middleware, but not CommitAsync and wrap ISession in a class which throw exception when Set, Remove or Clear called.\r\n\r\n## Proposed API\r\n```diff\r\npublic class SessionOptions\r\n{\r\n     // The behavior of session middleware when `ISessionStateMetadata` is not available.\r\n+   public SessionState DefaultBehavior { get; set; }\r\n}\r\n```\r\n```csharp\r\npublic interface ISessionStateMetadata\r\n{\r\n    SessionState State { get; }\r\n}\r\n\r\npublic enum SessionState\r\n{\r\n    Default = 0,\r\n    EagerLoad = 1,\r\n    Disabled = 2,\r\n    ReadOnly = 3,\r\n}\r\n\r\npublic class SessionStateAttribute : ISessionStateMetadata\r\n{\r\n    SessionState State { get; }\r\n}\r\n\r\npublic static class RoutingEndpointConventionBuilderExtensions\r\n{\r\n    public static TBuilder SetSessionBehvior\u003cTBuilder\u003e(this TBuilder builder, SessionState sessionState) where TBuilder : IEndpointConventionBuilder;\r\n}\r\n```\r\n## Usage Examples\r\n\r\n``` C#\r\n[SessionState(SessionState.Disabled)]\r\npublic class CustomerController\r\n{\r\n    ...\r\n}\r\n\r\napp.MapGet(\"/nosession\", (HttpContext context) =\u003e $\"Hello World!\").SetSessionBehvior(SessionState.Disabled);\r\n\r\napp.MapGet(\"/nosession2\", [SessionState(SessionState.Disabled)] (HttpContext context) =\u003e $\"Hello World!\");\r\n\r\napp.MapGet(\"/\", (HttpContext context) =\u003e $\"{context.Session.GetString(\"Hi\")} World!\").SetSessionBehvior(SessionState.ReadOnly);\r\n```\r\n## Risks\r\nIf Endpoints are marked by mistake the session would load for all requests even when they don\u0027t need session.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWZJkZw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde841VQ0Z",
                                           "createdAt":  "2021-08-08T09:02:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Prior art in this area:\r\n- https://docs.microsoft.com/en-us/dotnet/api/system.web.mvc.sessionstateattribute?view=aspnet-mvc-5.2\r\n- https://docs.microsoft.com/en-us/dotnet/api/system.web.sessionstate.sessionstatebehavior?view=netframework-4.8\r\n\r\nSome thoughts:\r\n- I think we can drop the metadata from the attribute. Not sure we explicitly use \"metadata\" in these type names anywhere else either.\r\n- Does Required=false mean don\u0027t load? Or just don\u0027t eagerly load? I\u0027m trying to figure out if this is just a marker interface e.g. https://github.com/dotnet/aspnetcore/blob/ec504ed0130837873576de3d7eee804e4a0987f5/src/Http/Metadata/src/IAllowAnonymous.cs",
                                           "updatedAt":  "2021-08-08T09:03:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde841VSzU",
                                           "createdAt":  "2021-08-08T10:13:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kahbazi",
                                           "body":  "\u003e Does Required=false mean don\u0027t load? Or just don\u0027t eagerly load? I\u0027m trying to figure out if this is just a marker interface e.g. https://github.com/dotnet/aspnetcore/blob/ec504ed0130837873576de3d7eee804e4a0987f5/src/Http/Metadata/src/IAllowAnonymous.cs\r\n\r\nIf not loading session at all could lead to not setting the session feature, it is a good idea, it\u0027s useful for application that both have state-full UI and state-less rest API. Specially with the current implementation which always allocate and create session key.\r\n\r\nI change the metadata and updated the proposal based on the https://docs.microsoft.com/en-us/dotnet/api/system.web.sessionstate.sessionstatebehavior?view=netframework-4.8.\r\n",
                                           "updatedAt":  "2021-08-08T10:13:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde841VTab",
                                           "createdAt":  "2021-08-08T10:35:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I prefer a single method/attribute + enum:\r\n\r\n```C#\r\n[SessionStateAttribute(SessionState.Disabled)]\r\npublic class CustomerController\r\n{\r\n    ...\r\n}\r\n\r\napp.MapGet(\"/nosession\", (HttpContext context) =\u003e $\"Hello World!\").SetSessionBehvior(SessionState.Disabled);\r\n\r\napp.MapGet(\"/nosession2\", [SessionStateAttribute(SessionState.Disabled)] (HttpContext context) =\u003e $\"Hello World!\");\r\n\r\napp.MapGet(\"/\", (HttpContext context) =\u003e $\"{context.Session.GetString(\"Hi\")} World!\").SetSessionBehvior(SessionState.ReadOnly);\r\n```",
                                           "updatedAt":  "2021-08-08T10:37:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde841VTmw",
                                           "createdAt":  "2021-08-08T10:43:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kahbazi",
                                           "body":  "\u003e I prefer a single method/attribute + enum:\r\n\r\nI updated the proposal.\r\n",
                                           "updatedAt":  "2021-08-08T10:43:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde841aGf7",
                                           "createdAt":  "2021-08-10T13:35:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kahbazi",
                                           "body":  "@adityamandaleeka Any chance this could be done in .Net 6.0? I can send a PR for this feature when the proposal is approved.",
                                           "updatedAt":  "2021-08-10T13:35:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde841aijZ",
                                           "createdAt":  "2021-08-10T16:55:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB12Z_A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kahbazi",
                                                                               "createdAt":  "2021-08-10T16:57:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adityamandaleeka",
                                                                               "createdAt":  "2021-08-11T02:42:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This doesn\u0027t need to go into .NET 6. Even if you do the work, it needs to be reviewed by the team so it\u0027s not free. I suggest writing a middleware that does the same for now and can be shipped on nuget and we can revisit in .NET 7.",
                                           "updatedAt":  "2021-08-10T16:55:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85ZdmSw",
                                           "createdAt":  "2023-04-08T16:49:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danirzv",
                                           "body":  "I\u0027m interested to help on this issue, may I send pull request?",
                                           "updatedAt":  "2023-04-08T16:49:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85ZkmRn",
                                           "createdAt":  "2023-04-11T06:44:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mitchdenny",
                                           "body":  "@danirzv thanks for the offer. I think before you picked this up we\u0027d want to make sure that the shape of the API here is something that we are comfortable with. @davidfowl - this is a some what old API proposal - is it developed enough to go through API review?",
                                           "updatedAt":  "2023-04-11T06:44:42Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Introduce a session metadata to load session asynchronously in session middleware",
        "labels":  [
                       "feature-session",
                       "api-suggestion",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/36920",
        "createdAt":  "2021-09-24T14:58:11Z",
        "number":  36920,
        "author":  "WeihanLi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCB3b-g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "paleocomburo",
                                            "createdAt":  "2021-11-09T22:18:12Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-03-02T01:01:40Z",
        "body":  "### Describe the bug\r\n\r\nWhen I use the `HttpLoggingMiddleware` to log the response body, the response header would not be logged as expected, not know if this is by design, guessing that it may caused by \u003chttps://github.com/dotnet/aspnetcore/blob/v6.0.0-rc.1.21452.15/src/Middleware/HttpLogging/src/HttpLoggingMiddleware.cs#L172\u003e\r\n\r\n![image](https://user-images.githubusercontent.com/7604648/134696770-605a596a-a40b-4c5f-b4cd-1a991ba841b1.png)\r\n\r\n\r\n### To Reproduce\r\n\r\nJust create a api project with `dotnet new webapi -n HttpLoggingMiddlewareSample --no-openapi --no-https`, then add `UseHttpLogging()` to the request pipeline, and customize the logging option, modified the sample likes follows:\r\n\r\n``` csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.Services.AddControllers();\r\nbuilder.Services.AddHttpLogging(options =\u003e\r\n{\r\n    options.LoggingFields = Microsoft.AspNetCore.HttpLogging.HttpLoggingFields.All;\r\n    options.RequestHeaders.Add(\"Cache-Control\");\r\n    options.ResponseHeaders.Add(\"Server\");\r\n});\r\nvar app = builder.Build();\r\n\r\n// Configure the HTTP request pipeline.\r\napp.UseHttpLogging();\r\napp.MapControllers();\r\n\r\napp.Run();\r\n```\r\n\r\nsample project: \u003chttps://github.com/WeihanLi/SamplesInPractice/blob/master/net6sample/HttpLoggingMiddlewareSample/Program.cs\u003e\r\n\r\nWhen I specific the logging fields with `All`, the response headers are not been logged, I got logs like below:\r\n\r\n```\r\ninfo: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[1]\r\n      Request:\r\n      Protocol: HTTP/1.1\r\n      Method: GET\r\n      Scheme: http\r\n      PathBase:\r\n      Path: /weatherforecast\r\n      Host: localhost:5084\r\n      User-Agent: dotnet-HTTPie/0.1.1\r\ninfo: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[2]\r\n      Response:\r\n      StatusCode: 200\r\n      Content-Type: application/json; charset=utf-8\r\ninfo: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[4]\r\n      ResponseBody: [{\"date\":\"2021-09-25T22:37:45.0463903+08:00\",\"temperatureC\":-2,\"temperatureF\":29,\"summary\":\"Mild\"},{\"date\":\"2021-09-26T22:37:45.0498642+08:00\",\"temperatureC\":-20,\"temperatureF\":-3,\"summary\":\"Cool\"},{\"date\":\"2021-09-27T22:37:45.0498738+08:00\",\"temperatureC\":-20,\"temperatureF\":-3,\"summary\":\"Freezing\"},{\"date\":\"2021-09-28T22:37:45.0498741+08:00\",\"temperatureC\":-15,\"temperatureF\":6,\"summary\":\"Cool\"},{\"date\":\"2021-09-29T22:37:45.0498743+08:00\",\"temperatureC\":23,\"temperatureF\":73,\"summary\":\"Balmy\"}]\r\n```\r\n\r\nwhile when I commented the `LoggingFields` config, the response headers would be logged, I get logs as follows:\r\n\r\n```\r\ninfo: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[1]\r\n      Request:\r\n      Protocol: HTTP/1.1\r\n      Method: GET\r\n      Scheme: http\r\n      PathBase:\r\n      Path: /weatherforecast\r\n      Host: localhost:5084\r\n      User-Agent: dotnet-HTTPie/0.1.1\r\ninfo: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[2]\r\n      Response:\r\n      StatusCode: 200\r\n      Content-Type: application/json; charset=utf-8\r\n      Date: [Redacted]\r\n      Server: Kestrel\r\n      Transfer-Encoding: chunked\r\n```\r\n\r\n### Exceptions (if any)\r\n\r\nThe response headers should be logged\r\n\r\n### Further technical details\r\n\r\n- ASP.NET Core version：.NET 6 RC 1\r\n- The IDE: VS 2022 Preview 4/ dotnet cli(.NET 6 RC1)\r\n- Include the output of `dotnet --info`\r\n\r\n```\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-rc.1.21458.32\r\n Commit:    d7c22323c4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22463\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.100-rc.1.21458.32\\\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-rc.1.21451.13\r\n  Commit:  d7619cd4b1\r\n\r\n.NET SDKs installed:\r\n  2.1.802 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.412 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.400 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.100-rc.1.21458.32 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0-rc.1.21452.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0-rc.1.21451.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.0-rc.1.21451.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTP-90g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde843P2R7",
                                           "createdAt":  "2021-09-24T20:29:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "Thanks for reporting this, we will investigate. It\u0027s interesting that we only log the headers if the body is empty.",
                                           "updatedAt":  "2021-09-24T20:29:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde843QLuM",
                                           "createdAt":  "2021-09-25T01:24:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCufLdA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WeihanLi",
                                                                               "createdAt":  "2021-09-25T01:32:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "drew-cooper",
                                                                               "createdAt":  "2022-10-26T03:09:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "The response headers are logged in your first example just not all of them.\r\n```\r\ninfo: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[2]\r\n      Response:\r\n      StatusCode: 200\r\n      Content-Type: application/json; charset=utf-8\r\n```\r\nThe missing headers are all ones added dynamically by the server when finalizing the response.\r\n```\r\n      Date: [Redacted]\r\n      Server: Kestrel\r\n      Transfer-Encoding: chunked\r\n```\r\n\r\nThe difference you observe between the scenarios is because of when the headers are logged. When body logging is enabled the header logging happens during the first body write, before the server generates those automatic values. When body logging is disabled the headers aren\u0027t logged until the end of the request.\r\n\r\nPossible fix: when body logging is enabled, log the headers just after the first write rather than before it. That will let them finish generating first.\r\n\r\nPriority: Low. While this is inconsistent, these automatic headers are less important than app headers in most scenarios.\r\n",
                                           "updatedAt":  "2021-09-27T15:47:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde843QOFz",
                                           "createdAt":  "2021-09-25T02:45:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WeihanLi",
                                           "body":  "@Tratcher thanks for your investigation, currently, we may log before the request is handled, not sure if it\u0027s a good idea to log only when the request had been handled, and I think maybe it\u0027s better to add a try-finally clause to ensure the logs would be logged even when there\u0027s an exception",
                                           "updatedAt":  "2021-09-25T02:45:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85KP8Rn",
                                           "createdAt":  "2022-09-13T17:01:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. Because it\u0027s not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-09-13T17:01:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85M-dBy",
                                           "createdAt":  "2022-10-26T03:15:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "drew-cooper",
                                           "body":  "I\u0027m also experience this issue, but in my case it\u0027s headers that are added in the `HttpResponse.OnStarting` callback.\r\nThese headers are logged when Response Body logging is off, but not otherwise.\r\nThe callback is set up in Middleware which is after the `HttpLoggingMiddleware` and before the ASP.Net Controller pipeline.",
                                           "updatedAt":  "2022-10-26T03:15:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85M_73S",
                                           "createdAt":  "2022-10-26T10:32:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Related: https://github.com/dotnet/aspnetcore/issues/39310",
                                           "updatedAt":  "2022-10-26T10:32:00Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "HttpLoggingMiddleware does not log all response headers when log response body",
        "labels":  [
                       "investigate",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/37991",
        "createdAt":  "2021-11-01T16:33:03Z",
        "number":  37991,
        "author":  "pranavkm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-06-02T03:19:38Z",
        "body":  "`IDistributedCache` has a few synchronous APIs\r\n\r\n* https://docs.microsoft.com/dotnet/api/microsoft.extensions.caching.distributed.idistributedcache.get?#Microsoft_Extensions_Caching_Distributed_IDistributedCache_Get_System_String_\r\n* https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.caching.distributed.idistributedcache.refresh\r\n* https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.caching.distributed.idistributedcache.remove\r\n* https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.caching.distributed.idistributedcache.set\r\n\r\nIn the SqlServer and RedisCache implementations this ends up making blocking calls: e.g. https://github.com/dotnet/aspnetcore/blob/main/src/Caching/SqlServer/src/DatabaseOperations.cs#L54-L62. The proposal is to add an analyzer that warns against the use of these APIs.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOU2z28w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde845A_c_",
                                           "createdAt":  "2021-11-01T20:21:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-11-01T20:21:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85TbPbz",
                                           "createdAt":  "2023-01-23T00:09:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "david-acker",
                                           "body":  "I\u0027d be interesting in helping out with this if possible!\r\n\r\nI\u0027m assuming we would want a new shared analyzers project that would be included with the `Microsoft.Extensions.Caching.StackExchangeRedis` and `Microsoft.Extensions.Caching.SqlServer` NuGet packages?",
                                           "updatedAt":  "2023-01-23T00:09:21Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Consider writing an analyzer that produces warnings when using sync APIs on IDistributedCache",
        "labels":  [
                       "analyzer",
                       "feature-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/38046",
        "createdAt":  "2021-11-03T01:36:51Z",
        "number":  38046,
        "author":  "beatrichartz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC5AV8g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2021-11-03T13:08:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mindex-Brandon-Key",
                                            "createdAt":  "2024-06-28T19:14:16Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-10-28T14:07:49Z",
        "body":  "Currently, `RedisCache` resets expiry for keys on every read (https://github.com/dotnet/aspnetcore/blob/main/src/Caching/StackExchangeRedis/src/RedisCache.cs#L293 and in the async version as well).\r\n\r\nWhen using Redis as a session storage, this can lead to sessions getting invalidated unnecessarily on Redis failover. During a new leader election read-only access is preserved which would allow existing clients to continue. However due to the `EXPIRE` command being issued alongside the read, the read command will fail.\r\n\r\nThis might be desired behaviour in other circumstances. For a session storage solution it would be fine to just ignore the exception on expire and carry on. In the case that Redis writes do not become available within expiry time, the session would then expire. It would also still expire when attempting other writes.\r\n\r\nA configuration option for the cache would be nice to allow expire to fail. Otherwise, changing the variables in the class to `protected` so sensible overrides are possible might be another solution.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOTgiHA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde845OCEH",
                                           "createdAt":  "2021-11-03T20:31:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "Triage: the configuration option seems possible, but we should discuss this further on this issue before implementing it in a PR. In particular, we should make sure the new option works well with the session implementation (which would do a write at the end of every request).",
                                           "updatedAt":  "2021-11-03T20:31:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde845OCIc",
                                           "createdAt":  "2021-11-03T20:31:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-11-03T20:31:43Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Add configuration option to `RedisCache` to allow read-only access",
        "labels":  [
                       "feature-caching",
                       "area-middleware",
                       "help candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/38342",
        "createdAt":  "2021-11-12T18:23:32Z",
        "number":  38342,
        "author":  "pranavkm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-24T23:55:39Z",
        "body":  "Endpoint routing only checks for state in HttpContext if the route has Auth or CORs metadata:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/main/src/Http/Routing/src/EndpointMiddleware.cs#L38-L48\r\n\r\nHowever, the middlewares update HttpContext.Items any time it sees an endpoint:\r\n\r\n* https://github.com/dotnet/aspnetcore/blob/main/src/Security/Authorization/Policy/src/AuthorizationMiddleware.cs#L51-L58\r\n* https://github.com/dotnet/aspnetcore/blob/main/src/Middleware/CORS/src/Infrastructure/CorsMiddleware.cs#L126-L133\r\n\r\nWe might benefit from slight improvements for endpoints with Auth or CORS metadata by updating these middlewares to only update context when they know EndpointMiddleware is going to observe it i.e.\r\n\r\n```C#\r\n if (endpoint?..GetMetadata\u003cICorsMetadata\u003e() is not null)\r\n{\r\n        // EndpointRoutingMiddleware uses this flag to check if the CORS middleware processed CORS metadata on the endpoint.\r\n        // The CORS middleware can only make this claim if it observes an actual endpoint.\r\n        context.Items[CorsMiddlewareWithEndpointInvokedKey] = CorsMiddlewareWithEndpointInvokedValue;\r\n}\r\n```\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOObbZjA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde845qDLI",
                                           "createdAt":  "2021-11-12T18:23:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pranavkm",
                                           "body":  "/cc @davidfowl ",
                                           "updatedAt":  "2021-11-12T18:23:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde845q2zj",
                                           "createdAt":  "2021-11-12T20:53:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Which is more expensive on average, `GetMetadata\u003cICorsMetadata\u003e()`, or `context.Items[CorsMiddlewareWithEndpointInvokedKey] = CorsMiddlewareWithEndpointInvokedValue;`?",
                                           "updatedAt":  "2021-11-12T20:53:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde845q8vR",
                                           "createdAt":  "2021-11-12T21:08:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pranavkm",
                                           "body":  "We know we are calling GetMetadata at least once now (in the routing middleware), so it calling it twice is likely come to out a bit better since the lookup gets cached: https://github.com/dotnet/aspnetcore/blob/main/src/Http/Http.Abstractions/src/Routing/EndpointMetadataCollection.cs#L75-L85. But yeah, I filed an issue versus making a code change because we probably need to verify the benefits of this change.",
                                           "updatedAt":  "2021-11-12T21:08:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde845rB9t",
                                           "createdAt":  "2021-11-12T21:22:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCCYbkQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2021-11-12T21:22:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "Triage: the change here is fairly small, but we need to have a good performance test to measure the impact.",
                                           "updatedAt":  "2021-11-12T21:22:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde845rCKK",
                                           "createdAt":  "2021-11-12T21:22:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-11-12T21:22:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde845ttmM",
                                           "createdAt":  "2021-11-14T12:47:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kahbazi",
                                           "body":  "While we are at it, how about also checking `RouteOptions.SuppressCheckForUnhandledSecurityMetadata`?",
                                           "updatedAt":  "2021-11-14T12:47:08Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Consider updating AuthorizationMiddleware and CorsMiddleware to only set state in HttpContext if auth / cors metadata is present",
        "labels":  [
                       "Perf",
                       "area-networking",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/39300",
        "createdAt":  "2022-01-04T16:30:38Z",
        "number":  39300,
        "author":  "benmccallum",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-02T00:50:41Z",
        "body":  "\u003c!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\n--\u003e\r\n\r\n### Is your feature request related to a problem? Please describe.\r\nIn reviewing [a PR](https://github.com/dotnet/AspNetCore.Docs/pull/24444#discussion_r777626989) for updates to the ASP.NET Core Output Caching middleware docs, I realised the default limit of 100MB is quite small and we\u0027d likely be hitting that (turns out definitely, we estimate we should have a few GB 😅). I was trying to figure out how we\u0027d know if we were hitting the limit, so dug down through the middleware and into the underlying `MS.Extensions.Caching.Memory.MemoryCache` implementation and found it does log a few Debug level messages saying its cleaning house (\"Overcapacity compaction triggered\").\r\n\r\nSo I tried to replicate that log entry locally and couldn\u0027t. I believe the issue is that the [ResponseCachingMiddleware ctor](https://github.com/dotnet/aspnetcore/blob/c85baf8db0c72ae8e68643029d514b2e737c9fae/src/Middleware/ResponseCaching/src/ResponseCachingMiddleware.cs#L39-L54) is spawning its own instance of MemoryCache directly and not giving it a logger, so it gets the no-op logger.\r\n\r\nI think this log message could provide value, and I\u0027m discussing on the docs PR about whether we mention that in the docs, so if we give it a logger I think we\u0027ll be OK here.\r\n\r\n### Describe the solution you\u0027d like\r\nFirst thought was to pass an instance of `ILogger\u003cT\u003e` to `MemoryCache` ctor, but actually it only accepts a logger factory.\r\n\r\nIt could be valuable to have another ctor that takes an `ILogger` instance so that, for example in this case, the consumer can pass one with a more specific category like \"AspNetCoreResponseCache\" (rather than being mixed in with the shared instance).\r\n\r\nI\u0027ll can whip up a PR with a seal of approval on the approach.\r\n\r\n### Additional context\r\nAdd any other context or screenshots about the feature request here.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOO_ef7Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde8475z0v",
                                           "createdAt":  "2022-01-04T17:10:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "You can suggest the new API signature here in this issue, but note that MemoryCache lives over in https://github.com/dotnet/runtime. Not sure if that new overload would cause DI issues.\r\n\r\nhttps://github.com/dotnet/runtime/blob/ae2e360936eb0ee737fb81c872c87dd7794782d3/src/libraries/Microsoft.Extensions.Caching.Memory/src/MemoryCache.cs#L43",
                                           "updatedAt":  "2022-01-04T17:12:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde84750LG",
                                           "createdAt":  "2022-01-04T17:12:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benmccallum",
                                           "body":  "\u003e Not sure if that new overload would cause DI issues.\r\n\r\nWas also worried about this. ",
                                           "updatedAt":  "2022-01-04T17:12:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde84752I0",
                                           "createdAt":  "2022-01-04T17:22:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benmccallum",
                                           "body":  "I guess ideally this would be the change.\r\n\r\nAnother alternative if we\u0027re worried about `ILogger` in the ctor would be `ILoggerFactory loggerFactory, string loggerCategoryName` and the ctor use that if non-null. Feels a little weird though.\r\n\r\n**dotnet/aspnetcore**\r\n`ResponseCachingMiddleware` creates a `MemoryCache` instance passing through the `ILogger` with a specific name.\r\n\r\n```c#\r\npublic ResponseCachingMiddleware(\r\n        RequestDelegate next,\r\n        IOptions\u003cResponseCachingOptions\u003e options,\r\n        ILoggerFactory loggerFactory,\r\n        ObjectPoolProvider poolProvider)\r\n        : this(\r\n            next,\r\n            options,\r\n            loggerFactory,\r\n            new ResponseCachingPolicyProvider(),\r\n            new MemoryResponseCache(\r\n                new MemoryCache(\r\n                    new MemoryCacheOptions\r\n                    {\r\n                        SizeLimit = options.Value.SizeLimit\r\n                    },\r\n                    // pass it with a name here\r\n                    loggerFactory.CreateLogger(\"AspNetCoreResponseMemoryCache\"))),\r\n            new ResponseCachingKeyProvider(poolProvider, options))\r\n    { }\r\n```\r\n\r\n**dotnet/runtime**\r\n`MemoryCache` gets a new ctor for an `ILogger` and the existing one calls into it.\r\n\r\n```c#\r\n/// \u003csummary\u003e\r\n/// Creates a new \u003csee cref=\"MemoryCache\"/\u003e instance.\r\n/// \u003c/summary\u003e\r\n/// \u003cparam name=\"optionsAccessor\"\u003eThe options of the cache.\u003c/param\u003e\r\n/// \u003cparam name=\"loggerFactory\"\u003eThe factory used to create loggers.\u003c/param\u003e\r\npublic MemoryCache(IOptions\u003cMemoryCacheOptions\u003e optionsAccessor, ILoggerFactory loggerFactory)\r\n    : this(\r\n        optionsAccessor,\r\n        loggerFactory?.CreateLogger\u003cMemoryCache\u003e() ?? throw new ArgumentNullException(nameof(loggerFactory))\r\n    ) { }\r\n\r\n/// \u003csummary\u003e\r\n/// Creates a new \u003csee cref=\"MemoryCache\"/\u003e instance.\r\n/// \u003c/summary\u003e\r\n/// \u003cparam name=\"optionsAccessor\"\u003eThe options of the cache.\u003c/param\u003e\r\n/// \u003cparam name=\"logger\"\u003eA logger instance.\u003c/param\u003e\r\npublic MemoryCache(IOptions\u003cMemoryCacheOptions\u003e optionsAccessor, ILogger logger)\r\n{\r\n    if (optionsAccessor == null)\r\n    {\r\n        throw new ArgumentNullException(nameof(optionsAccessor));\r\n    }\r\n\r\n    if (logger == null)\r\n    {\r\n        throw new ArgumentNullException(nameof(logger));\r\n    }\r\n\r\n    _options = optionsAccessor.Value;\r\n    _logger = logger;\r\n\r\n    // ... exclude for brevity\r\n}\r\n```",
                                           "updatedAt":  "2022-01-04T17:29:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde847957B",
                                           "createdAt":  "2022-01-05T21:17:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "@halter73 to follow up with the API proposal after thinking about this a bit more.",
                                           "updatedAt":  "2022-01-05T21:17:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde84795_t",
                                           "createdAt":  "2022-01-05T21:17:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 7 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-01-05T21:17:38Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Allow response caching cache to log",
        "labels":  [
                       "api-suggestion",
                       "feature-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/39310",
        "createdAt":  "2022-01-04T20:32:20Z",
        "number":  39310,
        "author":  "lawrencek76",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-02T00:50:42Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nResponse caching does not cache headers modified in the OnStarting delegate in middleware loaded after responsecaching middleware.\r\n\r\n``` c#\r\ncontext.Response.OnStarting(CheckIfHeaderNeeded, context);\r\n\r\nprivate Task CheckIfHeaderNeeded(object state)\r\n    {\r\n        var context = (HttpContext)state;\r\n        context.Response.Headers.Remove(\"removeme\");\r\n        return Task.CompletedTask;\r\n    }\r\n```\r\n\r\nrevmoveme header will only be removed on the initial request\n\n### Expected Behavior\n\nResponse caching should cache the actual final headers sent to the client.  It cannot cache only headers created before the await(next) in middleware.\r\n\r\nThis will also fix #23218 if I understand the issue correctly.  \r\n\r\n@Tratcher mentioned one possible fix is\r\n\u003e One fix would be for the caching middleware to shim OnStarting and run those callbacks before it captured the headers. (Complex)\r\n\r\nThat seems to be the correct behavior \n\n### Steps To Reproduce\n\nhttps://github.com/lawrencek76/header-caching-issue\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n6.0.101\n\n### Anything else?\n\nInitially ran into this trying to cache security headers with a nonce in another middleware.\r\nhttps://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/issues/117\r\n\r\nAfter attempting to make a pr to fix this in the other middleware I realized there is really no way I can find to really do this correctly outside of the caching middleware itself.\r\n\r\nhttps://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/pull/118\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSzFkvg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde8476e__",
                                           "createdAt":  "2022-01-04T21:34:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "One challenge with changing this is that response caching reads the current response headers to decide if it should cache, and then starts intercepting writes (or not). This will mean also delaying the decision to cache (or not) until after the first write completes.",
                                           "updatedAt":  "2022-01-04T21:34:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde847948h",
                                           "createdAt":  "2022-01-05T21:11:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 7 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-01-05T21:11:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85LMWJF",
                                           "createdAt":  "2022-09-28T22:29:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-09-28T22:29:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85LMWS-",
                                           "createdAt":  "2022-09-28T22:30:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "Triage: may be interesting to fix this in output caching. Consider capturing headers after the first write rather than during (or maybe in middleware unwind).",
                                           "updatedAt":  "2022-09-28T22:30:03Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Response caching and output caching do not cache headers modified in OnStarting handler",
        "labels":  [
                       "feature-response-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/40225",
        "createdAt":  "2022-02-15T01:00:34Z",
        "number":  40225,
        "author":  "sebastienros",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-01-05T00:53:43Z",
        "body":  "When the server returns an error, or a lock is acquired on this resource, the cache can return a stale entry depending on a timeout (grace period).\r\nWhen an entry is stale and refreshed, if \"If-Modified-Since\" or \"If-None-Match\" are set, and the content is identical a 304 will be returned and the cached entry refreshed.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOb-961A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85v73rU",
                                           "createdAt":  "2024-01-05T00:53:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2024-01-05T00:53:41Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Output-caching can return stale results",
        "labels":  [
                       "feature-output-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/40229",
        "createdAt":  "2022-02-15T01:00:44Z",
        "number":  40229,
        "author":  "sebastienros",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC0-fsQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PilgrimViis",
                                            "createdAt":  "2022-02-15T14:37:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Xhanti",
                                            "createdAt":  "2022-05-26T06:29:54Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Xhanti",
                                            "createdAt":  "2022-05-27T10:05:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "anhntcv",
                                            "createdAt":  "2022-11-08T09:42:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "h3rmanj",
                                            "createdAt":  "2022-11-18T09:09:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maknapp",
                                            "createdAt":  "2023-01-06T15:28:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Varorbc",
                                            "createdAt":  "2023-01-12T05:42:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "moshe-habas",
                                            "createdAt":  "2023-05-14T07:56:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YohanSciubukgian",
                                            "createdAt":  "2024-01-05T07:20:54Z"
                                        }
                                    ],
                          "totalCount":  9
                      },
        "updatedAt":  "2024-01-05T00:51:53Z",
        "body":  "Cache entries should be stored in configurable locations.\r\nIn-memory, filesystem, and hybrid stores (metadata in memory and content on disk) are planned.\r\nSome stores are able to handle size limits.\r\n\r\nThe storage for cached entries can be extended by developers by implementing a service and registering it in DI. \r\nPotential implementations: Redis, database, CosmosDB, table/blob storage, sqlite",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOb-92cg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85FplBE",
                                           "createdAt":  "2022-06-28T10:16:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC7q4pA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nixtar",
                                                                               "createdAt":  "2022-06-30T12:19:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kaayo",
                                                                               "createdAt":  "2023-03-17T00:46:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "moshe-habas",
                                                                               "createdAt":  "2023-05-14T07:56:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "Manish082007",
                                           "body":  "As a developer, I desperately want the Output Caching storage options feature in Asp.Net Core 7. ",
                                           "updatedAt":  "2022-06-28T10:16:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Fznbz",
                                           "createdAt":  "2022-06-30T12:28:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCkkkVQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Manish082007",
                                                                               "createdAt":  "2022-06-30T12:31:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "nixtar",
                                           "body":  "\u003e As a developer, I desperately want the Output Caching storage options feature in Asp.Net Core 7.\r\n\r\nAgreed.\r\nI was really looking forward to finally replacing iis+ARR plugin with yarp + output caching with disk backed storage across ~1500 remote sites.\r\n\r\nHopefully the storage is at least extendable in 7.\r\nIf so, perhaps an official nuget package for the \"built in\" storage options so they can be released and updated on a separate cycle to dotnet itself?\r\n\r\nHowever, even with just memory storage this new output caching is very epic. Great job to everyone involved. 👍👍",
                                           "updatedAt":  "2022-06-30T12:28:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85OqXSJ",
                                           "createdAt":  "2022-11-18T09:07:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "h3rmanj",
                                           "body":  "I\u0027m hoping it will integrate nicely with the already existing `IDistributedCache` interface. This is the only thing stopping us from moving to the new .NET 7 Output Cache from a custom output cache implementation.",
                                           "updatedAt":  "2022-11-18T09:07:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85v73De",
                                           "createdAt":  "2024-01-05T00:49:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2024-01-05T00:49:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85v73Zy",
                                           "createdAt":  "2024-01-05T00:51:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "We implemented a Redis output cache store in .NET 8: https://github.com/dotnet/aspnetcore/pull/48450\r\n\r\nI\u0027m going to leave this issue open but change the milestone since .NET 8 has shipped already.",
                                           "updatedAt":  "2024-01-05T00:51:52Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Output-caching has multiple data storage options",
        "labels":  [
                       "feature-output-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/40230",
        "createdAt":  "2022-02-15T01:00:47Z",
        "number":  40230,
        "author":  "sebastienros",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC86X1Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nfplee",
                                            "createdAt":  "2022-08-02T20:24:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rjpowers10",
                                            "createdAt":  "2022-09-02T13:51:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "codingaddicted",
                                            "createdAt":  "2023-07-31T12:34:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tiakun",
                                            "createdAt":  "2024-11-24T02:56:51Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2024-01-05T00:49:22Z",
        "body":  "When configured, cached entries can be altered before being stores or served.\r\nThis can allow custom services to implement doughnut caching or AFT substitution.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOb-9wpQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85LvJGE",
                                           "createdAt":  "2022-10-06T20:37:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "angel199321",
                                           "body":  "I\u0027m trying Ouput caching with MVC pattern, will doughnut caching work with ViewComponent?",
                                           "updatedAt":  "2022-10-06T20:37:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85v73Cl",
                                           "createdAt":  "2024-01-05T00:49:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2024-01-05T00:49:20Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Output-caching should support response substitution",
        "labels":  [
                       "feature-output-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/40231",
        "createdAt":  "2022-02-15T01:00:50Z",
        "number":  40231,
        "author":  "sebastienros",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-01-05T00:48:22Z",
        "body":  "Optional behaviors\r\n- 206 responses can are stored directly.\r\n- Once a cached entry is stored, byte‑range requests are served directly from the cached entry (useful for edge proxies)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOb-9uWg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85v725a",
                                           "createdAt":  "2024-01-05T00:48:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2024-01-05T00:48:21Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Output-caching should support byte-range caching",
        "labels":  [
                       "feature-output-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/40452",
        "createdAt":  "2022-02-28T19:20:44Z",
        "number":  40452,
        "author":  "pranavkm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-14T20:29:13Z",
        "body":  "A couple of limits are enforced by MVC filters. In addition, part of the Request  Decompression middleware - https://github.com/dotnet/aspnetcore/issues/40080 limits specified by `RequestSizeLimitAttribute` are enforced for compressed requests  if the middleware is present (e.g. `Content-Encoding: gz`), but not for regular requests.\r\n\r\nThe suggestion is to introduce a new middleware that can enforce request size limits. The middleware\u0027s primarily role is to configure existing HTTP features based on the presence of attributes on endpoints. In addition to this, we can have endpoint middleware enforce that the middleware was present if it detects endpoints with size limiting attributes.\r\n\r\n* https://github.com/dotnet/aspnetcore/blob/main/src/Mvc/Mvc.Core/src/RequestSizeLimitAttribute.cs\r\n* https://github.com/dotnet/aspnetcore/blob/main/src/Mvc/Mvc.Core/src/RequestFormLimitsAttribute.cs",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOT1s8Gg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde84-266c",
                                           "createdAt":  "2022-02-28T19:21:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pranavkm",
                                           "body":  "FYI @halter73 / @Tratcher ",
                                           "updatedAt":  "2022-02-28T19:21:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde84-28sV",
                                           "createdAt":  "2022-02-28T19:31:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "https://github.com/dotnet/aspnetcore/blob/main/src/Mvc/Mvc.Core/src/DisableRequestSizeLimitAttribute.cs",
                                           "updatedAt":  "2022-02-28T19:31:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde84-3Nyq",
                                           "createdAt":  "2022-02-28T21:06:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 7 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-02-28T21:06:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85KDuDM",
                                           "createdAt":  "2022-09-09T21:19:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-09-09T21:19:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85PWzwa",
                                           "createdAt":  "2022-11-29T22:03:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "YARP needs this too: https://github.com/microsoft/reverse-proxy/issues/640",
                                           "updatedAt":  "2022-11-29T22:03:47Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Add a middleware to enforce request size limits",
        "labels":  [
                       "Needs: Design",
                       "area-networking",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/40677",
        "createdAt":  "2022-03-12T01:15:15Z",
        "number":  40677,
        "author":  "seangwright",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCb4gjQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KenticoDevTrev",
                                            "createdAt":  "2022-03-12T02:40:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "liamgold",
                                            "createdAt":  "2022-03-13T16:17:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bkehren",
                                            "createdAt":  "2022-03-14T17:45:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dhughes55",
                                            "createdAt":  "2022-03-29T14:51:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xdjoshuaaz",
                                            "createdAt":  "2022-05-09T16:27:31Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2024-08-04T18:52:22Z",
        "body":  "## Issue\r\n\r\nAn issue exists requesting a solution to setting the re-execute path for the StatusCodePages and ExceptionHandler middleware.\r\nhttps://github.com/dotnet/aspnetcore/issues/18383\r\n\r\nWhile both middleware allow for a custom handler/pipeline to be used, if the original functionality provided by ASPNET Core is the goal, but a \"dynamic\" path is needed, then developers will currently need to copy source from ASPNET Core to re-create the original functionality. If they want the ExceptionHandler middleware to be performant when acquiring a dynamic error path, they also need to re-create `internal` framework code, chasing a breadcrumb trail (ex: `DiagnosticsLoggerExtensions` and `Resources.resx`).\r\n\r\nBoth the `UseStatusCodePagesWithReExecute` and `UseExceptionHandler` are robust and the most convenient ways to gracefully handle errors in the framework, so copying ASPNET Core source into multiple applications is the route I\u0027ve taken and I\u0027d like to avoid this, while also limiting the impact to the framework to have this \u0027baked in\u0027.\r\n\r\n## Value\r\n\r\nNeeding dynamic path values for these middleware is common in Content Management Systems (or any application with runtime dynamic routes) where URLs are generated/stored in the database and need to be discovered at runtime.\r\n\r\nAnother scenario where dynamic paths would be important is if the re-executed path had culture information in it - a subdomain or a path prefix (ex: `/es-mx/not-found`) cannot be static as it\u0027s dependent on the request/culture.\r\n\r\n## Proposed Solution\r\n\r\nBoth of these middleware are customizable through their options:\r\n\r\n- [UseStatusCodePagesWithReExecute](https://github.com/dotnet/aspnetcore/blob/v6.0.3/src/Middleware/Diagnostics/src/StatusCodePage/StatusCodePagesExtensions.cs#L167) with `pathFormat`\r\n- [UseExceptionHandler](https://github.com/dotnet/aspnetcore/blob/v6.0.3/src/Middleware/Diagnostics/src/ExceptionHandler/ExceptionHandlerExtensions.cs#L89) with `ExceptionHandlerOptions`\r\n\r\nSince providing options through the extensions is the existing pattern, we could add a way to provide a `Func\u003cSomeContext, Task\u003cstring\u003e\u003e? PathRetriever`.\r\n\r\nThe delegate, if not null, would be executed to acquire the path string. However, we also don\u0027t want to perform the potentially expensive operation of acquiring the path string until it is needed, so this value would need to be passed down to where the static path is used to setup the re-execution of the pipeline to handle the errors.\r\n\r\n### UseStatusCodePagesWithReExecute\r\n\r\n```csharp\r\n//// New overload of extension method ////\r\npublic static IApplicationBuilder UseStatusCodePagesWithReExecute(\r\n    this IApplicationBuilder app,\r\n    Func\u003cStatusCodeContext, Task\u003cstring\u003e\u003e pathRetriever)\r\n{\r\n    if (app == null)\r\n    {\r\n        throw new ArgumentNullException(nameof(app));\r\n    }\r\n\r\n    const string globalRouteBuilderKey = \"__GlobalEndpointRouteBuilder\";\r\n    // Only use this path if there\u0027s a global router (in the \u0027WebApplication\u0027 case).\r\n    if (app.Properties.TryGetValue(globalRouteBuilderKey, out var routeBuilder) \u0026\u0026 routeBuilder is not null)\r\n    {\r\n        return app.Use(next =\u003e\r\n        {\r\n            /** Same as existing **/\r\n\r\n            return new StatusCodePagesMiddleware(next,\r\n                //// Pass the new delegate to the CreateHandler method ////\r\n                Options.Create(new StatusCodePagesOptions() { HandleAsync = CreateHandler(null, null, pathRetriever, newNext) })).Invoke;\r\n        });\r\n    }\r\n\r\n    //// Pass the new delegate to the CreateHandler method ////\r\n    return app.UseStatusCodePages(CreateHandler(null, null, pathRetriever));\r\n}\r\n\r\nprivate static Func\u003cStatusCodeContext, Task\u003e CreateHandler(string? pathFormat, string? queryFormat, Func\u003cStatusCodeContext, Task\u003cstring\u003e\u003e? pathRetriever, RequestDelegate? next = null)\r\n{\r\n    var handler = async (StatusCodeContext context) =\u003e\r\n    {\r\n        //// New logic to retrieve path dynamically ////\r\n        pathFormat = pathRetriever is not null\r\n            ? await pathRetriever(context)\r\n            : pathFormat;\r\n\r\n        // Same as existing\r\n    };\r\n\r\n    return handler;\r\n}\r\n```\r\n\r\n### UseExceptionHandler\r\n\r\n```csharp\r\npublic class ExceptionHandlerOptions\r\n{\r\n    public PathString ExceptionHandlingPath { get; set; }\r\n\r\n    public RequestDelegate? ExceptionHandler { get; set; }\r\n\r\n    public bool AllowStatusCode404Response { get; set; }\r\n\r\n    //// New optional property ////\r\n    public Func\u003cHttpContext, Task\u003cstring\u003e\u003e? PathRetriever { get; set; }\r\n}\r\n\r\npublic class ExceptionHandlerMiddleware\r\n{\r\n   /** Same as existing **/\r\n\r\n    private async Task HandleException(HttpContext context, ExceptionDispatchInfo edi)\r\n    {\r\n        _logger.UnhandledException(edi.SourceException);\r\n        // We can\u0027t do anything if the response has already started, just abort.\r\n        if (context.Response.HasStarted)\r\n        {\r\n            _logger.ResponseStartedErrorHandler();\r\n            edi.Throw();\r\n        }\r\n\r\n        PathString originalPath = context.Request.Path;\r\n   \r\n        //// New logic to retrieve path dynamically ////\r\n        if (_options.PathRetriever is not null)\r\n        {\r\n            context.Request.Path = await _options.PathRetriever(context);\r\n        }\r\n        else if (_options.ExceptionHandlingPath.HasValue)\r\n        {\r\n            context.Request.Path = _options.ExceptionHandlingPath;\r\n        }\r\n        \r\n        /** Same as existing **/\r\n    }\r\n}\r\n```\r\n\r\nThese additions would enable developers to specify the re-execute path dynamically, using the context of the error, incurring the cost of the `async` delegate only when the errors occur.\r\n\r\nI\u0027d be happy to follow up this proposal with a PR if it seems there is enough value to these changes. If not, I\u0027ll continue copying source code and manually keeping it up to date as I upgrade TFMs in multiple projects over time.\r\n\r\nThanks!",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhyk4PA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde84_hr4b",
                                           "createdAt":  "2022-03-12T02:40:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KenticoDevTrev",
                                           "body":  "This would awesome!",
                                           "updatedAt":  "2022-03-12T02:40:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85ACZhz",
                                           "createdAt":  "2022-03-21T20:13:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-03-21T20:13:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85ACu5W",
                                           "createdAt":  "2022-03-21T21:53:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "seangwright",
                                           "body":  "@adityamandaleeka I understand if the aspnet core team can\u0027t prioritize this change at the moment, but would a PR still be reviewed if I contributed something?\r\n\r\nI opened this design proposal to find out if this kind of feature enhancement was something that aligned with the goals of the framework.\r\n\r\nThanks!",
                                           "updatedAt":  "2022-03-21T21:53:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85ACwVY",
                                           "createdAt":  "2022-03-21T22:02:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "@seangwright Yes, we\u0027d be open to reviewing a PR for this! \r\n\r\nI guess the bot\u0027s comment is a bit misleading in this case 😄 . The intent behind putting it in \"Backlog\" was for us to know it\u0027s not critical to do in 7, but since it\u0027s \"help wanted\", you could send us a PR and we can give you feedback on it.",
                                           "updatedAt":  "2022-03-21T22:02:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85ADA75",
                                           "createdAt":  "2022-03-21T23:48:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "seangwright",
                                           "body":  "I read [Before writing code](https://github.com/dotnet/aspnetcore/blob/main/CONTRIBUTING.md#before-writing-code) in the Contributing doc. I want to know that this idea has legs and is worth exploring 😁.\r\n\r\nI\u0027ll open a PR once I have a minute to author something.\r\n\r\nQuestion: I didn\u0027t cover the [UseStatusCodePagesWithRedirects](https://github.com/dotnet/aspnetcore/blob/v6.0.3/src/Middleware/Diagnostics/src/StatusCodePage/StatusCodePagesExtensions.cs#L111) extension in the design proposal. Would that need to be included in the PR?",
                                           "updatedAt":  "2022-03-21T23:48:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85ADkgr",
                                           "createdAt":  "2022-03-22T03:07:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCT_AuQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "seangwright",
                                                                               "createdAt":  "2022-03-22T03:49:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "A few more thoughts about the design first:\r\nInstead of `Func\u003cHttpContext, Task\u003cstring\u003e\u003e` returning the new path, how about `Func\u003cHttpContext, Task\u003e` where you are responsible for updating the HttpContext directly? I\u0027d also consider something like `Func\u003cHttpContext, Task\u003cbool\u003e\u003e` where the return value could indicate if you even want to re-execute the request, or if you were able to handle the error inline.\r\n\r\nCan you try those variants and see how they work?",
                                           "updatedAt":  "2022-03-22T03:07:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85P8zGL",
                                           "createdAt":  "2022-12-07T17:44:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MadL1me",
                                           "body":  "@seangwright what about this issue? Did you opened PR for it, or abandoned the Idea? If so, why?",
                                           "updatedAt":  "2022-12-07T17:44:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85P9xGy",
                                           "createdAt":  "2022-12-07T21:02:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "seangwright",
                                           "body":  "@MadL1me I haven\u0027t abandoned the idea. We are using a customized version of the status code pages/exception handler middleware for our applications that lets us handle this stuff dynamically (backed by a content management system) and it works great.\r\n\r\nI just never got around to designing the architecture that would be appropriate for a generalized solution in aspnet core, so there\u0027s no PR.\r\n\r\nI would like to come back to this - maybe over the holidays when I have some free time.",
                                           "updatedAt":  "2022-12-07T21:02:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85P_XZa",
                                           "createdAt":  "2022-12-08T04:43:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MadL1me",
                                           "body":  "@seangwright would you mind, if I also try to implement this? Wanna get some practice in big open source project, and this feature looks interesting enough for me",
                                           "updatedAt":  "2022-12-08T04:43:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85QCTcm",
                                           "createdAt":  "2022-12-08T14:00:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "seangwright",
                                           "body":  "@MadL1me Go for it! Ping me on a PR when you create one.",
                                           "updatedAt":  "2022-12-08T14:00:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86HDSPV",
                                           "createdAt":  "2024-08-02T16:49:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FireflyInTheDusk",
                                           "body":  "+1 for this, the only way to get localized error pages right now is, as OP said, to pull .net code into your app and customize it.\r\n\r\nA simple\r\n\r\n```\r\napp.UseStatusCodePagesWithReExecute(context =\u003e {\r\n   var locale = FigureOutLocale(context.Request);\r\n   return $\"/{locale}/error{context.Response.StatusCode}\";\r\n});\r\n```\r\n\r\nwould go a long way towards making this a more flexible feature.",
                                           "updatedAt":  "2024-08-02T17:22:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86HKTg8",
                                           "createdAt":  "2024-08-04T18:12:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FireflyInTheDusk",
                                           "body":  "P.S. I\u0027d try to give implementing this a shot but it looks to me like there\u0027s still a discussion going on about what the design should look like.\r\n\r\nI posted some code above so that\u0027s the functionality that I\u0027d like to see from the middleware, but anything that solves the problem would be great.\r\n\r\nHowever I\u0027m not sure the `Func\u003cHttpContext, Task\u003e` or \"here\u0027s the context, set props (that will presumably be explained in the docs?) on it\" idea is an intuitive improvement here, a function that takes a context and sets values on it is more like a middleware itself so we end up writing a middleware inside another middleware when all that\u0027s wanted is to support more than just inserting the status code at a specific point in the string . i.e. the real issue for e.g. localization use cases, is that the current formatting rules are too restrictive.\r\n\r\nBut I like the idea of returning true or false to indicate if the rewrite should happen or not. Maybe useful if different middlewares handle different status codes. Though I\u0027d probably prefer that to be an overload available for that specific use case rather than something every user has to go through.",
                                           "updatedAt":  "2024-08-04T18:52:22Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Design Proposal: Dynamic/Async paths for StatusCodePages and ExceptionHandler middleware",
        "labels":  [
                       "area-networking",
                       "area-middleware",
                       "help candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/40869",
        "createdAt":  "2022-03-25T10:55:51Z",
        "number":  40869,
        "author":  "Andreas-Hjortland",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC1aOig==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yume-chan",
                                            "createdAt":  "2024-01-22T06:52:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stassss2011",
                                            "createdAt":  "2024-01-24T21:59:24Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-03-05T22:43:11Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI am trying to reach my ASP.NET core api running on https://localhost:5001/ from a SPA which is hosted on another domain (although same computer for me) and I get a CORS error.\n\n### Describe the solution you\u0027d like\n\nI would like to propose that we extend the `CorsPolicy` with the boolean property `AllowPrivateNetworkAccess` and `CorsPolicyBuilder` with the method `WithPrivateNetworkAccess` which the `CorsService`  uses to set the `Access-Control-Allow-Private-Network: true` on preflight requests if the browser sends the `Access-Control-Request-Private-Network: true` header in the request.\n\n### Additional context\n\nLink to WICG Draft: https://wicg.github.io/private-network-access/\r\nLink to Chrome developer article about the feature and roll out: https://developer.chrome.com/blog/private-network-access-preflight/",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTQCgJQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85ATsJP",
                                           "createdAt":  "2022-03-25T10:57:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODkdVsw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "l-eugine",
                                                                               "createdAt":  "2022-08-18T14:16:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "babinik",
                                                                               "createdAt":  "2022-08-18T14:23:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "viniciuschiele",
                                                                               "createdAt":  "2023-03-14T14:49:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yume-chan",
                                                                               "createdAt":  "2024-01-22T06:52:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jbaronfr",
                                                                               "createdAt":  "2024-02-05T13:37:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xulihang",
                                                                               "createdAt":  "2024-06-04T07:47:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "Andreas-Hjortland",
                                           "body":  "For people who are having issues with the private network access cors header, you can add the following code snippet just before `app.UseCors()` in your ASP.NET application to work around the issue until we get proper support through the `CorsPolicyBuilder` interface:\r\n\r\n```c#\r\n// Enable PNA preflight requests\r\napp.Use(async (ctx, next) =\u003e\r\n{\r\n    if (ctx.Request.Method.Equals(\"options\", StringComparison.InvariantCultureIgnoreCase) \u0026\u0026 ctx.Request.Headers.ContainsKey(\"Access-Control-Request-Private-Network\"))\r\n    {\r\n        ctx.Response.Headers.Add(\"Access-Control-Allow-Private-Network\", \"true\");\r\n    }\r\n\r\n    await next();\r\n});\r\napp.UseCors();\r\n```",
                                           "updatedAt":  "2022-03-25T10:57:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85ATsjS",
                                           "createdAt":  "2022-03-25T11:00:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Andreas-Hjortland",
                                           "body":  "I am willing to try to implement this feature if you decide that you want to add it =)",
                                           "updatedAt":  "2022-03-25T11:00:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85AUfm_",
                                           "createdAt":  "2022-03-25T14:59:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCUw2iw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Andreas-Hjortland",
                                                                               "createdAt":  "2022-03-25T20:18:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "blowdart",
                                           "body":  "We tend not to add support for unoffical drafts as they are in flux, and can change at any time, and if they do so after we release we\u0027re in a bad position, having to support back compatibility as well as the updated standard.",
                                           "updatedAt":  "2022-03-25T14:59:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85AguIJ",
                                           "createdAt":  "2022-03-29T20:01:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-03-29T20:01:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85ERcfY",
                                           "createdAt":  "2022-06-02T23:05:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCgCaGw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Andreas-Hjortland",
                                                                               "createdAt":  "2022-06-03T04:01:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "michaelakin",
                                           "body":  "Thanks for the code @Andreas-Hjortland   That solved our issue, but it would be nice to see this a regular add on to the CORS configuration.",
                                           "updatedAt":  "2022-06-02T23:05:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85M_23S",
                                           "createdAt":  "2022-10-26T10:13:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jetersen",
                                           "body":  "@blowdart This is now live in Chrome 104 and above 😅",
                                           "updatedAt":  "2022-10-26T10:13:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85NAKAl",
                                           "createdAt":  "2022-10-26T11:26:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC0qMqg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "paule96",
                                                                               "createdAt":  "2023-01-23T18:11:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-10-26T11:26:22Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Add support for Private Network Access (CORS header Access-Control-Allow-Private-Network)",
        "labels":  [
                       "feature-cors",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/42132",
        "createdAt":  "2022-06-10T19:55:34Z",
        "number":  42132,
        "author":  "blowdart",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-28T23:09:51Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nDue to a long and woeful story I ended up having to recreate one of my websites in a new azure subscription.\r\n\r\nAs you may know Azure offers managed service certificates for free, much like Let\u0027s Encrypt, but from another provider.\r\n\r\nThe issuance checks failed due to HSTS - the agent the provider uses obeyed the HSTS directive, along with following the HTTPS redirect, which lead it to an invalid SSL certificate because it\u0027s the default one issued for the azurewebsites domain.\r\n\r\nThis puts you in an awkward position, you can\u0027t get a correct certificate, because the current one is invalid and you\u0027re stuck in a circle until you turn HSTS off.\n\n### Describe the solution you\u0027d like\n\nAdd the ability to exclude certain file paths from having the HSTS header added by app.UseHsts() and from the HTTP to HTTPS redirection middleware in app.UseRewriter(). Rewriter already has domain inclusion, so it\u0027d be an expansion of that.\r\n\r\nBy default you could consider having the following two paths in the exclusion list to allow for cert requests to proceed if the existing HTTPS certificate is invalid.\r\n\r\n`/.well-known/pki-validation/` for azure\u0027s managed certificates\r\n`/.well-known/acme-challenge/` for let\u0027s encrypt\r\n\r\n\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORPOKjg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85EtOgu",
                                           "createdAt":  "2022-06-10T20:17:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "Triage: Maybe we could do this but not have a list of defaults (just allow people to set what they want and provide some guidance for common use cases). We don\u0027t want to maintain a known set of defaults for this.",
                                           "updatedAt":  "2022-06-10T20:17:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85EtOj3",
                                           "createdAt":  "2022-06-10T20:18:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-06-10T20:18:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85E84qO",
                                           "createdAt":  "2022-06-15T18:48:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Note UseRewriter is not the default middleware used for HTTPS redirects, it\u0027s UseHttpsRedirection.\r\n\r\nWe\u0027ve discouraged re-inventing routing for matching/exclusions in each middleware. Here are some alternatives:\r\n- Make these middleware \"endpoint-aware\" where routing happens first, then middleware reads metadata on the matched endpoint to decide if it should act or not. This can take the form of attributes like `[SkipHsts]`.\r\n- Add custom middleware ahead of UseHsts and UseHttpsRedirection to handle these special routes that need to be excluded.\r\n```\r\napp.Use((context, next) =\u003e\r\n{\r\n  if (context.Request.Path.Equals(\"/.well-known/pki-validation/\"))\r\n  {\r\n    // TODO: Handle this request\r\n    return Task.CompletedTask;\r\n  }\r\n  return next(context);\r\n});\r\napp.UseHsts();\r\napp.UseHttpsRedirection();\r\n```\r\n",
                                           "updatedAt":  "2022-06-15T18:48:11Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Add path based exclusions to HSTS and Rewriter middleware",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/42324",
        "createdAt":  "2022-06-21T15:13:13Z",
        "number":  42324,
        "author":  "Kahbazi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-25T00:08:24Z",
        "body":  "I\u0027ve opened this issue to discuss the idea that I\u0027ve mentioned in [here](https://github.com/dotnet/aspnetcore/pull/40279#discussion_r810507794) and [here](https://github.com/dotnet/aspnetcore/pull/40279#discussion_r816191725) now that Request Decompression Middleware is merged.\r\n\r\nAt the moment `IDecompressionProvider` is creating a decompression stream and the middleware creates a `SizeLimitedStream` which wraps the other one. We could reduce this two streams into one if the `IDecompressionProvider` returns a stream that also handle size limit check, and the middleware only create `SizeLimitedStream` if the returned stream from the `IDecompressionProvider` is not marked with `IDontNeedWrapper` interface.\r\n\r\n```diff\r\n+internal interface IDontNeedWrapper {}\r\n+internal sealed class GZipRequestDecompressionBody : GZipStream, IDontNeedWrapper {}\r\n+internal sealed class DeflateRequestDecompressionBody : DeflateStream , IDontNeedWrapper {}\r\n+internal sealed class BrotliRequestDecompressionBody : BrotliStream, IDontNeedWrapper {}\r\n```\r\nThe new types for this change are all private, so there\u0027s no new public types. By doing this we would reduce one allocation per requests when request body is compressed by `GZip`, `Deflate` or `Brotli`. \r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOReQkoQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85FXASF",
                                           "createdAt":  "2022-06-22T22:08:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "Triage: we\u0027d need to see perf numbers to decide whether the impact of this is worth the complexity. A small improvement in this decompression scenario may not be worth it...",
                                           "updatedAt":  "2022-06-22T22:08:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85FXAXQ",
                                           "createdAt":  "2022-06-22T22:09:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-06-22T22:09:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85F5CSh",
                                           "createdAt":  "2022-07-01T17:48:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "david-acker",
                                           "body":  "I made these changes locally and there only seems to be an allocation-related improvement for compressed requests when `IRequestSizeLimitMetadata` exists (reduced from 3 KB to 2 KB). Apart from that, it doesn\u0027t look like much else changed, although I\u0027m not too familiar with interpreting these benchmarks.\r\n\r\n[Benchmark Results](https://gist.github.com/david-acker/b919b84290d9cc3b1df03711305e10eb)\r\n\r\nI also noticed a few complications when implementing and testing this:\r\n\r\n1. The `BrotliStream` class is sealed, so we\u0027ll only be able to create new types for Deflate and GZip.\r\n2. The `CopyTo` and `CopyToAsync` methods on the `GZipStream` pass their operations to [a `DeflateStream` that\u0027s used internally](https://github.com/dotnet/runtime/blob/abc028d6018c17ece952de59feedcc489d2e95b2/src/libraries/System.IO.Compression/src/System/IO/Compression/GZipStream.cs#L237) which circumvented the size limit check I added and caused some test failures. I not sure if this was to be expected, but it doesn\u0027t seem like adding the size limit check will be as straight forward as overriding the `Read` and `ReadAsync` methods like it was for the original `SizeLimitedStream`. ",
                                           "updatedAt":  "2022-07-01T17:48:31Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Use Inheritance instead of Composition to Reduce allocation in Request Decompression Middleware",
        "labels":  [
                       "investigate",
                       "Perf",
                       "area-networking",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/42691",
        "createdAt":  "2022-07-12T16:28:08Z",
        "number":  42691,
        "author":  "Kahbazi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODK4Pkw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hhyyrylainen",
                                            "createdAt":  "2023-06-06T15:28:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stukalin",
                                            "createdAt":  "2023-09-16T08:21:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sizzle168",
                                            "createdAt":  "2023-10-30T12:32:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hacst",
                                            "createdAt":  "2023-10-31T08:49:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GiampaoloGabba",
                                            "createdAt":  "2023-11-05T00:26:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rgueldenpfennig",
                                            "createdAt":  "2023-11-05T18:57:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jonmest",
                                            "createdAt":  "2023-12-18T08:26:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jeffreyytc",
                                            "createdAt":  "2023-12-19T09:09:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "StanislavPrusac",
                                            "createdAt":  "2024-01-21T00:41:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aKzenT",
                                            "createdAt":  "2024-01-26T23:39:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rhodon-jargon",
                                            "createdAt":  "2024-02-05T10:41:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "robcao",
                                            "createdAt":  "2024-02-13T21:54:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Abooow",
                                            "createdAt":  "2024-03-15T11:35:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "spanglerco",
                                            "createdAt":  "2024-03-20T20:55:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "guibranco",
                                            "createdAt":  "2024-04-17T10:21:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MikeNolan678",
                                            "createdAt":  "2024-08-09T09:53:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Trivivium",
                                            "createdAt":  "2024-12-11T20:14:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "awebre",
                                            "createdAt":  "2025-01-24T18:26:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "davidorbelian",
                                            "createdAt":  "2025-01-31T10:37:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jmbryan4",
                                            "createdAt":  "2025-02-27T15:39:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mfaguilar",
                                            "createdAt":  "2025-03-20T17:38:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danielalvsaaker",
                                            "createdAt":  "2025-03-20T18:19:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "michiclair",
                                            "createdAt":  "2025-03-20T21:21:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "czd890",
                                            "createdAt":  "2025-04-01T06:31:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "whoeevee",
                                            "createdAt":  "2025-04-09T21:55:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "chriswue",
                                            "createdAt":  "2025-04-11T03:13:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ApacheTech",
                                            "createdAt":  "2025-06-25T10:04:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "akrasp",
                                            "createdAt":  "2025-08-06T15:15:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mikimouse77",
                                            "createdAt":  "2025-08-12T15:13:46Z"
                                        }
                                    ],
                          "totalCount":  29
                      },
        "updatedAt":  "2025-09-01T04:10:48Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nRight now RateLimiting middleware has two `PartitionedRateLimiter`. A **global** and an **endpoint** limiter. This means for each endpoint there could be at most two level of rate limiters and also the global one is somehow limited because it must be same for all endpoints.\r\nSo I can not limit my endpoints based on more than two partitions. As an example I need to limit first based on request IP, then current user Id and then based on the current endpoint.\r\nLet\u0027s say I need to limit 10 requests per second per IP, no matter which endpoint. And also limit 5 requests per second per User Id.\r\n\r\nAlso I can\u0027t have different window and limit based on one partition. Again let\u0027s say I need to limit 10 requests per second per IP and also limit 40 requests per minute per IP.\n\n### Describe the solution you\u0027d like\n\nI\u0027m suggesting to create `PartitionedRateLimiter\u003cHttpContext\u003e` based on policy and have a `Dictionary\u003cstring, PartitionedRateLimiter\u003cHttpContext\u003e` which policy is the key. The endpoints could have multiple `IRequireRateLimitMetadata` and every one of them is a policy with its own `PartitionedRateLimiter`. And the middleware would always call Acquire on each of these limiters whether `IsAcquired` is true or false and only limit the request if one of them has IsAcquired = false. \r\n\r\nThis way part of the limiter like checking based on User Id could be shared between multiple endpoints too.\n\n### Additional context\n\ncc @wtgodbe @BrennanConroy @halter",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwSXUZg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85GdAQZ",
                                           "createdAt":  "2022-07-12T16:51:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wtgodbe",
                                           "body":  "This should be achievable through the [CreateChained](https://github.com/dotnet/runtime/blob/79874806d246670ee5fe76e73ce566578fe675c0/src/libraries/System.Threading.RateLimiting/src/System/Threading/RateLimiting/PartitionedRateLimiter.cs#L52-L64) API in runtime - it allows you to pass in multiple `PartitionedRateLimiter`s which it will combine into 1 `PartitionedRateLimiter` that runs all of your input limiters in sequence. Then you could apply that single chained limiter to the endpoint.",
                                           "updatedAt":  "2022-07-12T16:51:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85GeTWS",
                                           "createdAt":  "2022-07-12T19:26:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wtgodbe",
                                           "body":  "Going to close this as I believe it\u0027s covered by the above comment - feel free to re-open if there\u0027s additional functionality in this request that I\u0027m missing.",
                                           "updatedAt":  "2022-07-12T19:26:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85GfiU_",
                                           "createdAt":  "2022-07-13T01:56:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEEudaA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StanislavPrusac",
                                                                               "createdAt":  "2024-01-21T00:44:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vadimkhm",
                                                                               "createdAt":  "2025-01-31T10:03:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Kahbazi",
                                           "body":  "@wtgodbe I believe the issue should be re-opened. It seems `ChainedPartitionedRateLimiter` is the answer on how to implement my requirements (with a small change that I need to call `Acquire` on every limiter whether IsAcquired is true or false), but I don\u0027t see any way to achieve that using the current implementation of the middleware. Is there any sample on how to do that? And also I can\u0027t use the global limiter because I would need different `ChainedPartitionedRateLimiter` per endpoint.",
                                           "updatedAt":  "2022-07-13T01:56:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85GiblV",
                                           "createdAt":  "2022-07-13T16:26:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wtgodbe",
                                           "body":  "I see, I think you\u0027re right that we don\u0027t currently support that (endpoint policies are RateLimitPartition based, not PartitionedRateLimiter based). We\u0027ll consider this for future passes",
                                           "updatedAt":  "2022-07-13T16:26:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Gjj0J",
                                           "createdAt":  "2022-07-13T22:06:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEEvOyg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "vadimkhm",
                                                                               "createdAt":  "2025-01-31T12:09:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "Triage: we\u0027re open to this but we\u0027d like to see more use cases for this sort of pattern.",
                                           "updatedAt":  "2022-07-13T22:06:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85GjkAg",
                                           "createdAt":  "2022-07-13T22:07:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEEvO6g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "vadimkhm",
                                                                               "createdAt":  "2025-01-31T12:09:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-07-13T22:07:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85N3TWP",
                                           "createdAt":  "2022-11-07T23:05:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "We have another request for this: https://github.com/dotnet/aspnetcore/issues/44907",
                                           "updatedAt":  "2022-11-07T23:05:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85OqqFs",
                                           "createdAt":  "2022-11-18T10:19:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEa7w4w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "scardenas",
                                                                               "createdAt":  "2023-04-14T16:31:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MrChriZ",
                                                                               "createdAt":  "2023-04-26T11:13:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "iXab3r",
                                                                               "createdAt":  "2023-05-05T12:30:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vmandic",
                                                                               "createdAt":  "2023-05-23T08:02:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "felipessz",
                                                                               "createdAt":  "2023-05-24T18:56:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Garand-Gary",
                                                                               "createdAt":  "2023-06-06T10:41:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Quit",
                                                                               "createdAt":  "2023-06-15T22:08:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ErisonMiller",
                                                                               "createdAt":  "2023-08-02T18:02:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "oliveiracdz",
                                                                               "createdAt":  "2023-08-30T14:17:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sizzle168",
                                                                               "createdAt":  "2023-10-30T12:49:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aKzenT",
                                                                               "createdAt":  "2023-10-31T07:57:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rgueldenpfennig",
                                                                               "createdAt":  "2023-11-05T18:55:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Elvin1492",
                                                                               "createdAt":  "2023-12-10T14:49:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jonmest",
                                                                               "createdAt":  "2023-12-18T08:42:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "odin568",
                                                                               "createdAt":  "2023-12-22T10:32:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StanislavPrusac",
                                                                               "createdAt":  "2024-01-21T00:48:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rhodon-jargon",
                                                                               "createdAt":  "2024-02-05T10:43:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "atomaras",
                                                                               "createdAt":  "2024-03-27T19:20:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Tvde1",
                                                                               "createdAt":  "2024-04-23T09:50:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dienomb",
                                                                               "createdAt":  "2024-05-27T05:36:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Strandinator",
                                                                               "createdAt":  "2024-10-17T14:03:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kamilzzz",
                                                                               "createdAt":  "2024-10-17T14:31:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "awebre",
                                                                               "createdAt":  "2025-01-24T18:02:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maxicfg",
                                                                               "createdAt":  "2025-02-17T09:06:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "oravecjakub",
                                                                               "createdAt":  "2025-05-09T11:40:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "keiranFTW",
                                                                               "createdAt":  "2025-07-17T12:12:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  26
                                                         },
                                           "author":  "BondarencoM",
                                           "body":  "I also want to rate limit an endpoint with one partition but multiple time spans (e.g. allow 3 requests per second but only 100 per hour). As far as I can tell this is currently not possible but feels like a very basic use case.",
                                           "updatedAt":  "2022-11-18T10:19:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Tzv_0",
                                           "createdAt":  "2023-01-27T06:24:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stefannikolei",
                                           "body":  "+100 for @BondarencoM. \r\n\r\nATM it seems not possible to create a policy, which calls PartitionedRateLimiter.CreateChained().\r\n\r\nI also have the usecase to create a policy for an endpoint which eg. allows 1 Request per Minute and 10 Requests per Hour. Atm this does not seem to be easy achievable.",
                                           "updatedAt":  "2023-01-27T06:24:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85T86qg",
                                           "createdAt":  "2023-01-30T11:45:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "juasanpar",
                                           "body":  "Greetings,\r\n\r\nI have a very similar requirement of adding a RateLimiting policy of limiting the requests to 50 per minute and also not allowing more that 10 concurrent. At the moment this is only achievable using PartitionedRateLimiter.CreateChained() as you have already mentioned, but only for the global limiter. I have an API with several endpoints that need different limiting policies, so this is not the best option for me. Is there any progress on this request or is there any other way to achieve my purpose?\r\n\r\nThanks for your work and help!",
                                           "updatedAt":  "2023-01-30T11:45:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85UAyJ6",
                                           "createdAt":  "2023-01-30T23:03:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC54v6Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "scardenas",
                                                                               "createdAt":  "2023-04-14T16:32:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wtgodbe",
                                           "body":  "I agree we should do this for 8. Right now, you apply `RateLimitPartition`s to endpoints, not `PartitionedRateLimiter`s - the latter would be necessary to solve the problem. I think we could solve it by doing an internal `CreateChained` for `PartitionedRateLimiter`s added to endpoints",
                                           "updatedAt":  "2023-01-30T23:03:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85UB1kI",
                                           "createdAt":  "2023-01-31T05:09:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-01-31T05:09:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85ayuRS",
                                           "createdAt":  "2023-04-26T11:16:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MrChriZ",
                                           "body":  "I\u0027ve just come at this from exactly the same direction as @BondarencoM.  ",
                                           "updatedAt":  "2023-04-26T11:16:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85e_1ry",
                                           "createdAt":  "2023-06-15T22:16:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LinqToException",
                                           "body":  "I\u0027ve spent the last hour frustrated looking for a solution for this problem as well.\r\n\r\nIn my case, I have an endpoint that invokes another, 3rd party service, which has its own rate limiting. As such, I would have liked to create a policy on that single endpoint that\r\n\r\n- limits concurrent requests across all users to 5 (as specified by the 3rd party service),\r\n- limits requests by individual users using a token bucket or similar to allow burst-usage and\r\n- limits requests by individual users using a fixed window to a fixed amount per day",
                                           "updatedAt":  "2023-06-15T22:16:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85mplVc",
                                           "createdAt":  "2023-09-16T08:32:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEReT4g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sizzle168",
                                                                               "createdAt":  "2023-10-31T08:11:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StanislavPrusac",
                                                                               "createdAt":  "2024-01-21T00:51:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MikeNolan678",
                                                                               "createdAt":  "2024-03-09T10:59:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kuleshov-aleksei",
                                                                               "createdAt":  "2024-12-23T09:34:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "VenyaBrodetskiy",
                                                                               "createdAt":  "2025-01-08T14:26:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "david-visma",
                                                                               "createdAt":  "2025-01-10T14:50:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "oravecjakub",
                                                                               "createdAt":  "2025-05-09T11:43:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "stukalin",
                                           "body":  "I\u0027d like to +1 on this one. We\u0027d like to migrate away from the https://github.com/stefanprodan/AspNetCoreRateLimit project and some of our policies will be expressed by a chain of fixed window validators but they should be a custom `IRateLimiterPolicy` and apparenlty it\u0027s not possible to specify a chain as a non-global rate limiter.",
                                           "updatedAt":  "2023-09-16T08:32:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85qfvzW",
                                           "createdAt":  "2023-10-31T08:10:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEEud9Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vadimkhm",
                                                                               "createdAt":  "2025-01-31T10:05:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "sizzle168",
                                           "body":  "We face the same challenge that @stukalin describes. ",
                                           "updatedAt":  "2023-10-31T08:10:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85q6AoK",
                                           "createdAt":  "2023-11-05T00:28:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD__xeg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jonmest",
                                                                               "createdAt":  "2023-12-18T08:44:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffreyytc",
                                                                               "createdAt":  "2023-12-19T09:11:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MrChriZ",
                                                                               "createdAt":  "2023-12-22T10:54:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StanislavPrusac",
                                                                               "createdAt":  "2024-01-21T00:51:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ashleyjlive",
                                                                               "createdAt":  "2024-03-26T06:43:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kuleshov-aleksei",
                                                                               "createdAt":  "2024-12-23T09:34:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "GiampaoloGabba",
                                           "body":  "+1 for this. i tried to apply multiple policy to an endpoint but only the last one applied work.\r\nImho this is a very basic feature for a rate limiter, i see that didnt make it for .net8, i hope you consider it for future releases.\r\nI really wanted to use the rate limiting feature bundled with aspnetcore but is not flexible enough for my usecase.",
                                           "updatedAt":  "2023-11-05T00:28:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85uo4QU",
                                           "createdAt":  "2023-12-14T16:58:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODP6woA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jonmest",
                                                                               "createdAt":  "2023-12-18T08:44:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "CreepMania",
                                           "body":  "+1\r\n\r\nWe tried to implement a token bucket policy on top of fixed window policy but hit a wall.",
                                           "updatedAt":  "2023-12-14T16:58:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85vUCmr",
                                           "createdAt":  "2023-12-22T10:37:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODcJnYg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "jonmest",
                                                                               "createdAt":  "2023-12-22T11:32:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "StanislavPrusac",
                                                                               "createdAt":  "2024-01-21T00:51:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "ggnaegi",
                                                                               "createdAt":  "2024-01-27T22:22:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "MikeNolan678",
                                                                               "createdAt":  "2024-03-27T19:45:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "odin568",
                                           "body":  "Unfortunately did not make it in .NET 8 :(",
                                           "updatedAt":  "2023-12-22T10:37:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde852bIo7",
                                           "createdAt":  "2024-03-09T10:58:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MikeNolan678",
                                           "body":  "+1\r\n\r\nHas anyone been able to find a solution to this, which doesn\u0027t involve using the AspNetCoreRateLimit NuGet package? ",
                                           "updatedAt":  "2024-03-09T10:58:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde854oLPp",
                                           "createdAt":  "2024-03-27T19:24:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODcJncA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MikeNolan678",
                                                                               "createdAt":  "2024-03-27T19:45:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "atomaras",
                                           "body":  "Personally planning on building my own and following this guide https://developer.redis.com/develop/dotnet/aspnetcore/rate-limiting/middleware which has the added benefit (aside from the ability to do distributed rate limiting) of sending all rate limit rules that apply to a single endpoint over to Redis in a single request.",
                                           "updatedAt":  "2024-03-27T19:24:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde854oU9t",
                                           "createdAt":  "2024-03-27T19:46:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MikeNolan678",
                                           "body":  "\u003e Personally planning on building my own and following this guide https://developer.redis.com/develop/dotnet/aspnetcore/rate-limiting/middleware which has the added benefit (aside from the ability to do distributed rate limiting) of sending all rate limit rules that apply to a single endpoint over to Redis in a single request.\n\nNice! Thanks for sharing. I ended up using the ASPNetCoreRateLimit package in the end. ",
                                           "updatedAt":  "2024-03-27T19:46:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde854p0uN",
                                           "createdAt":  "2024-03-28T01:15:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "atomaras",
                                           "body":  "Spent a day so you don\u0027t have to. Here\u0027s the Redis Lua script (co-written by ChatGPT ofc) that implements the Sliding Window Rate Limit algo with support for multiple rules per invocation AND support for returning the remaining_tokens so you can power the X-Rate-Limit-Remaining header in your web api\r\nhttps://gist.github.com/atomaras/925a13f07c24df7f15dcc4fb7bc89c81",
                                           "updatedAt":  "2024-03-28T01:16:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86XmsVg",
                                           "createdAt":  "2024-12-15T06:55:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kahbazi",
                                           "body":  "@mkArtakMSFT Any plans to address this issue for .Net 10?",
                                           "updatedAt":  "2024-12-15T06:55:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86Y9f8u",
                                           "createdAt":  "2024-12-31T08:58:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "code-jar",
                                           "body":  "Any progress?",
                                           "updatedAt":  "2024-12-31T08:58:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86ZRfcv",
                                           "createdAt":  "2025-01-05T04:41:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eli-Chandler",
                                           "body":  "+1",
                                           "updatedAt":  "2025-01-05T04:41:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86ckocU",
                                           "createdAt":  "2025-01-31T10:18:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgHfxw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidorbelian",
                                                                               "createdAt":  "2025-01-31T10:37:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Nersess",
                                                                               "createdAt":  "2025-01-31T12:02:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "michaeljaneway",
                                                                               "createdAt":  "2025-02-07T13:58:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maxicfg",
                                                                               "createdAt":  "2025-02-17T09:04:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jmbryan4",
                                                                               "createdAt":  "2025-02-27T15:39:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "scardenas",
                                                                               "createdAt":  "2025-04-03T17:23:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "chriswue",
                                                                               "createdAt":  "2025-04-11T03:15:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "koda83",
                                                                               "createdAt":  "2025-05-01T08:29:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "saraStreit",
                                                                               "createdAt":  "2025-05-01T10:06:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "johnnygiter",
                                                                               "createdAt":  "2025-08-29T07:29:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  10
                                                         },
                                           "author":  "vadimkhm",
                                           "body":  "It’s surprising that this hasn’t been implemented yet. A clear example of why it’s needed: the fixed window rate limiter lacks concurrency control. If I set a limit of 5 requests per minute, I can still send an unlimited number of parallel requests within that window, which is quite unexpected behavior.\n\nIt would make a lot of sense to support chaining multiple limiters per policy to address such cases. +100 for implementing this feature!",
                                           "updatedAt":  "2025-01-31T10:18:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86gPOS4",
                                           "createdAt":  "2025-02-27T15:41:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jmbryan4",
                                           "body":  "Will this be a part of .NET 10? @mkArtakMSFT @wtgodbe ",
                                           "updatedAt":  "2025-02-27T15:41:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86jY7uD",
                                           "createdAt":  "2025-03-20T17:41:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mfaguilar",
                                           "body":  "Same issue here. I\u0027m also upvoting this feature.\nRight now I guess I will have to create a custom attribute to allow multiple policies.",
                                           "updatedAt":  "2025-03-20T17:41:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86mo4m9",
                                           "createdAt":  "2025-04-11T03:17:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chriswue",
                                           "body":  "Has anyone a practicable workaround (like with example not just some theoretical idea)?",
                                           "updatedAt":  "2025-04-11T03:17:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86nCSUH",
                                           "createdAt":  "2025-04-14T17:26:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcfzLw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "chriswue",
                                                                               "createdAt":  "2025-04-14T19:14:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "vadimkhm",
                                                                               "createdAt":  "2025-04-14T19:27:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "jmbryan4",
                                                                               "createdAt":  "2025-07-30T13:57:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "mfaguilar",
                                           "body":  "I created an implementation to support this MultiRateLimiter requirement. I have just uploaded to a repository so it can be useful to you too.\nhttps://github.com/mfaguilar/MultiRateLimiter/tree/main",
                                           "updatedAt":  "2025-04-14T17:26:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86nDqhX",
                                           "createdAt":  "2025-04-14T19:16:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chriswue",
                                           "body":  "\u003e I created an implementation to support this MultiRateLimiter requirement. I have just uploaded to a repository so it can be useful to you too. https://github.com/mfaguilar/MultiRateLimiter/tree/main\n\nThanks, that looks quite clean. Need to brush up my Spanish",
                                           "updatedAt":  "2025-04-14T19:16:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86nEGXc",
                                           "createdAt":  "2025-04-14T20:09:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mfaguilar",
                                           "body":  "\u003e \u003e I created an implementation to support this MultiRateLimiter requirement. I have just uploaded to a repository so it can be useful to you too. https://github.com/mfaguilar/MultiRateLimiter/tree/main\n\u003e \n\u003e Thanks, that looks quite clean. Need to brush up my Spanish\n\nYou are welcome. And yes, the comments inside the code are in spanish because is the main language for that project, but everthing else is in english, so it should be easy to follow.",
                                           "updatedAt":  "2025-04-14T20:09:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86y3HNF",
                                           "createdAt":  "2025-06-24T14:41:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ApacheTech",
                                           "body":  "I have a workaround of a kind.\n\n### Background\n\nWithin a penetration testing report, we were told that a vulnerability existed within the Forgot-Password feature (minimal changes from the scaffolded Razor Pages for Identity Area). The vulnerability included both that the attacker could sniper multiple accounts from the same IP address, and the the attacker could flood the same email address from the any number of IP addresses.\n\n### Suggested Fix\n\nThe suggested  fix was to add rate limiting, partitioned by IP address, and partitioned by the Input.Email within the HttpContext.Request.Body, with a 15 minute token bucket limiter, returning 429.\n\n### Problem with Current Policies\n\nIf we could add multiple policies per endpoint, this would be trivial. Everything we need is within the HttpContext, and the policies are easy enough to create. Then just slap two [EnableRateLimitPolicy] attributes onto the razor page, and done. But no. Currently, .NET does not support using multiple rate limiting policies per endpoint. So any combined IP and Email based rate limiting would be a composite, not a chain. This ends up meaning that you can spam the same email address with any number of IP addresses, or you can spam any number of email addresses with the same IP address.\n\n### Workaround\n\nThis might be a bit ugly, but it works for now. The idea is that we create keyed singletons for the limiter partitions, and then manually call them sequentially within a custom singleton service. This bypasses the attribute based rate limiting, and any method that needs it, must implement it manually. This is just the first version of it, and I\u0027m sure it can be prettified.\n\n**RateLimitHostExtensions.cs**\n\nFirst, we add the rate limiting policies, and the keyed services. You can configure any standard rate limiting policies here as well, and have a one-liner `builder.Services.AddRateLimitPolicies();` within Program.cs.\n\n```csharp\n/// \u003csummary\u003e\n///     Provides extension methods for registering rate limiting policies with the application\u0027s service collection.\n/// \u003c/summary\u003e\npublic static partial class RateLimitHostExtensions\n{\n\t/// \u003csummary\u003e\n\t///     Adds rate limiting policies to the service collection.\n\t/// \u003c/summary\u003e\n\t/// \u003cparam name=\"services\"\u003eThe service collection to add the rate limiting policies to.\u003c/param\u003e\n\t/// \u003creturns\u003eThe updated service collection.\u003c/returns\u003e\n\tpublic static IServiceCollection AddRateLimitPolicies(this IServiceCollection services)\n\t{\n\t\tservices.AddForgottenPasswordRateLimiting();\n\t\tservices.AddRateLimiter(options =\u003e\n\t\t{\n\t\t\toptions.RejectionStatusCode = StatusCodes.Status429TooManyRequests;\n\t\t\toptions.OnRejected = (ctx, _) =\u003e\n\t\t\t{\n\t\t\t\tif (ctx.Lease.TryGetMetadata(MetadataName.RetryAfter, out var retry))\n\t\t\t\t\tctx.HttpContext.Response.Headers.RetryAfter = retry.TotalSeconds.ToString();\n\t\t\t\treturn ValueTask.CompletedTask;\n\t\t\t};\n\t\t});\n\t\treturn services;\n\t}\n\n\tprivate static IServiceCollection AddForgottenPasswordRateLimiting(this IServiceCollection services)\n\t{\n\t\tservices.AddKeyedSingleton(\"ByIpAddress\", (sp, _) =\u003e \n\t\t\tPartitionedRateLimiter.Create\u003cHttpContext, string\u003e(ctx =\u003e\n\t\t\t{\n\t\t\t\tvar ipAddress = ctx.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n\t\t\t\treturn CreateTokenBucketPartition(\"ForgottenPassword:ByIpAddress\", ipAddress);\n\t\t\t})\n\t\t);\n\n\t\tservices.AddKeyedSingleton(\"ByEmailAddress\", (sp, _) =\u003e\n\t\t\tPartitionedRateLimiter.Create\u003cHttpContext, string\u003e(ctx =\u003e\n\t\t\t{\n\t\t\t\tvar form = ctx.Request.HasFormContentType ? ctx.Request.Form : null;\n\t\t\t\tif (form is null || !form.TryGetValue(\"Input.Email\", out var emailAddress)) emailAddress = \"unknown\";\n\t\t\t\treturn CreateTokenBucketPartition(\"ForgottenPassword:ByEmailAddress\", emailAddress);\n\t\t\t})\n\t\t);\n\n\t\tservices.AddSingleton\u003cIForgottenPasswordRateLimiter, ForgottenPasswordRateLimiter\u003e();\n\t\treturn services;\n\n\t\t/// \u003csummary\u003e\n\t\t///     Creates a token bucket limiter partition for the given policy and key.\n\t\t/// \u003c/summary\u003e\n\t\t/// \u003cparam name=\"policyName\"\u003eThe name of the rate limiting policy.\u003c/param\u003e\n\t\t/// \u003cparam name=\"key\"\u003eThe partition key.\u003c/param\u003e\n\t\t/// \u003creturns\u003eA token bucket limiter partition for the specified key.\u003c/returns\u003e\n\t\t/// \u003cremarks\u003e\n\t\t///     The token bucket limiter allows up to 10 requests to be made in quick succession (the bucket size),\n\t\t///     after which further requests are rejected until tokens are replenished. Every 15 minutes, 5 tokens\n\t\t///     are added to the bucket (up to the maximum of 10). This means a user can make up to 10 requests at once,\n\t\t///     but if they continue to make requests, they will be limited to 5 additional requests every 15 minutes.\n\t\t///     This helps to prevent abuse while still allowing for short bursts of activity.\n\t\t/// \u003c/remarks\u003e\n\t\tstatic RateLimitPartition\u003cstring\u003e CreateTokenBucketPartition(string policyName, string key)\n\t\t{\n\t\t\treturn RateLimitPartition.GetTokenBucketLimiter(\n\t\t\t\tpartitionKey: $\"{policyName}:{key}\",\n\t\t\t\tfactory: _ =\u003e new()\n\t\t\t\t{\n\t\t\t\t\tTokenLimit = 10,\n\t\t\t\t\tTokensPerPeriod = 5,\n\t\t\t\t\tQueueLimit = 0,\n\t\t\t\t\tReplenishmentPeriod = TimeSpan.FromMinutes(15),\n\t\t\t\t\tQueueProcessingOrder = QueueProcessingOrder.OldestFirst,\n\t\t\t\t\tAutoReplenishment = true,\n\t\t\t\t});\n\t\t}\n\t}\n}\n```\n\n**IForgottenPasswordRateLimiter.cs and ForgottenPasswordRateLimiter.cs**\n\nNext, you have the manual limiter itself. This cycles through the keyed services, and returns a value based on whether any leases are available or not, across any of the keyed services. The good thing about this is that it does actually chain them, running in sequence, rather than treating them as a composite.\n\n```csharp\n/// \u003csummary\u003e\n///     Provides methods to check the rate limit status for forgotten password requests.\n/// \u003c/summary\u003e\npublic interface IForgottenPasswordRateLimiter\n{\n\t/// \u003csummary\u003e\n\t///     Checks the rate limit for a forgotten password request asynchronously.\n\t/// \u003c/summary\u003e\n\t/// \u003cparam name=\"context\"\u003eThe current HTTP context.\u003c/param\u003e\n\t/// \u003creturns\u003e\n\t///     Null if allowed; otherwise a \u003csee cref=\"TimeSpan\"/\u003e indicating how long until retry.\n\t///     If the limiter did not provide metadata, returns \u003cc\u003eTimeSpan.Zero\u003c/c\u003e (429 without Retry-After).\n\t/// \u003c/returns\u003e\n\tTask\u003cTimeSpan?\u003e CheckRateLimitAsync(HttpContext context);\n}\n```\n\n```csharp\n/// \u003csummary\u003e\n///     Provides methods to check the rate limit status for forgotten password requests.\n/// \u003c/summary\u003e\npublic class ForgottenPasswordRateLimiter : IForgottenPasswordRateLimiter\n{\n\tprivate readonly PartitionedRateLimiter\u003cHttpContext\u003e _ipLimiter;\n\tprivate readonly PartitionedRateLimiter\u003cHttpContext\u003e _emailLimiter;\n\n\t/// \u003csummary\u003e\n\t///     Initialises a new instance with keyed services.\n\t/// \u003c/summary\u003e\n\tpublic ForgottenPasswordRateLimiter(\n\t\t[FromKeyedServices(\"ByIpAddress\")] PartitionedRateLimiter\u003cHttpContext\u003e ipLimiter,\n\t\t[FromKeyedServices(\"ByEmailAddress\")] PartitionedRateLimiter\u003cHttpContext\u003e emailLimiter)\n\t{\n\t\t_ipLimiter = ipLimiter ?? throw new ArgumentNullException(nameof(ipLimiter));\n\t\t_emailLimiter = emailLimiter ?? throw new ArgumentNullException(nameof(emailLimiter));\n\t}\n\n\t/// \u003cinheritdoc /\u003e\n\tpublic async Task\u003cTimeSpan?\u003e CheckRateLimitAsync(HttpContext context)\n\t{\n\t\tArgumentNullException.ThrowIfNull(context);\n\n\t\tvar ipLease = await _ipLimiter.AcquireAsync(context, 1, context.RequestAborted).ConfigureAwait(false);\n\t\tif (!ipLease.IsAcquired)\n\t\t{\n\t\t\treturn GetRetryAfter(ipLease);\n\t\t}\n\n\t\tvar emailLease = await _emailLimiter.AcquireAsync(context, 1, context.RequestAborted).ConfigureAwait(false);\n\t\tif (!emailLease.IsAcquired)\n\t\t{\n\t\t\tipLease.Dispose();\n\t\t\treturn GetRetryAfter(emailLease);\n\t\t}\n\n\t\tipLease.Dispose();\n\t\temailLease.Dispose();\n\t\treturn null;\n\n\t\tstatic TimeSpan GetRetryAfter(RateLimitLease lease) \n\t\t\t=\u003e lease.TryGetMetadata(MetadataName.RetryAfter, out var retryObj) \n\t\t\t\u0026\u0026 retryObj is TimeSpan retry ? retry : TimeSpan.Zero;\n\t}\n}\n```\n\n### Usage\n\nSo now, within **ForgotPassword.cshtml.cs**, we can inject `IForgottenPasswordRateLimiter` through the constructor, and call `CheckRateLimitAsync` early in `OnPostAsync`.\n\n```csharp\n\tpublic async Task\u003cIActionResult\u003e OnPostAsync()\n\t{\n\t\tif (!ModelState.IsValid) return Page();\n\n\t\t// Check rate limit first\n\t\tvar retryAfter = await _rateLimiter.CheckRateLimitAsync(HttpContext);\n\t\tif (retryAfter.HasValue)\n\t\t{\n\t\t\tResponse.StatusCode = StatusCodes.Status429TooManyRequests;\n\t\t\tResponse.Headers.RetryAfter = ((int)retryAfter.Value.TotalSeconds).ToString();\n\t\t\treturn new EmptyResult();\n\t\t}\n\n                // ...\n        }\n```\n\nIt\u0027s not perfect, I know. And it\u0027s not a reason to not allow multiple policies per endpoint. It\u0027s a lot of work for what would otherwise have been only a dozen lines of code. This use case shows a valid reason for this feature to be implemented, from a cybersecurity stance.\n \n",
                                           "updatedAt":  "2025-06-25T10:11:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87A4ehZ",
                                           "createdAt":  "2025-08-29T07:30:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "johnnygiter",
                                           "body":  "as I see it\u0027s added in net10, finally ",
                                           "updatedAt":  "2025-08-29T07:30:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87BJUxs",
                                           "createdAt":  "2025-08-31T22:07:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgTKWg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "johnnygiter",
                                                                               "createdAt":  "2025-08-31T22:32:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "chriswue",
                                           "body":  "\u003e as I see it\u0027s added in net10, finally\n\nI only had a cursory glance around and couldn\u0027t immediately find anything. Do you have a reference?",
                                           "updatedAt":  "2025-08-31T22:07:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87BJYB0",
                                           "createdAt":  "2025-08-31T22:35:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgTOrA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "chriswue",
                                                                               "createdAt":  "2025-08-31T23:14:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "johnnygiter",
                                           "body":  "\u003e \u003e as I see it\u0027s added in net10, finally\n\u003e \n\u003e I only had a cursory glance around and couldn\u0027t immediately find anything. Do you have a reference?\n\nNew method CreateChained(), in ratelimiting class, already tested in practice in net10 preview and worked like a charm! Finally! I\u0027ve missed that too., but will wait till official 10 release to enjoy this feature.",
                                           "updatedAt":  "2025-08-31T22:35:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87BJdRm",
                                           "createdAt":  "2025-08-31T23:14:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgYm9A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mfaguilar",
                                                                               "createdAt":  "2025-09-01T14:18:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "chriswue",
                                           "body":  "\u003e \u003e \u003e as I see it\u0027s added in net10, finally\n\u003e \u003e \n\u003e \u003e \n\u003e \u003e I only had a cursory glance around and couldn\u0027t immediately find anything. Do you have a reference?\n\u003e \n\u003e New method CreateChained(), in ratelimiting class, already tested in practice in net10 preview and worked like a charm! Finally! I\u0027ve missed that too., but will wait till official 10 release to enjoy this feature.\n\nThanks, for anyone else looking for a link -https://learn.microsoft.com/en-us/dotnet/api/system.threading.ratelimiting.ratelimiter.createchained?view=aspnetcore-10.0",
                                           "updatedAt":  "2025-08-31T23:14:43Z"
                                       }
                                   ],
                         "totalCount":  38
                     },
        "title":  "Support Multiple PartitionedRateLimiter Per Endpoint",
        "labels":  [
                       "feature-rate-limit",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/42700",
        "createdAt":  "2022-07-12T20:20:05Z",
        "number":  42700,
        "author":  "brunolins16",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-06-21T00:12:02Z",
        "body":  "During the #42384 I noticed that the Diagnostics middleware, mainly `StatusCodePages` middleware, allocated much more than expected\r\n\r\n| application                             | statuscodepages | nostatuscodepages+content |            |\r\n| --------------------------------------- | --------------- | ------------------------- | ---------- |\r\n| Max Working Set (MB)                    |             179 |                       186 |     +3.74% |\r\n| Max GC Heap Size (MB)                   |              90 |                        94 |     +4.21% |\r\n| Size of committed memory by the GC (MB) |             117 |                       119 |     +1.28% |\r\n| Max Number of Gen 0 GCs / sec           |           41.00 |                     25.00 |    -39.02% |\r\n| Max Number of Gen 1 GCs / sec           |            1.00 |                     13.00 | +1,200.00% |\r\n| Max Number of Gen 2 GCs / sec           |            0.00 |                      1.00 |        +∞% |\r\n| Max Time in GC (%)                      |            2.00 |                      1.00 |    -50.00% |\r\n| Max Gen 0 Size (B)                      |       3,152,512 |                 5,146,600 |    +63.25% |\r\n| Max Gen 1 Size (B)                      |       9,309,256 |                 5,376,536 |    -42.25% |\r\n| Max Gen 2 Size (B)                      |       1,970,808 |                 6,406,424 |   +225.07% |\r\n| Max LOH Size (B)                        |         411,320 |                   411,320 |      0.00% |\r\n| Max POH Size (B)                        |       3,472,456 |                 3,451,856 |     -0.59% |\r\n| Total Allocated Bytes                   |  96,805,446,920 |            57,737,869,840 |    -40.36% |\r\n| Max GC Heap Fragmentation               |              30 |                        41 |    +36.47% |\r\n\r\n| load                   | statuscodepages | nostatuscodepages+content |         |\r\n| ---------------------- | --------------- | ------------------------- | ------- |\r\n| Requests/sec           |       1,354,620 |                 1,429,729 |  +5.54% |\r\n| Requests               |      20,454,730 |                21,588,730 |  +5.54% |\r\n\r\n**nostatuscodepages+content** =\u003e `endpoints.MapGet(\"sample\", () =\u003e Results.Content(new string(\u0027 \u0027, 500), statusCode: 415));`\r\n\r\n`new string(\u0027 \u0027, 500)` is similar to what the `StatusCodePages` does.\r\n\r\nSince this middleware, and other Diagnostics middleware, will become more relevant after the introducing of `ProblemDetails` Services, we should do some profiling and optimizing of these middleware, including scenarios that produce a `ProblemDetails` payload.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVhjwwg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85WGO9N",
                                           "createdAt":  "2023-02-24T20:57:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-02-24T20:57:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85WGPDC",
                                           "createdAt":  "2023-02-24T20:58:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-02-24T20:58:01Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Profile and performance test Diagnostics middleware",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/43101",
        "createdAt":  "2022-08-04T20:13:24Z",
        "number":  43101,
        "author":  "wtgodbe",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCp-x5g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "halter73",
                                            "createdAt":  "2022-08-04T20:30:41Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-03-07T21:53:10Z",
        "body":  "The second case is, for example, here (should add an `else`): https://github.com/dotnet/aspnetcore/blob/80ea57377a90fa2750f46662be3642b59ad0feed/src/Middleware/HttpLogging/src/HttpLoggingMiddleware.cs#L186-L189",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Add more info to HttpLoggingMiddleware when response hasn\u0027t started, or request/response body are empty",
        "labels":  [
                       "area-middleware",
                       "feature-http-logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/43272",
        "createdAt":  "2022-08-14T00:40:15Z",
        "number":  43272,
        "author":  "ronniebarker",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3lxVw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MosheL",
                                            "createdAt":  "2024-01-30T17:07:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "utilsites",
                                            "createdAt":  "2024-04-30T16:20:23Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-07-26T12:44:25Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI am trying to clear a resource from the response cache because I have a new updated version.\n\n### Describe the solution you\u0027d like\n\nTo be able to clear a resource from the cache (or, in the worst case, clear the whole thing)\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhkVKFQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85IoYUQ",
                                           "createdAt":  "2022-08-17T22:16:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sebastienros",
                                           "body":  "Output Caching is a new feature in .NET 7 starting from preview 6 that handles this scenario. Can it be something that would work for you. It\u0027s driven by configuration and not by headers.\r\n\r\nThere is an intermediate package on NuGet that works with dotnet 6 if you can try it:\r\nhttps://www.nuget.org/packages/Preview.OutputCaching",
                                           "updatedAt":  "2022-08-17T22:16:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Iv3F8",
                                           "createdAt":  "2022-08-19T10:19:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ronniebarker",
                                           "body":  "Perhaps - but I don\u0027t think it is a big enough issue for us yet to arrant trying a preview package. I am managing to clear items by returning a response with a `max-age=1` (although the spec says you can use zero, the framework seems to reject that) but that requires a request from the resource which is fine for a single clear, but not for any bulk or service-driven clear.",
                                           "updatedAt":  "2022-08-19T10:19:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85IyEPU",
                                           "createdAt":  "2022-08-19T20:52:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sebastienros",
                                           "body":  "Are you setting the max-age header on the client? And in this case the server action will be hit even if it\u0027s cached (for longer in this case) and it will update the cache on its way back?",
                                           "updatedAt":  "2022-08-19T20:52:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Iyeaj",
                                           "createdAt":  "2022-08-20T00:46:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ronniebarker",
                                           "body":  "I am making a request with a custom header, using that header to decide to\nset max-age on the response so that the response cache is replaced with the\n\"very soon to expire\" version - effectively clearing that item in a second.\n\n\nOn Fri, Aug 19, 2022 at 21:52:41, Sébastien Ros ***@***.***\u003e\nwrote:\n\n\u003e Are you setting the max-age header on the client? And in this case the\n\u003e server action will be hit even if it\u0027s cached (for longer in this case) and\n\u003e it will update the cache on its way back?\n\u003e\n\u003e —\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/dotnet/aspnetcore/issues/43272#issuecomment-1221084116\u003e,\n\u003e or unsubscribe\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AAA7RBNSRBPMJJJSLJL3BPDVZ7XZTANCNFSM56O6RWPQ\u003e\n\u003e .\n\u003e You are receiving this because you authored the thread.Message ID:\n\u003e ***@***.***\u003e\n\u003e\n",
                                           "updatedAt":  "2022-08-20T00:46:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85I6Umu",
                                           "createdAt":  "2022-08-22T22:30:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "There\u0027s debate among us in triage on whether you are setting the `max-age` request header or setting some other header. Are you also setting any response headers? If so, are the response headers set on already-cached responses? Do the headers on already-cached responses affect the cache lifetime on the server?\r\n\r\nIf you could just provide a sample app that does the cache clearing with the `max-age=1` workaround you are using today, that would really help explain the scenario.",
                                           "updatedAt":  "2022-08-22T22:30:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85I6gnb",
                                           "createdAt":  "2022-08-22T23:04:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCq9aqw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "halter73",
                                                                               "createdAt":  "2022-08-22T23:18:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ronniebarker",
                                           "body":  "So….\n\nI have an image that is generated from some parameters and stored in a\ndatabase whenever a request is made and it isn\u0027t found in the database.\n\nIf the internal parameters change so that the image needs to be regenerated\nthen the cache needs to be flushed for that item\n\nI have a  management web app sends an api request to clear the image (and\nactually is probably the same request that changes the parameters) from the\ndatabase;\n\nthen after that response completes it sends a javascript fetch (simulating\nthe browser making an image request) with `Cache-Control:no-cache` to bust\nthrough the cache and hit the main image request handler and also\n`x-generate=no` which tells my handler not to generate the actual image,\nbut to return an empty 200 response with `Cache-Control: public,max-age=1`\n\nThe response caching framework caches the empty response and  then expires\na second later.\n\nThe first new request after that second will cause the new image to be\ngenerated, stored in the database and then returned and cached by the\nresponse caching middleware.\n\n\n\nOn Mon, Aug 22, 2022 at 23:30:25, Stephen Halter ***@***.***\u003e\nwrote:\n\n\u003e There\u0027s debate among us in triage on whether you are setting the max-age\n\u003e request header or setting some other header? Are you also setting any\n\u003e response headers? If so, are the response headers set on already-cached\n\u003e responses? Do the headers on already-cached responses affect the cache\n\u003e lifetime on the server?\n\u003e\n\u003e If you could just provide a sample app that does the cache clearing with\n\u003e the max-age=1 workaround you are using today, that would really help\n\u003e explain the scenario.\n\u003e\n\u003e —\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/dotnet/aspnetcore/issues/43272#issuecomment-1223248302\u003e,\n\u003e or unsubscribe\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AAA7RBMY6L2Z7TLCBTOFVXLV2P5QDANCNFSM56O6RWPQ\u003e\n\u003e .\n\u003e You are receiving this because you authored the thread.Message ID:\n\u003e ***@***.***\u003e\n\u003e\n",
                                           "updatedAt":  "2022-08-22T23:04:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85I6g7-",
                                           "createdAt":  "2022-08-22T23:06:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ronniebarker",
                                           "body":  "Sorry - I forgot to add what I would prefer:\n\n\n   1. For the api call to request the system to change the parameters to be\n   able to clear the cache\n   2. For me to be able to regenerate multiple images and clear their\n   caches without having to make multiple requests for each image from a\n   client.\n\n\n\n\nOn Mon, Aug 22, 2022 at 23:53:21, Ronnie Barker \u003c\n***@***.***\u003e wrote:\n\n\u003e So….\n\u003e\n\u003e I have an image that is generated from some parameters and stored in a\n\u003e database whenever a request is made and it isn\u0027t found in the database.\n\u003e\n\u003e If the internal parameters change so that the image needs to be\n\u003e regenerated then the cache needs to be flushed for that item\n\u003e\n\u003e I have a  management web app sends an api request to clear the image (and\n\u003e actually is probably the same request that changes the parameters) from the\n\u003e database;\n\u003e\n\u003e then after that response completes it sends a javascript fetch (simulating\n\u003e the browser making an image request) with `Cache-Control:no-cache` to bust\n\u003e through the cache and hit the main image request handler and also\n\u003e `x-generate=no` which tells my handler not to generate the actual image,\n\u003e but to return an empty 200 response with `Cache-Control: public,max-age=1`\n\u003e\n\u003e The response caching framework caches the empty response and  then expires\n\u003e a second later.\n\u003e\n\u003e The first new request after that second will cause the new image to be\n\u003e generated, stored in the database and then returned and cached by the\n\u003e response caching middleware.\n\u003e\n\u003e\n\u003e\n\u003e On Mon, Aug 22, 2022 at 23:30:25, Stephen Halter ***@***.***\n\u003e \u003e wrote:\n\u003e\n\u003e There\u0027s debate among us in triage on whether you are setting the max-age\n\u003e request header or setting some other header? Are you also setting any\n\u003e response headers? If so, are the response headers set on already-cached\n\u003e responses? Do the headers on already-cached responses affect the cache\n\u003e lifetime on the server?\n\u003e\n\u003e If you could just provide a sample app that does the cache clearing with\n\u003e the max-age=1 workaround you are using today, that would really help\n\u003e explain the scenario.\n\u003e\n\u003e —\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/dotnet/aspnetcore/issues/43272#issuecomment-1223248302\u003e,\n\u003e or unsubscribe\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AAA7RBMY6L2Z7TLCBTOFVXLV2P5QDANCNFSM56O6RWPQ\u003e\n\u003e .\n\u003e You are receiving this because you authored the thread.Message ID:\n\u003e ***@***.***\u003e\n\u003e\n\u003e\n",
                                           "updatedAt":  "2022-08-22T23:06:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85I6rkE",
                                           "createdAt":  "2022-08-22T23:55:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "Got it. To summarize:\r\n\r\n1. You send a specially crafted `Cache-Control: no-cache` request to an already-cached endpoint. This bypasses the cache.\r\n2. If you see this specially crafted request, in response you send `Cache-Control: public,max-age=1`. This overrides the previous cache entry with one that expires sooner (in 1 second).\r\n\r\n---\r\n\r\nBased on this, I have two main observations.\r\n\r\n\u003e I am managing to clear items by returning a response with a `max-age=1` (although the spec says you can use zero, the framework seems to reject that)\r\n\r\nThis seems like a fair criticism. Given that you can override previous cache entries, why can\u0027t `max-age=0` indicate both not to cache the response and to evict existing entries? It seems overly prescriptive not to allow this if the spec allows it when there\u0027s a valid use case presented here.\r\n\r\n\u003e Output Caching is a new feature in .NET 7 starting from preview 6 that handles this scenario. Can it be something that would work for you. It\u0027s driven by configuration and not by headers.\r\n\r\n@sebastienros How does output caching address this scenario? This issue is about having \"a way of clearing a specific resource from the cache.\" I know you could `OutputCacheContext.Tags` with `IOutputCacheStore.EvictByTagAsync`, but uniquely tagging each entry would be terribly inefficient.\r\n\r\nIs it possible to set `OutputCacheContext.ResponseExpirationTimeSpan` to `TimeSpan.Zero` on an already cached response to evict it? That sounds more in line with what @ronniebarker wants.",
                                           "updatedAt":  "2022-08-22T23:55:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85I6sQ9",
                                           "createdAt":  "2022-08-23T00:00:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ronniebarker",
                                           "body":  " Yes. That’s right. Looking quickly at the Output Cache preview, clearing\ntags looks like it will do what I want. Also I think it will deal with my\nother issue which is the ability to ignore the host when generating the key\n\n\nOn Tue, Aug 23 2022 at 00:55, Stephen Halter ***@***.***\u003e\nwrote:\n\n\u003e Got it. To summarize:\n\u003e\n\u003e    1. You send a specially crafted Cache-Control: no-cache request to an\n\u003e    already-cached endpoint. This bypasses the cache.\n\u003e    2. If you see this specially crafted request, in response you send Cache-Control:\n\u003e    public,max-age=1. This overrides the previous cache entry with one\n\u003e    that expires sooner (in 1 second).\n\u003e\n\u003e ------------------------------\n\u003e\n\u003e Based on this, I have two main observations.\n\u003e\n\u003e I am managing to clear items by returning a response with a max-age=1\n\u003e (although the spec says you can use zero, the framework seems to reject\n\u003e that)\n\u003e\n\u003e This seems like a fair criticism. Given that you can override previous\n\u003e cache entries, why can\u0027t max-age=0 indicate both not to cache the\n\u003e response and to evict existing entries? It seems overly prescriptive not to\n\u003e allow this if the spec allows it when there\u0027s a valid use case presented\n\u003e here.\n\u003e\n\u003e Output Caching is a new feature in .NET 7 starting from preview 6 that\n\u003e handles this scenario. Can it be something that would work for you. It\u0027s\n\u003e driven by configuration and not by headers.\n\u003e\n\u003e @sebastienros \u003chttps://github.com/sebastienros\u003e How does output caching\n\u003e address this scenario? This issue is about having \"a way of clearing a\n\u003e specific resource from the cache.\" I know you could\n\u003e OutputCacheContext.Tags with IOutputCacheStore.EvictByTagAsync, but\n\u003e uniquely tagging each entry would be terribly inefficient.\n\u003e\n\u003e Is it possible to set OutputCacheContext.ResponseExpirationTimeSpan to\n\u003e TimeSpan.Zero on an already cached response to evict it? That sounds more\n\u003e in line with what @ronniebarker \u003chttps://github.com/ronniebarker\u003e wants.\n\u003e\n\u003e —\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/dotnet/aspnetcore/issues/43272#issuecomment-1223342340\u003e,\n\u003e or unsubscribe\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AAA7RBNNZYXVA6WTLCCSJE3V2QHONANCNFSM56O6RWPQ\u003e\n\u003e .\n\u003e You are receiving this because you were mentioned.Message ID:\n\u003e ***@***.***\u003e\n\u003e\n",
                                           "updatedAt":  "2022-08-23T00:00:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85I6zER",
                                           "createdAt":  "2022-08-23T00:37:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "@ronniebarker Would you give each cache entry its own unique tag, or is evicting a multiple entries at once using a tag preferrable? While tags probably could be used to evict single entries, I doubt it would be as efficient as finding the cache entry associated with the current request and adjusting the `ResponseExpirationTimeSpan` to zero.",
                                           "updatedAt":  "2022-08-23T00:37:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85I63YM",
                                           "createdAt":  "2022-08-23T01:03:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ronniebarker",
                                           "body":  "I think that by tag would be useful (I have a \"code\" that could map to a\ntag that covers a logical group of images). But also I was wondering about\nsome kind of URL/Path/Query/Key matcher which could have wildcards to wipe\nout batches based on the values used to generate the cache key…\n\n\nOn Tue, Aug 23, 2022 at 01:38:03, Stephen Halter ***@***.***\u003e\nwrote:\n\n\u003e @ronniebarker \u003chttps://github.com/ronniebarker\u003e Would you give each cache\n\u003e entry its own unique tag, or is evicting a multiple entries at once using a\n\u003e tag preferrable? While tags probably could be used to evict single entries,\n\u003e I doubt it would be as efficient as finding the cache entry associated with\n\u003e the current request and adjusting the ResponseExpirationTimeSpan to zero.\n\u003e\n\u003e —\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/dotnet/aspnetcore/issues/43272#issuecomment-1223373073\u003e,\n\u003e or unsubscribe\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AAA7RBNKDWDEVUQUJDS7YLDV2QMOXANCNFSM56O6RWPQ\u003e\n\u003e .\n\u003e You are receiving this because you were mentioned.Message ID:\n\u003e ***@***.***\u003e\n\u003e\n",
                                           "updatedAt":  "2022-08-23T01:03:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85JGwoX",
                                           "createdAt":  "2022-08-24T22:24:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "@ronniebarker We\u0027d love it if you could try out OutputCaching in .NET 7 (RC 1 should ship in September) and let us know how this workflow works for you, or if you have any other feedback about it.",
                                           "updatedAt":  "2022-08-24T22:24:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85JGxSo",
                                           "createdAt":  "2022-08-24T22:25:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "Leaving open to collect feedback once you\u0027ve tried it :smile:",
                                           "updatedAt":  "2022-08-24T22:25:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86B6cBV",
                                           "createdAt":  "2024-06-19T23:43:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODrsPtA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Rasmus715",
                                                                               "createdAt":  "2024-07-26T12:03:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "nquandt",
                                           "body":  "@adityamandaleeka this might not be the best place to ask this, i can always make a new issue or discussion.. Is it bad practice or are there any performance implications to having a tag per resource?\r\n\r\nMy use case is I have OutputCaching enabled in YARP and need ways of clearing single pages from my application. My thought was in my custom CachingPolicy I just call `context.Tags.Add(context.HttpContext.Request.Path);`. That way later I can evict based on paths. Do you see any issues with that?\r\n\r\nMy full policy\r\n\r\n```csharp\r\nservices.AddOutputCache(options =\u003e\r\n{\r\n    options.DefaultExpirationTimeSpan = TimeSpan.FromDays(1);\r\n    options.AddBasePolicy(builder =\u003e builder.Tag(\"__all_tag__\"));\r\n    options.AddPolicy(\"customPolicy\", MyCustomPolicy.Instance);\r\n});\r\n\r\npublic sealed class MyCustomPolicy : IOutputCachePolicy\r\n{\r\n    public static readonly MyCustomPolicy Instance = new();\r\n\r\n    private MyCustomPolicy()\r\n    {\r\n    }\r\n\r\n    ValueTask IOutputCachePolicy.CacheRequestAsync(\r\n        OutputCacheContext context, \r\n        CancellationToken cancellationToken)\r\n    {\r\n        var attemptOutputCaching = AttemptOutputCaching(context);\r\n        context.EnableOutputCaching = true;\r\n        context.AllowCacheLookup = attemptOutputCaching;\r\n        context.AllowCacheStorage = attemptOutputCaching;\r\n        context.AllowLocking = true;\r\n\r\n        context.Tags.Add(context.HttpContext.Request.Path); // This is what we evict by..\r\n\r\n        // Vary by any query by default\r\n        context.CacheVaryByRules.QueryKeys = \"*\";\r\n\r\n        return ValueTask.CompletedTask;\r\n    }\r\n\r\n    ValueTask IOutputCachePolicy.ServeFromCacheAsync\r\n        (OutputCacheContext context, CancellationToken cancellationToken)\r\n    {\r\n        return ValueTask.CompletedTask;\r\n    }\r\n\r\n    ValueTask IOutputCachePolicy.ServeResponseAsync\r\n        (OutputCacheContext context, CancellationToken cancellationToken)\r\n    {\r\n        var response = context.HttpContext.Response;\r\n\r\n        // Verify existence of cookie headers\r\n        if (!StringValues.IsNullOrEmpty(response.Headers.SetCookie))\r\n        {\r\n            context.AllowCacheStorage = false;\r\n            return ValueTask.CompletedTask;\r\n        }\r\n\r\n        // Check response code\r\n        if (response.StatusCode != StatusCodes.Status200OK \r\n            \u0026\u0026 response.StatusCode != StatusCodes.Status301MovedPermanently\r\n            \u0026\u0026 response.StatusCode != StatusCodes.Status302Found\r\n            \u0026\u0026 response.StatusCode != StatusCodes.Status404NotFound)\r\n        {\r\n            context.AllowCacheStorage = false;\r\n            return ValueTask.CompletedTask;\r\n        }\r\n\r\n        if (!context.HttpContext.IsResponseCacheable())\r\n        {\r\n            context.AllowCacheStorage = false;\r\n            return ValueTask.CompletedTask;\r\n        }\r\n\r\n        return ValueTask.CompletedTask;\r\n    }\r\n\r\n    private static bool AttemptOutputCaching(OutputCacheContext context)\r\n    {\r\n        // Check if the current request fulfills the requirements\r\n        // to be cached\r\n        var request = context.HttpContext.Request;\r\n\r\n        // Verify the method\r\n        if (!HttpMethods.IsGet(request.Method) \u0026\u0026 \r\n            !HttpMethods.IsHead(request.Method))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        // Verify existence of authorization headers\r\n        if (!StringValues.IsNullOrEmpty(request.Headers.Authorization) || \r\n            request.HttpContext.User?.Identity?.IsAuthenticated == true)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n```\r\n\r\n",
                                           "updatedAt":  "2024-06-19T23:43:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86GRUoV",
                                           "createdAt":  "2024-07-26T12:44:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rasmus715",
                                           "body":  "\u003e @adityamandaleeka this might not be the best place to ask this, i can always make a new issue or discussion.. Is it bad practice or are there any performance implications to having a tag per resource?\r\n\u003e \r\n\u003e My use case is I have OutputCaching enabled in YARP and need ways of clearing single pages from my application. My thought was in my custom CachingPolicy I just call `context.Tags.Add(context.HttpContext.Request.Path);`. That way later I can evict based on paths. Do you see any issues with that?\r\n\u003e \r\n\u003e My full policy\r\n\u003e \r\n\u003e ```cs\r\n\u003e services.AddOutputCache(options =\u003e\r\n\u003e {\r\n\u003e     options.DefaultExpirationTimeSpan = TimeSpan.FromDays(1);\r\n\u003e     options.AddBasePolicy(builder =\u003e builder.Tag(\"__all_tag__\"));\r\n\u003e     options.AddPolicy(\"customPolicy\", MyCustomPolicy.Instance);\r\n\u003e });\r\n\u003e \r\n\u003e public sealed class MyCustomPolicy : IOutputCachePolicy\r\n\u003e {\r\n\u003e     public static readonly MyCustomPolicy Instance = new();\r\n\u003e \r\n\u003e     private MyCustomPolicy()\r\n\u003e     {\r\n\u003e     }\r\n\u003e \r\n\u003e     ValueTask IOutputCachePolicy.CacheRequestAsync(\r\n\u003e         OutputCacheContext context, \r\n\u003e         CancellationToken cancellationToken)\r\n\u003e     {\r\n\u003e         var attemptOutputCaching = AttemptOutputCaching(context);\r\n\u003e         context.EnableOutputCaching = true;\r\n\u003e         context.AllowCacheLookup = attemptOutputCaching;\r\n\u003e         context.AllowCacheStorage = attemptOutputCaching;\r\n\u003e         context.AllowLocking = true;\r\n\u003e \r\n\u003e         context.Tags.Add(context.HttpContext.Request.Path); // This is what we evict by..\r\n\u003e \r\n\u003e         // Vary by any query by default\r\n\u003e         context.CacheVaryByRules.QueryKeys = \"*\";\r\n\u003e \r\n\u003e         return ValueTask.CompletedTask;\r\n\u003e     }\r\n\u003e \r\n\u003e     ValueTask IOutputCachePolicy.ServeFromCacheAsync\r\n\u003e         (OutputCacheContext context, CancellationToken cancellationToken)\r\n\u003e     {\r\n\u003e         return ValueTask.CompletedTask;\r\n\u003e     }\r\n\u003e \r\n\u003e     ValueTask IOutputCachePolicy.ServeResponseAsync\r\n\u003e         (OutputCacheContext context, CancellationToken cancellationToken)\r\n\u003e     {\r\n\u003e         var response = context.HttpContext.Response;\r\n\u003e \r\n\u003e         // Verify existence of cookie headers\r\n\u003e         if (!StringValues.IsNullOrEmpty(response.Headers.SetCookie))\r\n\u003e         {\r\n\u003e             context.AllowCacheStorage = false;\r\n\u003e             return ValueTask.CompletedTask;\r\n\u003e         }\r\n\u003e \r\n\u003e         // Check response code\r\n\u003e         if (response.StatusCode != StatusCodes.Status200OK \r\n\u003e             \u0026\u0026 response.StatusCode != StatusCodes.Status301MovedPermanently\r\n\u003e             \u0026\u0026 response.StatusCode != StatusCodes.Status302Found\r\n\u003e             \u0026\u0026 response.StatusCode != StatusCodes.Status404NotFound)\r\n\u003e         {\r\n\u003e             context.AllowCacheStorage = false;\r\n\u003e             return ValueTask.CompletedTask;\r\n\u003e         }\r\n\u003e \r\n\u003e         if (!context.HttpContext.IsResponseCacheable())\r\n\u003e         {\r\n\u003e             context.AllowCacheStorage = false;\r\n\u003e             return ValueTask.CompletedTask;\r\n\u003e         }\r\n\u003e \r\n\u003e         return ValueTask.CompletedTask;\r\n\u003e     }\r\n\u003e \r\n\u003e     private static bool AttemptOutputCaching(OutputCacheContext context)\r\n\u003e     {\r\n\u003e         // Check if the current request fulfills the requirements\r\n\u003e         // to be cached\r\n\u003e         var request = context.HttpContext.Request;\r\n\u003e \r\n\u003e         // Verify the method\r\n\u003e         if (!HttpMethods.IsGet(request.Method) \u0026\u0026 \r\n\u003e             !HttpMethods.IsHead(request.Method))\r\n\u003e         {\r\n\u003e             return false;\r\n\u003e         }\r\n\u003e \r\n\u003e         // Verify existence of authorization headers\r\n\u003e         if (!StringValues.IsNullOrEmpty(request.Headers.Authorization) || \r\n\u003e             request.HttpContext.User?.Identity?.IsAuthenticated == true)\r\n\u003e         {\r\n\u003e             return false;\r\n\u003e         }\r\n\u003e \r\n\u003e         return true;\r\n\u003e     }\r\n\u003e }\r\n\u003e ```\r\n\r\nGood thinking! I\u0027ve been looking for a similar logic but haven\u0027t found anything, that will tag a cache based on the requested resource. \r\nLooking forward to a similar out-of-the-box implementation :)",
                                           "updatedAt":  "2024-07-26T12:44:24Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "Response Caching should have a way of clearing a specific resource from the cache",
        "labels":  [
                       "area-networking",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/43642",
        "createdAt":  "2022-08-30T21:48:01Z",
        "number":  43642,
        "author":  "DamianEdwards",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-01T22:48:51Z",
        "body":  "Related #43352\r\n\r\nThere are scenarios where it is desirable to affect the behavior of endpoint-aware middleware that runs in a request pipeline that will be handled by a non-endpoint-aware middleware (rather than an actual endpoint) such that the endpoint-aware middleware performs its operations as if the request-handling middleware were actually an endpoint.\r\n\r\nFor example, the static files middleware handles requests but **does not do so via endpoints**. Rather, it is a terminal middleware for requests with paths that map to static files in the configured file provider. The authorization middleware is an endpoint-aware middleware that uses metadata from the current request endpoint to perform authorization actions and will no-op for requests with no active endpoint. This means that one can\u0027t use the authorization middleware to enforce authorization for static files. The output cache middleware is similar.\r\n\r\nThe repo [AspNetCorePathAuthorization](https://github.com/DamianEdwards/AspNetCorePathAuthorization#endpoint-metadata-decorators-implementation-points) demonstrates a concept of \"metadata-only endpoints\" that allows endpoints to be registered that have only metadata, and no actual endpoint handler. These endpoints only exist for the purpose of effectively adding metadata to arbitrary route paths, either adding metadata to existing real endpoints, or providing metadata for requests with no real endpoint but with a matching path. This metadata can then be used by endpoint-aware middleware to perform operations relevant for the current request.\r\n\r\nAn example of what this API could look like:\r\n\r\n```csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nvar app = builder.Build();\r\n\r\n// Add metadata to every request in the app\r\napp.MapMetadata(\"/{**subpath}\", new { Whatever = \"This is on every request now!\" });\r\n\r\n// Add metadata to all requests under /public in the app\r\napp.MapMetadata(\"/public/{**subpath}\", new MessageMetadata(\"Hello from /public!\"));\r\n\r\n// Potentially terminal middleware\r\napp.Use(async (ctx, next) =\u003e\r\n{\r\n    // This obviously isn\u0027t a good example but something like the static files middleware effectively does this\r\n    if (ctx.Request.Path.StartsWithSegments(\"/public\"))\r\n    {\r\n        var message = ctx.GetEndpoint()?.Metadata.GetMetadata\u003cMessageMetadata\u003e()?.Message;\r\n\r\n        await ctx.Response.WriteAsync($\"{message ?? \"No message metadata found :(\"}\");\r\n        return;\r\n    }\r\n\r\n    await next();\r\n});\r\n\r\napp.Run();\r\n\r\nrecord MessageMetadata(string Message);\r\n```\r\n\r\nHigher level APIs like Authorization and Output Caching could be updated to leverage this with new top-level APIs for configuring authorization and output caching based on path, e.g.:\r\n\r\n```csharp\r\n// Authorize all requests under /users\r\napp.RequireAuthorization(\"/users\");\r\n\r\n// Disable authorization for all requests under /public\r\napp.AllowAnonymous(\"/public\");\r\n\r\n// Cache all requests under /expensivestuff\r\napp.CacheOutput(\"/expensivestuff\");\r\n``` ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYBOY7w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85Jcms0",
                                           "createdAt":  "2022-08-30T22:29:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rynowak",
                                           "body":  "I worry about examples like these, and user not understand the blast radius of making a change:\r\n\r\n```C#\r\n// Disable authorization for all requests under /public\r\napp.AllowAnonymous(\"/public\");\r\n\r\n```\r\n\r\nIf my mental model is correct this does define an endpoint, and that endpoint would be a candidate for path matching along with all the other endpoints, including the ability to cause ambiguities (HTTP 500).\r\n\r\nBasically these features will only work the way you when they don\u0027t overlap with other endpoints in your app. The sample here with `AllowAnonymous` *feels like* it\u0027s applying a path-matching rule, but it\u0027s actually changing your route table. \r\n\r\nSo my feedback is that this feels like it\u0027s going to be misunderstood. It puts a lot of burden on the user to understand what happens behind the scenes. \r\n\r\nTake this example (modified from yours):\r\n\r\n```C#\r\n// Disable authorization for all requests under /public\r\napp.AllowAnonymous(\"/public\");\r\n\r\n// Cache all requests under /public\r\napp.CacheOutput(\"/public\");\r\n```\r\n\r\nWhat happens? I think most users would expect paths under `/public` to be public and cached. I think it will cause an ambiguity in the route table and throw.",
                                           "updatedAt":  "2022-08-30T22:29:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85JcxJB",
                                           "createdAt":  "2022-08-30T23:36:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCranmw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2022-08-31T02:44:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "@rynowak the ambiguities are resolved via a [custom `IEndpointSelectorPolicy`](https://github.com/DamianEdwards/AspNetCorePathAuthorization/blob/main/src/AspNetCore.Authorization.PathBased/EndpointMetadataDecoratorMatcherPolicy.cs) to avoid the issues you refer to. ~In other words, metadata-only endpoints will never be selected as matches during routing~ *(see below).* Ideally this would happen during the building of the route graph, rather than per-request, via a custom `INodeBuilderPolicy` or some such.\r\n\r\n**Edit:** metadata-only endpoints **can** be selected as the match during routing, but **only** in the case there are no other candidates available. When they do match, they have a null handler, so while there\u0027s an active endpoint for the request to carry the metadata, there\u0027s no request delegate to execute.",
                                           "updatedAt":  "2022-09-01T23:26:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85JmpS1",
                                           "createdAt":  "2022-09-01T22:53:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "captainsafia",
                                           "body":  "It seems like this feature lends itself nicely to the design of \"route-based endpoint conventions\" given that \"metadata-only endpoints\" doesn\u0027t apply exclusively to routes that do not map to an endpoint handler.\r\n\r\nLooking through this particular example:\r\n\r\n```csharp\r\n// Authorize all requests under /users\r\napp.RequireAuthorization(\"/users\");\r\n```\r\n\r\nI wonder how this feature would intersect with route groups. When and why would a user use the syntax above when they could also do:\r\n\r\n```csharp\r\nvar users = app.MapGroup(\"/users\");\r\nusers.RequireAuthorization();\r\n```\r\n\r\nIs the assumption that route group-based conventions would intersect with \"metadata-only endpoints\" in some way via the implementation?\r\n\r\n\u003e a concept of \"metadata-only endpoints\" that allows endpoints to be registered that have only metadata, and no actual endpoint handler. \r\n\r\nHow common are these types of endpoints? Static file support seems like a big one. Are there other scenarios in app where a path is not going to be tied to a handler?\r\n",
                                           "updatedAt":  "2022-09-01T22:53:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Jmvhg",
                                           "createdAt":  "2022-09-01T23:19:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "One would use `app.RequireAuthorization(\"/users\");` when it is known that there will be requests served under that path that *aren\u0027t* implemented as endpoints *or* they wish not to use route groups for some reason, e.g. there are files served by the static files middleware under that path.\r\n\r\nUltimately, the metadata on metadata-only endpoints (MOE) applies to any request that matches the route pattern for the MOE, which for the cases outlined would almost certainly include greedily capturing any sub-path. This is true whether there are actual endpoints in play or not, so they interact in that they compose, i.e. the metadata from the MOE is copied to the actual endpoint (in the [prototype implementation the endpoint is actually replaced by the `MatcherPolicy` per request](https://github.com/DamianEdwards/AspNetCorePathAuthorization/blob/main/src/AspNetCore.Authorization.PathBased/EndpointMetadataDecoratorMatcherPolicy.cs#L102-L124) but if this were a first-class feature I\u0027d expect this to be done during the building of the route graph).\r\n\r\n\u003e How common are these types of endpoints? Static file support seems like a big one. Are there other scenarios in app where a path is not going to be tied to a handler?\r\n\r\nHard to say. Prior to ASP.NET Core 3.0 it was everything that was request-handling. Anything that didn\u0027t move to be endpoint-based would count, and I think things like Swashbuckle still use terminal middleware too.",
                                           "updatedAt":  "2022-09-02T18:24:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85V9865",
                                           "createdAt":  "2023-02-23T19:16:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-02-23T19:16:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85gE5jv",
                                           "createdAt":  "2023-06-28T18:35:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-06-28T18:35:46Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Add support for metadata-only endpoints to support path-based authorization, output caching, etc.",
        "labels":  [
                       "Needs: Design",
                       "feature-static-files",
                       "feature-routing",
                       "feature-output-caching",
                       "area-minimal",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/43747",
        "createdAt":  "2022-09-05T05:17:44Z",
        "number":  43747,
        "author":  "nixtar",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC86XzQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tiakun",
                                            "createdAt":  "2024-11-24T02:56:08Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-01-18T10:18:47Z",
        "body":  "Hello,\r\n\r\nI\u0027ve been playing around with using the new OutputCaching middleware that was introduced in dotnet 7 preview 6 and I have a requirement to implement my own cache key provider.\r\n\r\nBasically I would like to ignore the host header in the incoming request but I also conceive a scenario where I would like to do only path based keys.\r\n\r\nI\u0027m currently working around this by using middleware to set the host header to null before it goes to the endpoint that\u0027s being cached.\r\n\r\nIf IOutputCacheKeyProvider was public and injected in AddOutputCache() the same way as IOutputCacheStore then I could simply inject my own implementation before calling AddOutputCache().\r\n\r\n\r\nThanks,\r\nNick",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmvOmPg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85J00En",
                                           "createdAt":  "2022-09-06T19:46:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "cc @sebastienros ",
                                           "updatedAt":  "2022-09-06T19:46:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85KC_Nn",
                                           "createdAt":  "2022-09-09T17:54:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sebastienros",
                                           "body":  "I am looking into exposing this in policies so this can be configured globally or per endpoint. Would that work for you?\r\n\r\n```\r\nbuilder.VaryByHost(false)\r\n```",
                                           "updatedAt":  "2022-09-09T17:54:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85KDc0e",
                                           "createdAt":  "2022-09-09T20:14:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-09-09T20:14:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85KIHEE",
                                           "createdAt":  "2022-09-12T12:05:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nixtar",
                                           "body":  "\u003e I am looking into exposing this in policies so this can be configured globally or per endpoint. Would that work for you?\r\n\u003e \r\n\u003e ```\r\n\u003e builder.VaryByHost(false)\r\n\u003e ```\r\n\r\nYep, that looks prefect for our scenario.\r\n\r\n\r\nThanks for your work on Output Caching. ❤️",
                                           "updatedAt":  "2022-09-12T12:05:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85KQVeH",
                                           "createdAt":  "2022-09-13T18:24:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sebastienros",
                                           "body":  "7.0 RC2 Output Caching will have `SetVaryByHost(bool)`\r\n\r\n",
                                           "updatedAt":  "2022-09-13T18:24:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86a86Y-",
                                           "createdAt":  "2025-01-18T10:18:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGn2Zw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bazarniy",
                                                                               "createdAt":  "2025-02-17T17:38:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "code-jar",
                                           "body":  "@sebastienros If I want to customize the cache key when using the redis store cache, how do I adjust it? I want the key to be in a format that conforms to the redis key specification, such as Instance:Path:Key.",
                                           "updatedAt":  "2025-01-18T10:18:46Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "OutputCaching make IOutputCacheKeyProvider public",
        "labels":  [
                       "feature-output-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/43791",
        "createdAt":  "2022-09-07T03:04:04Z",
        "number":  43791,
        "author":  "nixtar",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-13T21:51:33Z",
        "body":  "Hello,\r\n\r\nAs per discussion over in the YARP repo https://github.com/microsoft/reverse-proxy/discussions/1851.\r\n\r\nIn the scenario where OutputCaching is being used with YARP I would like a way to be able to validate the cached items on request.\r\n\r\nI believe there would be value in having a way to make YARP and OutputCaching work together.\r\nHave YARP leverage OutputCaching instead of having OutputCaching on top of YARP.\r\n\r\nAt a high level I\u0027d like to achieve the following pipeline:\r\n\r\nGet request \u003e YARP processes its routes/clusters \u003e YARP/[custom middleware](https://microsoft.github.io/reverse-proxy/articles/middleware.html#custom-proxy-middleware) gets the output cache headers and performs a head request against the origin server with the \"If-Modified-Since\" and \"If-None-Match\" headers \u003e return the Output Cache data if valid else back to YARP to process the request per usual and the output is cached\r\n\r\nPerhaps something like the HttpContext.Features `HttpContext.GetReverseProxyFeature()` extension method for YARP middleware but for output caching?\r\n\r\nEG:\r\n```c#\r\nendpoints.MapReverseProxy(proxyPipeline =\u003e\r\n{\r\n    proxyPipeline.Use((context, next) =\u003e\r\n    {\r\n        var proxyFeature = context.GetReverseProxyFeature();\r\n        var outputCacheFeature = context.GetOutputCacheFeature();\r\n        var cluster = proxyFeature.Cluster;\r\n        var destinations = proxyFeature.AvailableDestinations;\r\n        var cachedHeaders = outputCacheFeature.GetHeaders(context.Request);\r\n        \r\n        if (cachedHeaders is not null)\r\n        {\r\n            // logic to validate and optionally return the cached item\r\n        }\r\n\r\n        return next();\r\n    });\r\n    proxyPipeline.UseSessionAffinity();\r\n    proxyPipeline.UseLoadBalancing();\r\n    proxyPipeline.UsePassiveHealthChecks();\r\n});\r\n```\r\n\r\nThis could also be used by other non YARP things that have access to the HttpContext.\r\n\r\nMy end game goal is to be able to replace IIS+ARR/Nginx\u0027s disk based content caching with YARP and hopefully OutputCaching.\r\nIdeally I wont have to go down the path of writing my own caching mechanisms for YARP as the guts of OutputCaching appears to be solid as.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSg3stg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85J6DBK",
                                           "createdAt":  "2022-09-07T22:05:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wtgodbe",
                                           "body":  "@sebastienros could you take a look?",
                                           "updatedAt":  "2022-09-07T22:05:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85KDey2",
                                           "createdAt":  "2022-09-09T20:24:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-09-09T20:24:33Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "OutputCaching + YARP interoperability",
        "labels":  [
                       "area-networking",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/43831",
        "createdAt":  "2022-09-08T16:16:45Z",
        "number":  43831,
        "author":  "DamianEdwards",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAY_uQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jmalatia",
                                            "createdAt":  "2023-02-18T19:27:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "idusortus",
                                            "createdAt":  "2024-01-24T15:04:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "batkaevruslan",
                                            "createdAt":  "2024-04-16T10:21:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "divyanshukareer",
                                            "createdAt":  "2024-09-16T09:58:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Dreamescaper",
                                            "createdAt":  "2025-03-22T16:21:36Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2025-08-20T07:13:31Z",
        "body":  "The default error handler for `ExceptionHandlerMiddleware` always sets the response status code to 500. It is not uncommon for `BadHttpRequestException` to be thrown by requests though which detail a different (usually 4xx) status code but this will get masked by the default error handler.\r\n\r\nWhile it\u0027s possible to customize the error handler via setting `ExceptionHandlerOptions.ExceptionHandler`, one has to reimplement the default feature logic for returning JSON Problem Details responses manually which is quite a bit of code, e.g.:\r\n\r\n```csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.Services.AddProblemDetails(options =\u003e\r\n{\r\n    options.CustomizeProblemDetails = static ctx =\u003e\r\n        ctx.ProblemDetails.Extensions[\"requestId\"] = Activity.Current?.Id ?? ctx.HttpContext.TraceIdentifier;\r\n});\r\n\r\nvar app = builder.Builder();\r\n\r\nif (!app.Environment.IsDevelopment())\r\n{\r\n    // Error handling\r\n    app.UseExceptionHandler(new ExceptionHandlerOptions\r\n    {\r\n        AllowStatusCode404Response = true,\r\n        ExceptionHandler = async (HttpContext context) =\u003e\r\n        {\r\n            // Pass-through status codes from BadHttpRequestException\r\n            var exceptionHandlerFeature = context.Features.Get\u003cIExceptionHandlerFeature\u003e();\r\n            var error = exceptionHandlerFeature?.Error;\r\n\r\n            if (error is BadHttpRequestException badRequestEx)\r\n            {\r\n                context.Response.StatusCode = badRequestEx.StatusCode;\r\n            }\r\n\r\n            if (context.RequestServices.GetRequiredService\u003cIProblemDetailsService\u003e() is { } problemDetailsService)\r\n            {\r\n                await problemDetailsService.WriteAsync(new()\r\n                {\r\n                    HttpContext = context,\r\n                    AdditionalMetadata = exceptionHandlerFeature?.Endpoint?.Metadata,\r\n                    ProblemDetails = { Status = context.Response.StatusCode }\r\n                });\r\n            }\r\n            else if (ReasonPhrases.GetReasonPhrase(context.Response.StatusCode) is { } reasonPhrase)\r\n            {\r\n                await context.Response.WriteAsync(reasonPhrase);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\napp.MapGet(\"/throw/{statusCode?}\", (int? statusCode) =\u003e\r\n    {\r\n        throw statusCode switch\r\n        {\r\n            \u003e= 400 and \u003c 500 =\u003e new BadHttpRequestException(\r\n                $\"{statusCode} {ReasonPhrases.GetReasonPhrase(statusCode.Value)}\",\r\n                statusCode.Value),\r\n            _ =\u003e new Exception(\"uh oh\")\r\n        };\r\n    });\r\n\r\napp.Run();\r\n```\r\n\r\nWe should consider adding support for passing through the response status code from `BadHttpRequestException` in the default error handler. We can consider adding a boolean property to `ExceptionHandlerOptions` to control this behavior if necessary.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvwDhkw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85J-ZaW",
                                           "createdAt":  "2022-09-08T18:44:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-09-08T18:44:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85J-ZcS",
                                           "createdAt":  "2022-09-08T18:44:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Where are we generating BadHttpRequestException in the framework? I mainly see the ones generated by Kestrel.\r\n\r\nShould the dev exception page get the same treatment?",
                                           "updatedAt":  "2022-09-08T18:44:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85J-y1o",
                                           "createdAt":  "2022-09-08T20:25:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brunolins16",
                                           "body":  "\u003e Should the dev exception page get the same treatment?\r\n\r\nIt is already there: https://github.com/dotnet/aspnetcore/blob/4dd59c8996437d4e0c2ffb5c9f1d60f69225b8e0/src/Middleware/Diagnostics/src/DeveloperExceptionPage/DeveloperExceptionPageMiddlewareImpl.cs#L115-L122",
                                           "updatedAt":  "2022-09-08T20:25:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85J-4iP",
                                           "createdAt":  "2022-09-08T20:52:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "\u003e Where are we generating BadHttpRequestException in the framework? I mainly see the ones generated by Kestrel.\r\n\r\nI think the only place is in `RequestDelegateFactory` and even then only during development so it will likely be handled by the developer exception page, but given this is a public exception type in `Microsoft.AspNetCore` that can be thrown by anyone it seems reasonable that the default error handler should special-case it and preserve the status code (or at least there should be an option to enable that behavior).",
                                           "updatedAt":  "2022-09-08T20:52:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Ssd6b",
                                           "createdAt":  "2023-01-18T16:56:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEK-z_w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Dreamescaper",
                                                                               "createdAt":  "2025-03-22T16:22:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "liquidvapour",
                                           "body":  "I am having this issue with a BadHttpRequestException being thrown because a request that is not valid JSON.\r\n\r\nAlthough the exception\u0027s StatusCode property is 400 I still get a 500 response to the client.\r\n\r\nI have included the stack trace here in case it is useful.\r\n\r\n```\r\nMicrosoft.AspNetCore.Http.BadHttpRequestException: Failed to read parameter \\\"ConsentStatusDto consent\\\" from the request body as JSON.\r\n ---\u003e System.Text.Json.JsonException: \u0027fred\\r\\n        }\\r\\n    ],\\r\\n    \\\"asDDOf\\\": \\\"2023-01-18T16:38:56.683Z\\\"\\r\\n}\\r\\n\u0027 is an invalid JSON literal. Expected the literal \u0027false\u0027. Path: $.consents[1].status | LineNumber: 8 | BytePositionInLine: 23.\r\n ---\u003e System.Text.Json.JsonReaderException: \u0027fred\\r\\n        }\\r\\n    ],\\r\\n    \\\"asDDOf\\\": \\\"2023-01-18T16:38:56.683Z\\\"\\r\\n}\\r\\n\u0027 is an invalid JSON literal. Expected the literal \u0027false\u0027. LineNumber: 8 | BytePositionInLine: 23.\r\n   at System.Text.Json.ThrowHelper.ThrowJsonReaderException(Utf8JsonReader\u0026 json, ExceptionResource resource, Byte nextByte, ReadOnlySpan`1 bytes)\r\n   at System.Text.Json.Utf8JsonReader.ThrowInvalidLiteral(ReadOnlySpan`1 span)\r\n   at System.Text.Json.Utf8JsonReader.CheckLiteral(ReadOnlySpan`1 span, ReadOnlySpan`1 literal)\r\n   at System.Text.Json.Utf8JsonReader.ConsumeLiteral(ReadOnlySpan`1 literal, JsonTokenType tokenType)\r\n   at System.Text.Json.Utf8JsonReader.ConsumeValue(Byte marker)\r\n   at System.Text.Json.Utf8JsonReader.ReadSingleSegment()\r\n   at System.Text.Json.Utf8JsonReader.Read()\r\n   at System.Text.Json.Serialization.Converters.ObjectWithParameterizedConstructorConverter`1.ReadConstructorArgumentsWithContinuation(ReadStack\u0026 state, Utf8JsonReader\u0026 reader, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.Converters.ObjectWithParameterizedConstructorConverter`1.OnTryRead(Utf8JsonReader\u0026 reader, Type typeToConvert, JsonSerializerOptions options, ReadStack\u0026 state, T\u0026 value)\r\n   at System.Text.Json.Serialization.JsonConverter`1.TryRead(Utf8JsonReader\u0026 reader, Type typeToConvert, JsonSerializerOptions options, ReadStack\u0026 state, T\u0026 value)\r\n   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryRead(Utf8JsonReader\u0026 reader, Type typeToConvert, JsonSerializerOptions options, ReadStack\u0026 state, TCollection\u0026 value)\r\n   at System.Text.Json.Serialization.JsonConverter`1.TryRead(Utf8JsonReader\u0026 reader, Type typeToConvert, JsonSerializerOptions options, ReadStack\u0026 state, T\u0026 value)\r\n   at System.Text.Json.Serialization.Converters.SmallObjectWithParameterizedConstructorConverter`5.TryRead[TArg](ReadStack\u0026 state, Utf8JsonReader\u0026 reader, JsonParameterInfo jsonParameterInfo, TArg\u0026 arg)\r\n   at System.Text.Json.Serialization.Converters.SmallObjectWithParameterizedConstructorConverter`5.ReadAndCacheConstructorArgument(ReadStack\u0026 state, Utf8JsonReader\u0026 reader, JsonParameterInfo jsonParameterInfo)\r\n   at System.Text.Json.Serialization.Converters.ObjectWithParameterizedConstructorConverter`1.ReadConstructorArgumentsWithContinuation(ReadStack\u0026 state, Utf8JsonReader\u0026 reader, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.Converters.ObjectWithParameterizedConstructorConverter`1.OnTryRead(Utf8JsonReader\u0026 reader, Type typeToConvert, JsonSerializerOptions options, ReadStack\u0026 state, T\u0026 value)\r\n   at System.Text.Json.Serialization.JsonConverter`1.TryRead(Utf8JsonReader\u0026 reader, Type typeToConvert, JsonSerializerOptions options, ReadStack\u0026 state, T\u0026 value)\r\n   at System.Text.Json.Serialization.JsonConverter`1.ReadCore(Utf8JsonReader\u0026 reader, JsonSerializerOptions options, ReadStack\u0026 state)\r\n   --- End of inner exception stack trace ---\r\n   at System.Text.Json.ThrowHelper.ReThrowWithPath(ReadStack\u0026 state, JsonReaderException ex)\r\n   at System.Text.Json.Serialization.JsonConverter`1.ReadCore(Utf8JsonReader\u0026 reader, JsonSerializerOptions options, ReadStack\u0026 state)\r\n   at System.Text.Json.Serialization.JsonConverter`1.ReadCoreAsObject(Utf8JsonReader\u0026 reader, JsonSerializerOptions options, ReadStack\u0026 state)\r\n   at System.Text.Json.JsonSerializer.ReadCore[TValue](Utf8JsonReader\u0026 reader, JsonTypeInfo jsonTypeInfo, ReadStack\u0026 state)\r\n   at System.Text.Json.JsonSerializer.ContinueDeserialize[TValue](ReadBufferState\u0026 bufferState, JsonReaderState\u0026 jsonReaderState, ReadStack\u0026 readStack, JsonTypeInfo jsonTypeInfo)\r\n   at System.Text.Json.JsonSerializer.ReadFromStreamAsync[TValue](Stream utf8Json, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.HttpRequestJsonExtensions.ReadFromJsonAsync(HttpRequest request, Type type, JsonSerializerOptions options, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.HttpRequestJsonExtensions.ReadFromJsonAsync(HttpRequest request, Type type, JsonSerializerOptions options, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.RequestDelegateFactory.\u003cHandleRequestBodyAndCompileRequestDelegateForJson\u003eg__TryReadBodyAsync|89_0(HttpContext httpContext, Type bodyType, String parameterTypeName, String parameterName, Boolean allowEmptyRequestBody, Boolean throwOnBadRequest)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.AspNetCore.Http.RequestDelegateFactory.Log.InvalidJsonRequestBody(HttpContext httpContext, String parameterTypeName, String parameterName, Exception exception, Boolean shouldThrow)\r\n   at Microsoft.AspNetCore.Http.RequestDelegateFactory.\u003cHandleRequestBodyAndCompileRequestDelegateForJson\u003eg__TryReadBodyAsync|89_0(HttpContext httpContext, Type bodyType, String parameterTypeName, String parameterName, Boolean allowEmptyRequestBody, Boolean throwOnBadRequest)\r\n   at Microsoft.AspNetCore.Http.RequestDelegateFactory.\u003c\u003ec__DisplayClass89_2.\u003c\u003cHandleRequestBodyAndCompileRequestDelegateForJson\u003eb__2\u003ed.MoveNext()\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.\u003cInvoke\u003eg__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware.InvokeInternal(HttpContext context)\r\n   at Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddlewareImpl.\u003cInvoke\u003eg__Awaited|8_0(ExceptionHandlerMiddlewareImpl middleware, HttpContext context, Task task)\r\n```",
                                           "updatedAt":  "2023-01-18T16:56:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85TN1rC",
                                           "createdAt":  "2023-01-18T21:53:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "@liquidvapour am I correct in assuming you\u0027re seeing this behavior only when running in the \"Development\" environment, i.e. launching from Visual Studio or via `dotnet run`?",
                                           "updatedAt":  "2023-01-18T21:53:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86_AOGT",
                                           "createdAt":  "2025-08-20T07:13:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "drauch",
                                           "body":  "We also ran into this today, very confusing. \n\nTop of the stack trace:\n\n```\nAn unhandled exception has occurred while executing the request.\nMicrosoft.AspNetCore.Server.Kestrel.Core.BadHttpRequestException: Unexpected end of request content.\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1ContentLengthMessageBody.ReadAsyncInternal(CancellationToken cancellationToken)\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource\u003cTResult\u003e.GetResult(Int16 token)\n   at Microsoft.AspNetCore.WebUtilities.FormPipeReader.ReadFormAsync(CancellationToken cancellationToken)\n```\n\nUnfortunately our call to UseExceptionHandler() masks the default behavior of returning a 400 error code and we return 500 now.\n\nPlease fix this :-)\n\nBest regards,\nDominik",
                                           "updatedAt":  "2025-08-20T07:13:30Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Pass through response status codes from BadHttpRequestException in ExceptionHandlerMiddleware",
        "labels":  [
                       "feature-diagnostics",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/44140",
        "createdAt":  "2022-09-23T08:46:48Z",
        "number":  44140,
        "author":  "maartenba",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4Nv9g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "khalidabuhakmeh",
                                            "createdAt":  "2022-09-23T08:53:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MarioGruda",
                                            "createdAt":  "2022-09-23T12:04:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "p-kostic",
                                            "createdAt":  "2022-09-23T12:25:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GuidoNeele",
                                            "createdAt":  "2022-09-23T15:13:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2022-09-23T22:14:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KeterSCP",
                                            "createdAt":  "2022-09-25T12:35:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "m-meier",
                                            "createdAt":  "2022-09-26T16:14:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2022-09-26T18:17:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YoussefWaelMohamedLotfy",
                                            "createdAt":  "2022-09-27T01:22:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ghodasarakartik",
                                            "createdAt":  "2022-09-27T11:50:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Hazzamanic",
                                            "createdAt":  "2022-09-27T13:30:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mgnoonan",
                                            "createdAt":  "2022-10-09T00:08:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kaylumah",
                                            "createdAt":  "2022-10-24T06:37:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cristipufu",
                                            "createdAt":  "2022-11-02T06:32:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DavidDeSloovere",
                                            "createdAt":  "2022-11-10T20:08:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "onurbiyik",
                                            "createdAt":  "2022-11-18T16:46:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "berkansasmaz",
                                            "createdAt":  "2022-11-27T10:49:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GimmeDaKitty",
                                            "createdAt":  "2022-11-27T20:48:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MadL1me",
                                            "createdAt":  "2022-12-12T22:44:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "anandsowm",
                                            "createdAt":  "2022-12-27T13:53:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "niklaswallerstedt",
                                            "createdAt":  "2023-01-18T19:57:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "giannibcp",
                                            "createdAt":  "2023-01-23T14:55:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tjoudeh",
                                            "createdAt":  "2023-01-30T15:21:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "51dario51",
                                            "createdAt":  "2023-01-30T19:10:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mattsonnhalter",
                                            "createdAt":  "2023-02-27T15:00:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sulmar",
                                            "createdAt":  "2023-03-02T08:47:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "frodet",
                                            "createdAt":  "2023-03-24T09:56:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ArturGasinskiVolue",
                                            "createdAt":  "2023-03-27T09:01:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nelsenlim",
                                            "createdAt":  "2023-04-13T09:44:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cocowalla",
                                            "createdAt":  "2023-04-18T11:30:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vmandic",
                                            "createdAt":  "2023-05-23T20:16:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Garand-Gary",
                                            "createdAt":  "2023-05-29T10:22:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "skarpovru",
                                            "createdAt":  "2023-05-30T14:05:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hacst",
                                            "createdAt":  "2023-06-02T12:53:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sageTimNewton",
                                            "createdAt":  "2023-06-27T14:07:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HugoSousa",
                                            "createdAt":  "2023-06-29T10:50:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mjebrahimi",
                                            "createdAt":  "2023-07-11T10:26:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "misha-fm",
                                            "createdAt":  "2023-07-13T15:02:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ElliottBrand",
                                            "createdAt":  "2023-08-09T18:21:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LXGaming",
                                            "createdAt":  "2023-09-24T06:02:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AbdulrahmanHallak",
                                            "createdAt":  "2023-10-30T17:26:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FrankStrieter",
                                            "createdAt":  "2023-11-13T07:27:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MohammadMokhtarii",
                                            "createdAt":  "2023-11-30T07:42:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eromandp",
                                            "createdAt":  "2024-01-05T17:46:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SbiCA",
                                            "createdAt":  "2024-02-14T06:32:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "splitt3r",
                                            "createdAt":  "2024-04-01T11:09:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MariovanZeist",
                                            "createdAt":  "2024-04-04T09:47:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DanielHabenicht",
                                            "createdAt":  "2024-04-10T21:16:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "meixger",
                                            "createdAt":  "2024-05-14T09:04:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dmalyshevmarinexchange",
                                            "createdAt":  "2024-05-28T16:24:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "leniency",
                                            "createdAt":  "2024-06-06T16:14:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pampua84",
                                            "createdAt":  "2024-06-13T13:25:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cri5ti",
                                            "createdAt":  "2024-06-20T07:35:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fr4gles",
                                            "createdAt":  "2024-06-21T15:40:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "david-visma",
                                            "createdAt":  "2024-06-28T07:51:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sinapy",
                                            "createdAt":  "2024-07-18T16:57:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Jodenee",
                                            "createdAt":  "2024-08-05T15:32:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vycdev",
                                            "createdAt":  "2024-09-05T09:46:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "soroushkavousi",
                                            "createdAt":  "2024-10-04T08:42:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lonix1",
                                            "createdAt":  "2024-10-14T04:05:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "VitaliAntonov",
                                            "createdAt":  "2024-10-27T23:03:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Trivivium",
                                            "createdAt":  "2024-12-11T20:08:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DavidAllardyce",
                                            "createdAt":  "2024-12-17T14:37:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "daanstolp",
                                            "createdAt":  "2024-12-19T11:36:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BrunoJuchli",
                                            "createdAt":  "2025-02-12T05:53:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "michiclair",
                                            "createdAt":  "2025-02-12T20:50:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mayis-ST",
                                            "createdAt":  "2025-02-17T16:49:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CMircea",
                                            "createdAt":  "2025-03-04T10:34:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "marcmss",
                                            "createdAt":  "2025-04-01T13:20:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AldeRoberge",
                                            "createdAt":  "2025-04-15T18:46:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bartizan",
                                            "createdAt":  "2025-04-30T11:50:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "oksana-semko",
                                            "createdAt":  "2025-06-13T10:23:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sveinungf",
                                            "createdAt":  "2025-08-27T09:37:28Z"
                                        }
                                    ],
                          "totalCount":  73
                      },
        "updatedAt":  "2025-02-10T18:00:04Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nThe ASP.NET Core rate limiting middleware is great, but \"limited\" in terms of what you an communicate with your users. Let\u0027s start with some code that you can write today in .NET 7:\r\n\r\n```csharp\r\nbuilder.Services.AddRateLimiter(options =\u003e\r\n{\r\n    options.OnRejected = async (context, token) =\u003e\r\n    {\r\n        context.HttpContext.Response.StatusCode = 429;\r\n        if (context.Lease.TryGetMetadata(MetadataName.RetryAfter, out var retryAfter))\r\n        {\r\n            await context.HttpContext.Response.WriteAsync(\r\n                $\"Too many requests. Please try again after {retryAfter.TotalMinutes} minute(s). \" +\r\n                $\"Read more about our rate limits at https://example.org/docs/ratelimiting.\", cancellationToken: token);\r\n        }\r\n        else\r\n        {\r\n            await context.HttpContext.Response.WriteAsync(\r\n                \"Too many requests. Please try again later. \" +\r\n                \"Read more about our rate limits at https://example.org/docs/ratelimiting.\", cancellationToken: token);\r\n        }\r\n    };\r\n\r\n    // ...\r\n});\r\n```\r\n\r\nWhen rate limits are triggered, a response is returned that tells the user they are rate limited, where to find more information, and (if the `MetadataName.RetryAfter` data is available), when to retry.\r\n\r\nThis is quite limited. There\u0027s no access to which rate limiter fired, and what its statistics are.\r\n\r\nAdditionally, the current `RateLimitLease` is only accessible when rate limiting is fired - not for every request. If you would want to return statistics about your limits (e.g. [like GitHub does](https://docs.github.com/en/rest/overview/resources-in-the-rest-api#rate-limit-http-headers)), you\u0027ll find it impossible to get statistics about the current lease in a custom middleware that can write out these additional headers.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nHere\u0027s a middleware that has access to some of data that I\u0027d want to access:\r\n\r\n```csharp\r\npublic class RateLimitStatisticsMiddleware\r\n{\r\n    private readonly RequestDelegate _next;\r\n    private readonly IOptions\u003cRateLimiterOptions\u003e _options;\r\n\r\n    public RateLimitStatisticsMiddleware(RequestDelegate next, IOptions\u003cRateLimiterOptions\u003e options)\r\n    {\r\n        _next = next;\r\n        _options = options;\r\n    }\r\n\r\n    public Task Invoke(HttpContext context)\r\n    {\r\n        // Note: This should also work on endpoint limiters, but those are not available.\r\n        // There is no current \"rate limit context\" of sorts. Including the policy name etc.\r\n        var globalLimiter = _options.Value.GlobalLimiter;\r\n        if (globalLimiter != null)\r\n        {\r\n            var statistics = globalLimiter.GetStatistics(context);\r\n            if (statistics != null)\r\n            {\r\n                // Note: It would be great to be able to get the TokenLimit from the \"current rate limiter context\"\r\n                context.Response.Headers.Add(\"X-Rate-Limit-Limit\", \"20\");\r\n\r\n                // Note: It would be great to be able to get the Window from the \"current rate limiter context\"\r\n                context.Response.Headers.Add(\"X-Rate-Limit-Reset\", DateTimeOffset.UtcNow.ToString(\"O\"));\r\n\r\n                // This one is there today\r\n                context.Response.Headers.Add(\"X-Rate-Limit-Remaining\", statistics.CurrentAvailablePermits.ToString());\r\n            }\r\n        }\r\n\r\n        return _next(context);\r\n    }\r\n}\r\n```\r\n\r\nThe dream scenario for a better ASP.NET Core rate limiter middleware would be to:\r\n\r\n* Have access to more statistics about the rate limiter (which policy fired, what partition, what are the limiter\u0027s options so I can emit a message that says \"you can only make 10 requests per minute\", ...) in the rejected callbacks.\r\n* Have a feature on the current `HttpContext` that gives access to the current rate limit context, so these details can also be returned on successful requests, or added to telemetry.\r\n\r\n### Additional context\r\n\r\nMost rate limiters in `System.Threading.RateLimiting` don\u0027t provide additional statistics. This feature will need changes in both ASP.NET Core and the .NET framework.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUWo8lQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85K5q-w",
                                           "createdAt":  "2022-09-23T20:14:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "@BrennanConroy @wtgodbe @halter73 ",
                                           "updatedAt":  "2022-09-23T20:14:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85K_-g0",
                                           "createdAt":  "2022-09-26T16:13:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-09-26T16:13:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85K_-ln",
                                           "createdAt":  "2022-09-26T16:13:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEObfUg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "anandsowm",
                                                                               "createdAt":  "2022-12-27T13:49:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "niklaswallerstedt",
                                                                               "createdAt":  "2023-01-18T19:57:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sulmar",
                                                                               "createdAt":  "2023-03-02T08:48:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dylanvdmerwe",
                                                                               "createdAt":  "2023-04-21T13:01:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "andreibicu",
                                                                               "createdAt":  "2023-08-08T10:06:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PanSotnik",
                                                                               "createdAt":  "2023-08-23T13:31:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "david-visma",
                                                                               "createdAt":  "2024-06-28T06:32:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AldeRoberge",
                                                                               "createdAt":  "2025-04-15T18:46:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  8
                                                         },
                                           "author":  "wtgodbe",
                                           "body":  "I definitely think we should do this for dotnet 8",
                                           "updatedAt":  "2022-09-26T16:13:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85NxezT",
                                           "createdAt":  "2022-11-06T14:41:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cristipufu",
                                           "body":  "\u003e Have a feature on the current HttpContext that gives access to the current rate limit context, so these details can also be returned on successful requests, or added to telemetry.\r\n\r\nHow would we handle this for multiple policies (eg global + endpoint)?",
                                           "updatedAt":  "2022-11-06T14:41:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85NxfEF",
                                           "createdAt":  "2022-11-06T14:47:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maartenba",
                                           "body":  "How does the runtime handle such case? I assume the most strict is applied?",
                                           "updatedAt":  "2022-11-06T14:47:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Pp-8L",
                                           "createdAt":  "2022-12-04T12:58:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cristipufu",
                                           "body":  "I think that \r\n\r\n- we should have an `OnAcquired` func where we would have access to the successful lease which stores metadata information about the current rate limiter, similar to the `OnRejected` func (this should be sufficient to return rate limiting http headers on successful requests as well) - the issue here would be with multiple rate limiters on the same endpoint, I\u0027m not sure how easy it is to decide which one is the most strict, but I don\u0027t think it actually matters that much. \r\n\r\n- we should somehow have access to the cached rate limiters, I want to be able to call `GetStatistics()` on the application\u0027s rate limiters once in a while (in a background job) and map that data with OpenTelemetry.Metrics and show a nice graph of successful/failed requests per rate limiter with Promotheus. Thinking about it, this could also be achieved by writing a metric when OnAcquired/OnRejected and adding metadata about the current PartitionKey",
                                           "updatedAt":  "2022-12-04T13:14:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85QUIIt",
                                           "createdAt":  "2022-12-12T22:52:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MadL1me",
                                           "body":  "@maartenba you said: \r\n\r\n\u003e Most rate limiters in System.Threading.RateLimiting don\u0027t provide additional statistics. This feature will need changes in both ASP.NET Core and the .NET framework.\r\n\r\nCan you please explain on the process how to do this? Do I need to send link to this issue in PR to other repo? Where I can find BCL (with rate .net base rate limiting) repo on a github? Do I need somehow to contact devs via issue submitting, or should I right away submit a PR? It would be great to have answers to those  ",
                                           "updatedAt":  "2022-12-12T22:52:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85QWiFL",
                                           "createdAt":  "2022-12-13T09:52:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maartenba",
                                           "body":  "@MadL1me The BCL classes are in https://github.com/dotnet/runtime/tree/main/src/libraries/System.Threading.RateLimiting\r\n\r\nI am not Microsoft, so no idea how to do a PR across multiple repos/how to suggest such changes. @wtgodbe may be able to comment on that?",
                                           "updatedAt":  "2022-12-13T09:52:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85QblUe",
                                           "createdAt":  "2022-12-13T18:17:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCxNK3A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "MadL1me",
                                                                               "createdAt":  "2022-12-13T22:39:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wtgodbe",
                                           "body":  "We ingest changes from dotnet/runtime via automated dependency updates. If your change to the BCL base limiter classes requires API change, you\u0027ll need to open a [formal API proposal](https://github.com/dotnet/runtime/issues/new?assignees=\u0026labels=api-suggestion\u0026template=02_api_proposal.yml\u0026title=%5BAPI+Proposal%5D%3A+). Otherwise you can just open PR in dotnet/runtime and ask for review from myself, @BrennanConroy, and @Tratcher. Once your PR in is merged into dotnet/runtime, after a few hours an automated dependency update PR should get opened in this repo (will look like https://github.com/dotnet/aspnetcore/pull/45448). Once that\u0027s merged, your changes from dotnet/runtime will be available in this repo, and you can open your follow-up PR here.",
                                           "updatedAt":  "2022-12-13T18:18:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85RajyV",
                                           "createdAt":  "2022-12-27T13:51:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEVLixw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cocowalla",
                                                                               "createdAt":  "2023-04-18T11:34:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "david-visma",
                                                                               "createdAt":  "2024-06-28T06:35:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "luis-barreira",
                                                                               "createdAt":  "2024-09-23T14:21:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "seabass223",
                                                                               "createdAt":  "2025-06-03T19:55:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "anandsowm",
                                           "body":  "Yes, would be very useful feature. Looking at the different classes involved, there is no way to know how many permits have been issued so far for a given partition key. That would be good to have. Also is there a way to retain the count of leases issued between system restarts? It is right now stored in-memory, try to provide a way to plug in a persistence component.",
                                           "updatedAt":  "2022-12-27T13:51:59Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Rate limiting middleware - Statistics about rate limiters",
        "labels":  [
                       "feature-rate-limit",
                       "area-networking",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/44153",
        "createdAt":  "2022-09-23T22:06:45Z",
        "number":  44153,
        "author":  "danroth27",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCqtr-w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2022-09-23T22:13:37Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-29T17:44:22Z",
        "body":  "The static files middleware currently doesn\u0027t return any cache control headers in development, which can lead to static files getting cached and content changes not being reflected in the app. It would be convenient if the static files middleware add the cache-control: no-cache header when running in development to prevent caching issues.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOf99pRQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85K7gPC",
                                           "createdAt":  "2022-09-25T03:41:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "It already includes LastModified and ETag, both of which are used as part of caching and validation. Any updates to the content should cause the cached value to be replaced upon re-validation. Have you seen cases where this isn\u0027t working? Is the client not re-validating? Maybe `must-revalidate` would be a better option than `no-cache`.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/23ea496cee168bdd8f7ed3c6d85ec78dbecc99f4/src/Middleware/StaticFiles/src/StaticFileContext.cs#L256-L257",
                                           "updatedAt":  "2022-09-25T03:41:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85K_q-k",
                                           "createdAt":  "2022-09-26T15:19:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danroth27",
                                           "body":  "I messed around with this a bit with caching enabled and I wasn\u0027t able to reproduce a case where the cache isn\u0027t correctly invalidated. Looks like there\u0027s nothing to do here as far as I can tell.",
                                           "updatedAt":  "2022-09-26T15:19:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85L0OIf",
                                           "createdAt":  "2022-10-07T18:56:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Re-opening. There are reports that last-modified isn\u0027t reliable enough because clients choose how long to way before re-validating.\r\nSuggestion:\r\n- Add `string? CacheControl` to StaticFileOptions\r\n- Set this to `Cache-Control: max-age=0, must-revalidate` in the default host builder for IsDevelopment, but make sure it\u0027s easy to override for other environments.",
                                           "updatedAt":  "2022-10-07T18:56:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85n8kJU",
                                           "createdAt":  "2023-10-02T23:47:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "This still seems to be an issue and browsers can decide to more aggressively cache static files even on localhost if `cache-control` is not set.",
                                           "updatedAt":  "2023-10-02T23:47:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85_3rxC",
                                           "createdAt":  "2024-06-03T14:10:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "FYI, `MapStaticAssets` takes care of this by setting a no-cache policy for non-fingerprinted assets and an `immutable` policy for fingerprinted ones.\r\n\r\nOnce the fingerprinting changes land, I\u0027ll update aspire to take advantage of them.",
                                           "updatedAt":  "2024-06-03T14:10:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85_32lF",
                                           "createdAt":  "2024-06-03T14:28:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "\u003e Once the fingerprinting changes land, I\u0027ll update aspire to take advantage of them.\r\n\r\n@javiercn what\u0027s the relation to the Aspire scenario?",
                                           "updatedAt":  "2024-06-03T14:28:01Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Consider updating the static file middleware to return cache-control: no-cache in Development",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/44191",
        "createdAt":  "2022-09-26T21:22:40Z",
        "number":  44191,
        "author":  "Belphemur",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-14T20:31:06Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nWhen providing APIs to be used publicly, some error code like `404` might worth to be cache longer than success code since we know this state won\u0027t change anytime soon.\r\n\r\nIn my case, I provide an API to search for subtitle for shows.\r\n\r\nThe api take the searched show from the URL. It\u0027s more than possible that said show isn\u0027t available on my service yet.\r\nI return a 404 and like to cache that result for longer than a succesful found show with subtitles.\n\n### Describe the solution you\u0027d like\n\nDelay evaluation of policy to when we have a response to let the developer use `HttpContext.Response` as part of rule for matching policy, like its status code.\n\n### Additional context\n\nCurrently we have access to the response using the ` .With(context =\u003e context.HttpContext.Response.StatusCode == 404);` when defining a policy. The issue is, since the response isn\u0027t created yet, the status code is always 200.\r\n\r\nSince there isn\u0027t yet a full documentation of the capabilities of the `With` method, it can leads to unexpected cases.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSzG2Bw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85LMR3I",
                                           "createdAt":  "2022-09-28T22:03:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-09-28T22:03:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85LMbYH",
                                           "createdAt":  "2022-09-28T23:00:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Belphemur",
                                           "body":  "I understand on that case, the doc should specify that the response can\u0027t be used to make output cache policies.",
                                           "updatedAt":  "2022-09-28T23:00:11Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  ".NET 7.0: Output Caching: Evaluate policy after other middleware processed the request",
        "labels":  [
                       "area-networking",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/44243",
        "createdAt":  "2022-09-29T02:51:44Z",
        "number":  44243,
        "author":  "JamesNK",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-14T20:31:10Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nDevelopers can add the services for middleware, e.g. `AddCors`, and not realize that the middleware needs to be registered in middleware with `UseCors`. There is no error or indication to the developer about what they\u0027re missing.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nAn analyzer that looks at what middleware services are registered, what middleware is used in request pipeline, and warns the developer about middleware that\u0027s unused.\r\n\r\nWe can\u0027t infer what these names are so we\u0027d hard code AddMiddleware and UseMiddleware method names.\r\n\r\n### Additional context\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOS1bSoA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85LNH81",
                                           "createdAt":  "2022-09-29T04:14:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "What happens if it\u0027s called by another method that the analyzer can\u0027t see the body of?",
                                           "updatedAt":  "2022-09-29T04:14:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85LNIqx",
                                           "createdAt":  "2022-09-29T04:19:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "Suppress the warning? The developer could suppress with pragma in code or add it to NoWarn.\r\n\r\nAre you thinking of the situation of WebApplication which automatically adds UseAuthN and UseAuthZ to the middleware pipeline? The analyzer could detect WebApplication and infer that auth middleware is used.",
                                           "updatedAt":  "2022-09-29T04:22:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85LNJjC",
                                           "createdAt":  "2022-09-29T04:27:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCtAXWQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "martincostello",
                                                                               "createdAt":  "2022-09-29T06:41:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Yes this is the only analyzer suggestion I think shouldn\u0027t be a warning by default. People will refactor things into methods and the analyzer will get confused quickly.",
                                           "updatedAt":  "2022-09-29T04:27:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85LNKlp",
                                           "createdAt":  "2022-09-29T04:35:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "We might not necessarily be limited to detecting UseMiddleware calls in Main. We could check to see if there is an appropriate Use call anywhere in app code.\r\n\r\nDepending how robust this is (i.e. minimal false positives) can determine the diagnostic level.",
                                           "updatedAt":  "2022-09-29T04:35:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85LNLen",
                                           "createdAt":  "2022-09-29T04:42:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I\u0027ll feel better when I see how we plan to tackle that 😃 ",
                                           "updatedAt":  "2022-09-29T04:42:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85LVtKg",
                                           "createdAt":  "2022-09-30T20:14:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-09-30T20:14:35Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[Analyzer] Detect adding middleware services but middleware isn\u0027t used",
        "labels":  [
                       "analyzer",
                       "area-networking",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/44244",
        "createdAt":  "2022-09-29T03:36:25Z",
        "number":  44244,
        "author":  "JamesNK",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAXZEw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "juliushardt",
                                            "createdAt":  "2022-10-31T21:21:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "richstokoe",
                                            "createdAt":  "2023-12-31T13:09:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "inkysquid",
                                            "createdAt":  "2025-03-21T15:54:08Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-02-14T20:31:10Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nSome middleware is terminal. That means it doesn\u0027t call the next middleware (if present) and starts the request returning back down the pipeline. For example, `UseSpa` is terminal.\r\n\r\nDevelopers could place middleware after `UseSpa`, not realizing it isn\u0027t executed. For example, `UseEndpoints` after `UseSpa`.\r\n\r\nThis problem also happens with `WebApplication`, which implicitly adds `UseEndpoints` to the end of the pipeline. Any terminal middleware prevents endpoints from being executed.\n\n### Describe the solution you\u0027d like\n\n* Detect middleware after terminal middleware and warn the developer.\r\n* (maybe) Detect terminal middleware with `WebApplication`. Warn the developer they may need to add UseEndpoints before terminal middleware.\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUZYMFA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85LVtMx",
                                           "createdAt":  "2022-09-30T20:14:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-09-30T20:14:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85NWgw7",
                                           "createdAt":  "2022-10-31T22:08:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEK5T1w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SKumarSpace",
                                                                               "createdAt":  "2022-12-28T19:59:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "inkysquid",
                                                                               "createdAt":  "2025-03-21T15:54:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "juliushardt",
                                           "body":  "Possibly related: When terminal middleware is used with `WebApplication`, it is required to use `UseEndpoints()`, as described above. However, the [analyzer for ASP0014](https://github.com/dotnet/aspnetcore/blob/8dc432556c937465edb2cdff4ab2ad7cbb16bd92/src/Framework/AspNetCoreAnalyzers/src/Analyzers/WebApplicationBuilder/WebApplicationBuilderAnalyzer.cs) unconditionally suggests top level route registrations even in this case, which may be confusing.\r\n\r\nScenario: I created a new ASP.NET Core web application using the \"ASP.NET Core Web App\" template in Visual Studio and added the `Spa` middleware from `Microsoft.AspNetCore.SpaServices.Extensions`:\r\n```cs\r\n// Program.cs from the template\r\n// ...\r\napp.MapRazorPages();\r\n\r\n// I added the following lines:\r\nif (app.Environment.IsDevelopment())\r\n{\r\n\tapp.UseSpa(spa =\u003e\r\n\t{\r\n\t\tspa.UseProxyToSpaDevelopmentServer(\"http://127.0.0.1:5173\");\r\n\t});\r\n}\r\n\r\napp.Run();\r\n\r\n```\r\nThis preceding code does not work as expected, since `UseSpa` is terminal and, hence, the ASP.NET routes (e.g. Razor Pages) are never executed. To fix this, I changed the code such that `UseEndpoints()` is called explicitly:\r\n```cs\r\n//app.MapRazorPages();\r\n\r\napp.UseEndpoints(endpoints =\u003e\r\n{\r\n\tendpoints.MapRazorPages();\r\n});\r\n\r\n\r\nif (app.Environment.IsDevelopment())\r\n{\r\n\tapp.UseSpa(spa =\u003e\r\n\t{\r\n\t\tspa.UseProxyToSpaDevelopmentServer(\"http://127.0.0.1:5173\");\r\n\t});\r\n}\r\n```\r\nThe modified code works, but results in code style warning [ASP0014](https://learn.microsoft.com/aspnet/core/diagnostics/asp0014?view=aspnetcore-7.0). As far as I can tell, there is no way to use `UseSpa()` with the new hosting model without calling `UseEndpoints()` explicitly. Therefore, when this issue is addressed, I suggest updating the analyzer for ASP0014 as well, such that is does not issue a warning if `UseEndpoints()` is called before the registration of terminal middleware.",
                                           "updatedAt":  "2022-10-31T22:08:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85RlgwU",
                                           "createdAt":  "2023-01-02T09:51:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jornhd",
                                           "body":  "I have a similar problem with Swagger. If I use app.MapGet(), I get \"No operations defined in spec!\". When I wrap it in app.UseEndpoints() like before, Swagger works as expected, but then I get the AP0014 warning.\r\n\r\nEDIT:\r\nAfter further investigation, I found that that the problem is that I have a custom filter reading api description: `app.Services.GetService\u003cIApiDescriptionGroupCollectionProvider\u003e().ApiDescriptionGroups.Items.ToList();` If I remove this it works, but as soon as I access the ApiDescriptionGroupCollectionProvider, I get \"No operations defined in spec!\".\r\nAgain, no problem when wrapping the registrations in .UseEndpoints().",
                                           "updatedAt":  "2023-01-03T08:33:20Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[Analyzer] Detect middleware in pipeline after terminal middleware",
        "labels":  [
                       "analyzer",
                       "area-networking",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/44639",
        "createdAt":  "2022-10-19T15:04:57Z",
        "number":  44639,
        "author":  "bgulrich",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-14T21:10:26Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nI\u0027m attempting to use the RewriteMiddleware to (in part) select alternate paths for static files.  If I use the [UseRewriter](https://github.com/dotnet/aspnetcore/blob/14c39984660a8cefb09a8d77331b47ffc48d7a22/src/Middleware/Rewrite/src/RewriteBuilderExtensions.cs#L58) extension to register the middleware in the pipeline, endpoint evaluation/selection occurs sooner than expected on rewritten requests, which causes StaticFilesMiddleware to be [bypassed](https://github.com/dotnet/aspnetcore/blob/25ffef8fe5ad0ed67e0ad33b02379c2d3c1a890f/src/Middleware/StaticFiles/src/StaticFileMiddleware.cs#L75) when an alternate endpoint is found. I\u0027m using YARP to route all unserviceable requests to another application, so the YARP endpoint will always be selected in my case.\r\n\r\n\r\n### Expected Behavior\r\n\r\nI would expect the rewrite middleware to simply rewrite the request path and let the pipeline continue as configured.\r\n\r\n### Steps To Reproduce\r\n\r\nExample code here: https://github.com/bgulrich/rewrite-bug\r\n\r\nI took the template ASP.NET Core 6 WebApplication and moved `wwwroot/favicon.ico` -\u003e `wwwroot/test/favicon.ico` and configured the rewrite middlware to point `/favicon.ico` request to this new location.  I also added the `TestController` with an endpoint on the `/test/favicon.ico` route.  My expectation is that this endpoint should not be reachable because it should be serviced by the static files middleware that appears earlier in the pipeline, but issuing a request to `/favicon.ico` hits this endpoint instead because the RewriteMiddleware is setting the endpoint (checked with breakpoint in dummy middleware between rewrite and static files), causing StaticFilesMiddleware to bypass.\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n6.0.400\r\n\r\n### Anything else?\r\n\r\nMy current workaround is to register my RewriteOptions with the service provider and to register the RewriteMiddleware manually with `app.Use\u003cRewriteMiddleware\u003e()` to avoid the UseRewrite extension that tweaks the pipline.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTKCl3w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85MjdAi",
                                           "createdAt":  "2022-10-19T17:41:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "@BrennanConroy ",
                                           "updatedAt":  "2022-10-19T17:41:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Mke0g",
                                           "createdAt":  "2022-10-19T22:19:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "Triage: We want to keep the behavior of `UseRewriter` but we should fix this so that the case that @bgulrich shared (where `UseRouting()` is explicitly called) just works.\r\n\r\n@bgulrich Glad you found a workaround for it; that seems reasonable (though it\u0027s unfortunate that it\u0027s necessary).",
                                           "updatedAt":  "2022-10-19T22:21:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85MkfDt",
                                           "createdAt":  "2022-10-19T22:21:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-10-19T22:21:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85MoKXf",
                                           "createdAt":  "2022-10-20T13:59:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bgulrich",
                                           "body":  "\u003e Triage: We want to keep the behavior of `UseRewriter` but we should fix this so that the case that @bgulrich shared (where `UseRouting()` is explicitly called) just works.\r\n\r\nMaybe just a flag in the options to opt-out of [this branching](https://github.com/dotnet/aspnetcore/blob/main/src/Middleware/Rewrite/src/RewriteMiddleware.cs#L85).",
                                           "updatedAt":  "2022-10-20T13:59:55Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "RewriteMiddleware sets endpoint in pipeline before routing middleware",
        "labels":  [
                       "area-networking",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/45016",
        "createdAt":  "2022-11-11T02:23:39Z",
        "number":  45016,
        "author":  "RoySalisbury",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-13T21:51:12Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWhen returning an item from the cache, the response headers are different based on cached vs non-cache. Specifically, the \"api-supported\" header is missing.\r\n\r\n// First call - not cached\r\n api-supported-versions: 1.0 \r\n content-type: application/json; charset=utf-8 \r\n date: Fri,11 Nov 2022 02:18:26 GMT \r\n server: Kestrel \r\n\r\n// Second call - item cached\r\n age: 22 \r\n content-length: 39 \r\n content-type: application/json; charset=utf-8 \r\n date: Fri,11 Nov 2022 02:18:26 GMT \r\n server: Kestrel \n\n### Expected Behavior\n\nAll relevant headers that the client might need to inspect are present. in this case, the \"api-version\"\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n7.0.100\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOToxc-Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85OWpB8",
                                           "createdAt":  "2022-11-14T23:47:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "@RoySalisbury it\u0027s likely that `api-supported-versions` is being injected later in the pipeline than the output caching middleware runs, and therefore output caching can\u0027t cache it. \r\n\r\nWe have an issue to track addressing this: https://github.com/dotnet/aspnetcore/issues/39310",
                                           "updatedAt":  "2022-11-14T23:47:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85OWpGC",
                                           "createdAt":  "2022-11-14T23:47:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sebastienros",
                                           "body":  "Note to myself, repro by inject a header by using `OnStarting`",
                                           "updatedAt":  "2022-11-14T23:47:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85OjFz5",
                                           "createdAt":  "2022-11-16T23:34:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-11-16T23:34:59Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "OutputCaching not returning API version headers",
        "labels":  [
                       "area-networking",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/45221",
        "createdAt":  "2022-11-21T22:48:17Z",
        "number":  45221,
        "author":  "captainsafia",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-27T22:25:55Z",
        "body":  "- Add the matching middleware when services have been registered (Cors, Ratelimiting, Authn, Authz)\r\n- Add required services when middlewares are registered\r\n- Enumerate scenarios where we warn for missing services in middleware at runtime based on a sentinel\r\n  - Using an analyzer instead of automatically registering at runtime gives the flexibility to the user to control ordering ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVAN3RA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85O2Mc2",
                                           "createdAt":  "2022-11-22T00:20:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "\u003e * Add required services when middlewares aren\u0027t registered\r\n\r\n*are?",
                                           "updatedAt":  "2022-11-22T00:20:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85O2f4A",
                                           "createdAt":  "2022-11-22T02:02:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "captainsafia",
                                           "body":  "\u003e \u003e * Add required services when middlewares aren\u0027t registered\r\n\u003e \r\n\u003e *are?\r\n\r\nFixed! Thanks.",
                                           "updatedAt":  "2022-11-22T02:02:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85UA3dE",
                                           "createdAt":  "2023-01-30T23:24:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-01-30T23:24:35Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[Analyzer] Add missing services for registered middlewares",
        "labels":  [
                       "api-suggestion",
                       "analyzer",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/45339",
        "createdAt":  "2022-11-29T11:03:41Z",
        "number":  45339,
        "author":  "marcominerva",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-02T00:50:43Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI\u0027m reading the article at: https://learn.microsoft.com/en-us/aspnet/core/performance/caching/output?view=aspnetcore-7.0#default-output-caching-policy. In particular, I\u0027m doing some tests about the default caching policy. According to it, by default: \r\n\r\n\u003e Responses to authenticated requests aren\u0027t cached.\r\n\r\nAnd then:\r\n\r\n\u003e The following code removes these defaults while applying caching to all of an app\u0027s endpoints:\r\n\u003e \r\n\u003e `builder.Services.AddOutputCache();`\r\n\r\nHowever, even with the above code, the following request isn\u0027t cached:\r\n\r\n```\r\n\r\napp.UseOutputCache();\r\n\r\n// ...\r\n\r\napp.MapGet(\"/withcache\", () =\u003e DateTime.UtcNow);\r\n\r\napp.Run();\r\n```\r\n\r\nSo, if I don\u0027t call the `.CacheOutput(`) method after `MapGet`, the endpoint isn\u0027t cached, even if the documentation tells the opposite (because I have used `builder.Services.AddOutputCache();`, that applies caching to all of an app\u0027s endpoints). Moreover, it doesn\u0027t work also if I add `CacheOutput()` and then `RequireAuthorization()`:\r\n\r\napp.MapGet(\"/withcache\", () =\u003e DateTime.UtcNow).CacheOutput().RequireAuthorization();\r\n\r\n It seems that, despite the documentation, defaults aren\u0027t removed at all. The only way I manage to use cache output for authenticated requests is providing a custom `IOutputCachePolicy `implementation.\n\n### Expected Behavior\n\nAccording to the documentation, using `builder.Services.AddOutputCache()`; all the output caching defaults should be removed, so authenticated request should be cached as well.\n\n### Steps To Reproduce\n\nMinimal repro here: https://github.com/marcominerva/OutputCacheIssue.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n7.0.100\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOT3H5BQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85PcfkF",
                                           "createdAt":  "2022-11-30T23:26:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-11-30T23:26:17Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Unable to remove Output Cache defaults",
        "labels":  [
                       "feature-output-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/45407",
        "createdAt":  "2022-12-01T22:26:18Z",
        "number":  45407,
        "author":  "Tratcher",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-02T00:51:25Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nApplications encountering issues in production will want to add, remove, or tune their rate limits on endpoints without recompiling their application, or even better, without restarting.\n\n### Describe the solution you\u0027d like\n\nEstablish a pattern and APIs for defining rate limits in config and associating them with endpoints. Ideally these would reload on change, but avoiding a recompilation is the minimum requirement.\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOT_IjJQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85P4Q4m",
                                           "createdAt":  "2022-12-06T23:22:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-12-06T23:22:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85P4RA0",
                                           "createdAt":  "2022-12-06T23:23:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "captainsafia",
                                           "body":  "Triage: Will place in planning for prioritization.\r\n\r\n@Tratcher Did this come out of a user scenario or is it an original proposal?",
                                           "updatedAt":  "2022-12-06T23:23:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85P8iMl",
                                           "createdAt":  "2022-12-07T16:52:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "This came from @sebastienros\u0027s designs for pre-built exe\u0027s that enable \u0026 configure middleware via config. It would also be useful for YARP.",
                                           "updatedAt":  "2022-12-07T16:52:39Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Add/Remove/Update rate limits from config, reloadable",
        "labels":  [
                       "feature-rate-limit",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/45528",
        "createdAt":  "2022-12-09T23:12:40Z",
        "number":  45528,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCxUH5w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MaceWindu",
                                            "createdAt":  "2023-07-14T14:25:36Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-03-02T00:43:17Z",
        "body":  "When I `dotnet publish -c Release -p:PublishAot=true` the following app:\n\n```C#\nvar app = new ApplicationBuilder(serviceProvider: null);\n\nUseMiddlewareExtensions.UseMiddleware\u003cHiMiddleware\u003e(app);\n\npublic class HiMiddleware\n{\n    public Task Invoke(HttpContext context)\n    {\n        Console.WriteLine(\"hi\");\n        return Task.CompletedTask;\n    }\n}\n```\n\nWe should create a Source Generator for `UseMiddleware` so we don\u0027t need to use Reflection on NativeAOT. See #45890\n\n### Original issue (outdated)\n\nI get the following AOT warnings stemming from the `UseMiddleware` method:\n\n```\n/_/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/Interpreter/ArrayOperations.cs(23): AOT analysis warning IL3050: System.Linq.Expressions.Interpreter.NewArrayInitInstruction.Run(InterpretedFrame): Using member \u0027System.Array.CreateInstance(Type,Int32)\u0027 which has \u0027RequiresDynamicCodeAttribute\u0027 can break functionality when AOT compiling. The code for an array of the specified type might not be available. [C:\\DotNetTest\\AspNetTest\\AspNetTest.csproj]\n/_/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/Interpreter/ArrayOperations.cs(52): AOT analysis warning IL3050: System.Linq.Expressions.Interpreter.NewArrayInstruction.Run(InterpretedFrame): Using member \u0027System.Array.CreateInstance(Type,Int32)\u0027 which has \u0027RequiresDynamicCodeAttribute\u0027 can break functionality when AOT compiling. The code for an array of the specified type might not be available. [C:\\DotNetTest\\AspNetTest\\AspNetTest.csproj]\n/_/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/Interpreter/ArrayOperations.cs(87): AOT analysis warning IL3050: System.Linq.Expressions.Interpreter.NewArrayBoundsInstruction.Run(InterpretedFrame): Using member \u0027System.Array.CreateInstance(Type,Int32[])\u0027 which has \u0027RequiresDynamicCodeAttribute\u0027 can break functionality when AOT compiling. The code for an array of the specified type might not be available. [C:\\DotNetTest\\AspNetTest\\AspNetTest.csproj]\n/_/src/libraries/System.Linq.Expressions/src/System/Dynamic/Utils/TypeUtils.cs(28): AOT analysis warning IL3050: System.Dynamic.Utils.TypeUtils.GetNullableType(Type): Using member \u0027System.Type.MakeGenericType(Type[])\u0027 which has \u0027RequiresDynamicCodeAttribute\u0027 can break functionality when AOT compiling. The native code for this instantiation might not be available at runtime. [C:\\DotNetTest\\AspNetTest\\AspNetTest.csproj]\n/_/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/MethodCallExpression.cs(1379): AOT analysis warning IL3050: System.Linq.Expressions.Expression.ApplyTypeArgs(MethodInfo,Type[]): Using member \u0027System.Reflection.MethodInfo.MakeGenericMethod(Type[])\u0027 which has \u0027RequiresDynamicCodeAttribute\u0027 can break functionality when AOT compiling. The native code for this instantiation might not be available at runtime. [C:\\DotNetTest\\AspNetTest\\AspNetTest.csproj]\n/_/src/libraries/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs(2239): AOT analysis warning IL3050: System.Linq.Expressions.Expression.GetResultTypeOfShift(Type,Type): Using member \u0027System.Type.MakeGenericType(Type[])\u0027 which has \u0027RequiresDynamicCodeAttribute\u0027 can break functionality when AOT compiling. The native code for this instantiation might not be available at runtime. [C:\\DotNetTest\\AspNetTest\\AspNetTest.csproj]\n````\n\nThis causes AOT warnings for ASP.NET apps that want to use EndPoints and Routing because we call `UseMiddleware` to enable these features:\n\nhttps://github.com/dotnet/aspnetcore/blob/f543e3552514c5c420eeddd55c505bbc131f10a6/src/Http/Routing/src/Builder/EndpointRoutingApplicationBuilderExtensions.cs#L62\n\nhttps://github.com/dotnet/aspnetcore/blob/f543e3552514c5c420eeddd55c505bbc131f10a6/src/Http/Routing/src/Builder/EndpointRoutingApplicationBuilderExtensions.cs#L113\n\nAt a minimum, we should remove the AOT warnings from the above 2 callsites, so we can publish an ASP.NET Web API application for NativeAOT with no warnings.\n\nAs a follow up after that, we should consider a mechanism for solving this warning generally, for example with a source generator that generates the necessary code at compile-time.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUk9T8g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85QUpWp",
                                           "createdAt":  "2022-12-13T00:51:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-12-13T00:51:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Rw6kM",
                                           "createdAt":  "2023-01-05T04:47:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "@eerhardt How come these warnings are coming from System.Linq.Expressions files? Has that project not been annotated for AOT yet?",
                                           "updatedAt":  "2023-01-05T04:47:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85RzoXW",
                                           "createdAt":  "2023-01-05T17:07:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e Has that project not been annotated for AOT yet?\r\n\r\nNo, it hasn\u0027t. There are a lot of libraries in dotnet/runtime that haven\u0027t been annotated for AOT. See https://github.com/dotnet/runtime/issues/75480.",
                                           "updatedAt":  "2023-01-05T17:07:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85ST1NI",
                                           "createdAt":  "2023-01-12T19:56:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-01-12T19:56:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85ST1Py",
                                           "createdAt":  "2023-01-12T19:56:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "captainsafia",
                                           "body":  "Triage: Parking this back in .NET 8 Planning to avoid it surfacing in the triage query.",
                                           "updatedAt":  "2023-01-12T19:56:17Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Make Source Generator for UseMiddleware",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/45658",
        "createdAt":  "2022-12-18T09:22:31Z",
        "number":  45658,
        "author":  "MadL1me",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-02T00:50:43Z",
        "body":  "## Background and Motivation\r\n\r\nIn https://github.com/dotnet/aspnetcore/issues/44140 issue, one of The dream scenario for a better ASP.NET Core rate limiter middleware as @maartenba says, would be able Have a feature on the current HttpContext that gives access to the current rate limit context, so these details can also be returned on successful requests, or added to telemetry.. This API proposal addresses this concern.\r\n\r\n## Proposed API\r\n\r\n\u003c!--\r\nPlease provide the specific public API signature diff that you are proposing. For example:\r\nYou may find the [Framework Design Guidelines](https://github.com/dotnet/runtime/blob/master/docs/coding-guidelines/framework-design-guidelines-digest.md) helpful.\r\n--\u003e\r\n\r\nBelow API supposes, that we have `RateLimiterMiddleware` in our app, which responsibility is to create `IRateLimiterContextFeature` for each request:\r\n\r\n```csharp\r\nvar app = builder.Build();\r\n\r\napp.UseRateLimiter();\r\n```\r\n\r\nNow we can access to this interface in any custom middleware or controller:\r\n\r\n```csharp\r\nnamespace Microsoft.AspNetCore.RateLimiting.Features;\r\n\r\npublic interface IRateLimiterContextFeature\r\n{\r\n     HttpContext HttpContext { get; set; }\r\n\r\n     RateLimitLease Lease { get; set; } \r\n\r\n     PartitionedRateLimiter\u003cHttpContext\u003e? GlobalLimiter { get; set; }\r\n\r\n     PartitionedRateLimiter\u003cHttpContext\u003e EndpointLimiter { get; set; }\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\n### Scenario 1: get statistics from limiters in custom telemetry middleware:\r\n\r\n```csharp\r\npublic Task Invoke(HttpContext context)\r\n{\r\n    var rlContext = context.Features.Get\u003cIRateLimiterContextFeature\u003e();\r\n\r\n    var globalStatistics = rlContext.GlobalLimiter.GetStatistics(context);\r\n    var endpointStatistics = rlContext.EndpointLimiter.GetStatistics(context);\r\n\r\n    _someTelemetryService.PushStatisticsToPrometheus(globalStatistics);\r\n    _someTelemetryService.PushStatisticsToPrometheus(endpointStatistics);\r\n}\r\n```\r\n\r\n### Scenario 2: Get metadata from successful RateLimiterLease for this request\r\n\r\n```csharp\r\npublic Task Invoke(HttpContext context)\r\n{\r\n    var rlContext = context.Features.Get\u003cIRateLimiterContextFeature\u003e();\r\n\r\n    if (rlContext.Lease.TryGetMetadata(\"SOME_METADATA\", out var metadata)\r\n    {\r\n        // Do some additional stuff, depends on metadata\r\n    }\r\n}\r\n```\r\n\r\n## Alternative Design - 1\r\n\r\nAs @Tratcher said, there is a risk, that `RateLimitLease` would be disposed early. To prevent that, we can introduce facade-like class to wrap Lease with undisposable entity:\r\n\r\n```cs\r\n\r\npublic interface IRateLimiterContextFeature\r\n{\r\n         HttpContext HttpContext { get; }\r\n\r\n         RateLimitLeaseInfo LeaseInfo { get; } \r\n\r\n         PartitionedRateLimiter\u003cHttpContext\u003e? GlobalLimiter { get; }\r\n\r\n         PartitionedRateLimiter\u003cHttpContext\u003e EndpointLimiter { get; }\r\n}\r\n\r\npublic abstract class RateLimitLeaseInfo \r\n{\r\n        // Same props as RateLimitLease, but without Dispose()\r\n}\r\n```\r\n\r\n## Alternative Design - 2\r\n\r\nAlso, Instead of using `HttpContext` Features, we can use `HttpContext.Items` and Extension methods, like its done in `Microsoft.AspNetCore.Authentication` extention methods (`HttpContext.SingIn`, `HttpContext.ChallangeAsync`, etc).\r\nSo, we use the Alternative Design - 1 approach with Facade-like api, but implemented with extension methods \r\n\r\n```cs\r\n// very simple example of implementation (for only 1 method) just to show the API\r\npublic static class HttpContextRateLimiterExtentions\r\n{\r\n    public static RateLimiterStatistics GetRateLimiterStatistics(this HttpContext context)\r\n    {\r\n        // just for example - the code is not correct\r\n        var limiter = (PartitionedRateLimiter\u003cHttpContext\u003e)context.Items[\"SomeGlobalLimiter\"];\r\n        var stats = limiter?.GetStatistics(context);\r\n        return stats;\r\n    }\r\n}\r\n\r\n// and then in some middleware:\r\nvar statistics = HttpContext.GetRateLimiterStatistics();\r\n```\r\n\r\n## Risks\r\n\r\nIn Design 1: \r\n- would anyone use this to dispose of the lease early? Would that have any strange side-effects, especially if it got double-disposed by the middleware later?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOb_8gvQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85Q3mUj",
                                           "createdAt":  "2022-12-18T09:24:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MadL1me",
                                           "body":  "Related to #45652 ",
                                           "updatedAt":  "2022-12-18T09:24:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Q8Xia",
                                           "createdAt":  "2022-12-19T17:28:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Risk\r\n- would anyone use this to dispose of the lease early? Would that have any strange side-effects, especially if it got double-disposed by the middleware later?",
                                           "updatedAt":  "2022-12-19T17:28:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Q-J4v",
                                           "createdAt":  "2022-12-19T22:06:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "IRateLimiterContextFeature - Consider making all of the properties read only. There\u0027s no scenario for replacing them, correct?",
                                           "updatedAt":  "2022-12-19T22:06:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85RAzk0",
                                           "createdAt":  "2022-12-20T10:45:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MadL1me",
                                           "body":  "Yep, I think making them read only would be best way to do. At firstly, I thought we can provide more flexibility by not restricting it, but there is really no way to use setters in any adequate scenario",
                                           "updatedAt":  "2022-12-20T10:45:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85RA6kb",
                                           "createdAt":  "2022-12-20T11:09:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MadL1me",
                                           "body":  "\u003e Risk\r\n\u003e \r\n\u003e * would anyone use this to dispose of the lease early? Would that have any strange side-effects, especially if it got double-disposed by the middleware later?\r\n\r\nInvestigated dotnet/runtime. All limiters there correctly implement IDisposable, and can\u0027t be disposed twice:\r\n- [ConcurrencyLimiter](https://github.com/dotnet/runtime/blob/3ce96fa45a536273f5e61600acd9868d5b34aeaf/src/libraries/System.Threading.RateLimiting/src/System/Threading/RateLimiting/ConcurrencyLimiter.cs#L373)\r\n- [SlidingWindowRateLimiter](https://github.com/dotnet/runtime/blob/3ce96fa45a536273f5e61600acd9868d5b34aeaf/src/libraries/System.Threading.RateLimiting/src/System/Threading/RateLimiting/SlidingWindowRateLimiter.cs#L381)\r\n- [TokenBucketRateLimiter](https://github.com/dotnet/runtime/blob/3ce96fa45a536273f5e61600acd9868d5b34aeaf/src/libraries/System.Threading.RateLimiting/src/System/Threading/RateLimiting/TokenBucketRateLimiter.cs#L383)\r\n- [DefaultPartitionedRateLimiter](https://github.com/dotnet/runtime/blob/3ce96fa45a536273f5e61600acd9868d5b34aeaf/src/libraries/System.Threading.RateLimiting/src/System/Threading/RateLimiting/DefaultPartitionedRateLimiter.cs#L102)\r\n\r\nYour point about disposing is right - yes, someone can dispose it later in middleware. I don\u0027t know about any scenarios how that can be used, all my thought about use case of this - add some (\"admin\"/\"user\" filtering logic - something we can already do with partitioned rate limiter)\r\n",
                                           "updatedAt":  "2022-12-20T11:09:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85RK3qT",
                                           "createdAt":  "2022-12-21T18:14:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MadL1me",
                                           "body":  "After more thought, I think we can do this:\r\n\r\n```csharp\r\nnamespace Microsoft.AspNetCore.RateLimiting.Features;\r\n\r\npublic interface IRateLimiterContextFeature\r\n{\r\n         HttpContext HttpContext { get; }\r\n\r\n         RateLimitLeaseInfo LeaseInfo { get; } \r\n\r\n         PartitionedRateLimiter\u003cHttpContext\u003e? GlobalLimiter { get; }\r\n\r\n         PartitionedRateLimiter\u003cHttpContext\u003e EndpointLimiter { get; }\r\n}\r\n\r\npublic abstract class RateLimitLeaseInfo \r\n{\r\n        public abstract bool IsAcquired { get; }\r\n\r\n        public abstract bool TryGetMetadata(string metadataName, out object? metadata);\r\n\r\n        public bool TryGetMetadata\u003cT\u003e(MetadataName\u003cT\u003e metadataName, [MaybeNull] out T metadata)\r\n        {\r\n            if (metadataName.Name == null)\r\n            {\r\n                metadata = default;\r\n                return false;\r\n            }\r\n\r\n            bool successful = TryGetMetadata(metadataName.Name, out object? rawMetadata);\r\n            if (successful)\r\n            {\r\n                metadata = rawMetadata is null ? default : (T)rawMetadata;\r\n                return true;\r\n            }\r\n\r\n            metadata = default;\r\n            return false;\r\n        }\r\n\r\n        public abstract IEnumerable\u003cstring\u003e MetadataNames { get; }\r\n\r\n        public virtual IEnumerable\u003cKeyValuePair\u003cstring, object?\u003e\u003e GetAllMetadata()\r\n        {\r\n            foreach (string name in MetadataNames)\r\n            {\r\n                if (TryGetMetadata(name, out object? metadata))\r\n                {\r\n                    yield return new KeyValuePair\u003cstring, object?\u003e(name, metadata);\r\n                }\r\n            }\r\n        }\r\n}\r\n```\r\nThere is 2 important changes:\r\n\r\n- All properties are read-only now (as @Tratcher proposed)\r\n- Instead of using RateLimitLease - we can use facade-like abstraction which have almost the same API, but without IDisposable, so problem with disposing and breaking invariants dissapear",
                                           "updatedAt":  "2022-12-21T18:15:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85RbFKj",
                                           "createdAt":  "2022-12-27T17:12:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MadL1me",
                                           "body":  "@Tratcher is there anything I can research/investigate for this issue to continue in discussing? I think #44140 is pretty wanted as feature set ",
                                           "updatedAt":  "2022-12-27T17:12:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85RbF-g",
                                           "createdAt":  "2022-12-27T17:18:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCx10GA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "MadL1me",
                                                                               "createdAt":  "2022-12-27T17:20:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "We\u0027ll review the API in a week or two when people are back from the holidays.",
                                           "updatedAt":  "2022-12-27T17:18:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85RdZZA",
                                           "createdAt":  "2022-12-28T13:39:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cristipufu",
                                           "body":  "Let\u0027s imagine the statistics are stored in Redis/SQL, I wouldn\u0027t want to call GetStatistics() on every http request ",
                                           "updatedAt":  "2022-12-28T13:39:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85RqQSE",
                                           "createdAt":  "2023-01-03T17:20:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Having HttpContext on a Feature interface is weirdly circular, normally you\u0027re retrieving features from the HttpContext. Why would you need to store the context?",
                                           "updatedAt":  "2023-01-03T17:20:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Rq3Fh",
                                           "createdAt":  "2023-01-03T20:22:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MadL1me",
                                           "body":  "GetStatistics() require context as parameter, because limiters in middleware are PartitionedLimiter\u003cHttpContext\u003e and require context as parameter. I think it would be better for API , because for example, you only need to pass IRateLimiterContextFeature to method without HttpContext to do the job - get the statistics. All required things are stored in one interface.",
                                           "updatedAt":  "2023-01-03T20:22:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Rq3SH",
                                           "createdAt":  "2023-01-03T20:23:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MadL1me",
                                           "body":  "Also, I added alternative design in first message: https://github.com/dotnet/aspnetcore/issues/45658#issue-1501829704",
                                           "updatedAt":  "2023-01-03T20:23:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85RvHqD",
                                           "createdAt":  "2023-01-04T19:02:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \"champion\" this change in the meeting, and they understand the impact and design of the change.",
                                           "updatedAt":  "2023-01-04T19:02:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85RvSNk",
                                           "createdAt":  "2023-01-04T19:49:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCyLwxA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wtgodbe",
                                                                               "createdAt":  "2023-01-05T23:13:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "halter73",
                                           "body":  "How important is it to expose the global and endpoint `PartitionedRateLimiter\u003cHttpContext\u003e` instances directly? Do we expect anyone will want to manually acquire additional leases with these? If that\u0027s something people really want to do, we might be able to expose both of these instances as services instead of features. Both `PartitionedRateLimiter` instances are basically singletons, although you could have multiple if you\u0027re using multiple instances of the rate limiting middleware.\r\n\r\nIf acquiring additional leases is not a goal, it might be cleaner to expose `RateLimiterStatistics? GetGlobalStatistics()` and `RateLimiterStatistics? GetEndpointStatistics()` methods on the feature directly. That way we wouldn\u0027t have to worry about flowing the `HttpContext`. Do you have any thoughts on this @BrennanConroy ?",
                                           "updatedAt":  "2023-01-04T19:49:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85R1dF6",
                                           "createdAt":  "2023-01-06T00:21:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCyO2Mw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "MadL1me",
                                                                               "createdAt":  "2023-01-06T18:43:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "halter73",
                                           "body":  "API Review Notes:\r\n\r\n- Given that it might not be optimal to query statistics on every request, do we have a good way to query these statistics in the background? Putting the `PartitionedRateLimiter\u003cHttpContext\u003e` instances in a singleton service might help with getting the limiters outside a request context, but you still need an HttpContext to call GetStatistics. Could we parameters the EndpointRateLimiter on Endpoint instead of HttpContext?\r\n  - In the future, the EndpointRateLimiter may partition within an endpoint. This doesn\u0027t happen today, but we\u0027d be locking ourselves in a bit if we expose a `PartitionedRateLimiter\u003cEndpoint\u003e` instead of `PartitionedRateLimiter\u003cHttpContext\u003e`.\r\n  - And in the case of the global rate limiter we cannot really use any key other than `HttpContext` because there could be a completely custom partitioning scheme.\r\n- What about `RateLimitLeaseInfo` in Alternative Design - 1? We don\u0027t want people calling Dispose() on it themselves, but we\u0027re not sure this warrants a mostly redundant type.\r\n- An issue with making the rate limiters services is there could be multiple instances of the middleware.\r\n- Do we need the `IRateLimiterContextFeature.HttpContext` property? It could be convenient to save passing around an extra object sometimes, but it seem unnecessary. It could always be added later if it\u0027s too difficult to use without it.\r\n- Do we want to make this opt-in? It could save an allocation if we don\u0027t pool. You don\u0027t have to opt in at the `PartitionRateLimiter` level, but `MemoryCache` has an opt-in API to avoid perf regressions. (https://github.com/dotnet/runtime/issues/50406#issuecomment-1074521694). We could pool `IRateLimiterContextFeature` if we really want to.\r\n  - We could add an opt-out later in a non-breaking way, but that\u0027d be ugly for the majority of users who might not need this feature.\r\n  - Let\u0027s make it opt in.\r\n- We\u0027d like to provide `GetStatistics()` APIs rather than expose the entire `PartitionedRateLimiter\u003cHttpContext\u003e` yet. If it\u0027s the global one, it should be accessible to the user because they set it on the options.\r\n- Can we come up with a better name than IRateLimiterContextFeature? Can we segregate the interface?\r\n- Do we prefer `IRateLimitLeaseFeature` or `IRateLimiterLeaseFeature`? Let\u0027s stick with \"RateLimiter\" even though it doesn\u0027t appear in the `RateLimitLease` type.\r\n- Should `IRateLimiterLeaseFeature.Lease` be nullable? `Endpoint` is nullable for the endpoint feature. And there won\u0027t be any lease if you disable rate limiting with the attribute, so yes.\r\n- Are we concerned about exposing the the RateLimitLease after it\u0027s disposed? Yes. Let\u0027s unset it. This means it\u0027s only accessible in inner middleware and OnRejected, but then we can pool.\r\n\r\nThe following version the the API is approved!\r\n\r\n```diff\r\n+ namespace Microsoft.AspNetCore.RateLimiting.Features;\r\n\r\n+ public interface IRateLimiterStatisticsFeature\r\n+ {\r\n+     RateLimiterStatistics? GetGlobalStatistics();\r\n+     RateLimiterStatistics? GetEndpointStatistics();\r\n+ }\r\n\r\n+ public interface IRateLimiterLeaseFeature\r\n+ {\r\n+      RateLimitLease? Lease { get; } \r\n+ }\r\n\r\nnamespace Microsoft.AspNetCore.RateLimiting;\r\n\r\npublic sealed class RateLimiterOptions\r\n{\r\n    // IRateLimiterStatisticsFeature won\u0027t be set unless this is opted into, but will not be unset after the rate limiting middleware exits.\r\n    // IRateLimiterLeaseFeature will always be set, but we should be able to pool it since we unset to avoid exposing a disposed lease.\r\n+    public bool TrackStatistics { get; set; }\r\n}\r\n```",
                                           "updatedAt":  "2023-01-06T00:22:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85R5ZHu",
                                           "createdAt":  "2023-01-06T18:44:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MadL1me",
                                           "body":  "@halter73 thank you for review, and sorry if my proposal wasted a lot of time to rethinking my design. I\u0027ll try to learn from your thought process, and I hope I\u0027ll make better API proposals next time ",
                                           "updatedAt":  "2023-01-06T18:44:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85R5jum",
                                           "createdAt":  "2023-01-06T19:36:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "@MadL1me Your proposal was really good and got us thinking in the right direction. Thanks!\r\n\r\nAnd the API review notes are not from me specifically. I\u0027m summarizing feedback from a bunch of engineers who discussed this in an API review meeting. I don\u0027t think any one of us would have come up with this exact design initially. It\u0027s a process.",
                                           "updatedAt":  "2023-01-06T19:36:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SC2rp",
                                           "createdAt":  "2023-01-09T23:20:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "@MadL1me Will you be updating your PR (https://github.com/dotnet/aspnetcore/pull/45652/files) based on this API review feedback?",
                                           "updatedAt":  "2023-01-09T23:20:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SDyOp",
                                           "createdAt":  "2023-01-10T04:36:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MadL1me",
                                           "body":  "Yes! I have an exam in 2 days, after that I\u0027ll submit a PR \n@adityamandaleeka ",
                                           "updatedAt":  "2023-01-10T04:37:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SLcuf",
                                           "createdAt":  "2023-01-11T13:13:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MadL1me",
                                           "body":  "Decided to make proposed this API with 2 separate PR\u0027s for each feature, so I\u0027m closed this old PR (https://github.com/dotnet/aspnetcore/pull/45652). All work is moved to https://github.com/dotnet/aspnetcore/pull/46028",
                                           "updatedAt":  "2023-01-11T13:13:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SO15e",
                                           "createdAt":  "2023-01-11T23:40:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-01-11T23:40:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SO7eA",
                                           "createdAt":  "2023-01-12T00:14:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "@MadL1me Thanks, and feel free to ignore the bot message above. Look forward to seeing your PRs go in!",
                                           "updatedAt":  "2023-01-12T00:14:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SUOJ3",
                                           "createdAt":  "2023-01-12T21:50:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCykzUw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2023-01-13T01:16:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "\u003e ```diff\r\n\u003e + namespace Microsoft.AspNetCore.RateLimiting.Features;\r\n\u003e ```\r\n\r\n@halter73 why did we decide to put this in the Features namespace? That\u0027s not something we\u0027ve done for other components like \r\nhttps://github.com/dotnet/aspnetcore/blob/334da01db159058defbd39f128d659ddf3ae3f7e/src/Middleware/OutputCaching/src/IOutputCacheFeature.cs#L4-L9\r\nhttps://github.com/dotnet/aspnetcore/blob/334da01db159058defbd39f128d659ddf3ae3f7e/src/Middleware/Diagnostics.Abstractions/src/IExceptionHandlerFeature.cs#L7-L12",
                                           "updatedAt":  "2023-01-12T21:50:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SUzKE",
                                           "createdAt":  "2023-01-13T01:16:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Agreed",
                                           "updatedAt":  "2023-01-13T01:16:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SVLqU",
                                           "createdAt":  "2023-01-13T03:56:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "I think we added the namespace because most of our HTTP and connection-level features live in Features namespaces, and we wanted to be consistent. However, I agree we should move the new features middleware\u0027s primary namespace considering we\u0027ve already done that for output caching and exception handler middleware. It\u0027s nice to have less namespaces, and it\u0027s not like it\u0027s too cluttered.",
                                           "updatedAt":  "2023-01-13T03:56:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SVLqr",
                                           "createdAt":  "2023-01-13T03:56:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \"champion\" this change in the meeting, and they understand the impact and design of the change.",
                                           "updatedAt":  "2023-01-13T03:56:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SXg8C",
                                           "createdAt":  "2023-01-13T13:57:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MadL1me",
                                           "body":  "@halter73 in your message (https://github.com/dotnet/aspnetcore/issues/45658#issuecomment-1372967290) you wrote: \r\n\u003e IRateLimiterLeaseFeature will always be set, but we should be able to pool it since we unset to avoid exposing a disposed lease.\r\n\r\nCan you please clarify what that means? How is object pooling corresponds with avoiding exposing disposed lease?",
                                           "updatedAt":  "2023-01-13T13:57:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SmP5U",
                                           "createdAt":  "2023-01-17T17:14:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "\u003e Can you please clarify what that means? How is object pooling corresponds with avoiding exposing disposed lease?\r\n\r\nI wouldn\u0027t do this as part of the initial change. But if we wanted to later, we could return the object to the pool in the rate limiting middleware after we unset the feature. We do not want to pool anything that is still accessible via the HttpContext.",
                                           "updatedAt":  "2023-01-17T17:14:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SmnCt",
                                           "createdAt":  "2023-01-17T18:30:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "Thinking about this a little, the `GetEndpointStatistics` and `GetGlobalStatistics` methods imply getting statistics for the specific Endpoint and for the whole app respectively. But in reality, they are getting statistics for a **specific request type** at the app level and at the `Endpoint` level.\r\n\r\nWhat that means is that the statistics can be very different per request even if the requests end up on the same `Endpoint`. For example, if you partition based on `User` or query string you\u0027ll get a completely different limiter, even though the request goes to the same `Endpoint`, which means when you call one of the statistics methods you will get completely different statistics.\r\n\r\nThe method naming/usage does little to suggest this behavior which I would argue is going to be confusing to users.",
                                           "updatedAt":  "2023-01-17T18:30:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85TSoTo",
                                           "createdAt":  "2023-01-19T18:00:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "That is a good point about the naming not indicating that the statistics are arbitrarily partitioned based on how the policies and/or global limiters are configured.\r\n\r\nDo you have any suggestions for names that would make this clearer? Maybe something like `GetCurrentPartitionStatistics()`? The downside is that you couldn\u0027t query *just* the global or endpoint statistics for the given request, but I think that might be okay.\r\n\r\n```diff\r\n+ namespace Microsoft.AspNetCore.RateLimiting;\r\n\r\n+ public interface IRateLimiterStatisticsFeature\r\n+ {\r\n+     RateLimiterMiddlewareStatistics GetCurrentPartitionStatistics();\r\n+ }\r\n\r\n+ public sealed class RateLimiterMiddlewareStatistics\r\n+ {\r\n+     RateLimiterStatistics? GlobalStatistics { get; init; }\r\n+     RateLimiterStatistics? EndpointStatistics { get; init; }\r\n+ }\r\n```",
                                           "updatedAt":  "2023-01-19T18:00:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85TT8Cn",
                                           "createdAt":  "2023-01-19T23:20:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "API Review Notes:\r\n\r\n- We like removing the `Microsoft.AspNetCore.RateLimiting.Features` namespace.\r\n- We still are not sure what we want to do about the confusing nature of `IRateLimiterStatisticsFeature` only referencing the partition of the current request. We think it\u0027s fine to do that, but it might not be obvious enough what\u0027s really going on given the current API naming.\r\n\r\nWe will try to get back to this in API review Monday. I\u0027m leaving it to @BrennanConroy to improve the proposal since he doesn\u0027t like my proposal 😆 .",
                                           "updatedAt":  "2023-01-19T23:20:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Ycu_b",
                                           "createdAt":  "2023-03-25T21:36:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MadL1me",
                                           "body":  "\u003e Thinking about this a little, the GetEndpointStatistics and GetGlobalStatistics methods imply getting statistics for the specific Endpoint and for the whole app respectively. But in reality, they are getting statistics for a specific request type at the app level and at the Endpoint level.\r\n\r\nWhat if we try to do it that way? For example, we could return a `List` of statistics, because we know that Middleware always uses `PartitionedRateLimiter`:\r\n\r\n```cs\r\npublic sealed class RateLimiterMiddlewareStatistics\r\n{\r\n     // new props, contain statistics for ALL limiters in PartitonedRateLimiter\r\n     List\u003cRateLimiterStatistics?\u003e GlobalStatistics { get; init; }\r\n     List\u003cRateLimiterStatistics?\u003e EndpointStatistics { get; init; }\r\n      \r\n     // props proposed before, renamed to indicate that partition is used\r\n     RateLimiterStatistics? PartitionGlobalStatistics{ get; init; }\r\n     RateLimiterStatistics? PartitionEndpointStatistics { get; init; }\r\n}\r\n```\r\n\r\nHowever, this probably would require add methods to fetch all statistics from `PartitionedRateLimiter`.",
                                           "updatedAt":  "2023-03-25T21:36:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85ZBTti",
                                           "createdAt":  "2023-04-03T01:35:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mitchdenny",
                                           "body":  "@halter73 bubbling this to the top of your stack. See issue #47456 where a scenario involving accessing the rate limiter from the feature came up. Basically the idea is that in addition to getting a ticket to execute the endpoint, the developer might decide to eat up some additional tickets after execution IF the request warranted it.\r\n\r\nSometimes it\u0027s hard to know whether a given request will be expensive in advance, so deducting the tickets after execution.",
                                           "updatedAt":  "2023-04-03T01:35:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85ZEGR-",
                                           "createdAt":  "2023-04-03T12:37:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MadL1me",
                                           "body":  "@halter73 @mitchdenny  I think we should combine statistics solution with #47456 idea.\r\n\r\nIf we create and expose entire `IRateLimiterFeature`, it\u0027ll make possible for a custom `RateLimiterMiddleware` to be made, which we can use with #47456 scenario as well as \"fetching Statistics\" problem. ",
                                           "updatedAt":  "2023-04-03T12:37:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85geRbc",
                                           "createdAt":  "2023-07-03T14:58:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC_0Tng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "MadL1me",
                                                                               "createdAt":  "2023-07-04T18:57:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mitchdenny",
                                           "body":  "It looks like this hasn\u0027t been implemented yet. I\u0027d like to revisit the conversation in light of the following issue:\r\n\r\nhttps://github.com/dotnet/aspnetcore/issues/47456\r\n\r\nThis issue illustrates a scenario where being able to access the global/endpoint limiters via a feature inside some middleware could be useful. For example you might use rate limiters to automatically consume a token for every request, but after a request has been processed you might decide that particular request was more expensive so you want to take more tokens.\r\n\r\nIf we exposed the rate limiters via a feature this could be easily implemented. Even though this API proposal was more about statistics, by exposing the rate limiters we would allow both scenarios.\r\n\r\n/cc @halter73 ",
                                           "updatedAt":  "2023-07-03T14:58:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85gx7zc",
                                           "createdAt":  "2023-07-06T13:40:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MadL1me",
                                           "body":  "@mitchdenny agreed, I think exposing limiters via features would add a great flexibility to feature usage. I would like to continue to work on this issue, after .net team discussion.",
                                           "updatedAt":  "2023-07-06T13:40:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85v6NSX",
                                           "createdAt":  "2024-01-04T17:56:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hacst",
                                           "body":  "It seems like some parts of this proposal are still stuck in the discussion phase. Personally I am not that interested in the `IRateLimiterStatisticsFeature` portion right now but in accessing the current lease using the proposed `IRateLimiterLeaseFeature`.\r\n\r\nIn https://github.com/cristipufu/aspnetcore-redis-rate-limiting/wiki/Rate-Limiting-Headers when acquiring the lease remaining/limit/reset information is cheaply available, stored in the lease and made available as metadata on the lease. Having `IRateLimiterLeaseFeature` would solve the initial idea behind #44140 on its own for these rate limiters and others using a similar approach. As far as I can tell it is also the only approach to return exact values from the time of acquire if they are available. It would of course also unlock any other use-case that can be built based on the lease information on its own.\r\n\r\n@BrennanConroy (or whoever can decide this): Is it possible to approve and pursue `IRateLimiterLeaseFeature` independently of the statistics specific parts of the proposal?",
                                           "updatedAt":  "2024-01-04T17:56:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85v6Ni_",
                                           "createdAt":  "2024-01-04T17:57:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hacst",
                                           "body":  "Independent of my previous question I have some thoughts on the statistics portion of the proposal: [RateLimiter.GetStatistics](https://learn.microsoft.com/en-us/dotnet/api/system.threading.ratelimiting.ratelimiter.getstatistics?view=aspnetcore-8.0) is a blocking method without any specific guidance on how it should behave. \r\n\r\nIf the expectation is to be able to readily call it for every request to populate RateLimiterStatistics fields this has to be clarified as that is not easily achieved in distributed scenarios. E.g. just doing a redis query in there as https://github.com/cristipufu/aspnetcore-redis-rate-limiting/ does will lead to thread pool exhaustion with a bit of load. https://github.com/dotnet/runtime/issues/88592 proposes an async variant of `GetStatistics` but it hasn\u0027t progressed yet and it might still be an expensive call.\r\n\r\nIf the expectation is to do updates in the background around the calls as hinted at in the review discussion from Jan 6th 23 I am unsure how that could be achieved generically in an efficient way for a heavily partitioned rate limiter. It could always serve stale data from the last call and schedule a refresh after but that might get very stale and will not work for the first call. Doing regular updates outside of that would retrieve a lot of statistics for rate limiters you might not end up needing for any request in that timeframe. Also bound to be a bit stale but more predictable.\r\n\r\nThe rate limiter itself might be able to get up-to-date statistics and cache them for `GetStatistics` calls when a lease is acquired. Where possible that would give the best results for this proposal and #44140. But then what about other uses of `GetStatistics` outside of a specific request context that expect to get a current snapshot?\r\n\r\nTL;DR: Imo behavior of [RateLimiter.GetStatistics](https://learn.microsoft.com/en-us/dotnet/api/system.threading.ratelimiting.ratelimiter.getstatistics?view=aspnetcore-8.0) has to be clarified before it is possible to say whether it can be safely and efficiently used to retrieve statistics here.",
                                           "updatedAt":  "2024-01-04T17:57:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85v_yC9",
                                           "createdAt":  "2024-01-05T17:04:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODV1slg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MadL1me",
                                                                               "createdAt":  "2024-02-07T11:49:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "abergs",
                                           "body":  "Came across this issue while googling and I\u0027ll just add on here that I\u0027ve been experimenting with consuming a variable amount of tokens, but also to manually acquire leases and expect the statistics. So I\u0027d very much like a nice way to get access to active limiters.",
                                           "updatedAt":  "2024-01-05T17:04:50Z"
                                       }
                                   ],
                         "totalCount":  39
                     },
        "title":  "Rate limiter context HttpContext feature API proposal",
        "labels":  [
                       "api-needs-work",
                       "feature-rate-limit",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/45684",
        "createdAt":  "2022-12-20T06:08:21Z",
        "number":  45684,
        "author":  "mburumaxwell",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-10T17:59:47Z",
        "body":  "## Background and Motivation\r\n\r\nThe ASP.NET Core rate limiting middleware is great, but \"limited\" in terms of policy validation. Let\u0027s start with some code that you can write today in .NET 7:\r\n\r\n```cs\r\nbuilder.Services.AddRateLimiter(options =\u003e\r\n{\r\n    options.AddFixedWindowLimiter(\"customPolicy\", opt =\u003e\r\n    {\r\n        opt.PermitLimit = 4;\r\n        opt.Window = TimeSpan.FromSeconds(12);\r\n        opt.QueueProcessingOrder = QueueProcessingOrder.OldestFirst;\r\n        opt.QueueLimit = 2;\r\n    });\r\n    // ...\r\n});\r\n```\r\n\r\nThere is no way to validate that `customPolicy` actually exists. This is useful when configuring multiple routes from configuration such as is the case for YARP. See https://github.com/microsoft/reverse-proxy/pull/1967\r\n\r\n## Proposed API\r\n\r\nIt would be preferred to something similar to [`IAuthorizationPolicyProvider`](https://github.com/dotnet/aspnetcore/blob/2b63a5fc7fee6944af03723767be2335f1d9bf9c/src/Security/Authorization/Core/src/IAuthorizationPolicyProvider.cs) implemented via [`DefaultAuthorizationPolicyProvider`](https://github.com/dotnet/aspnetcore/blob/2b63a5fc7fee6944af03723767be2335f1d9bf9c/src/Security/Authorization/Core/src/DefaultAuthorizationPolicyProvider.cs) and [`ICorsPolicyProvider`](https://github.com/dotnet/aspnetcore/blob/2b63a5fc7fee6944af03723767be2335f1d9bf9c/src/Middleware/CORS/src/Infrastructure/ICorsPolicyProvider.cs) implemented via [`DefaultCorsPolicyProvider`](https://github.com/dotnet/aspnetcore/blob/2b63a5fc7fee6944af03723767be2335f1d9bf9c/src/Middleware/CORS/src/Infrastructure/DefaultCorsPolicyProvider.cs)\r\n\r\n```diff\r\nnamespace Microsoft.AspNetCore.RateLimiting;\r\n\r\n-  internal struct DefaultKeyType \r\n+  public struct DefaultKeyType \r\n{\r\n// omitted ...\r\n}\r\n+\r\n+ public interface IRateLimiterPolicyProvider\r\n+ {\r\n+     ValueTask\u003cIRateLimiterPolicy\u003cDefaultKeyType\u003e?\u003e GetDefaultPolicyAsync();\r\n+     ValueTask\u003cIRateLimiterPolicy\u003cDefaultKeyType\u003e?\u003e GetPolicyAsync(string policyName);\r\n+ }\r\n+\r\n+ public class DefaultRateLimiterPolicyProvider : IRateLimiterPolicyProvider\r\n+ {\r\n+     private readonly RateLimiterOptions _options;\r\n+     \r\n+     public DefaultRateLimiterPolicyProvider(IOptions\u003cRateLimiterOptions\u003e options)\r\n+     {\r\n+     \r\n+     }\r\n+     \r\n+     public ValueTask\u003cIRateLimiterPolicy\u003cDefaultKeyType\u003e?\u003e GetPolicyAsync(string policyName)\r\n+     {\r\n+         options.PolicyMap[policyName] ?? options.UnactivatedPolicyMap[policyName];\r\n+     }\r\n+ }\r\n```\r\n\r\n`RateLimiterOptions.PolicyMap` is internal hence this feature cannot be added in another library or the final application. \r\n\r\n## Usage Examples\r\n\r\nSee YARP: https://github.com/microsoft/reverse-proxy/blob/26ce1d15f868cb8da1891d65db1e59a20fd6ecbf/src/ReverseProxy/Configuration/ConfigValidator.cs#L312-L318\r\n\r\n## Alternative Designs\r\n\r\nNone\r\n\r\n## Risks\r\n\r\nNone\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZpAdpQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85Rv_pb",
                                           "createdAt":  "2023-01-04T23:16:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "Triage: this seems like a reasonable suggestion (a way to find out about these issues at load-time rather than run-time).\r\n\r\nWould an API that returned a bool (indicating whether the policy exists) be sufficient?",
                                           "updatedAt":  "2023-01-04T23:16:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Rv_05",
                                           "createdAt":  "2023-01-04T23:17:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "@mburumaxwell Can you update your comment to make it follow the API proposal template here? https://github.com/dotnet/aspnetcore/issues/new?assignees=\u0026labels=api-suggestion\u0026template=30_api_proposal.md\u0026title=",
                                           "updatedAt":  "2023-01-04T23:17:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SE2Tq",
                                           "createdAt":  "2023-01-10T09:59:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCyallw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adityamandaleeka",
                                                                               "createdAt":  "2023-01-10T21:17:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mburumaxwell",
                                           "body":  "@adityamandaleeka this is done",
                                           "updatedAt":  "2023-01-10T09:59:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SIK5e",
                                           "createdAt":  "2023-01-10T21:17:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "Thanks @mburumaxwell ",
                                           "updatedAt":  "2023-01-10T21:17:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SXpSA",
                                           "createdAt":  "2023-01-13T14:24:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mburumaxwell",
                                           "body":  "What steps follow to get this to be in the next version of AspNetCore?",
                                           "updatedAt":  "2023-01-13T14:24:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SZc5Q",
                                           "createdAt":  "2023-01-13T21:20:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \"champion\" this change in the meeting, and they understand the impact and design of the change.",
                                           "updatedAt":  "2023-01-13T21:20:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SZd0J",
                                           "createdAt":  "2023-01-13T21:24:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCypPqw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mburumaxwell",
                                                                               "createdAt":  "2023-01-14T03:50:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "This proposal will be discussed by our team in an upcoming API review meeting, after which we\u0027ll provide feedback/suggestions.\r\n\r\nOnce a proposal gets to the `api-approved` state, we\u0027ll be ready to take a PR to implement the change.",
                                           "updatedAt":  "2023-01-13T21:24:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85UA5v7",
                                           "createdAt":  "2023-01-30T23:34:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-01-30T23:34:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85iP7ey",
                                           "createdAt":  "2023-07-24T17:47:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "API Review Notes:\r\n\r\n- We don\u0027t like making the DefaultKeyType public if possible.\r\n- It\u0027s not clear what you\u0027d use the `IRateLimiterPolicy\u003cDefaultKeyType\u003e` for other than just checking that it exists like YARP does.\r\n\r\nWe think the API needs work. Maybe it could be combined with the rate limit feature proposal. #45658 ",
                                           "updatedAt":  "2023-07-24T17:47:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85mkB2l",
                                           "createdAt":  "2023-09-15T05:59:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mburumaxwell",
                                           "body":  "The proposal in #45658 cannot work because the validation would only be available where a HttpContext is yet YARP needs validation elsewhere.\r\n\r\nIf I understand correctly, the main issue is making `DefaultKeyType` public. What if instead we just have boolean values?\r\n\r\n```diff\r\nnamespace Microsoft.AspNetCore.RateLimiting;\r\n\r\n+ public interface IRateLimiterPolicyProvider\r\n+ {\r\n+     bool DefaultPolicyExists();\r\n+     bool PolicyExists(string policyName);\r\n+ }\r\n+\r\n+ public class DefaultRateLimiterPolicyProvider : IRateLimiterPolicyProvider\r\n+ {\r\n+     private readonly RateLimiterOptions _options;\r\n+     \r\n+     public DefaultRateLimiterPolicyProvider(IOptions\u003cRateLimiterOptions\u003e options)\r\n+     {\r\n+     \r\n+     }\r\n+     \r\n+     public bool PolicyExists(string policyName)\r\n+     {\r\n+         options.PolicyMap.ContainsKey(policyName) || options.UnactivatedPolicyMap.ContainsKey(policyName);\r\n+     }\r\n+ }\r\n```",
                                           "updatedAt":  "2023-09-15T05:59:17Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Rate Limiting configuration - policy validation",
        "labels":  [
                       "api-needs-work",
                       "feature-rate-limit",
                       "area-networking",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/45705",
        "createdAt":  "2022-12-21T08:27:44Z",
        "number":  45705,
        "author":  "pratap-bhaskar",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T17:44:22Z",
        "body":  "## Background and Motivation\r\n\r\nWe have memory intensive application hosted in Kubernetes, this application\u0027s memory is directly proportional to the number of requests it can handle. We were using `Semaphore` to limit the concurrency and create internal queues for processing.\r\n\r\nNow that .Net7 has a `ConcurrencyLimiter` we started investigating on the same, the idea (although non-proven) was to turn off the `Readiness` probe once the concurrency limit had reached so that the traffic wouldn\u0027t flow to that instance, once the limit is replenished we could turn on the `Readiness` probe to start allowing the traffic back to the pod.\r\n\r\nUnfortunately, the RateLimiter option has only one event, and that occurs on the rejection of the request since the limit was breached. \r\n\r\n```csharp\r\npublic Func\u003cOnRejectedContext, CancellationToken, ValueTask\u003e? OnRejected { get; set; }\r\n```\r\nEven if we consume this event to turn off the probe, there is no way to bring the readiness probe back as there is no apparent way to check if the limits are replenished.\r\n\r\n```csharp\r\nbuilder.Services.AddRateLimiter(_ =\u003e\r\n    {\r\n        _.AddConcurrencyLimiter(policyName: \"LimiterPolicy\", options =\u003e\r\n        {\r\n            options.PermitLimit = 10;\r\n            // Only allow 10 request every 10 seconds\r\n            options.QueueProcessingOrder = QueueProcessingOrder.OldestFirst;\r\n            // Only queue 3 requests when we go over that limit\r\n            options.QueueLimit = 3;\r\n        });\r\n        _.OnRejected = async (context, token) =\u003e\r\n        {\r\n            context.HttpContext.Response.StatusCode = 429;\r\n            ConcurrencyLimitHolder.HasLimitReached = true;\r\n        };\r\n    });\r\n\r\n///in the probe controller\r\n[HttpGet(\"ready\")]\r\n    public IActionResult GetReadiness()\r\n    {\r\n        if (ConcurrencyLimitHolder.HasLimitReached)\r\n            return BadRequest();\r\n        \r\n        return Ok();\r\n    }\r\n```\r\n\r\nThis isn\u0027t very useful, because the instance has already started rejecting the requests and the clients would have to retry, but the chances are that it would end up in the same instance.\r\n\r\n\r\n## Proposed API\r\nAn event triggered as soon as the rate limit is replenished/reset\r\n```csharp\r\npublic sealed class RateLimiterOptions\r\n{\r\n     public Func\u003cOnReplinshedContext, CancellationToken, ValueTask\u003e? OnReplinished { get; set; }\r\n}\r\n```\r\n## Usage Examples\r\nusing the same example as above\r\n\r\n```csharp\r\nbuilder.Services.AddRateLimiter(_ =\u003e\r\n    {\r\n        _.AddConcurrencyLimiter(policyName: \"LimiterPolicy\", options =\u003e\r\n        {\r\n            options.PermitLimit = 10;\r\n            // Only allow 10 request every 10 seconds\r\n            options.QueueProcessingOrder = QueueProcessingOrder.OldestFirst;\r\n            // Only queue 3 requests when we go over that limit\r\n            options.QueueLimit = 3;\r\n        });\r\n        _.OnRejected = async (context, token) =\u003e\r\n        {\r\n            context.HttpContext.Response.StatusCode = 429;\r\n            ConcurrencyLimitHolder.HasLimitReached = true;\r\n        };\r\n        _.OnReplenished = async(context,token) =\u003e\r\n       {\r\n            ConcurrencyLimitHolder.HasLimitReached = false;\r\n       }\r\n    });\r\n\r\n///in the probe controller\r\n[HttpGet(\"ready\")]\r\n    public IActionResult GetReadiness()\r\n    {\r\n        if (ConcurrencyLimitHolder.HasLimitReached)\r\n            return BadRequest();\r\n        \r\n        return Ok();\r\n    }\r\n```\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUcAYuA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85RwBi4",
                                           "createdAt":  "2023-01-04T23:29:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "@BrennanConroy PTAL. ",
                                           "updatedAt":  "2023-01-04T23:29:49Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Additional Events for RateLimitOptions",
        "labels":  [
                       "api-suggestion",
                       "feature-rate-limit",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/45998",
        "createdAt":  "2023-01-10T18:20:53Z",
        "number":  45998,
        "author":  "jonpayne",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCsZlw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mark-A-Williams",
                                            "createdAt":  "2025-05-22T15:11:36Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-03-02T00:50:44Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWhen both response compression and output caching are enabled, it appears that ASP.NET Core caches the first encoding to be generated, then always returns content with that encoding.\n\n### Expected Behavior\n\nI expected each encoding to be cached separately so responses are correct while avoiding the overhead of compressing each response.\n\n### Steps To Reproduce\n\nThis project has a simple repro:\r\nhttps://github.com/jonpayne/AspNetCacheIssue/tree/main/src\r\n\r\nUsing this repro, if I first request the text file with Brotli compression, I get the expected result:\r\n \r\n```bash\r\ncurl -s -D - https://localhost:5000/test.txt -H \"Accept-Encoding: br\" -o br.dat\r\n```\r\n\r\n```http\r\nHTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nDate: Tue, 10 Jan 2023 05:33:16 GMT\r\nServer: Kestrel\r\nAccept-Ranges: bytes\r\nContent-Encoding: br\r\nETag: \"1d924af6fef9583\"\r\nLast-Modified: Tue, 10 Jan 2023 04:53:10 GMT\r\nTransfer-Encoding: chunked\r\nVary: Accept-Encoding\r\n```\r\n \r\nBut if I then request the same content with GZip compression, the response uses Brotli compression:\r\n\r\n```bash\r\ncurl -s -D - https://localhost:5000/test.txt -H \"Accept-Encoding: gzip\" -o gzip.dat\r\n```\r\n\r\n```http\r\nHTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nDate: Tue, 10 Jan 2023 05:33:16 GMT\r\nServer: Kestrel\r\nAccept-Ranges: bytes\r\nAge: 9\r\nContent-Encoding: br\r\nETag: \"1d924af6fef9583\"\r\nLast-Modified: Tue, 10 Jan 2023 04:53:10 GMT\r\nTransfer-Encoding: chunked\r\nVary: Accept-Encoding\r\n```\r\n\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n7.0.101\n\n### Anything else?\n\nI can work around this using this code:\r\n\r\n```csharp \r\nbuilder.Services.AddOutputCache(options =\u003e\r\n{\r\n    options.AddBasePolicy(builder =\u003e\r\n    {\r\n        builder.SetVaryByQuery(string.Empty);\r\n        builder.VaryByValue(context =\u003e\r\n        {\r\n            var responseCompressionProvider = context.RequestServices.GetService\u003cIResponseCompressionProvider\u003e()!;\r\n            var encodingName = responseCompressionProvider.GetCompressionProvider(context)?.EncodingName ?? \"none\";\r\n            return new KeyValuePair\u003cstring, string\u003e(\"compression\", encodingName);\r\n        });\r\n        builder.Cache();\r\n    });\r\n});\r\n```\r\n\r\nWhile this works, it feels like something that should be provided by the framework.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVSp0Ww==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85SPenO",
                                           "createdAt":  "2023-01-12T04:12:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mitchdenny",
                                           "body":  "The order of how you register the middleware is significant here (and in many cases). Move ```app.UseOutputCache()``` above ```app.UseResponseCompression()``` and you should get the behavior you want.",
                                           "updatedAt":  "2023-01-12T04:12:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85STL8w",
                                           "createdAt":  "2023-01-12T17:29:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonpayne",
                                           "body":  "The repo has `app.UseOutputCache()` above `app.UseResponseCompression()`. If I try this the other way around (`app.UseResponseCompression()` above `app.UseOutputCache()`), the compressed responses are not cached and performance is much worse. I\u0027ve updated the repro code to log when requests are cached and increased the compression level to make the effect more noticeable.\r\n\r\nWith `app.UseOutputCache()` followed by `app.UseResponseCompression()`:\r\n\u003cpre\u003e\r\n./wrk https://172.18.16.1:5000/test.txt -H \"Accept-Encoding: br\" -d 10 -t 100 -c 100\r\n\r\nRunning 10s test @ https://172.18.16.1:5000/test.txt\r\n  100 threads and 100 connections\r\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\r\n    Latency    56.57ms   41.42ms 301.67ms   86.66%\r\n    Req/Sec    20.88     10.08   171.00     79.51%\r\n  18167 requests in 10.10s, 6.08MB read\r\n\u003cb\u003eRequests/sec:   1798.69\u003c/b\u003e\r\nTransfer/sec:    616.77KB\r\n\u003c/pre\u003e\r\n\r\nWith `app.UseResponseCompression()` followed by `app.UseOutputCache()`:\r\n\u003cpre\u003e\r\n./wrk https://172.18.16.1:5000/test.txt -H \"Accept-Encoding: br\" -d 10 -t 100 -c 100\r\n\r\nRunning 10s test @ https://172.18.16.1:5000/test.txt\r\n  100 threads and 100 connections\r\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\r\n    Latency   102.50ms   67.71ms 706.20ms   83.32%\r\n    Req/Sec    11.63      5.74    55.00     65.24%\r\n  9473 requests in 10.10s, 3.23MB read\r\n\u003cb\u003eRequests/sec:    937.92\u003c/b\u003e\r\nTransfer/sec:    327.95KB\r\n\u003c/pre\u003e",
                                           "updatedAt":  "2023-01-12T17:29:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85VKnNo",
                                           "createdAt":  "2023-02-13T23:18:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "Triage: we should do this (vary by the Accept-Encoding).",
                                           "updatedAt":  "2023-02-13T23:18:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85VKnRb",
                                           "createdAt":  "2023-02-13T23:18:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-02-13T23:18:27Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Output caching should always vary by Accept-Encoding ",
        "labels":  [
                       "feature-caching",
                       "feature-output-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/45999",
        "createdAt":  "2023-01-10T18:25:31Z",
        "number":  45999,
        "author":  "jonpayne",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-02T00:50:45Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWhen output caching is used with static content, the `Accept-Ranges` header is returned, but requests with the `Ranges` header are not served correctly.\n\n### Expected Behavior\n\nThe `Accept-Ranges` header should not be set when output caching is enabled. The `Ranges` header in requests should be ignored when output caching is enabled.\n\n### Steps To Reproduce\n\nThis project has a simple repro:\r\nhttps://github.com/jonpayne/AspNetCacheIssue/tree/main/src\r\n\r\nUsing this example:\r\n```bash\r\ncurl -s -D - https://localhost:5000/test.txt -H \"Range: bytes=0-32\"   // returns a range\r\ncurl -s -D - https://localhost:5000/test.txt -H \"Range: bytes=0-40\"   // returns a different range\r\ncurl -s -D - https://localhost:5000/test.txt                          // returns the full content\r\ncurl -s -D - https://localhost:5000/test.txt -H \"Range: bytes=0-32\"   // returns the full content (unexpected)\r\ncurl -s -D - https://localhost:5000/test.txt -H \"Range: bytes=0-40\"   // returns the full content (unexpected)\r\n```\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n7.0.101\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUzilYA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85SPa2E",
                                           "createdAt":  "2023-01-12T03:44:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mitchdenny",
                                           "body":  "I\u0027ve confirmed the behavior that you are reporting here, but I think it is compliant. It is important to observe the response code for the requests above. Based on what you have there, and what I\u0027ve observed it should look like:\r\n\r\n- 206\r\n- 206\r\n- 200\r\n- 200\r\n- 200\r\n\r\nThe way that output caching works is that it won\u0027t even consider storing the response unless the response code is 200. So in the first two requests it returned a 206 so the output cache wasn\u0027t populated and the ranged responses were returned. Then you did a request to get the full file and it returned a 200, so the cache was populated. Then on subsequent requests output caching decided not to observe the Range header (which is compliant). \r\n\r\nSo whilst the server can process the range header, it decided not to respond with a partial response which the client can figure out by looking at the response code.",
                                           "updatedAt":  "2023-01-12T03:44:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SPbPe",
                                           "createdAt":  "2023-01-12T03:48:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mitchdenny",
                                           "body":  "@sebastienros I seem to recall an issue/pr related to output caching on static files ... something along the lines of not using output caching on static files becuase OS-level caching of files might be better than loading the static files into the web app memory?",
                                           "updatedAt":  "2023-01-12T03:48:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SSh7i",
                                           "createdAt":  "2023-01-12T15:45:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonpayne",
                                           "body":  "I have two concerns here:\r\n- A simple GET request can make a large change to the behavior and performance of a server. For example, a server could serve small range requests for many hours using very little bandwidth, then a single request for the complete content would prevent any future range requests.\r\n- The server should not return the \"Accept-Ranges\" header, if it does not accept ranges.",
                                           "updatedAt":  "2023-01-12T15:45:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SdDOJ",
                                           "createdAt":  "2023-01-16T01:51:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mitchdenny",
                                           "body":  "\u003e * A simple GET request can make a large change to the behavior and performance of a server. For example, a server could serve small range requests for many hours using very little bandwidth, then a single request for the complete content would prevent any future range requests.\r\n\r\nI think this is a fair concern @jonpayne. I would like to get @sebastienros\u0027s input though since he has more domain expertise in this area and there may be an explicit reason for the current behavior.",
                                           "updatedAt":  "2023-01-16T01:51:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SoNX8",
                                           "createdAt":  "2023-01-18T00:15:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sebastienros",
                                           "body":  "Two options I see:\r\n- define the static file middleware before the output caching one such that the files are not impacted bu caching.\r\n- the same way we said we should vary by accept-encoding if present, we might need to add accept-ranges.\r\n\r\nAnother option would be to support accept-ranges but I don\u0027t think it\u0027s useful since the whole response would still be loaded before being trimmed to the client.",
                                           "updatedAt":  "2023-01-18T00:15:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SoTDM",
                                           "createdAt":  "2023-01-18T00:43:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mitchdenny",
                                           "body":  "I think option 1 makes the most sense. Because output caching of static files is a bit dubious anyway - for a few reasons. First of all we don\u0027t know that output caching is going to be that much more efficient than executing the code and relying on any OS level caching of file access.\r\n\r\nThe other thing is that files that tend to need range support to efficiently download probably need some kind of out of band integrity check. Two different requests would end up grabbing two different versions of the file resulting in a corrupted result. When this occurs, you don\u0027t want output caching getting in the road of you getting the updated chunks.\r\n\r\n(drawing on some of my experience here from Azure Artifacts and importance of knowing what you are downloading when a single file across multiple requests).",
                                           "updatedAt":  "2023-01-18T00:43:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SoTft",
                                           "createdAt":  "2023-01-18T00:45:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sebastienros",
                                           "body":  "Could also be part of the default policy to not cache accept-ranges requests.",
                                           "updatedAt":  "2023-01-18T00:45:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SoUZ_",
                                           "createdAt":  "2023-01-18T00:50:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonpayne",
                                           "body":  "I detailed my reasons for wanting to cache static content here: https://github.com/dotnet/aspnetcore/issues/45998#issuecomment-1380761392",
                                           "updatedAt":  "2023-01-18T00:50:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85TOKMU",
                                           "createdAt":  "2023-01-18T23:17:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-01-18T23:17:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85TOKVg",
                                           "createdAt":  "2023-01-18T23:18:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "Triage:\r\n- We should send the byte range from the cached entry.\r\n- If the response has a Range on it, it doesn\u0027t make sense to cache it.",
                                           "updatedAt":  "2023-01-18T23:19:49Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "`Accept-Ranges` should not be returned when output caching is used",
        "labels":  [
                       "feature-caching",
                       "feature-output-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/46243",
        "createdAt":  "2023-01-24T14:20:53Z",
        "number":  46243,
        "author":  "DanielStout5",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAFeXg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KathigitAnguras",
                                            "createdAt":  "2023-06-06T21:08:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "therealkungfury",
                                            "createdAt":  "2023-06-07T05:40:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eCorke",
                                            "createdAt":  "2024-06-20T11:44:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "brettwinters",
                                            "createdAt":  "2024-08-25T17:46:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OldWarrior3000",
                                            "createdAt":  "2024-10-15T14:23:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tiakun",
                                            "createdAt":  "2024-11-21T11:22:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Amberg",
                                            "createdAt":  "2024-12-06T19:03:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EricHerlitz",
                                            "createdAt":  "2025-03-14T13:06:46Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2024-09-12T00:11:30Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nAssigning tags in `ServeResponseAsync` doesn\u0027t work; the tags don\u0027t get attached to the entries, so retrieving or evicting them does nothing.\r\n\r\nIt makes sense to be able to add tags to the cache entry in `ServeResponseAsync` (in a custom `IOutputCachePolicy`). \r\n\r\nWork might be done during the request which resolves the value to be used in the tag, which is why it can\u0027t be assigned in `CacheRequestAsync` before the request has actually executed.\r\n\r\nI believe the source of the issue is this block in `OutputCacheMiddleware`:\r\n\r\n```\r\n// Hook up to listen to the response stream\r\nShimResponseStream(context);\r\n\r\ntry\r\n{\r\n    await _next(httpContext);\r\n\r\n    // The next middleware might change the policy\r\n    foreach (var policy in policies)\r\n    {\r\n        await policy.ServeResponseAsync(context, httpContext.RequestAborted);\r\n    }\r\n\r\n    // If there was no response body, check the response headers now. We can cache things like redirects.\r\n    StartResponse(context);\r\n\r\n    // Finalize the cache entry\r\n    await FinalizeCacheBodyAsync(context);\r\n```\r\n\r\n`ShimResponseStream` triggers `FinalizeCacheHeaders` which creates a copy of the tags (`ToArray()`) before the request gets executed in `await _next` - then even though the policy\u0027s `ServeResponseAsync` is using the request data to modify the tags, they don\u0027t get persisted by the call to FinalizeCacheBodyAsync, which uses the copy of the tags made in `ShimResponseStream`.\r\n\r\nFor a fix, what about removing this line in `FinalizeCacheHeaders`: `Tags = context.Tags.ToArray()`\r\n\r\nAnd adding this one in `FinalizeCacheBodyAsync`:  `context.CachedResponse.Tags = context.Tags.ToArray();`\r\n\r\nFor now I\u0027m working around it by using reflection to set the `OutputCacheContext.CachedResponse.Tags` array inside `ServerResponseAsync` - reflection being necessary because CachedResponse (both the property and the class `OutputCacheEntry`) are internal\r\n\r\n\r\n### Expected Behavior\r\n\r\nAssigning tags in `ServeResponseAsync` should attach them to the stored cache entry.\r\n\r\n### Steps To Reproduce\r\n\r\nCreate an implementation of `IOutputCachePolicy` and add:\r\n\r\n```\r\n        public ValueTask ServeResponseAsync(OutputCacheContext context, CancellationToken cancellation)\r\n        {\r\n            context.AllowCacheStorage = true;\r\n            context.Tags.Add(\"MyTagHere\");\r\n            return ValueTask.CompletedTask;\r\n        }\r\n```\r\n\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n7.0.101\r\n\r\n### Anything else?\r\n\r\nASP.NET Core 7.0.2\r\nVisual Studio Professional 2022",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXiv26g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85VXeZv",
                                           "createdAt":  "2023-02-15T23:22:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-02-15T23:22:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85VdSRW",
                                           "createdAt":  "2023-02-16T21:31:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC9UcXQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "therealkungfury",
                                                                               "createdAt":  "2023-06-07T05:43:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "pecoult",
                                           "body":  "Hello,\r\nWe have the same issue with custom output cache policies.\r\n\r\n.NET Version: 7.0.102\r\n\r\nThe scenario we tried to achieve:\r\n- We want to cache our MVC controller Http Get endpoint response (the action gives access to a list of resources linked to a user). The action is in charge of adding a Response Header: \u0027Cache-Tags\u0027 with calculated values based on request parameters and resource types.\r\n- Our custom cache policy (used as a base policy) is in charge of retrieving those response headers and add their values as OutputCacheContext tags. We tried to update OutputCacheContext tags through ServeResponseAsync implementation but it didn\u0027t work. Tags are not stored with cached entries in this case. For information, we tried to use this method because the IOutputCachePolicy interface method signature comment is quite explicit: _Updates the \u003csee cref=\"OutputCacheContext\"/\u003e before the response is served and can be cached. At that point cacheability of the response can be updated._\r\n- In our scenario, we would then want to invalidate cache entries based on Tags (by using IOutputCacheStore.EvictByTagAsync method on HttpPost and HttpUpdate successful MVC controller actions)\r\n\r\nAs a fallback we think about using IOutputCachePolicy CacheRequestAsync method but we will only be able to create dynamic tags based on request data. It is not ideal in our case.\r\nIf you see any other way to manage and purge cache entries based on calculated tags please give advices. \r\nI will give a try to your workaround @DanielStout5 with reflection. Thank you!\r\n\r\nSample (simplified code example):\r\nStartup.cs:\r\n```\r\nservices.AddOutputCache(c =\u003e \r\n    {\r\n        c.AddBasePolicy(builder =\u003e builder.AddPolicy\u003cCustomOutputCachePolicy\u003e().Cache());\r\n    });\r\n```\r\n\r\nCustomOutputCachePolicy.cs\r\n```\r\npublic class CustomOutputCachePolicy : IOutputCachePolicy\r\n    {\r\n        public ValueTask CacheRequestAsync(OutputCacheContext context, CancellationToken cancellation) =\u003e ValueTask.CompletedTask;\r\n\r\n        public ValueTask ServeFromCacheAsync(OutputCacheContext context, CancellationToken cancellation) =\u003e ValueTask.CompletedTask;\r\n\r\n        public ValueTask ServeResponseAsync(OutputCacheContext context, CancellationToken cancellation)\r\n        {\r\n            if (context.HttpContext.Response.Headers.ContainsKey(\"Cache-Tags\"))\r\n            {\r\n                var tag = context.HttpContext.Response.Headers[\"Cache-Tags\"].First();\r\n                context.Tags.Add(tag);\r\n            }\r\n            return ValueTask.CompletedTask;\r\n        }\r\n    }\r\n```\r\n\r\nResourceController.cs\r\n```\r\n[...]\r\n        [HttpGet]\r\n        [OutputCache]\r\n        public IActionResult GetResources(string userId)\r\n        {\r\n            var resources = _service.GetResourcesByUserId(userId);\r\n\r\n            Response.Headers.Add(\"Cache-Tags\", $\"Resources-{userId}\");\r\n\r\n            return Ok(resources);\r\n        }\r\n\r\n        [HttpPost]\r\n        public async Task\u003cIActionResult\u003e CreateResourceAsync(Resource resource, string userId)\r\n        {\r\n            var resourceId = _service.CreateResource(resource, userId);\r\n\r\n            await _outputCacheStore.EvictByTagAsync($\"Resources-{userId}\", CancellationToken.None);\r\n            return Created(uri: resourceId, value: resourceId);\r\n        }\r\n[...]\r\n```\r\n",
                                           "updatedAt":  "2023-02-16T21:31:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85eJIab",
                                           "createdAt":  "2023-06-06T21:06:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD97Dwg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "therealkungfury",
                                                                               "createdAt":  "2023-06-07T05:43:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ngriaznov",
                                                                               "createdAt":  "2023-10-29T18:14:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "brettwinters",
                                                                               "createdAt":  "2024-08-25T17:31:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Amberg",
                                                                               "createdAt":  "2024-12-06T19:03:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "KathigitAnguras",
                                           "body":  "I came across this issue today. Totally agree with @DanielStout5.\r\n\r\nI understand setting the headers in `StartResponse()`, but tags should not be treated the same, considering **tags** is the only good way to apply eviction. And as far as I can see, generating dynamic tags (that accurately represent the cached entry) can only be done from within the context of the response. \r\n\r\nWithout the context of the response, we are left with applying generic tags and evict cache entries unnecessarily (this becomes more apparent when the cached output contains other related entities, thus creating more complex eviction scenarios). \r\n\r\nIn summary, without this, **output cache** becomes less flexible to accurately applying eviction to ... **cached output** and considering the relatively low effort to fix this, I am surprised this is not treated with a higher priority.",
                                           "updatedAt":  "2023-06-06T21:06:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85eK_bq",
                                           "createdAt":  "2023-06-07T05:43:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "therealkungfury",
                                           "body":  "I also stumbled into this one recently. Had to listen to my co-worker moan about this for two hours :)\r\n\r\nIt does seem like a very reasonable improvement which would make the output cache a lot more flexible. Got my vote. ",
                                           "updatedAt":  "2023-06-07T05:43:24Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Can\u0027t modify OutputCacheContext.Tags from IOutputCachePolicy.ServeResponseAsync",
        "labels":  [
                       "area-networking",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/46339",
        "createdAt":  "2023-01-31T00:33:29Z",
        "number":  46339,
        "author":  "brunolins16",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-13T01:44:02Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nIn https://github.com/dotnet/aspnetcore/issues/42212 was introduced the `IProblemDetailsService` and the `DeveloperExceptionPageMiddleware` updated to include `ProblemDetails` payload generation. \r\n\r\nHowever, it introduced an unnecessary dependency to `JsonOptions` and `ProblemDetails` that could have been avoided if the the `ProblemDetails` generation was implemented using an `IDeveloperPageExceptionFilter`.\r\n\r\n### Expected Behavior\r\n\r\n`DeveloperExceptionPageMiddleware` should not have dependencies to `JsonOptions` or `ProblemDetails` but should have the `ProblemDetails` payload generated when `AddProblemDetails` is called.\r\n\r\n### .NET Version\r\n\r\n.NET 7",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXilaFw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85XjsL3",
                                           "createdAt":  "2023-03-14T22:53:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC31hIA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mitchdenny",
                                                                               "createdAt":  "2023-03-14T23:36:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "captainsafia",
                                           "body":  "Triage: @mitchdenny As part of https://github.com/dotnet/aspnetcore/issues/46969, can you see if `ProblemDetails` is a big contributor to the size accounting for DeveloperExceptionPage? If it is a big contributor, we may consider doing this work.",
                                           "updatedAt":  "2023-03-14T22:53:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Y2qcU",
                                           "createdAt":  "2023-03-30T18:13:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-03-30T18:13:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85eKVmV",
                                           "createdAt":  "2023-06-07T02:22:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-06-07T02:22:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85eKVoX",
                                           "createdAt":  "2023-06-07T02:22:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mitchdenny",
                                           "body":  "Moving to backlog due to reprioritization.",
                                           "updatedAt":  "2023-06-07T02:22:38Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "DeveloperExceptionMiddleware shouldn\u0027t have dependencies to `ProblemDetails`",
        "labels":  [
                       "feature-problem-details",
                       "area-minimal",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/46969",
        "createdAt":  "2023-03-02T00:44:14Z",
        "number":  46969,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCyd8Ew==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cd21h",
                                            "createdAt":  "2023-09-08T01:57:09Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-03-02T01:07:20Z",
        "body":  "In investigating size of NativeAOT apps, one area of additional size is app.UseDeveloperExceptionPage().\r\n\r\nWhen comparing the win-x64 sizes before and after adding the `app.UseDeveloperExceptionPage()` line, I see the following sizes:\r\n\r\n```\r\n8.99 MB (9,428,480 bytes) - AddRoutingCore()+app.UseRouting()+UseEndpoints+MapGet\r\n9.56 MB (10,031,616 bytes) - AddRoutingCore()+app.UseRouting()+UseEndpoints+MapGet+app.UseDeveloperExceptionPage()\r\n```\r\n\r\nThis means adding `app.UseDeveloperExceptionPage()` adds about 550 KB of app size.\r\n\r\nWe should investigate if there is a way to make this feature smaller. One way to make it smaller is https://github.com/dotnet/aspnetcore/issues/46915. There may be other optimization we could make to reduce app size. For example, maybe eliminating `System.Linq` usages. Another option is removing `UseDeveloperExceptionPage()` from CreateSlimBuilder and make it optional for the app to add it (possibly putting it into the `dotnet new api` template).\r\n\r\ncc @DamianEdwards @halter73 @amcasey @captainsafia ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWylQ7w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85XFtkH",
                                           "createdAt":  "2023-03-09T01:15:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brunolins16",
                                           "body":  "Maybe  this is helping to the size increase https://github.com/dotnet/aspnetcore/issues/46339",
                                           "updatedAt":  "2023-03-09T01:15:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85XKtJ1",
                                           "createdAt":  "2023-03-09T17:01:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "@brunolins16 yeah good point.\r\n\r\n@eerhardt I think we need to strive to keep the developer exception page in the experience one way or another, whether it\u0027s by reducing its size, removing it from slim builder and adding it to the template, or whatever we end up doing for #46096. Seems prudent to first start with trying to reduce the size via the identified leads.",
                                           "updatedAt":  "2023-03-09T17:01:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85bKVDv",
                                           "createdAt":  "2023-05-01T07:22:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "To learn more about what this message means, what to expect next, and how this issue will be handled you can read our [Triage Process document](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).\nWe\u0027re moving this issue to the .NET 8 Planning milestone for future evaluation / consideration. Because it\u0027s not immediately obvious what is causing this behavior, we would like to keep this around to collect more feedback, which can later help us determine how to handle this. We will re-evaluate this issue, during our next planning meeting(s).\nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact work.",
                                           "updatedAt":  "2023-05-01T07:22:21Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Reduce the size of the Developer Exception Page in NativeAOT",
        "labels":  [
                       "investigate",
                       "feature-diagnostics",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/46989",
        "createdAt":  "2023-03-02T14:25:21Z",
        "number":  46989,
        "author":  "Martinn2",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODLyvew==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rafal-marciniak",
                                            "createdAt":  "2023-09-20T06:30:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alrethomas",
                                            "createdAt":  "2023-09-28T21:32:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kalimuthuswamy",
                                            "createdAt":  "2023-10-05T06:47:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julio-gorge",
                                            "createdAt":  "2023-10-13T15:30:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "levanvunam",
                                            "createdAt":  "2023-10-26T16:14:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "forrestab",
                                            "createdAt":  "2023-11-16T19:24:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sharkk121",
                                            "createdAt":  "2023-12-05T21:35:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bash-spbu",
                                            "createdAt":  "2023-12-06T14:10:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "boiche",
                                            "createdAt":  "2023-12-14T09:44:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "chekkan",
                                            "createdAt":  "2024-01-12T20:06:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bobwah",
                                            "createdAt":  "2024-01-17T15:44:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CrisBeFranc",
                                            "createdAt":  "2024-01-23T15:55:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "arcanexhoax",
                                            "createdAt":  "2024-02-06T15:07:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Guy-Michael",
                                            "createdAt":  "2024-02-08T15:42:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TheDruidsKeeper",
                                            "createdAt":  "2024-02-16T21:42:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cheng93",
                                            "createdAt":  "2024-02-27T22:09:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ssippe",
                                            "createdAt":  "2024-03-06T05:20:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "darman96",
                                            "createdAt":  "2024-03-30T05:22:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "svn-arc",
                                            "createdAt":  "2024-04-11T23:48:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ayuvyatkin",
                                            "createdAt":  "2024-04-12T09:35:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ogerami",
                                            "createdAt":  "2024-04-15T20:42:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jgunawan-safelite",
                                            "createdAt":  "2024-04-28T18:57:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ajkonkol",
                                            "createdAt":  "2024-04-30T16:15:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AustinBratcher",
                                            "createdAt":  "2024-05-08T16:54:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "csteeg",
                                            "createdAt":  "2024-05-22T15:03:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Katnippy",
                                            "createdAt":  "2024-06-07T10:58:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "boggye",
                                            "createdAt":  "2024-06-10T22:47:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eudika",
                                            "createdAt":  "2024-06-25T02:08:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ijdbuser",
                                            "createdAt":  "2024-07-02T19:22:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "spudcz",
                                            "createdAt":  "2024-07-12T08:57:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HarrisonSlater",
                                            "createdAt":  "2024-07-24T00:16:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JSedlmeier",
                                            "createdAt":  "2024-07-29T07:08:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hntidat",
                                            "createdAt":  "2024-08-05T01:56:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "niravmsoni",
                                            "createdAt":  "2024-08-07T10:15:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "VyacheslavPritykin",
                                            "createdAt":  "2024-08-22T03:45:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "korchakmv",
                                            "createdAt":  "2024-09-10T15:32:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pklingmanWave",
                                            "createdAt":  "2024-09-12T16:44:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "justurbo",
                                            "createdAt":  "2025-01-11T23:32:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "a-finocchiaro",
                                            "createdAt":  "2025-01-28T18:12:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mpickers",
                                            "createdAt":  "2025-03-04T06:44:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yoshivda",
                                            "createdAt":  "2025-03-27T09:33:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rinkeb",
                                            "createdAt":  "2025-04-19T08:30:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ChaseWagoner",
                                            "createdAt":  "2025-05-06T02:11:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ingevarr",
                                            "createdAt":  "2025-05-12T11:34:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "deniaa",
                                            "createdAt":  "2025-05-12T11:42:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Rozhdov",
                                            "createdAt":  "2025-06-11T16:02:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Schoof-T",
                                            "createdAt":  "2025-06-18T13:53:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jasraj96",
                                            "createdAt":  "2025-06-19T11:58:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "josh-romanowski",
                                            "createdAt":  "2025-08-19T15:43:33Z"
                                        }
                                    ],
                          "totalCount":  49
                      },
        "updatedAt":  "2025-03-07T21:50:06Z",
        "body":  "\r\n\r\nIn production i want to log each http request in the format I select. With HttpLogging I can selected Headers and LoggingFields but I cannot format the result, which looks something like this.\r\n\r\n![image](https://user-images.githubusercontent.com/45663203/222454574-319c5b93-f584-4aad-88cb-a6d8cedc6d12.png)\r\n\r\nI need to be able create single line logs and reorder logged properties\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nIn `HttpLoggingOptions` I would like to be able to specify string format. It would look something like this:\r\n\r\n```\r\nbuilder.Services.AddHttpLogging(options =\u003e\r\n{\r\n    options.LogFormat = \"Protocol {HttpProtocol} Scheme: {RequestScheme} \\n Path: {Path}\";\r\n});\r\n\r\n```\r\n\r\n### Additional context\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhxOjGg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85WjeYM",
                                           "createdAt":  "2023-03-02T16:15:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "The 1-line format is available with the W3C logger.\r\nhttps://learn.microsoft.com/en-us/aspnet/core/fundamentals/w3c-logger/?view=aspnetcore-7.0\r\nThe Hosting logs also provide a 1-line request/response log.",
                                           "updatedAt":  "2023-03-02T16:15:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85WkdD1",
                                           "createdAt":  "2023-03-02T18:56:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Martinn2",
                                           "body":  "W3C format looks good, but it seems it supports only logging to the file. I need to use standard ILogger as HttpLogging does",
                                           "updatedAt":  "2023-03-02T18:59:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85W2eCD",
                                           "createdAt":  "2023-03-06T22:29:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESXlcw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "bobwah",
                                                                               "createdAt":  "2024-01-17T15:45:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "CrisBeFranc",
                                                                               "createdAt":  "2024-01-23T15:55:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "darman96",
                                                                               "createdAt":  "2024-03-30T05:23:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "ogerami",
                                                                               "createdAt":  "2024-04-15T20:42:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "ingevarr",
                                                                               "createdAt":  "2025-05-13T07:14:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "ibm-pirada",
                                                                               "createdAt":  "2025-05-16T10:47:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "Triage: customizing the HttpLogging this way seems reasonable as something we should consider, but we won\u0027t be able to get to this in the near future.\r\n\r\nIn the meantime, you can achieve what you\u0027re looking for by writing your own middleware for this purpose.",
                                           "updatedAt":  "2023-03-06T22:29:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85W2eZK",
                                           "createdAt":  "2023-03-06T22:30:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "If anyone else is interested in this, please leave a comment or a 👍 on the first comment.",
                                           "updatedAt":  "2023-03-06T22:30:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86HE6Ma",
                                           "createdAt":  "2024-08-02T22:21:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEWOXyA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mpickers",
                                                                               "createdAt":  "2025-03-04T06:45:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Rozhdov",
                                                                               "createdAt":  "2025-06-11T16:02:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "vecera-vojtech",
                                           "body":  "I\u0027d love this functionality since as of now I have to do a custom implementation of the logger just because of it.\r\n\r\nIt would also by nice to have option to enforce logging of only Headers specified in `RequestHeaders`. Atm values of those which are not added to the list are redacted. That pollutes and logs and makes us log values with no added value for us (and lets not mention the additional cost for the log storage if we would use it all our microservices). There is workaround, where I can prune the LogContext Parameters in OnResponse method. But I disslike the fact, that the values are even added to the list to just be deleted, seems like unnecessary overhead to me. \r\n\r\nAlso setting the LogLevel via interceptor would be nice, so we can log responses with HTTP Status code \u003e=400 as warning/errors instead of having all as information.",
                                           "updatedAt":  "2024-08-02T22:25:37Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Add custom format support to HttpLogging middleware",
        "labels":  [
                       "feature-diagnostics",
                       "area-middleware",
                       "feature-http-logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/47044",
        "createdAt":  "2023-03-06T08:59:07Z",
        "number":  47044,
        "author":  "loekensgard",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODI8sOw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PiotrJn",
                                            "createdAt":  "2024-11-29T15:32:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bazarniy",
                                            "createdAt":  "2025-02-19T14:50:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zagoskin",
                                            "createdAt":  "2025-07-29T12:34:03Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-07-29T18:38:10Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nI think this is the same issue as #45564.\r\n\r\nWhen attempting to use a custom base policy for the OutputCache, the policy is not triggered or used when the API is called. Instead, a named policy must be created for caching to work correctly.\r\n\r\n### Expected Behavior\r\n\r\nThe custom base policy should be triggered and used when making requests to the API.\r\n\r\n### Steps To Reproduce\r\n\r\nAdd the custom policy to program.cs\r\n\r\n```csharp\r\nbuilder.Services.AddOutputCache(options =\u003e\r\n{\r\n    options.AddBasePolicy(builder =\u003e builder.AddPolicy\u003cCustomBasePolicy\u003e(), true);   //Doesn\u0027t work\r\n    options.AddBasePolicy(builder =\u003e builder.AddPolicy\u003cCustomBasePolicy\u003e());         //Doesn\u0027t work\r\n    options.AddPolicy(\"PolicyA\", builder =\u003e builder.AddPolicy\u003cCustomBasePolicy\u003e(), true);  //Works\r\n});\r\n```\r\n\r\nThe app builder:\r\n\r\n```csharp\r\nvar app = builder.Build();\r\n\r\napp.UseDeveloperExceptionPage();\r\n\r\napp.UseCors();\r\n\r\napp.UseAuthentication();\r\napp.UseAuthorization();\r\n\r\n//This needs to be after Swagger, Middlewares and Authentication\r\napp.UseOutputCache();\r\n\r\n// app.MapControllers().CacheOutput().RequireAuthorization();  //Relying on the custom base policy doesn\u0027t work\r\napp.MapControllers().CacheOutput(\"PolicyA\").RequireAuthorization();\r\n\r\napp.Run();\r\n```\r\n\r\nThis is the CustomBasePolicy I used to test:\r\n\r\n```csharp\r\npublic class CustomBasePolicy : IOutputCachePolicy\r\n{\r\n    public ValueTask CacheRequestAsync(OutputCacheContext context, CancellationToken cancellation)\r\n    {\r\n        // always cache\r\n        context.EnableOutputCaching = true;\r\n        context.AllowCacheLookup = true;\r\n        context.AllowCacheStorage = true;\r\n        context.AllowLocking = true;\r\n\r\n        // Vary by any query by default\r\n        context.CacheVaryByRules.QueryKeys = \"*\";\r\n\r\n        return ValueTask.CompletedTask;\r\n    }\r\n\r\n        public ValueTask ServeFromCacheAsync(OutputCacheContext context, CancellationToken cancellation) =\u003e ValueTask.CompletedTask;\r\n        public ValueTask ServeResponseAsync(OutputCacheContext context, CancellationToken cancellation) =\u003e ValueTask.CompletedTask;\r\n}\r\n```\r\n\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n7.0.200\r\n\r\n### Anything else?\r\n\r\nI tried to enable debug logs in my project and tried to look for specific logs that I found in the [OutputCacheMiddleware](https://github.com/dotnet/aspnetcore/blob/5d10dceeaf5d1d4ac945356f580cce5cf0486c40/src/Middleware/OutputCaching/src/OutputCacheMiddleware.cs#L228), however it never looks like the middleware was hit when I tried to use the base policy.\r\n\r\n\r\ndotnet --info\r\n\r\n```\r\n.NET SDK:\r\n Version:   7.0.200\r\n Commit:    534117727b\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22621\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\7.0.200\\\r\n\r\nHost:\r\n  Version:      7.0.3\r\n  Architecture: x64\r\n  Commit:       0a2bda10e8\r\n\r\n.NET SDKs installed:\r\n  7.0.103 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.200 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 6.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOurUNnA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85WyT0x",
                                           "createdAt":  "2023-03-06T12:16:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "h3rmanj",
                                           "body":  "It seems like the [`CacheOutput`](https://github.com/dotnet/aspnetcore/blob/61bc2aabbc8952727c38a8fba1c36bceb26bebc5/src/Middleware/OutputCaching/src/Policies/OutputCacheConventionBuilderExtensions.cs#L25) extension on `IEndpointConventionBuilder` always adds the default policy if no argument is provided.\r\n\r\nMaybe we are misunderstanding what `BasePolicy` is actually referring to? Is it the default policy if no other is specified? Or a policy that gets appended to every other policy, but can\u0027t be used alone?",
                                           "updatedAt":  "2023-03-06T12:49:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85ZNj33",
                                           "createdAt":  "2023-04-04T23:39:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sebastienros",
                                           "body":  "BasePolicy is additive to `DefaultPolicy` unless specified otherwise.\r\nBasePolicy is called when an endpoint is cached without any specific policy defined (fallback).\r\n\r\n\u003e Is it the default policy if no other is specified? \r\n\r\nThen yes, but for endpoints that have caching enabled, like by using `.CacheOutput()`",
                                           "updatedAt":  "2023-04-04T23:39:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85ZPLb6",
                                           "createdAt":  "2023-04-05T08:59:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "h3rmanj",
                                           "body":  "\u003e BasePolicy is additive to `DefaultPolicy` unless specified otherwise. BasePolicy is called when an endpoint is cached without any specific policy defined (fallback).\r\n\r\nSo if I add a base policy with the `excludeDefaultPolicy` like so;\r\n\r\n```csharp\r\nbuilder.Services.AddOutputCache(options =\u003e\r\n{\r\n    options.AddBasePolicy(builder =\u003e builder.AddPolicy\u003cCustomBasePolicy\u003e(), excludeDefaultPolicy: true);\r\n});\r\n```\r\n\r\nThe default policy should be excluded from the base policy.\r\n\r\n\u003e \u003e Is the base policy the default policy if no other is specified?\r\n\u003e \r\n\u003e Then yes, but for endpoints that have caching enabled, like by using `.CacheOutput()`\r\n\r\nSo if I cache the output of all my endpoints, like so;\r\n\r\n```csharp\r\napp.MapEndpoints().CacheOutput();\r\n```\r\n\r\nOnly the Base Policy should be invoked? (Which has excluded the default policy)\r\n\r\nThat is not the case, as the default policy will still be hit. @sebastienros\r\n\r\nI set up a [codesandbox here](https://codesandbox.io/p/sandbox/wandering-monad-7m9dvo?file=Program.cs) (open preview on port 5000, and run project logs to see output), where I\u0027ve followed the steps, and added a mock for authentication (something the Default Policy doesn\u0027t like, but shouldn\u0027t matter). If you keep calling the enpoint, you\u0027ll see the controller will always be hit.",
                                           "updatedAt":  "2023-04-05T08:59:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde866tQ2c",
                                           "createdAt":  "2025-07-29T12:58:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zagoskin",
                                           "body":  "\u003e Only the Base Policy should be invoked? (Which has excluded the default policy)\n\u003e \n\u003e That is not the case, as the default policy will still be hit. [@sebastienros](https://github.com/sebastienros)\n\u003e \n\u003e I set up a [codesandbox here](https://codesandbox.io/p/sandbox/wandering-monad-7m9dvo?file=Program.cs) (open preview on port 5000, and run project logs to see output), where I\u0027ve followed the steps, and added a mock for authentication (something the Default Policy doesn\u0027t like, but shouldn\u0027t matter). If you keep calling the enpoint, you\u0027ll see the controller will always be hit.\n\nI inspected the code and the \"issue\" seems to be that whenever the middleware tries to determine the policies, within `TryGetRequestPolicies`, it calls the `OutputCacheAttribute.BuildPolicy` method if you have specified the attribute. \n\nThe later will call a default constructor on `OutputCachePolicyBuilder` when you don\u0027t specify a `PolicyName`, which ends up re-adding the `DefaultPolicy`, which then conflicts with whatever you had.\n\nHonestly I would expect this to work differently. That is, if I add a custom base policy, and in the attribute I don\u0027t specify a `PolicyName`, then the `DefaultPolicy` is not applied because I provided a custom base one.\n\n",
                                           "updatedAt":  "2025-07-29T13:02:19Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Custom base policy for OutputCache not triggered when API is called",
        "labels":  [
                       "feature-output-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/47251",
        "createdAt":  "2023-03-16T14:03:50Z",
        "number":  47251,
        "author":  "Gebov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-15T19:34:23Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nThe current way to specify to vary by query params(using a custom cache policy) is this:\r\n\r\n```c#\r\n\r\nclass CustomCachePolicy : IOutputCachePolicy\r\n{\r\n    public ValueTask CacheRequestAsync(OutputCacheContext context, CancellationToken cancellation)\r\n    {\r\n        var httpContext = context.HttpContext;\r\n\r\n        context.AllowCacheLookup = true;\r\n        context.AllowCacheStorage = true;\r\n        context.AllowLocking = true;\r\n        context.EnableOutputCaching = true;\r\n        context.CacheVaryByRules.QueryKeys = \"page\";\r\n```\r\n\r\nHowever more dynamic scenarios require the query params to be specified during execution of a controller:\r\n\r\n```c#\r\n\r\n    [OutputCache(PolicyName = \"default\")]\r\n    public IActionResult Index()\r\n    {\r\n        var ocFeature = this.HttpContext.Features.Get\u003cIOutputCacheFeature\u003e();\r\n\r\n        if (ocFeature != null)\r\n        {\r\n            ocFeature.Context.CacheVaryByRules.QueryKeys = new Microsoft.Extensions.Primitives.StringValues(\"page\");\r\n        }\r\n\r\n        return this.View();\r\n    }\r\n```\r\n\r\nI would expect the page to vary by query params specified during an execution of a controller/handler.\n\n### Expected Behavior\n\nI would expect the page to vary by query params specified during an execution of a controller/handler.\n\n### Steps To Reproduce\n\nOpen [this github project ](https://github.com/Gebov/aspnetcore-7-cache-issue)and run it. Then browse through the pages\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n7.0.202\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvkoouw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86-SD3x",
                                           "createdAt":  "2025-08-15T18:38:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sebastienros",
                                           "body":  "I think this should be set in config, for instance in your attribute. The issue otherwise if the setting is per response is that there would be no way from a new request to build the correct cache key. If the cache key needs to vary by a specific querystring then add it to the attribute, even if some requests don\u0027t set it, it will still be part of the key (as a null value).\n",
                                           "updatedAt":  "2025-08-15T18:38:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86-Sii7",
                                           "createdAt":  "2025-08-15T19:34:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Gebov",
                                           "body":  "So, what about something that will be invoked prior to the request building the cache key? Some kind of a hook - like the ones in the CachePolicy object? Addiitonally I would like to validate the values of the query string params, so that I have a whitelist of allowed values by which the request can vary.  My case is a more dynamic one - that of a CMS, that builds the pages dynamically. I have a single controller executing all the pages and each page can have a unique set of query parameters. The additional check for validation of the query param values is to ensure this would do not get abused and should vary by the valid values for that query stirng key only.  \n\nAlternatively this could be kept internally as a cache of request URL(without params) and the query params for that page. So that there is no hook invoked, but everything is automatic. Maybe just for the query param values ...",
                                           "updatedAt":  "2025-08-15T19:34:23Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Output cache middleware does not vary by query params specified at runtime",
        "labels":  [
                       "feature-output-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/47408",
        "createdAt":  "2023-03-24T21:09:30Z",
        "number":  47408,
        "author":  "raramer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-13T01:39:08Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI am trying to use UseForwardedHeaders in an app behind Azure Front Door, but the remote ip address received on the application is random.  The only options I see right now are to either restrict known networks to a class B (147.243.x.x based on observations) or remove all known proxies from the configuration.  Basically, drastically reduce security or remove it completely.\r\n\r\n\r\n\n\n### Describe the solution you\u0027d like\n\nA great feature would be to configure ForwardedHeadersOptions with an expected header and value as an alternate security mechanism to remote ip address.\r\n\r\nEx. options.KnownHeaders.Add(\"X-Azure-FDID\", \"55ce4ed1-4b06-4bf1-b40e-4638452104da\");\r\n\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWTY44Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85Yi5nj",
                                           "createdAt":  "2023-03-27T17:24:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "That seems like a check that could be added as its own middleware. E.g. if this header/value is missing, refuse the request (400). That would be independent of UseForwardedHeaders, it doesn\u0027t modify any part of the request.",
                                           "updatedAt":  "2023-03-27T17:24:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Yjyck",
                                           "createdAt":  "2023-03-27T19:55:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "raramer",
                                           "body":  "That would be case if I wanted to only respond to requests coming through the proxy.  In my case, I want the application to also respond to requests that aren\u0027t proxied.\r\n\r\nLooking at the existing UseForwardedHeaders code, the KnownProxies and KnownNetworks are only restricting whether the host, remote ip address, and protocol are replaced, and don\u0027t do anything to block the inbound request itself.  KnownHeaders would do the same; only restrict replacements, and not the entire request.  \r\n",
                                           "updatedAt":  "2023-03-27T19:57:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85YkWeG",
                                           "createdAt":  "2023-03-27T22:08:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Note there is a proposal for UseForwardedHeaders to reject requests that don\u0027t match its criteria rather than no-op: https://github.com/dotnet/aspnetcore/issues/10302",
                                           "updatedAt":  "2023-03-27T22:08:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85YxU_2",
                                           "createdAt":  "2023-03-29T21:09:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC412pQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "amcasey",
                                                                               "createdAt":  "2023-03-30T01:33:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "[UseWhen](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.usewhenextensions.usewhen) is another option for you, skip the forwarder middleware when the expected header is not present.\r\n\r\nTriage: I don\u0027t recommend implementing this until we get more feedback about it and possible variations.",
                                           "updatedAt":  "2023-03-29T21:09:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85ZNjjh",
                                           "createdAt":  "2023-04-04T23:37:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-04-04T23:37:25Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Add support for X-Azure-FDID as a UseForwardedHeaders \"Known Proxy\"",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/48008",
        "createdAt":  "2023-05-01T16:25:28Z",
        "number":  48008,
        "author":  "aradalvand",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-02T01:40:26Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nCurrently, the response compression middleware only adds a `Vary: Accept-Encoding` header to the response, if and only if the request contains an `Accept-Encoding` header.\r\n\r\n**This is wrong.** The `Vary: Accept-Encoding` header should be included in the response regardless of whether or not `Accept-Encoding` was part of the original request. This is because otherwise, if the very first request is one without the `Accept-Encoding` header (and by extension there is no `Vary: Accept-Encoding` in the response), an HTTP cache would not know that if a subsequent request came in that _did_ include an `Accept-Encoding` header, it should NOT use the previous cache entry to satisfy that request.\r\n\r\nThe value of the `Vary` header shouldn\u0027t be \u0027conditional\u0027 (for a request to the same URL). That\u0027s incorrect behavior and would cause issues especially with proxy caches (e.g. CDNs).\r\n\r\nThis principle is something that was explicitly pointed out in [this article by Fastly](https://www.fastly.com/blog/best-practices-using-vary-header#:~:text=Vary%3A%20Accept%2DEncoding**-,Note%20that%20the%20Vary%20header%20is%20present%20in%20the%20response%20regardless%20of%20whether%20or%20not%20compression%20is%20used.,-Why%20is%20this) — which is also mentioned in the [MDN page for `Vary`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Vary#see_also).\r\n\r\n### Expected Behavior\r\n\r\nThe `Vary: Accept-Encoding` header should be included in every response whose `Content-Type` MIME type is supported by the response compression middleware, regardless of the presence of `Accept-Encoding` in the request.\r\n\r\nThis same principle also applies to any middleware that might add a value to the `Vary` header of the response, there could be some others in the ASP.NET Core codebase as well, although the response compression middleware is the one I stumbled into.\r\n\r\nThe relevant piece of code seems to be the following:\r\nhttps://github.com/dotnet/aspnetcore/blob/86817b0c9fbb9b730bf3ce63da34b75570ee5696/src/Middleware/ResponseCompression/src/ResponseCompressionBody.cs#L202-L225\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n_No response_\r\n\r\n### Anything else?\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcyDw0w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85bMP3j",
                                           "createdAt":  "2023-05-01T16:47:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aradalvand",
                                           "body":  "@Tratcher This is actually a bug report rather than a feature request. Is the \"feature-middleware\" label really appropriate?",
                                           "updatedAt":  "2023-05-01T16:47:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85bMSCF",
                                           "createdAt":  "2023-05-01T16:55:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC65b3g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2023-05-01T17:04:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "That label just means it\u0027s part of a middleware feature area, response compression.",
                                           "updatedAt":  "2023-05-01T16:55:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85dNBwR",
                                           "createdAt":  "2023-05-26T01:27:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC8eWwg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2023-05-26T02:02:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "Thanks for reporting this @aradalvand, I just looked at this and you\u0027re right that this is a bug.\r\n\r\nIt looks like we bail in invoking the middleware entirely if the Accept-Encoding header is not set in the request.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/f56c242d037e7a11626151e78333caa26c3b5d00/src/Middleware/ResponseCompression/src/ResponseCompressionMiddleware.cs#L37-L45\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/f56c242d037e7a11626151e78333caa26c3b5d00/src/Middleware/ResponseCompression/src/ResponseCompressionProvider.cs#L219-L229\r\n\r\nWe\u0027ll need to fix this logic so that the `Vary: Accept-Encoding` header is included regardless.",
                                           "updatedAt":  "2023-05-26T01:27:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85dNByM",
                                           "createdAt":  "2023-05-26T01:27:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 8 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-05-26T01:27:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85dNIGE",
                                           "createdAt":  "2023-05-26T02:13:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aradalvand",
                                           "body":  "Hi @adityamandaleeka, thank you for looking into this.\r\n\r\nNote that one important point that\u0027s easy to overlook (which I did [hint at in my original comment](https://github.com/dotnet/aspnetcore/issues/48008#:~:text=should%20be%20included-,in%20every%20response%20whose%20Content%2DType%20MIME%20type%20is%20supported%20by%20the%20response%20compression%20middleware,-%2C%20regardless%20of%20the) but I think is worth reiterating), is that `Vary: Accept-Encoding` should be added **only** to responses with a `Content-Type` supported by the response compression middleware, and not to every response — but irrespective of whether or not the request includes `Accept-Encoding`, which is the original bug, of course.\r\n\r\nI just wanted to point this out again because I think it\u0027s easy to miss and consequently introduce another bug.",
                                           "updatedAt":  "2023-05-26T02:17:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85zIPDT",
                                           "createdAt":  "2024-02-07T08:41:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aradalvand",
                                           "body":  "Any updates on this one?",
                                           "updatedAt":  "2024-02-07T08:41:38Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "ALWAYS include the `Vary: Accept-Encoding` header when response compression is enabled",
        "labels":  [
                       "bug",
                       "help wanted",
                       "feature-response-compression",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/48066",
        "createdAt":  "2023-05-04T12:55:32Z",
        "number":  48066,
        "author":  "offirpeer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T17:44:23Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nI fetch the page by id and use slug like this:\r\n[https://example.com/123/slug-a](https://example.com/123/slug-a)\r\n[https://example.com/123/slug-b](https://example.com/123/slug-b )\r\n[https://example.com/123/slug-c](https://example.com/123/slug-c )\r\nAll these routes should get the same page from output cache regardless of the slug value.\r\nI use the `SetVaryByRouteValue(\"id\")` but it doesn\u0027t work.\r\n\r\n```\r\n     services.AddOutputCache(options =\u003e\r\n            {\r\n                options.AddBasePolicy(builder =\u003e builder.AddPolicy\u003cMyCustomPolicy\u003e().Expire(TimeSpan.FromSeconds(10000)), true);\r\n                options.AddPolicy(\"VaryById\", builder =\u003e builder.SetVaryByRouteValue(\"id\"));\r\n            });\r\n```\r\n\r\nThe method:\r\n```\r\n [Route(\"text/{id:int}/{textSlug?}\")]\r\n [OutputCache(PolicyName = \"VaryById\")]\r\n public async Task\u003cIActionResult\u003e TextPage(int id, string textSlug)\r\n```\r\n\r\nWhen I use `SetVaryByQuery(\"id\")` I get the cached version of the page as long I don\u0027t change the id, but then I need to change my url to look like this:\r\n[https://example.com/123?slug=slug-a](https://example.com/123?slug=slug-a)\r\n[https://example.com/123?slug=slug-b](https://example.com/123?slug=slug-b)\r\n[https://example.com/123?slug=slug-c](https://example.com/123?slug=slug-c)\r\n\r\n### Expected Behavior\r\n\r\nI expect to get the cached version as long that I don\u0027t change the id route value.\r\nSo for:\r\n[https://example.com/123/slug-a](https://example.com/123/slug-a)\r\n[https://example.com/123/slug-b](https://example.com/123/slug-b )\r\n[https://example.com/123/slug-c](https://example.com/123/slug-c )\r\nI should get the same page from Output Cache.\r\n\r\n### Steps To Reproduce\r\n\r\nThese are my settings:\r\n\r\n```\r\nusing Microsoft.AspNetCore.Http;\r\nusing Microsoft.AspNetCore.OutputCaching;\r\nusing Microsoft.Extensions.Primitives;\r\nusing System.Threading.Tasks;\r\nusing System.Threading;\r\nusing Microsoft.AspNetCore.Mvc.Controllers;\r\nusing Microsoft.AspNetCore.Mvc.Abstractions;\r\nusing Microsoft.AspNetCore.Authorization;\r\nusing System.Reflection;\r\nusing System.Linq;\r\n\r\nnamespace Cache;\r\n\r\npublic sealed class MyCustomPolicy : IOutputCachePolicy\r\n{\r\n    public static readonly MyCustomPolicy Instance = new();\r\n\r\n    public MyCustomPolicy()\r\n    {\r\n    }\r\n\r\n    ValueTask IOutputCachePolicy.CacheRequestAsync(OutputCacheContext context, CancellationToken cancellationToken)\r\n    {\r\n        var attemptOutputCaching = AttemptOutputCaching(context);\r\n        context.EnableOutputCaching = true;\r\n        context.AllowCacheLookup = attemptOutputCaching;\r\n        context.AllowCacheStorage = attemptOutputCaching;\r\n        context.AllowLocking = true;\r\n\r\n        // Vary by any query by default\r\n        context.CacheVaryByRules.QueryKeys = \"*\";\r\n\r\n        return ValueTask.CompletedTask;\r\n    }\r\n\r\n    ValueTask IOutputCachePolicy.ServeFromCacheAsync(OutputCacheContext context, CancellationToken cancellationToken)\r\n    {\r\n        return ValueTask.CompletedTask;\r\n    }\r\n\r\n    ValueTask IOutputCachePolicy.ServeResponseAsync(OutputCacheContext context, CancellationToken cancellationToken)\r\n    {\r\n        var response = context.HttpContext.Response;\r\n\r\n        // Verify existence of cookie headers\r\n        if (!StringValues.IsNullOrEmpty(response.Headers.SetCookie))\r\n        {\r\n            context.AllowCacheStorage = false;\r\n        }\r\n\r\n        // Check response code\r\n        if (response.StatusCode != StatusCodes.Status200OK)\r\n        {\r\n            context.AllowCacheStorage = false;\r\n        }\r\n\r\n        return ValueTask.CompletedTask;\r\n    }\r\n\r\n    private static bool AttemptOutputCaching(OutputCacheContext context)\r\n    {\r\n        // Check if the current request fulfills the requirements to be cached\r\n        var request = context.HttpContext.Request;\r\n\r\n        // Verify the method\r\n        if (!HttpMethods.IsGet(request.Method) \u0026\u0026 !HttpMethods.IsHead(request.Method))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        // Verify existence of authorization attribute\r\n        var controllerActionDescriptor = context.HttpContext.GetEndpoint()?.Metadata.GetMetadata\u003cControllerActionDescriptor\u003e()?.MethodInfo;\r\n        var hasAuthorizeAttribute = controllerActionDescriptor?.GetCustomAttributes()?.OfType\u003cAuthorizeAttribute\u003e().Any() ?? false;\r\n        if (hasAuthorizeAttribute)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n```\r\n\r\nAdd the service:\r\n\r\n```\r\n   services.AddOutputCache(options =\u003e\r\n            {\r\n                options.AddBasePolicy(builder =\u003e builder.AddPolicy\u003cMyCustomPolicy \u003e().Expire(TimeSpan.FromSeconds(10000)), true);\r\n                options.AddPolicy(\"VaryById\", builder =\u003e builder.SetVaryByRouteValue(\"id\"));\r\n                //options.AddPolicy(\"Query\", builder =\u003e builder.SetVaryByQuery(\"id\"));\r\n            });\r\n```\r\n\r\nThe method:\r\n\r\n```\r\n    [Route(\"text/{id:int}/{textSlug?}\")]\r\n        [OutputCache(PolicyName = \"VaryById\")]\r\n        public async Task\u003cIActionResult\u003e TextPage(int id, string textSlug)\r\n```\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n7.0.203\r\n\r\n### Anything else?\r\n\r\nI tried to add to the base policy the following and it didn\u0027t work:\r\n\r\n`context.CacheVaryByRules.RouteValueNames = \"id\";`",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "OutputCache - SetVaryByRouteValue doesn\u0027t work",
        "labels":  [
                       "feature-output-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/48165",
        "createdAt":  "2023-05-10T13:21:03Z",
        "number":  48165,
        "author":  "Coder3333",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_vq2w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ahaeber",
                                            "createdAt":  "2023-10-30T11:09:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "terryaney",
                                            "createdAt":  "2025-03-05T20:04:19Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-29T18:38:11Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nSessionServiceCollectionExtensions.AddSession creates a cookie with the Path of \"/\", ignoring the path base of the web application.  This is further complicated in that AddSession does not provide a way to access the HttpContext, so my code cannot easily set the cookie path to the desired value. \r\n\r\nDocuments cookie behavior of AddSession:\r\nhttps://learn.microsoft.com/en-us/aspnet/core/fundamentals/app-state?view=aspnetcore-7.0#session-options\r\n\r\nDocuments the problem:\r\nhttps://stackoverflow.com/q/54362266/4194514\n\n### Expected Behavior\n\nThe cookie created by SessionServiceCollectionExtensions.AddSession should use the path base of the web application, similarly to how antiforgery token does.\n\n### Steps To Reproduce\n\nGive your web application a path base and use SessionServiceCollectionExtensions.AddSession to add session to the website, but do not specify a path of the session cookie.  You will see in code that the path of the cookie is set by the framework to \"/\", which I believe comes from SessionDefaults.CookiePath.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n_No response_\n\n### Anything else?\n\nI see 3 different ways to fix this issue.\r\n1. Automatically set the cookie Path to the application\u0027s PathBase, instead of SessionDefaults.CookiePath.\r\n2. Change the value of SessionDefaults.CookiePath from \"/\" to the application\u0027s path base.\r\n3. Add an additional signature to SessionServiceCollectionExtensions.AddSession that accepts the http context, so my custom code can determine the PathBase and set it as the cookie path.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsy_1hQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85b9fhi",
                                           "createdAt":  "2023-05-10T21:43:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Here is what Antiforgery does:\r\nhttps://github.com/dotnet/aspnetcore/blob/4afe7f612d104b43b690e71d83c18a8bc48aae2d/src/Antiforgery/src/Internal/DefaultAntiforgeryTokenStore.cs#L79-L99\r\n\r\nChanging the default for Session would be breaking. ~~Note we also use / for auth. I\u0027m not sure why Antiforgery does something different.~~\r\n\r\n*edit* nevermind, auth also uses path base by default.\r\nhttps://github.com/dotnet/aspnetcore/blob/4afe7f612d104b43b690e71d83c18a8bc48aae2d/src/Security/Authentication/Core/src/RequestPathBaseCookieBuilder.cs#L22-L38",
                                           "updatedAt":  "2023-05-10T21:46:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85cBdLr",
                                           "createdAt":  "2023-05-11T12:12:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Coder3333",
                                           "body":  "@Tratcher , I haven\u0027t tracked down the Microsoft source code, yet, but in my application AddAuthentication and AddAntiforgery are creating their cookies with the proper path base, even though I am not doing anything to control that value.  So far, AddSession is the only one of these that is creating the cookie at \"/\".",
                                           "updatedAt":  "2023-05-11T12:16:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85za1Eq",
                                           "createdAt":  "2024-02-09T18:29:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ahaeber",
                                           "body":  "/azp run",
                                           "updatedAt":  "2024-02-09T18:29:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86RPFul",
                                           "createdAt":  "2024-10-25T01:57:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEX5bHA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MartinEriksenFlex",
                                                                               "createdAt":  "2025-04-07T12:14:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dineshmike",
                                                                               "createdAt":  "2025-06-25T13:56:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "wessleym",
                                           "body":  "I also would appreciate if `AddSession` acted in the same way as `AddAuthentication` and `AddAntiforgery`. Thank you.",
                                           "updatedAt":  "2024-10-25T01:57:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86ywzx2",
                                           "createdAt":  "2025-06-24T07:25:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEX5bJw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dineshmike",
                                                                               "createdAt":  "2025-06-25T13:56:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "kvantetore",
                                           "body":  "Although I would love for the default to be more sensible, it is straight forward to use `RequestPathBaseCookieBuilder` to create session cookies:\n\n```\nservices.AddSession(options =\u003e\n{\n    options.Cookie = new RequestPathBaseCookieBuilder()\n    {\n        Name = SessionDefaults.CookieName,\n        SecurePolicy = CookieSecurePolicy.None,\n        SameSite = SameSiteMode.Lax,\n        HttpOnly = true,\n        IsEssential = false,\n    };\n});\n```",
                                           "updatedAt":  "2025-06-24T07:25:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86zGuI_",
                                           "createdAt":  "2025-06-25T13:57:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dineshmike",
                                           "body":  "\u003e Although I would love for the default to be more sensible, it is straight forward to use `RequestPathBaseCookieBuilder` to create session cookies:\n\u003e \n\u003e ```\n\u003e services.AddSession(options =\u003e\n\u003e {\n\u003e     options.Cookie = new RequestPathBaseCookieBuilder()\n\u003e     {\n\u003e         Name = SessionDefaults.CookieName,\n\u003e         SecurePolicy = CookieSecurePolicy.None,\n\u003e         SameSite = SameSiteMode.Lax,\n\u003e         HttpOnly = true,\n\u003e         IsEssential = false,\n\u003e     };\n\u003e });\n\u003e ```\n\nThis worked for me. Thanks 🙏",
                                           "updatedAt":  "2025-06-25T13:57:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86zHydV",
                                           "createdAt":  "2025-06-25T15:14:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kvantetore",
                                           "body":  "@wessleym, in my case, I want the session cookie to have the same path as the auth cookie, which is the root of the application. `RequestPathBaseCookieBuilder` does exactly that by defaulting the path to `context.Request.PathBase` when the `Path` property is null. (see https://github.com/dotnet/aspnetcore/blob/main/src/Security/Authentication/Core/src/RequestPathBaseCookieBuilder.cs#L28)",
                                           "updatedAt":  "2025-06-25T15:14:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86zLu6v",
                                           "createdAt":  "2025-06-25T21:27:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kvantetore",
                                           "body":  "@wessleym, I am not entirely sure what you are trying to achieve, but from the source code of RequestPathBaseCookieBuilder it looks like it uses `context.Request.Path` every time `Build(...)` is called. \n\nI suppose `SessionMiddleware` only creates a new session cookie if a session cookie is not found in the request header. Perhaps this is where it goes wrong for you? However, I struggle to see what other behaviour would be sensible?",
                                           "updatedAt":  "2025-06-25T21:27:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86zL_WF",
                                           "createdAt":  "2025-06-25T21:44:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEX_0Qg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kvantetore",
                                                                               "createdAt":  "2025-06-26T06:30:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wessleym",
                                           "body":  "@kvantetore, after reading your comment and rereading the source code of RequestPathBaseCookieBuilder, I realized it does set the cookie path for every request. (I thought it just set it for the first request and reused that path later, even if `PathBase` had changed.) So I was wrong about that.\nYour directing us to `RequestPathBaseCookieBuilder` is helpful. Thank you. But I still hope session can act like `AddAuthentication` and `AddAntiforgery` one day by default, as I know you do too.",
                                           "updatedAt":  "2025-06-25T21:44:31Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "AddSession Sets wrong Cookie Path",
        "labels":  [
                       "breaking-change",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/48244",
        "createdAt":  "2023-05-12T21:11:09Z",
        "number":  48244,
        "author":  "tygore587",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCwG0PQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LTAravindh92",
                                            "createdAt":  "2023-05-16T15:15:11Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-29T17:44:24Z",
        "body":  "### Description\n\nWe are experiencing a problem with our .net mvc api running in service fabric which is getting the error `Could not load file or assembly \u0027Microsoft.AspNetCore.Diagnostics.Abstractions`.\r\n\r\nThe compile target is .net 7.\r\n\r\nI search for other bugs and found the issue dotnet/runtime#3252 and searched for direct package references in our project, but found none.\r\n\r\nWe deploy the api as a self contained package, so the host runtime shouldn\u0027t matter?\n\n### Reproduction Steps\n\nThe problem is, that I can\u0027t reproduce it locally. It just happens, when it is deployed. But we can\u0027t find the cause.\n\n### Expected behavior\n\nNot seeing an error\n\n### Actual behavior\n\nThrows an exception: \r\n\r\n```\r\nCould not load file or assembly \u0027Microsoft.AspNetCore.Diagnostics.Abstractions, Version=7.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\u0027. The system cannot find the file specified.\r\nType: System.IO.FileNotFoundException\r\nFile not found: Microsoft.AspNetCore.Diagnostics.Abstractions, Version=7.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\nStack Trace: at Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddlewareImpl.HandleException(HttpContext context, ExceptionDispatchInfo edi)\r\nat System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine\u0026 stateMachine)\r\nat Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddlewareImpl.HandleException(HttpContext context, ExceptionDispatchInfo edi)\r\nat Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddlewareImpl.\u003cInvoke\u003eg__Awaited|8_0(ExceptionHandlerMiddlewareImpl middleware, HttpContext context, Task task)\r\nat Microsoft.AspNetCore.Server.HttpSys.RequestContext`1.ExecuteAsync()\r\nat Microsoft.AspNetCore.Server.HttpSys.RequestContext`1.ExecuteAsync()\r\n```\n\n### Regression?\n\nIt worked for month using .net 6 before. We just started to see this happen after upgrading to .net 7\n\n### Known Workarounds\n\nWe don\u0027t have one.\n\n### Configuration\n\n- Which version of .NET is the code running on?\r\n.net 7.0.5\r\n\r\n- What OS and version, and what distro if applicable?\r\nWindows Server 2022\r\n\r\n- What is the architecture (x64, x86, ARM, ARM64)?\r\nx64\n\n### Other information\n\nIf you need more information, please let me know.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaxKIAQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85cYS7Y",
                                           "createdAt":  "2023-05-16T15:14:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LTAravindh92",
                                           "body":  "I\u0027m also facing the same issue.",
                                           "updatedAt":  "2023-05-16T15:14:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85cZFiA",
                                           "createdAt":  "2023-05-16T17:26:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tygore587",
                                           "body":  "We also started to experience this issue with other packages even locally. \r\n\r\nWe have some wrapper code around the azure service bus sdk. They are located in a .net standard project.\r\n\r\nThe workaround we found was to directly instantiate a class from the package that was not found. If we do this the problem disappears.\r\nBut we are not comfortable to use .net 7 with these kind of issues because they appeared out of nowhere. We never had a problem before even with .net 7 and .net 6 was stable for month on our prod system. \r\n\r\nJust scrolled through the issues and it looks like these problems are in general similar to #48199 ",
                                           "updatedAt":  "2023-05-17T07:02:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85q9E6w",
                                           "createdAt":  "2023-11-06T09:24:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "moellerm",
                                           "body":  "These problems could be related to the issue https://github.com/dotnet/runtime/issues/60144 if the exceptions occur after upgrading the dotnet runtime (for example by Windows Update or another service/installer/update) while the application/service is running.",
                                           "updatedAt":  "2023-11-06T09:24:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85rEogB",
                                           "createdAt":  "2023-11-06T20:24:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODL-QZw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "moellerm",
                                                                               "createdAt":  "2023-11-07T09:21:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tygore587",
                                           "body":  "\u003e These problems could be related to the issue [dotnet/runtime#60144](https://github.com/dotnet/runtime/issues/60144) if the exceptions occur after upgrading the dotnet runtime (for example by Windows Update or another service/installer/update) while the application/service is running.\r\n\r\nWe are building self containted packages, so this shouldn\u0027t be an issue. Also it worked like 99% of the time until it randomly stopped working at all.\r\nAt the moment we are still at .net 6 because this breaked our production environment like 3-4 times and some developers started to get the same issue randomly on their laptops.",
                                           "updatedAt":  "2023-11-06T20:24:31Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Could not load file or assembly \u0027Microsoft.AspNetCore.Diagnostics.Abstractions\u0027 with .net 7.0.5",
        "labels":  [
                       "feature-diagnostics",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/48360",
        "createdAt":  "2023-05-22T14:16:17Z",
        "number":  48360,
        "author":  "sxr1999",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCy5R5g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sandves",
                                            "createdAt":  "2023-09-27T20:13:57Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-29T17:44:24Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\n I have a scenario like this, there are many endpoints in my project, I use `app.UseHttpLogging()` middleware to log request and response, It works very well. But I have a special endpoint, when this endpoint return 200, it will not log request/response information. when this endpoint return 400 or any other statuscode, It will log the request/response information. \r\n\r\n### Describe the solution you\u0027d like\r\n\r\nI know I can custom middleware to achieve it, But is it possible that `app.UseHttpLogging()` will integrate this judgment condition in future versions? I also try :\r\n```\r\napp.UseWhen(\r\n        context =\u003e !(context.Request.Path.StartsWithSegments(\"/xxx\")\r\n                             \u0026\u0026 context.Response.StatusCode == 200),\r\n        builder =\u003e builder.UseHttpLogging()\r\n    );\r\n```\r\nBut when this endpoint return 400, it also will log anything.\r\n\r\n### Additional context\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXNU-CA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85c1T4I",
                                           "createdAt":  "2023-05-22T15:56:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC8NnxQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sxr1999",
                                                                               "createdAt":  "2023-05-23T06:41:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "UseWhen won\u0027t work for this because it\u0027s evaluated before the response is generated (the status code is always 200 by default).\r\n\r\nhttps://github.com/dotnet/aspnetcore/issues/39200 would address this.\r\n\r\n*edit* not quite, that issue covers making a decision on the way in, it can\u0027t check the response. Note that the initial logging of the request happens before the endpoint runs and would not be conditional on the response. We could have a conditional check about logging the response.",
                                           "updatedAt":  "2023-05-22T15:59:31Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Add a judgment condition in app.UseHttpLogging()",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/48604",
        "createdAt":  "2023-05-25T19:51:02Z",
        "number":  48604,
        "author":  "exyi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:07:16Z",
        "body":  "## Error\r\n\r\nWhen project name (i.e. assembly and namespace) contain a non-ascii character, the migrations cannot be applied from the running application (didn\u0027t try the CLI). The error is\r\n\r\n```\r\nfail: Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore.MigrationsEndPointMiddleware[3]\r\n      The context type \u0027\\u0160.Data.ApplicationDbContext, \\u0160, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\u0027 was not found in services. This usually means the context was not registered in services during startup. You probably want to call AddScoped\u003c\u003e() inside the UseServices(...) call in your application startup code.\r\n```\r\n\r\nThe DbContext is registered and the error doesn\u0027t appear when the project name is ASCII only.\r\n\r\n## How to reproduce\r\n\r\nCreate new web app from template called `Š`, switch to PostgreSQL (because the default Sqlite isn\u0027t applying migrations and magically works from start, I doubt the problem is with Npgsql) \r\n\r\n```\r\ndotnet new razor -n Š --auth Individual\r\ncd Š\r\ndotnet add package Npgsql.EntityFrameworkCore.PostgreSQL\r\n```\r\n\r\n* Change `options.UseSqlite(connectionString)` to `options.UseNpgsql(connectionString)` in Program.cs\r\n* Change connection string in appsettings.json to a PostgreSQL server\r\n* Navigate the website, attempt to login\r\n* That errors out, because migrations weren\u0027t applied, click \"Apply Migrations\" which also fails with \" An error occurred applying migrations, try applying them from the command line \" \r\n\r\nIf the project is called `S` instead of `Š`, it works as expected (login fails, but then, clicking Apply Migrations works). For more precise reproducibility, I have attached both versions: [S.tar.gz](https://github.com/dotnet/efcore/files/11568557/S.tar.gz), [Š.tar.gz](https://github.com/dotnet/efcore/files/11568558/S.tar.gz).\r\n\r\nThe only difference in Program.cs is the namespace, I didn\u0027t touch the other files:\r\n\r\n```\r\nexyi@NaN /tmp\u003e diff Š/Program.cs S/Program.cs\r\n3c3\r\n\u003c using Š.Data;\r\n---\r\n\u003e using S.Data;\r\n```\r\n\r\n### System and versions\r\n\r\nEF Core version: 7.0.3\r\nNpgsql version: 7.0.4\r\nTarget framework: net7.0\r\nOperating system: Linux (Arch)\r\nIDE: The Command Line Interface at al.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXj90Ew==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85d6LVn",
                                           "createdAt":  "2023-06-04T11:32:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "Tracked this down to a bug in looking up the context type in MigrationsEndPointMiddleware. See https://github.com/dotnet/aspnetcore/blob/c2488eead6ead7208f543d0a57104b5d167b93f9/src/Middleware/Diagnostics.EntityFrameworkCore/src/MigrationsEndPointMiddleware.cs#L92\r\n\r\nMoving to ASP.NET Core repo.",
                                           "updatedAt":  "2023-06-04T11:32:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85eJgI5",
                                           "createdAt":  "2023-06-06T22:33:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "amcasey",
                                           "body":  "Thanks, @ajcvickers!",
                                           "updatedAt":  "2023-06-06T22:33:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85ePZCP",
                                           "createdAt":  "2023-06-07T15:45:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mitchdenny",
                                           "body":  "@ajcvickers did you repro this? I wasn\u0027t able to repro the specific issue on Windows (@exyi reported this issue on Arch Linux which isn\u0027t in our support matrix from what I gather so some localization issue might be a factor).\r\n\r\n@exyi - can you repro this on one of our supported Linux distros?\r\n\r\nhttps://learn.microsoft.com/en-us/dotnet/core/install/linux#packages",
                                           "updatedAt":  "2023-06-07T15:46:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85ePaf0",
                                           "createdAt":  "2023-06-07T15:48:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mitchdenny",
                                           "body":  "Also ... try doing a form post to the `/ApplyDatabaseMigrations` endpoint passing in the type name from the error above. Substitute the `\\u....` code with the actual character in the form request.",
                                           "updatedAt":  "2023-06-07T15:49:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85eP3QT",
                                           "createdAt":  "2023-06-07T17:07:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "@mitchdenny Yes, it repros on Windows.",
                                           "updatedAt":  "2023-06-07T17:07:21Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Migrations cannot be applied when project name contains non ASCII character",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/48581",
        "createdAt":  "2023-06-02T11:23:12Z",
        "number":  48581,
        "author":  "jjanuszkiewicz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBH6yA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lvde0",
                                            "createdAt":  "2024-08-20T14:22:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Pikabanga",
                                            "createdAt":  "2025-01-14T15:44:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cookbr",
                                            "createdAt":  "2025-04-11T19:24:21Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-07-29T18:07:16Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWhen trying to configure the header propagation feature using the `HeaderPropagationServiceCollectionExtensions.AddHeaderPropagation(this IServiceCollection services)` (\r\n[link](https://github.com/dotnet/aspnetcore/blob/d919168952ac4da33be8532c6980547a783a7389/src/Middleware/HeaderPropagation/src/DependencyInjection/HeaderPropagationServiceCollectionExtensions.cs#LL20C6-L20C6)) method, there is no `HeaderPropagationOptions` instance registered, so the middleware doesn\u0027t capture any headers and header propagation won\u0027t work, even when header names are specified for a specific `HttpClient`, e.g.:\r\n\r\n    services.AddHeaderPropagation();\r\n    services.AddHttpClient\u003cFooClient\u003e().AddHeaderPropagation(o =\u003e o.Headers.Add(\"Authorization\"));\r\n    services.AddHttpClient\u003cBarClient\u003e().AddHeaderPropagation(o =\u003e o.Headers.Add(\"X-Another-Header\"));\r\n\r\nThis results in no headers being forwarded.\r\n\r\nInstead, this needs to be done:\r\n\r\n    services.AddHeaderPropagation(o =\u003e\r\n    {\r\n        o.Headers.Add(\"Authorization\");\r\n        o.Headers.Add(\"X-Another-Header\");\r\n    });\r\n    services.AddHttpClient\u003cFooClient\u003e().AddHeaderPropagation(o =\u003e o.Headers.Add(\"Authorization\"));\r\n    services.AddHttpClient\u003cBarClient\u003e().AddHeaderPropagation(o =\u003e o.Headers.Add(\"X-Another-Header\"));\r\n\r\nThis is especially problematic if different `HttpClient`s require forwarding different headers - the `services.AddHeaderPropagation` call needs to list all those headers, which is code duplication and leads to bugs.\r\n\r\nI propose to either:\r\n 1. Make `AddHeaderPropagation(this IServiceCollection services)` internal, as it\u0027s useless for users of this library. This way all headers still need to be listed explicitly in the `services.AddHeaderPropagation()` call, but at least the not working method is hidden.\r\n 2. Change `AddHeaderPropagation(Action\u003cHeaderPropagationMessageHandlerOptions\u003e)` so that it adds the configured headers to the registered `HeaderPropagationOptions` (and/or registers it if it\u0027s not yet registered).\r\n\r\nI can create a PR for either of these (I prefer option 2), but looking for some feedback first.\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n_No response_\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmmTIRg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85kIslJ",
                                           "createdAt":  "2023-08-16T05:50:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kavatari",
                                           "body":  "@jjanuszkiewicz Did you register the middleware?\r\n`app.UseHeaderPropagation()`\r\n\r\nsee: https://learn.microsoft.com/en-us/aspnet/core/fundamentals/http-requests?view=aspnetcore-6.0#header-propagation-middleware\r\n\r\nalso an example in this repo: https://github.com/dotnet/aspnetcore/blob/main/src/Middleware/HeaderPropagation/samples/HeaderPropagationSample/Startup.cs",
                                           "updatedAt":  "2023-08-16T05:55:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85kLqYm",
                                           "createdAt":  "2023-08-16T14:58:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jjanuszkiewicz",
                                           "body":  "Yes, I register the middleware.\r\n\r\nThe problem is that:\r\n - `HeaderPropagationMiddleware` takes an instance of `IOptions\u003cHeaderPropagationOptions\u003e` and [captures only the headers included in those options](https://github.com/dotnet/aspnetcore/blob/main/src/Middleware/HeaderPropagation/src/HeaderPropagationMiddleware.cs#L49)\r\n - but the parameterless `IServiceCollection.AddHeaderPropagation()` [method](https://github.com/dotnet/aspnetcore/blob/main/src/Middleware/HeaderPropagation/src/DependencyInjection/HeaderPropagationServiceCollectionExtensions.cs#L20C38-L20C58) doesn\u0027t register the options,\r\n - so even if options are later provided for a specific HttpClient via `IHttpClientBuilder.AddHeaderPropagation(Action\u003cHeaderPropagationMessageHandlerOptions\u003e configure)` it doesn\u0027t make the middleware capture any headers, because this method doesn\u0027t register or modify the registered instance of `HeaderPropagationOptions`.\r\n\r\nMy suggestion 2 would address that:\r\n\r\n\u003e Change AddHeaderPropagation(Action\u003cHeaderPropagationMessageHandlerOptions\u003e) so that it adds the configured headers to the registered HeaderPropagationOptions (and/or registers it if it\u0027s not yet registered).",
                                           "updatedAt":  "2023-08-16T15:00:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85kLr_B",
                                           "createdAt":  "2023-08-16T15:02:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jjanuszkiewicz",
                                           "body":  "Like I said, I can create a PR with proposed changes and hopefully also with some tests demonstrating the problem, but I\u0027d like to get some feedback first (e.g. if this is for some reason by design and the PR won\u0027t be considered for merging?)",
                                           "updatedAt":  "2023-08-16T15:02:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85kL3hX",
                                           "createdAt":  "2023-08-16T15:30:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "API changes require an [API proposal](https://github.com/dotnet/aspnetcore/issues/new?assignees=\u0026labels=api-suggestion\u0026projects=\u0026template=30_api_proposal.md\u0026title=) and review and number 1 is a non-starter because it\u0027s a binary breaking change.",
                                           "updatedAt":  "2023-08-16T15:30:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85vGWJr",
                                           "createdAt":  "2023-12-20T06:41:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOECZ0MQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Pikabanga",
                                                                               "createdAt":  "2025-01-14T15:52:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rmja",
                                           "body":  "I am seeing this as well. I was expecting `services.AddHttpClient\u003cFooClient\u003e().AddHeaderPropagation(o =\u003e o.Headers.Add(\"Authorization\"));` to automatically add `Authorization` to the set of headers being captured by the middleware.",
                                           "updatedAt":  "2023-12-20T06:41:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85vUZkT",
                                           "createdAt":  "2023-12-22T12:15:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jjanuszkiewicz",
                                           "body":  "If I have some spare time during holiday, I\u0027ll create a MR with tests showing the problem and maybe a possible solution (#2 from my original post). If time permits.",
                                           "updatedAt":  "2023-12-22T12:15:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86aZMhG",
                                           "createdAt":  "2025-01-14T15:45:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Pikabanga",
                                           "body":  "I fell for this too. This behavior to me is very unintuitive, and unflexible.",
                                           "updatedAt":  "2025-01-14T15:45:25Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "`AddHeaderPropagation()` without providing `Action\u003cHeaderPropagationOptions\u003e configureOptions` prevents middleware from working correctly",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/49181",
        "createdAt":  "2023-07-03T13:17:36Z",
        "number":  49181,
        "author":  "JamesNK",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-wMqA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "davidfowl",
                                            "createdAt":  "2023-07-05T01:39:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Porozhniakov",
                                            "createdAt":  "2025-02-04T13:37:25Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-29T18:27:16Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nThe short circuit feature only has extension methods for adding the required metadata to endpoints. Should there be an attribute? That would allow MVC actions and gRPC methods to support short circuiting.\r\n\r\nFor example,\r\n\r\n```cs\r\npublic class MonitoringController\r\n{\r\n    [ShortCircuit]\r\n    [HttpGet(\"/status\")]\r\n    public ActionResult GetStatus()\r\n    {\r\n        // ...\r\n    }\r\n}\r\n```\r\n\r\nBrought up in YouTube video: https://youtu.be/rXdwX2X4-gw?t=422\r\n\r\nNote that a short-circuited MVC action would still execute filters, and a gRPC method would still execute interceptors.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\n* Change internal `ShortCircuitMetadata` to an interface. (optional)\r\n* Change current metadata to an attribute and make public (implement the interface if present)\r\n\r\n### Additional context\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoIxbxA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85gdStb",
                                           "createdAt":  "2023-07-03T13:41:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mitchdenny",
                                           "body":  "Given the intention of this wouldn\u0027t it be better to just encourage people to use the minimal version of the API?",
                                           "updatedAt":  "2023-07-03T13:41:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85gdX0i",
                                           "createdAt":  "2023-07-03T13:47:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFL-BA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pinkfloydx33",
                                                                               "createdAt":  "2023-07-03T23:44:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "halter73",
                                                                               "createdAt":  "2024-01-04T23:54:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Porozhniakov",
                                                                               "createdAt":  "2025-02-04T13:37:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "Kahbazi",
                                           "body":  "+1 On adding `ShortCircuitAttribute`. As long as the metadata is internal, frameworks like YARP can not add have short circuited routes.",
                                           "updatedAt":  "2023-07-03T13:47:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85gtAxh",
                                           "createdAt":  "2023-07-05T20:00:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "\u003e Given the intention of this wouldn\u0027t it be better to just encourage people to use the minimal version of the API?\r\n\r\nControllers (and proxies 😆) are a lot more expensive than minimal, it\u0027s unclear how much relative cost an MVC endpoint would save with this attribute, and if making it available would be misleading. That said, the inconsistency is also confusing, they may legitimately have an expensive middleware to skip.",
                                           "updatedAt":  "2023-07-05T20:00:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85th17Y",
                                           "createdAt":  "2023-12-03T20:17:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fvoronin",
                                           "body":  " I\u0027m interested in doing this. Can I take a look and submit a PR on that issue?",
                                           "updatedAt":  "2023-12-03T20:17:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85uOhXk",
                                           "createdAt":  "2023-12-11T04:19:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \"champion\" this change in the meeting, and they understand the impact and design of the change.",
                                           "updatedAt":  "2023-12-11T04:19:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85v7t1X",
                                           "createdAt":  "2024-01-05T00:00:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODRUFSA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "WeihanLi",
                                                                               "createdAt":  "2024-01-05T01:12:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "halter73",
                                           "body":  "API Review Notes:\r\n\r\n- It\u0027s a little surprising there was no public metadata type to begin with.\r\n- It does seem like it could be useful for non-minimal endpoints.\r\n\r\nAPI Approved!\r\n\r\n```diff\r\nnamespace Microsoft.AspNetCore.Routing.ShortCircuit;\r\n\r\n+ public sealed class ShortCircuitAttribute : Attribute, IShortCircuitMetadata\r\n+ {\r\n+    public ShortCircuitAttribute();\r\n+    public ShortCircuitAttribute(int statusCode);\r\n+\r\n+    public int? StatusCode { get; }\r\n+ }\r\n\r\n+ public interface IShortCircuitMetadata\r\n+ {\r\n+    int? StatusCode { get; }\r\n+ }\r\n```",
                                           "updatedAt":  "2024-01-05T00:01:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85wNPh6",
                                           "createdAt":  "2024-01-09T07:09:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danirzv",
                                           "body":  "If anyone else is not working on it, im interested to work it out, may i send a PR?",
                                           "updatedAt":  "2024-01-09T07:09:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85wNRoY",
                                           "createdAt":  "2024-01-09T07:19:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fvoronin",
                                           "body":  "@danirzv, PR already exists https://github.com/dotnet/aspnetcore/pull/52571 ",
                                           "updatedAt":  "2024-01-09T07:19:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde855xAQ-",
                                           "createdAt":  "2024-04-08T14:22:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fvoronin",
                                           "body":  "\u003e API Approved!\r\n\u003e \r\n\u003e ```diff\r\n\u003e namespace Microsoft.AspNetCore.Routing.ShortCircuit;\r\n\u003e \r\n\u003e + public sealed class ShortCircuitAttribute : Attribute, IShortCircuitMetadata\r\n\u003e + {\r\n\u003e +    public ShortCircuitAttribute();\r\n\u003e +    public ShortCircuitAttribute(int statusCode);\r\n\u003e +\r\n\u003e +    public int? StatusCode { get; }\r\n\u003e + }\r\n\u003e \r\n\u003e + public interface IShortCircuitMetadata\r\n\u003e + {\r\n\u003e +    int? StatusCode { get; }\r\n\u003e + }\r\n\u003e ```\r\n\r\n@halter73, sorry for long pause.\r\n\r\nIt seems to me that there are some issues with the ambiguity of attribute behaviour  when there is a public constructor with parameter\r\n\r\n```cs\r\npublic ShortCircuitAttribute(int statusCode);\r\n```\r\n\r\nFor example, how should an application behave, with a controller like this:\r\n```cs\r\npublic class TestController : ControllerBase\r\n{\r\n    [ShortCircuit(500)]\r\n    public ActionResult Index()\r\n    {\r\n        if (foo)\r\n            return new UnauthorizedResult();\r\n\r\n        if (bar)\r\n            return new BadRequestResult();\r\n\r\n        return new OkResult();\r\n    }\r\n}\r\n```\r\nThe `statusCode` specified in the `ShortCircuit` attribute does not match any of those returned from the method.\r\n\r\nWould it still be better to make the constructor with the `statusCode` parameter as `internal`?\r\n\r\n ```diff\r\npublic sealed class ShortCircuitAttribute : Attribute, IShortCircuitMetadata\r\n{\r\n   public ShortCircuitAttribute();\r\n-    public ShortCircuitAttribute(int statusCode);\r\n+    internal ShortCircuitAttribute(int statusCode);\r\n\r\n   public int? StatusCode { get; }\r\n}\r\n```\r\n\r\nP.S. I\u0027m work on it #52571",
                                           "updatedAt":  "2024-04-08T14:22:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86c__kh",
                                           "createdAt":  "2025-02-04T13:47:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Porozhniakov",
                                           "body":  "Hi!\nI think this feature is hot and I\u0027m looking forward to it.\nI see that the PR with the implementation hasn\u0027t been merged into the main branch.\nCan I make a new PR to finish the work?",
                                           "updatedAt":  "2025-02-04T13:47:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86gjFvE",
                                           "createdAt":  "2025-03-03T07:59:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Porozhniakov",
                                           "body":  "Hi @JamesNK \nI notice this issue hasn\u0027t had activity for a while. Do you still need someone to make a new PR?\nI\u0027ve already created a [design proposal](https://github.com/dotnet/aspnetcore/issues/60235) and I can work on implementing it.\nThanks.",
                                           "updatedAt":  "2025-03-03T07:59:15Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Short circuit attribute",
        "labels":  [
                       "api-approved",
                       "area-middleware",
                       "help candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/49195",
        "createdAt":  "2023-07-04T03:18:33Z",
        "number":  49195,
        "author":  "JamesNK",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCxG7HQ==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "mitchdenny",
                                            "createdAt":  "2023-07-05T01:38:43Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-29T17:44:25Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nThe `DeveloperExceptionPageMiddleware` catches errors and displays a friendly error page. It can optionally invoke `IProblemDetailsService` for its response. When `IProblemDetailsService` is called, `IExceptionHandlerFeature` is set on the `HttpContext`. That change happened earlier this year: https://github.com/dotnet/aspnetcore/issues/47060\r\n\r\nI think we should consider changing the developer exception page middleware again to always set `IExceptionHandlerFeature` if the middleware doesn\u0027t rethrow the error. The reason to do this is there is no way for earlier middleware or `HttpResponse.OnComplete` callbacks to discover what exception was thrown once caught by developer exception middleware.\r\n\r\nI noticed this problem when writing some middleware that cares about the exception and is injected by an `IStartupFilter`:\r\n\r\n* [Folder](https://github.com/JamesNK/MeterFactoryDemo/tree/main/src/AspNetCoreEnricher)\r\n* [StartupFilter](https://github.com/JamesNK/MeterFactoryDemo/blob/main/src/AspNetCoreEnricher/Internal/EnricherStartupFilter.cs) - note that it adds the middleware to the start of the pipeline (start and end are the only options, and the end is rarely really a good choice because it will be after terminal endpoint execution). Adding middleware to the start is before [UseDeveloperExceptionPage is automatically added by WebApplicationBuilder](https://github.com/dotnet/aspnetcore/blob/9da617793b3b387fd16bbc3e0ec06337569ca6ac/src/DefaultBuilder/src/WebApplicationBuilder.cs#L335-L338).\r\n* [Middleware](https://github.com/JamesNK/MeterFactoryDemo/blob/main/src/AspNetCoreEnricher/Internal/RunEnrichersMiddleware.cs) - The middleware wants to ensure the unhandled exception is always available in `HttpResponse.OnComplete` callback. Unfortunately, if the developer exception page is present, the exception is always caught and thrown away.\t\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nAlways set `IExceptionHandlerFeature` in developer exception middleware so middleware earlier in the pipeline and `HttpResponse.OnComplete` can access information about the exception.\r\n\r\n### Additional context\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Always set IExceptionHandlerFeature from UseDeveloperExceptionPage",
        "labels":  [
                       "area-middleware",
                       "help candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/49379",
        "createdAt":  "2023-07-13T06:39:10Z",
        "number":  49379,
        "author":  "xiaoxiaotank",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:27:17Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nPlease check the code below（located 130~134 lines of source code）：\r\n\r\n```csharp\r\ninternal sealed partial class RateLimitingMiddleware\r\n{\r\n  private async Task InvokeInternal(HttpContext context, EnableRateLimitingAttribute? enableRateLimitingAttribute)\r\n  {\r\n     policy = enableRateLimitingAttribute?.Policy;\r\n     if (policy is not null)\r\n     {\r\n        thisRequestOnRejected = policy.OnRejected;\r\n     }\r\n  }\r\n}\r\n```\r\n\r\nI think we should check if `Policy.OnReject` is null here, if not null, then use it, else use `OnRejected` from the `Options` if available\r\n\r\n### Expected Behavior\r\n\r\n```csharp\r\ninternal sealed partial class RateLimitingMiddleware\r\n{\r\n  private async Task InvokeInternal(HttpContext context, EnableRateLimitingAttribute? enableRateLimitingAttribute)\r\n  {\r\n     policy = enableRateLimitingAttribute?.Policy;\r\n     if (policy?.OnRejected is not null)\r\n     {\r\n        thisRequestOnRejected = policy.OnRejected;\r\n     }\r\n  }\r\n}\r\n```\r\n\r\n### Steps To Reproduce\r\n\r\n```csharp\r\n public class MyRateLimiterPolicy : IRateLimiterPolicy\u003cstring\u003e\r\n  {\r\n      public MyRateLimiterPolicy()\r\n      {\r\n      }\r\n\r\n      // keep it null\r\n      public Func\u003cOnRejectedContext, CancellationToken, ValueTask\u003e? OnRejected { get; }\r\n\r\n      public RateLimitPartition\u003cstring\u003e GetPartition(HttpContext httpContext)\r\n      {\r\n          return RateLimitPartition.GetFixedWindowLimiter(\"anything\", _ =\u003e new FixedWindowRateLimiterOptions\r\n          {\r\n              PermitLimit = 3,\r\n              Window = TimeSpan.FromSeconds(60),\r\n              QueueProcessingOrder = QueueProcessingOrder.OldestFirst,\r\n              QueueLimit = 0\r\n          });\r\n      }\r\n  }\r\n\r\nbuilder.Services.AddRateLimiter(limiterOptions =\u003e\r\n{\r\n  limiterOptions.OnRejected = (context, cancellationToken) =\u003e\r\n    {\r\n        return ValueTask.CompletedTask;\r\n    };\r\n}\r\n\r\napp.MapGet(\"LimitTest\", async () =\u003e\r\n{\r\n    return Results.Ok(\"Limiter\");\r\n}).RequireRateLimiting(new MyRateLimiterPolicy());\r\n```\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n.NET 7, 8\r\n\r\n### Anything else?\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYWIrPg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85hYW-z",
                                           "createdAt":  "2023-07-13T08:12:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mitchdenny",
                                           "body":  "Can you provide a bit more detail about your usage scenarios (why you want this fallback behavior?).",
                                           "updatedAt":  "2023-07-13T08:12:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85hYXKE",
                                           "createdAt":  "2023-07-13T08:13:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Hi @xiaoxiaotank. We have added the \"Needs: Author Feedback\" label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
                                           "updatedAt":  "2023-07-13T08:13:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85hYis-",
                                           "createdAt":  "2023-07-13T08:45:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xiaoxiaotank",
                                           "body":  "\u003e Can you provide a bit more detail about your usage scenarios (why you want this fallback behavior?).\r\n\r\nBy using `AddRateLimiter`, you can register rate limiting service. By using `RateLimiterOptions.OnRejected`, you can set the global default callback logic on rejected. When `OnRejected` is not specified in the registered rate limiting policy, `RateLimiterOptions.OnRejected` will be executed. This is because the source code comment states, \"Use custom policy OnRejected if available, else use OnRejected from the Options if available.\r\n\r\nPlease refer to the following example code, which should execute `RateLimiterOptions. OnRejected` after rate limiting rejection, but it did not actually execute:\r\n```csharp\r\n  public class MyRateLimiterPolicy : IRateLimiterPolicy\u003cstring\u003e\r\n  {\r\n      public MyRateLimiterPolicy()\r\n      {\r\n      }\r\n\r\n      // keep it null\r\n      public Func\u003cOnRejectedContext, CancellationToken, ValueTask\u003e? OnRejected { get; }\r\n\r\n      public RateLimitPartition\u003cstring\u003e GetPartition(HttpContext httpContext)\r\n      {\r\n          return RateLimitPartition.GetFixedWindowLimiter(\"anything\", _ =\u003e new FixedWindowRateLimiterOptions\r\n          {\r\n              PermitLimit = 3,\r\n              Window = TimeSpan.FromSeconds(60),\r\n              QueueProcessingOrder = QueueProcessingOrder.OldestFirst,\r\n              QueueLimit = 0\r\n          });\r\n      }\r\n  }\r\n\r\nbuilder.Services.AddRateLimiter(limiterOptions =\u003e\r\n{\r\n  limiterOptions.OnRejected = (context, cancellationToken) =\u003e\r\n    {\r\n        return ValueTask.CompletedTask;\r\n    };\r\n}\r\n\r\napp.MapGet(\"LimitTest\", async () =\u003e\r\n{\r\n    return Results.Ok(\"Limiter\");\r\n}).RequireRateLimiting(new MyRateLimiterPolicy());\r\n```\r\n\r\nIf possible, I hope you can take a look at [this](https://github.com/dotnet/aspnetcore/blob/main/src/Middleware/RateLimiting/src/RateLimitingMiddleware.cs#L131), Although `policy` is not null, but `policy.OnRejected` may be null. in addition, on line 137, there is a non empty judgment",
                                           "updatedAt":  "2023-07-13T08:45:23Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Rate limiting middleware OnReject assign bug",
        "labels":  [
                       "Needs: Attention :wave:",
                       "feature-rate-limit",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/49515",
        "createdAt":  "2023-07-19T12:21:48Z",
        "number":  49515,
        "author":  "marinasundstrom",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC2_q7w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "boukenka",
                                            "createdAt":  "2024-04-04T09:03:15Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-02-05T16:27:47Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nThese are observations from implementing auth with Server-side rendered pages (SSR) in Blazor Preview 6 - using Razor components instead of MVC Razor pages.\r\n\r\nCookie auth just works, that is great. But there are some issues:\r\n\r\nIssues:\r\n\r\n- ``AuthorizeRouteView`` doesn\u0027t work with the router. The ``NotAuthorized`` fragment does not get rendered. Instead I get redirected to a layout-less page saying: ``Error: 401 Unauthorized``.\r\n\r\n- The ``LoginDisplay`` doesn\u0027t re-ender when logged in using form. Redirecting to another page would help here.\r\n\r\nQuestions:\r\n- How do I redirect to another URL from a component that server render? ``NavigationManager`` of course doesn\u0027t work here.\r\n\r\nMy github repo (branch): https://github.com/marinasundstrom/Blazor8Test/tree/auth\r\n\r\n### Expected Behavior\r\n\r\nWhen unauthorized and entering page that requires authorization, \r\nI expect the ``NotAuthorized`` fragment to be rendered with the ``MainLayout``.\r\n\r\n### Steps To Reproduce\r\n\r\nhttps://github.com/marinasundstrom/Blazor8Test/tree/auth\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0.100-preview.6.23330.14\r\n\r\n### Anything else?\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaufw9A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85h4oho",
                                           "createdAt":  "2023-07-19T14:49:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "\u003e How do I redirect to another URL from a component that server render? NavigationManager of course doesn\u0027t work here.\r\n\r\nNavigation manager should work (not sure if it does in Preview6). There might be some conflicts with the SSR navigation manager overriding the static renderer one.",
                                           "updatedAt":  "2023-07-19T14:49:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85h4qst",
                                           "createdAt":  "2023-07-19T14:54:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marinasundstrom",
                                           "body":  "@javiercn OK. Yes. I\u0027m on Preview 6 and it uses the ``RemoteNavigationManager`` even for server-side rendered page. And when invoking ``NavigateTo`` on the server, an exception is thrown.\r\n\r\nMy workaround was to build my own \"ServerNavigationManager\" (Not inheriting from NavigationManager) which modifies the ``HttpContext.Response`` to redirect to the specified location.",
                                           "updatedAt":  "2023-07-19T14:54:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85h47v9",
                                           "createdAt":  "2023-07-19T15:33:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "@marinasundstrom where are you seeing the 401 from the authorizeview?\r\n\r\nOn SSR, the auth middleware should be handling the auth for the page.",
                                           "updatedAt":  "2023-07-19T15:33:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85h48m-",
                                           "createdAt":  "2023-07-19T15:36:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marinasundstrom",
                                           "body":  "@javiercn Here: https://blazor8app.graypebble-0c46426e.westus2.azurecontainerapps.io/auth\r\n\r\n\"/auth\" is a page.\r\n\r\nUnless I have missed something in my code.\r\n\r\nhttps://github.com/marinasundstrom/Blazor8Test",
                                           "updatedAt":  "2023-07-19T15:36:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85kmuow",
                                           "createdAt":  "2023-08-22T09:58:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marinasundstrom",
                                           "body":  "I have learned that the component model doesn\u0027t handle the cases the same way with SSR as with Client. That makes sense, since it is about requests.\r\n\r\nBut the symptoms are still here in RC1, somewhere between component and middleware.\r\n\r\nNot even ``app.UseStatusCodePagesWithRedirects(\"/error/{0}\");`` catches it as with other errors.\r\n\r\nStill just a page with the text: ``Error: 401``\r\n\r\nComponent file: https://github.com/marinasundstrom/Blazor8Test/blob/auth/src/Server/Pages/Auth.razor",
                                           "updatedAt":  "2023-08-22T10:02:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85oroff",
                                           "createdAt":  "2023-10-10T21:13:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "To learn more about what this message means, what to expect next, and how this issue will be handled you can read our [Triage Process document](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).\nWe\u0027re moving this issue to the .NET 9 Planning milestone for future evaluation / consideration. Because it\u0027s not immediately obvious what is causing this behavior, we would like to keep this around to collect more feedback, which can later help us determine how to handle this. We will re-evaluate this issue, during our next planning meeting(s).\nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact work.",
                                           "updatedAt":  "2023-10-10T21:13:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85q5_D0",
                                           "createdAt":  "2023-11-05T00:02:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "WebApplication\u0027s automatic UseAuthorization() insertion happens before the user-configured UseStatusCodePagesWithRedirecte(). By adding UseAuthorization() explicitly, we can ensure UseStatusCodePagesWithRedirecte() \"sees\" unauthorized requests.\r\n\r\nhttps://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/middleware?view=aspnetcore-8.0\r\n\r\nI submitted a PR to your github repo to fix the issue. https://github.com/marinasundstrom/Blazor8Test/pull/3\r\n\r\nI don\u0027t think this is a Blazor specific issue, but I do wonder if WebApplication could be a little smarter and insert UserAuthorization after UseStatusCodePages if it\u0027s being used, because this seems really easy to mess up. I don\u0027t want to make the automatic middleware initialization much more complicated than it already is though.",
                                           "updatedAt":  "2023-11-05T00:02:44Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "WebApplication.UseStatusCodePages() cannot handle unauthorized requests without explicit UseAuthorization() call",
        "labels":  [
                       "area-hosting",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/49936",
        "createdAt":  "2023-08-08T19:55:24Z",
        "number":  49936,
        "author":  "captainsafia",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-13T01:27:44Z",
        "body":  "As part of the recent work to add better form support for minimal APIs, we\u0027ve needed to add logic in the endpoint routing middleware to ensure that certain metadata is able to configure HTTP features before other middlewares run. The routing middleware is convenient here because it is the earliest point wherein we can set these features before other middleware can run.\r\n\r\nWhile form support and anti-forgery are strong motivating examples, the general model of being able to run \"filters\" during routing is helpful enough that we should consider provide a more generic API for this.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOa_IQ4g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85r8hDi",
                                           "createdAt":  "2023-11-14T19:13:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 9 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-11-14T19:13:38Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Add support for running actions during routing",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/50391",
        "createdAt":  "2023-08-19T22:33:51Z",
        "number":  50391,
        "author":  "closte",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:07:17Z",
        "body":  "I just want to know if the following use cases are possible or will be possible in the near future.\r\n\r\nLet\u0027s say we have rate limiting per IP address.\r\n\r\n\u003e Use case 1: Is it possible to whitelist the IP/Partition key\r\n\u003e Use case 2: Is it possible to change the rate limit value per IP/Partition key\r\n\r\n\r\nReal-life use cases:\r\n\r\n\u003e I want to whitelist an IP address\r\n\u003e I want to increase the rate limit for specific IP address or virtual host",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZSbj6A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85lJuPZ",
                                           "createdAt":  "2023-08-24T19:26:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Are you asking generic questions regarding machine configuration? Or your question related to .NET product? ",
                                           "updatedAt":  "2023-08-24T19:26:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85lJuPd",
                                           "createdAt":  "2023-08-24T22:05:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "closte",
                                           "body":  "\u003e Are you asking generic questions regarding machine configuration? Or your question related to .NET product?\r\n\r\nNope.\r\n\u003e.NET has a built-in rate-limiting feature, so how do we whitelist some Partition keys or change the limit value for one or more Partition keys?\r\n\r\nExample:\r\n\r\n1. rate limit 60 concurrent connections per IP\r\n2. whitelist 1.1.1.1\r\n3. Increase the limit to 100 connections for 2.2.2.2 and 3.3.3.3\r\n",
                                           "updatedAt":  "2023-08-24T22:05:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85lJuPg",
                                           "createdAt":  "2023-08-24T22:18:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI just want to know if the following use cases are possible or will be possible in the near future.\r\n\r\nLet\u0027s say we have rate limiting per IP address.\r\n\r\n\u003e Use case 1: Is it possible to whitelist the IP/Partition key\r\n\u003e Use case 2: Is it possible to change the rate limit value per IP/Partition key\r\n\r\n\r\nReal-life use cases:\r\n\r\n\u003e I want to whitelist an IP address\r\n\u003e I want to increase the rate limit for specific IP address or virtual host\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecloste\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`question`, `area-System.Net.Http`, `untriaged`, `Team:Libraries`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-24T22:18:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85lJuPj",
                                           "createdAt":  "2023-08-25T05:35:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "This feels more like a question for ASP.NET folks, since the system libraries don\u0027t implement any rate limiting AFAIK.\r\n\r\nEdit: I may have been wrong, I found this blog post which talks about it: https://devblogs.microsoft.com/dotnet/announcing-rate-limiting-for-dotnet/\r\n\r\nWhile the scenario you describe is not directly suppoted, you can probably inherit from `PartitionedRateLimiter\u003cint\u003e` and implement your custom logic there.\r\n\r\n",
                                           "updatedAt":  "2023-08-25T05:39:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85lJuPo",
                                           "createdAt":  "2023-08-25T15:31:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@BrennanConroy do you have any insight here?",
                                           "updatedAt":  "2023-08-25T15:31:30Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Rate limiting / whitelist / change value per Partition key",
        "labels":  [
                       "question",
                       "feature-rate-limit",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/50605",
        "createdAt":  "2023-09-09T12:50:27Z",
        "number":  50605,
        "author":  null,
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T17:44:25Z",
        "body":  "Currently, the default value for HTTP Strict Transport Security (HSTS) max-age is set to 30 days.\r\nhttps://github.com/dotnet/aspnetcore/blob/410efd482f494d1ab05ce25b932b5788699c2308/src/Middleware/HttpsPolicy/src/HstsOptions.cs#L18\r\n\r\nAccording to [hstspreload.org](https://hstspreload.org/), it is recommended that the minimum value should be at least 1 year, with a preferable value of 2 years.\r\n\r\n\r\nThe current default value may not align with modern security best practices, and it might be beneficial to reconsider it.\r\n\r\n\r\n\r\nI propose that we reconsider the default value and update it to a more secure and recommended value, such as 1 year.\r\n\r\nAlso, setting a longer default max-age value will avoid additional configuration, as it is very common to reconfigure this value as follows:\r\n\r\n```cs\r\nbuilder.Services.AddHsts(options =\u003e\r\n{\r\n    options.MaxAge = TimeSpan.FromDays(365); // Common practice to set it to 1 year or more\r\n});\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZzW5LA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85nKAce",
                                           "createdAt":  "2023-09-22T01:49:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "@blowdart What do you think?",
                                           "updatedAt":  "2023-09-22T01:49:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85nKBnU",
                                           "createdAt":  "2023-09-22T01:54:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "We do, or did, document that setting as needing adjusting for production. The default value was a compromise between production and \"oh no I locked myself out of dev and local host\". \n\nIf those code comments are there any more, put them back. Using a production value in dev can end in sadness.",
                                           "updatedAt":  "2023-09-22T01:54:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85nKH0e",
                                           "createdAt":  "2023-09-22T02:09:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "I don\u0027t see any comments in the docs about it. BTW I\u0027m not sure I understand why 30 days is any better than one year for that situation... seems just as painful if you accidentally get hit by it when you weren\u0027t meaning to?\r\n\r\nIf one were to find themselves in this situation, reducing the max-age and clearing their browser\u0027s HSTS settings (globally or for the specific site) would be the fix right?",
                                           "updatedAt":  "2023-09-22T02:09:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85nNbks",
                                           "createdAt":  "2023-09-22T15:02:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "Yea. But when we added it the instructions for clearing the HSTS entry for a site were hard to find.\r\n\r\nHeck they\u0027re still hard to find, especially if you don\u0027t know what HSTS is.",
                                           "updatedAt":  "2023-09-22T15:02:32Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Reconsider default HSTS max-age value ",
        "labels":  [
                       "Security",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/50643",
        "createdAt":  "2023-09-11T20:20:36Z",
        "number":  50643,
        "author":  "manandre",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODLWtRA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexandrehtrb",
                                            "createdAt":  "2023-09-12T17:00:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ptasev",
                                            "createdAt":  "2023-09-12T18:19:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rducom",
                                            "createdAt":  "2023-09-13T09:48:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GerardSmit",
                                            "createdAt":  "2023-09-23T22:56:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Agagamand",
                                            "createdAt":  "2023-11-16T16:27:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PanSzelescik",
                                            "createdAt":  "2023-11-28T15:34:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OronDF343",
                                            "createdAt":  "2023-11-30T15:35:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hui1601",
                                            "createdAt":  "2023-12-10T05:54:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "God-damnit-all",
                                            "createdAt":  "2024-01-16T18:57:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "elubarsky-hs",
                                            "createdAt":  "2024-01-17T03:01:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "iamcarbon",
                                            "createdAt":  "2024-02-09T21:24:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "arkadiuszwojcik",
                                            "createdAt":  "2024-02-13T12:03:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "georg-jung",
                                            "createdAt":  "2024-03-15T11:06:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YohanSciubukgian",
                                            "createdAt":  "2024-03-27T05:08:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "matthewteeter",
                                            "createdAt":  "2024-03-30T18:57:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "carlreinke",
                                            "createdAt":  "2024-04-01T21:40:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "abraluve",
                                            "createdAt":  "2024-04-19T09:25:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zxcq544",
                                            "createdAt":  "2024-05-02T17:47:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "airbreather",
                                            "createdAt":  "2024-05-30T11:27:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "QuinnDamerell",
                                            "createdAt":  "2024-05-30T23:52:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "slang25",
                                            "createdAt":  "2024-07-12T11:26:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bollhals",
                                            "createdAt":  "2024-08-26T12:03:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "campersau",
                                            "createdAt":  "2024-09-06T11:22:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Daniel-Svensson",
                                            "createdAt":  "2024-09-07T17:53:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kpietraszko",
                                            "createdAt":  "2024-09-13T23:19:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "issue-dispenser",
                                            "createdAt":  "2024-09-23T06:57:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "krassx",
                                            "createdAt":  "2024-11-05T05:18:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2024-12-09T17:50:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "exyi",
                                            "createdAt":  "2024-12-20T21:45:58Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "ramonsmits",
                                            "createdAt":  "2025-01-29T09:59:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Atulin",
                                            "createdAt":  "2025-04-28T18:35:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KeterSCP",
                                            "createdAt":  "2025-06-11T07:57:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MahdiPixel",
                                            "createdAt":  "2025-07-29T10:01:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Vlaaaaaaad",
                                            "createdAt":  "2025-08-12T20:52:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jmbryan4",
                                            "createdAt":  "2025-08-14T02:18:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KyMback",
                                            "createdAt":  "2025-08-15T10:03:38Z"
                                        }
                                    ],
                          "totalCount":  36
                      },
        "updatedAt":  "2025-08-10T08:55:48Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\n_No response_\n\n### Describe the solution you\u0027d like\n\n[Zstandard](https://zstd.net), or `zstd`, is a data compression mechanism described in RFC8878. It is a fast lossless compression algorithm, targeting real-time compression scenarios at zlib-level and better compression ratios. The \"zstd\" token was added as an IANA-registered Content-Encoding token as per https://datatracker.ietf.org/doc/html/rfc8878#name-content-encoding. \r\n\r\nThe Facebook/Zstd team has published some of their [research](https://raw.githubusercontent.com/facebook/zstd/master/doc/images/DCspeed5.png) on compression level vs. CPU vs. compression ratio.\r\n## Current support\r\n- Chrome: [Planned](https://chromestatus.com/feature/6186023867908096) in version 118\r\n- Safari: Not planned but with [positive position](https://github.com/WebKit/standards-positions/issues/168)\r\n- Mozilla: Not planned with [defer position](https://github.com/mozilla/standards-positions/issues/105)\r\n- Curl: [Released](https://github.com/curl/curl/pull/5453) since version 7.72.0\r\n## Features request\r\n### Request compression\r\n- Support `zstd` as the token from the `Content-Encoding` header in the request.\r\n- Decompress with Zstandard the request content.\r\n### Response compression\r\n- Support `zstd` as a token from the `Accept-Encoding` header in the request.\r\n- Compress with Zstandard when the `zstd` token is elected as response compression, and so stored in the `Content-Encoding` header in the response.\r\n## Zstandard implementation\r\n- Native: https://github.com/facebook/zstd\r\n- .NET Runtime: https://github.com/dotnet/runtime/issues/59591\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvRg7Hw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85mRNuq",
                                           "createdAt":  "2023-09-12T14:02:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-09-12T14:02:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85zboak",
                                           "createdAt":  "2024-02-09T21:24:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iamcarbon",
                                           "body":  "Chrome has committed to shipping Zstd Content-Encoding in v123, and Safari and Firefox have both indicated a positive position toward the proposal.",
                                           "updatedAt":  "2024-02-09T21:26:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde854hFyd",
                                           "createdAt":  "2024-03-27T05:03:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcTnEw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "QINGCHARLES",
                                                                               "createdAt":  "2024-04-01T18:15:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "OlsonDev",
                                                                               "createdAt":  "2024-05-17T01:17:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "fhmcn",
                                                                               "createdAt":  "2024-06-26T13:06:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Agagamand",
                                                                               "createdAt":  "2024-07-28T07:43:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "MahdiPixel",
                                                                               "createdAt":  "2025-07-29T10:01:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "YohanSciubukgian",
                                           "body":  "Chrome 123 release support zstd \r\n- https://developer.chrome.com/blog/new-in-chrome-123#more\r\n- https://github.com/facebook/zstd/releases/tag/v1.5.6\r\n\r\nCould you consider it for .NET 9 ?",
                                           "updatedAt":  "2024-03-27T05:10:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86EnTym",
                                           "createdAt":  "2024-07-12T06:35:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcTnJg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "manandre",
                                                                               "createdAt":  "2024-07-12T06:38:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "slang25",
                                                                               "createdAt":  "2024-07-12T11:26:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Agagamand",
                                                                               "createdAt":  "2024-07-28T07:43:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MahdiPixel",
                                                                               "createdAt":  "2025-07-29T10:01:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "rgueldenpfennig",
                                           "body":  "\u003e Chrome 123 release support zstd\r\n\u003e \r\n\u003e     * https://developer.chrome.com/blog/new-in-chrome-123#more\r\n\u003e \r\n\u003e     * https://github.com/facebook/zstd/releases/tag/v1.5.6\r\n\u003e \r\n\u003e \r\n\u003e Could you consider it for .NET 9 ?\r\n\r\nSince the 126 release Mozilla Firefox also supports zstd compression: https://www.mozilla.org/en-US/firefox/126.0/releasenotes/",
                                           "updatedAt":  "2024-07-12T06:35:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86FAEOm",
                                           "createdAt":  "2024-07-16T16:48:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcTnKA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Daniel-Svensson",
                                                                               "createdAt":  "2024-09-07T17:54:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yuqian5",
                                                                               "createdAt":  "2025-04-04T04:44:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MahdiPixel",
                                                                               "createdAt":  "2025-07-29T10:01:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "rgueldenpfennig",
                                           "body":  "In case anyone wants to implement zstd compression support in your ASP.NET Core pipeline, I just merged a [pull request](https://github.com/rgueldenpfennig/Squidlr/pull/6/files) in my side project by utilizing the OSS [ZstdSharp](https://github.com/oleg-st/ZstdSharp) library. It\u0027s a suitable way until the .NET team releases an own implementation.\r\n\r\nWorks splendid on major browsers.",
                                           "updatedAt":  "2024-07-16T16:49:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86FJBTz",
                                           "createdAt":  "2024-07-17T16:36:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcTnig==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "rgueldenpfennig",
                                                                               "createdAt":  "2024-07-18T03:13:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "MahdiPixel",
                                                                               "createdAt":  "2025-07-29T10:02:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "QuinnDamerell",
                                           "body":  "@rgueldenpfennig very nice work!",
                                           "updatedAt":  "2024-07-17T16:36:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde869GDsf",
                                           "createdAt":  "2025-08-10T08:55:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Atulin",
                                           "body":  "Bumping this, since we got a whole new `.MapStaticAssets()` that\u0027s impossible to extend with custom compression, and doesn\u0027t support ZStandard out of the box.",
                                           "updatedAt":  "2025-08-10T08:55:48Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Support zstd Content-Encoding",
        "labels":  [
                       "blocked",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/51353",
        "createdAt":  "2023-10-13T14:34:57Z",
        "number":  51353,
        "author":  "DamianEdwards",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCzRHJA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ilmax",
                                            "createdAt":  "2023-10-13T15:34:33Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-29T18:07:17Z",
        "body":  "We should consider adding a project template that makes it easy to get started building an API Gateway / Reverse Proxy using YARP.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiQx0kQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85pFAmh",
                                           "createdAt":  "2023-10-14T13:45:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "cc @adityamandaleeka @samsp-msft @Tratcher ",
                                           "updatedAt":  "2023-10-14T13:45:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85pVIq_",
                                           "createdAt":  "2023-10-17T20:44:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "https://github.com/microsoft/reverse-proxy/issues/77",
                                           "updatedAt":  "2023-10-17T20:44:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85pV0qC",
                                           "createdAt":  "2023-10-17T23:05:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "Yeah, I think it\u0027s worth revisiting 😃 ",
                                           "updatedAt":  "2023-10-17T23:05:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85pV1_c",
                                           "createdAt":  "2023-10-17T23:11:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "samsp-msft",
                                           "body":  "As a nuget package that can be installed? As part of the default .NET/VS templates?",
                                           "updatedAt":  "2023-10-17T23:11:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85pV2Lg",
                                           "createdAt":  "2023-10-17T23:12:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "\u003e As a nuget package that can be installed? As part of the default .NET/VS templates?\r\n\r\nAs part of the default I think.",
                                           "updatedAt":  "2023-10-17T23:12:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85pV8QN",
                                           "createdAt":  "2023-10-17T23:38:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "And more interestingly, what do you put in it? YARP doesn\u0027t need much to get started.\r\n- Package dependency\r\n- Services, Map\r\n- appsettings.json\r\n\r\nhttps://github.com/microsoft/reverse-proxy/blob/main/samples/ReverseProxy.Minimal.Sample/Program.cs",
                                           "updatedAt":  "2023-10-17T23:38:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85pWCcU",
                                           "createdAt":  "2023-10-18T00:11:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "That sample looks good, and even includes config-loading which I was going to ask about.",
                                           "updatedAt":  "2023-10-18T00:11:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86JDHSR",
                                           "createdAt":  "2024-08-20T16:40:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "captainsafia",
                                           "body":  "@samsp-msft @benjaminpetit Came across this while working through the `area-minimal` triage backlog. Moving this over to your corner to figure out whether this should be pursued moving forward.",
                                           "updatedAt":  "2024-08-20T16:40:44Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Create an API Gateway/Proxy project template that uses YARP ",
        "labels":  [
                       "feature-templates",
                       "area-networking",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/51814",
        "createdAt":  "2023-11-01T18:16:40Z",
        "number":  51814,
        "author":  "tim-gill",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODC-ftw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jorgbaca",
                                            "createdAt":  "2024-05-13T23:58:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ghelyar",
                                            "createdAt":  "2024-05-15T08:02:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dobri-popov-tiebreak-solutions",
                                            "createdAt":  "2024-07-16T15:16:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mus65",
                                            "createdAt":  "2024-09-23T12:30:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GhalamborM",
                                            "createdAt":  "2024-11-07T19:04:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mthesing88",
                                            "createdAt":  "2025-04-23T09:58:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "splitt3r",
                                            "createdAt":  "2025-05-29T21:08:18Z"
                                        }
                                    ],
                          "totalCount":  7
                      },
        "updatedAt":  "2025-07-29T18:27:18Z",
        "body":  "\u003c!--\r\nThis template is useful to build consensus about whether work should be done, and if so, the high-level shape of how it should be approached. Use this before fixating on a particular implementation.\r\n--\u003e\r\n\r\n## Summary\r\n\r\nThe current incarnation of HttpLoggingInterceptor allows limited extensibility of Log lines, but is insufficient to also be used for other forms of telemetry needed for operational services. Most importantly it is called prior to the response being completely sent - this means that the latency of the call is not known (and cannot be used for manipulating metrics counters) and that there is a risk of an exception being thown after the OnResponseAsync callback occurs leading to erroneous measurements of success.\r\n\r\n## Motivation and goals\r\n\r\nAny services operating at scale will require both logging and metrics as part of their operational telemetry. For HTTP services this means a reliable means of measuring and recording each incoming HTTP request in terms of: \r\n* success (did it complete successfully with an appropriate status code)\r\n* latency (end to end)\r\n* any error details (in the failure case)\r\n\r\nCurrently the HttpLogging middleware does a reasonable job of allowing a logging solution for incoming HTTP requests, although ideally it would allow the developer some control over the LogLevel (so that failing requests could be promoted to Warning or Error), LogCategory (allowing easy rerouting of just the request completion logs), and potentially ID (to help prevent id clashes).\r\nThe current system can be used to log a single combined log line if the CombineLogs option is set in the HttpLoggingOptions, and Duration can be added there to help measure latencies.\r\n\r\nHowever, the callback for OnResponseAsync is fired before the response complete. This can lead to multiple issues:\r\n* The callback can record a log line detailing success for a call which later fails during the response write\r\n* The duration is not available at this point, so the extension point can not be used to update metrics associated with latency (and given the previous point it cannot be used to reliably update metrics around success counts either).\r\n\r\n## In scope\r\n\r\nIdeally the HttpLogging middleware could be expanded to provide a more complete set of extension points for people implementing operational telemetry. Ideally it would guarantee a single callback firing among the following set:\r\n* OnResponseCompletedAsync (after a response is successfully transmitted, with latency data provided)\r\n* OnErrorAsync (after an unhandled exception is thrown, with details of the exception)\r\n\r\nThis starts to look a lot like the current HostingDiagnostics features, which are also currently problematic due to the risk of double counting in error cases, and many of the event payloads being internal/private and requiring reflection to be used. Currently there is no clear path for a developer wishing to add custom telemetry to the system aside from adding a custom middleware layer. When being called at scale this risks accidentally adding large numbers of allocations/GC strain leading to system performance degradation over time.\r\n\r\n## Out of scope\r\n\r\nScenarios you explicitly want to exclude.\r\n\r\n## Risks / unknowns\r\n\r\nThere is some risk here that if the callbacks are inline that they will still potentially impact performance. Ideally there would be some decoupling here to minimize risk.\r\n\r\n## Examples\r\n\r\n```\r\npublic class MyHttpTelemetryInterceptor : IHttpLoggingInterceptor\r\n{\r\n        public ValueTask OnResponseCompleteAsync(HttpLoggingInterceptorContext logContext)\r\n        {\r\n            // Enrich log line based on context values\r\n           EnrichLog(logContext.HttpContext);\r\n           \r\n            // Update status based counters\r\n           UpdateSuccessCounters(logContext.HttpContext, logContext.GetDuration());\r\n        }\r\n\r\n        public ValueTask OnErrorAsync(HttpLoggingInterceptorContext logContext)\r\n        {\r\n            // Enrich log line based on exception details\r\n           EnrichLog(logContext.HttpContext, logContext.Exception);\r\n           \r\n            // Update failure counters\r\n           UpdateFailureCounters(logContext.HttpContext, logContext.GetDuration(), logContext.Exception);\r\n        }\r\n}\r\n\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoWCjQA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde854cdcy",
                                           "createdAt":  "2024-03-26T15:20:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svengeance",
                                           "body":  "This sounds similar to some of the pain points I ran into yesterday adopting this feature.\r\n\r\nI was looking for a semi-official way to go about reading the req/resp on failure. I figured there\u0027s something better than me manually rewinding the request with EnableBuffering, and I discovered HttpLoggingInterceptor.\r\n\r\nIt comes very close, but as OP indicated, the ambiguity over the when\u0027s and how\u0027s the logging occurs is difficult. If you take a look at the extensibility points afforded by [interceptors in EF](https://learn.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.diagnostics.iinterceptor?view=efcore-8.0) you can see how comprehensive an API you can get from a seemingly simple set of operations.\r\n\r\nIf it\u0027s appropriate for the context of the thread - me personally, I would like more control over the req/resp body included in the logs. It would be convenient to grab the current `RequestTelemetry` and attach the bodies as a property, rather than emitting a new log. At least correlation makes it easy. ",
                                           "updatedAt":  "2024-03-26T15:20:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde8594E_v",
                                           "createdAt":  "2024-05-15T08:10:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ghelyar",
                                           "body":  "I\u0027ve also been having issues trying to use HTTP logging, particularly around exceptions.\r\n\r\nDue to when the middleware runs, unhandled exceptions show a status code of 200 and there is no exception detail available to them.\r\n\r\nYou can add `UseExceptionHandler` below `UseHttpLogging`, but that comes with its own problems - it causes all exceptions to become 500, even e.g. `BadHttpRequestException`, which can be thrown when the request does not contain valid json or there are missing `required` properties on the request, and it breaks `AddProblemDetails`. It would also be nice if the exception was logged in the same log record as the http logs.",
                                           "updatedAt":  "2025-03-07T23:23:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86hYKNA",
                                           "createdAt":  "2025-03-07T21:09:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "samsp-msft",
                                           "body":  "Should look at in relation to #52439 - One of the features for the HTTP Instrumentation library is a callback that can be used to augment the instrumentation. In moving the instrumentation to the core, we also need to have that kind of callback, and that would solve this issue.",
                                           "updatedAt":  "2025-03-07T21:09:56Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "HttpLoggingInterceptor is not complete enough to use as a true telemetry extension point",
        "labels":  [
                       "design-proposal",
                       "partner",
                       "area-middleware",
                       "feature-http-logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/51874",
        "createdAt":  "2023-11-04T22:30:27Z",
        "number":  51874,
        "author":  "cfgiugliano",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T17:44:26Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nThe current implementation of [StackExchange.Redis](https://github.com/dotnet/aspnetcore/blob/main/src/Caching/StackExchangeRedis/src/RedisCache.cs) relies on LUA scripts.\r\nFrom a first look it seems to be so in order to execute HSET/HMSET and EXPIRE as an atomic execution.\r\n\r\nAlthought in some environments EVAL command might be disabled for the users, making the current implementation unusable.\n\n### Describe the solution you\u0027d like\n\nUsing transactions could maybe be a good alternative to scripts, in that case the RedisCacheOptions could expose a way to choose the strategy to use, either stick to the default implementation using scripts, or opt-in the use of transactions.\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Add additional strategy to use transactions instead of scripts in StackExchange.Redis implementation",
        "labels":  [
                       "feature-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/51888",
        "createdAt":  "2023-11-06T09:43:07Z",
        "number":  51888,
        "author":  "shawnwildermuth",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODQWk6Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2023-11-22T14:59:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Vamp808",
                                            "createdAt":  "2024-03-19T11:32:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "diegocam",
                                            "createdAt":  "2024-04-16T17:49:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jmevel",
                                            "createdAt":  "2024-04-17T12:45:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maxisam",
                                            "createdAt":  "2024-05-13T19:41:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xced",
                                            "createdAt":  "2024-05-27T08:22:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fpuglap",
                                            "createdAt":  "2024-06-12T18:13:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AkosLukacs",
                                            "createdAt":  "2024-06-26T15:23:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mesies",
                                            "createdAt":  "2024-08-13T13:32:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SaebAmini",
                                            "createdAt":  "2024-08-31T08:58:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "anilmujagic",
                                            "createdAt":  "2024-09-05T10:56:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zubi96",
                                            "createdAt":  "2024-09-09T10:28:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexb5dh",
                                            "createdAt":  "2024-09-22T10:19:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jirikanda",
                                            "createdAt":  "2024-10-11T11:06:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Gramli",
                                            "createdAt":  "2024-11-16T21:48:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eugbyte",
                                            "createdAt":  "2024-12-31T08:59:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "noti0nS",
                                            "createdAt":  "2025-01-10T19:06:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sdepouw",
                                            "createdAt":  "2025-01-16T12:20:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mhartmair-cubido",
                                            "createdAt":  "2025-02-03T09:09:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TheAjItator",
                                            "createdAt":  "2025-03-05T16:55:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OndrejVrsan",
                                            "createdAt":  "2025-03-17T13:15:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ropack",
                                            "createdAt":  "2025-03-17T13:15:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NowhereRx7",
                                            "createdAt":  "2025-05-15T18:59:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ChrisSimmons",
                                            "createdAt":  "2025-09-14T02:32:09Z"
                                        }
                                    ],
                          "totalCount":  24
                      },
        "updatedAt":  "2025-07-29T19:09:42Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWith the new `AddExceptionHandler` and `IExceptionHandler` APIs, engaging the exception handler with UseExceptionHandler is confusing. For example, this code fails;\r\n\r\n```cs\r\nusing ExHandler;\r\nusing Microsoft.AspNetCore.Diagnostics;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.Services.AddExceptionHandler\u003cGlobalExceptionHandler\u003e();\r\n\r\nvar app = builder.Build();\r\n\r\napp.UseExceptionHandler();       // Doesn\u0027t work\r\n\r\napp.MapGet(\"/\", () =\u003e {\r\n  throw new Exception(\"Bad things happen to good developers\");\r\n});\r\n\r\napp.Run();\r\n\r\npublic class GlobalExceptionHandler : IExceptionHandler\r\n{\r\n  public async ValueTask\u003cbool\u003e TryHandleAsync(HttpContext httpContext,\r\n    Exception exception,\r\n    CancellationToken cancellationToken)\r\n  {\r\n    httpContext.Response.ContentType = \"text/plain\";\r\n    httpContext.Response.StatusCode = 501;\r\n    await httpContext.Response.WriteAsync($\"It don\u0027t work: {exception.Message}\");\r\n    return true;\r\n  }\r\n}\r\n```\r\n\r\nTo make this work, you must pass in an empty lambda to the `UseExceptionHandler\u0027:\r\n\r\n```cs\r\napp.UseExceptionHandler(o =\u003e { }); // Works\r\n```\r\n\n\n### Expected Behavior\n\nExpected the empty call to `UseExceptionHandler` to work. Could not find documentation that explained this. , \n\n### Steps To Reproduce\n\nExample is at: https://github.com/shawnwildermuth/ExceptionHandlerRepro\r\n\r\n\n\n### Exceptions (if any)\n\nI get an arcane message:\r\n\r\n```\r\nSystem.InvalidOperationException\r\n  HResult=0x80131509\r\n  Message=An error occurred when configuring the exception handler middleware. Either the \u0027ExceptionHandlingPath\u0027 or the \u0027ExceptionHandler\u0027 property must be set in \u0027UseExceptionHandler()\u0027. Alternatively, set one of the aforementioned properties in \u0027Startup.ConfigureServices\u0027 as follows: \u0027services.AddExceptionHandler(options =\u003e { ... });\u0027 or configure to generate a \u0027ProblemDetails\u0027 response in \u0027service.AddProblemDetails()\u0027.\r\n  Source=Microsoft.AspNetCore.Diagnostics\r\n  StackTrace:\r\n   at Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddlewareImpl..ctor(RequestDelegate next, ILoggerFactory loggerFactory, IOptions`1 options, DiagnosticListener diagnosticListener, IEnumerable`1 exceptionHandlers, IMeterFactory meterFactory, IProblemDetailsService problemDetailsService)\r\n   at Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.\u003c\u003ec__DisplayClass5_0.\u003cSetExceptionHandlerMiddleware\u003eb__0(RequestDelegate next)\r\n   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()\r\n   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()\r\n   at Microsoft.AspNetCore.Hosting.GenericWebHostService.\u003cStartAsync\u003ed__40.MoveNext()\r\n   at Microsoft.Extensions.Hosting.Internal.Host.\u003c\u003cStartAsync\u003eb__15_1\u003ed.MoveNext()\r\n   at Microsoft.Extensions.Hosting.Internal.Host.\u003cForeachService\u003ed__18`1.MoveNext()\r\n   at Microsoft.Extensions.Hosting.Internal.Host.\u003cStartAsync\u003ed__15.MoveNext()\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.\u003cRunAsync\u003ed__4.MoveNext()\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.\u003cRunAsync\u003ed__4.MoveNext()\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.Run(IHost host)\r\n   at Program.\u003cMain\u003e$(String[] args) in C:\\projects\\codingshorts\\net8exhandler\\test\\ExHandler\\Program.cs:line 17\r\n```\n\n### .NET Version\n\n8.0.100-rc.2.23502.2\n\n### Anything else?\n\nNote the failure is uncommented out, and the one that works is commented out. If this is expected behavior, we need it to be well documented since it is unobvious behavior.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOusi3Cg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85q_uak",
                                           "createdAt":  "2023-11-06T15:26:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Agreed this should be fixed now that we have exception handlers that can be added via DI.",
                                           "updatedAt":  "2023-11-06T15:26:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85rCmd1",
                                           "createdAt":  "2023-11-06T18:24:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODL69BQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2023-11-06T19:07:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "captainsafia",
                                           "body":  "PR open against main.\r\n\r\nThis is a good candidate for servicing to 8.0 as well.",
                                           "updatedAt":  "2023-11-06T18:24:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85zFPZS",
                                           "createdAt":  "2024-02-06T21:08:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shawnwildermuth",
                                           "body":  "This has been fixed.",
                                           "updatedAt":  "2024-02-06T21:08:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde8536G_g",
                                           "createdAt":  "2024-03-21T09:22:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEbHoAg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "thedwillis",
                                                                               "createdAt":  "2024-03-23T16:19:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jmevel",
                                                                               "createdAt":  "2024-04-17T12:46:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IsaacMcGrind",
                                                                               "createdAt":  "2024-05-21T13:44:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "thnak",
                                                                               "createdAt":  "2024-07-18T09:12:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xtellurian",
                                                                               "createdAt":  "2024-07-23T03:56:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kiran9684",
                                                                               "createdAt":  "2025-02-04T13:22:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tryhp3",
                                                                               "createdAt":  "2025-04-11T09:23:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexbdaniel",
                                                                               "createdAt":  "2025-05-11T06:07:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TRB7",
                                                                               "createdAt":  "2025-07-18T16:12:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  9
                                                         },
                                           "author":  "dse-copsfs",
                                           "body":  "The [connected PR](https://github.com/dotnet/aspnetcore/pull/51898) has been closed.\r\n\r\nWe still facing this issue in **8.0.3**, so we have to use the proposed workaround `app.UseExceptionHandler(o =\u003e {});`\r\n\r\nCould you please reopen this issue?",
                                           "updatedAt":  "2024-03-21T09:22:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde854pKpm",
                                           "createdAt":  "2024-03-27T21:54:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "captainsafia",
                                           "body":  "Yes, we never ended up addressing this because the ramifications of the breaking change weren\u0027t fully enumerated.\r\n\r\nI\u0027ll reopen this issue but considering the current prioritizations and the fact that there is a workaround, this will likely go in the backlog.\r\n\r\nI\u0027m open to reviewing a PR with a fix though!",
                                           "updatedAt":  "2024-03-27T21:54:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde856w6h2",
                                           "createdAt":  "2024-04-16T17:51:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEN0UeA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Legion-ale",
                                                                               "createdAt":  "2024-05-06T12:11:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BenocxX",
                                                                               "createdAt":  "2024-05-09T04:07:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Harmyder",
                                                                               "createdAt":  "2024-05-15T13:18:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IsaacMcGrind",
                                                                               "createdAt":  "2024-05-21T13:43:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MattPress",
                                                                               "createdAt":  "2024-05-30T13:35:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MofaggolHoshen",
                                                                               "createdAt":  "2024-06-06T12:22:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xlisec",
                                                                               "createdAt":  "2024-06-07T09:41:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "meysambagheri96",
                                                                               "createdAt":  "2024-06-09T10:59:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zubi96",
                                                                               "createdAt":  "2024-06-09T20:32:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fpuglap",
                                                                               "createdAt":  "2024-06-12T18:14:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "andreamorello93",
                                                                               "createdAt":  "2024-06-13T17:44:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ryuuc",
                                                                               "createdAt":  "2024-06-18T07:57:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xiangxiren",
                                                                               "createdAt":  "2024-06-19T09:10:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "latuconsinafr",
                                                                               "createdAt":  "2024-06-23T01:44:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jmevel",
                                                                               "createdAt":  "2024-06-24T07:00:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KaranVani",
                                                                               "createdAt":  "2024-06-28T08:55:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HinodeMyojo",
                                                                               "createdAt":  "2024-07-27T17:43:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SaebAmini",
                                                                               "createdAt":  "2024-08-31T09:00:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "giedriusl",
                                                                               "createdAt":  "2024-09-02T13:52:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sunnamed434",
                                                                               "createdAt":  "2024-11-17T14:58:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mhehle",
                                                                               "createdAt":  "2024-12-02T16:02:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "B-CCCPcekca-HET",
                                                                               "createdAt":  "2025-01-19T10:24:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TheAjItator",
                                                                               "createdAt":  "2025-03-05T16:55:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tryhp3",
                                                                               "createdAt":  "2025-04-11T09:23:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  24
                                                         },
                                           "author":  "diegocam",
                                           "body":  "Any updates here?",
                                           "updatedAt":  "2024-04-16T17:51:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86CMgQp",
                                           "createdAt":  "2024-06-23T01:45:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEN0Ufw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dse-copsfs",
                                                                               "createdAt":  "2024-06-23T11:25:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maxisam",
                                                                               "createdAt":  "2024-06-23T15:09:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jmevel",
                                                                               "createdAt":  "2024-06-24T07:00:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KaranVani",
                                                                               "createdAt":  "2024-06-28T08:55:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ryuuc",
                                                                               "createdAt":  "2024-07-01T07:20:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zubi96",
                                                                               "createdAt":  "2024-07-15T19:12:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GiaNTizmO",
                                                                               "createdAt":  "2024-07-18T10:42:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mikelson1987",
                                                                               "createdAt":  "2024-07-23T12:07:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HinodeMyojo",
                                                                               "createdAt":  "2024-07-27T17:43:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kyxec",
                                                                               "createdAt":  "2024-08-01T16:12:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "joalcava",
                                                                               "createdAt":  "2024-08-17T13:43:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SaebAmini",
                                                                               "createdAt":  "2024-08-31T09:00:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "giedriusl",
                                                                               "createdAt":  "2024-09-02T13:52:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mhehle",
                                                                               "createdAt":  "2024-12-02T16:02:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "B-CCCPcekca-HET",
                                                                               "createdAt":  "2025-01-19T10:24:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Ropack",
                                                                               "createdAt":  "2025-03-17T13:15:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "OndrejVrsan",
                                                                               "createdAt":  "2025-03-17T13:15:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tryhp3",
                                                                               "createdAt":  "2025-04-11T09:23:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  18
                                                         },
                                           "author":  "latuconsinafr",
                                           "body":  "Still waiting for the update 👀",
                                           "updatedAt":  "2024-06-23T01:45:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86G6Xnb",
                                           "createdAt":  "2024-08-01T16:12:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kyxec",
                                           "body":  "\u003e Still waiting for the update 👀\r\n\r\n",
                                           "updatedAt":  "2024-08-01T16:12:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86LLuG1",
                                           "createdAt":  "2024-09-07T07:38:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ghhv",
                                           "body":  "fyi, I managed to get this issue on a brand new NET 8.0.8 Blazor Web Application project because I was calling this again by accident in a start-up helper function but without any parameters like so:\r\n`app.UseExceptionHandler();`\r\n\r\nI have this prior in the program.cs\r\n` app.UseExceptionHandler(\"/Error\", createScopeForErrors: true);`\r\n\r\nThe lack of parameters isn\u0027t an issue - it was the calling it twice!",
                                           "updatedAt":  "2024-09-07T07:38:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86MAkgv",
                                           "createdAt":  "2024-09-13T13:25:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEWMzXQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jmevel",
                                                                               "createdAt":  "2024-09-16T08:05:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "paulnlb",
                                                                               "createdAt":  "2024-09-23T15:26:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nzlatev7",
                                                                               "createdAt":  "2024-12-02T16:34:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "erwinkramer",
                                                                               "createdAt":  "2024-12-22T17:03:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Legion-ale",
                                                                               "createdAt":  "2025-01-07T10:56:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tryhp3",
                                                                               "createdAt":  "2025-04-11T09:24:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jzabroski",
                                                                               "createdAt":  "2025-06-11T13:17:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "Legion-ale",
                                           "body":  "For what i understand I can agree with @ghhv saying that the problem is how we configure the webApp, and not in the method itself.\r\n\r\nI was having the same problem, and I was thinking I\u0027d solved it with: `app.UseExceptionHandler(()=\u003e{});` but, actually, we\u0027d just bypassed the correct exception management.\r\n\r\nThe real problem seems that you need to register a \"default\" response in case your `IExceptionHandler` return `false` (Even if every exception is correctly managed inside the `IExceptionHandler`).\r\n\r\nActually adding \u0027AddProblemDetails()\u0027 before your exception handler seems doing the trick:\r\n\r\n```\r\n        builder.Services.AddProblemDetails();\r\n        builder.Services.AddExceptionHandler\u003cGlobalExceptionHandler\u003e();\r\n[...]\r\n        var app = builder.Build();\r\n        app.UseExceptionHandler();\r\n```\r\n but i\u0027m not sure is the correct behaviour.\r\nI [leave here microsoft link with the method explanation](https://learn.microsoft.com/en-us/aspnet/core/web-api/handle-errors?view=aspnetcore-8.0):\r\n \r\n\r\n\u003e [...] code configures the app to generate a problem details response for all HTTP client and server error responses that don\u0027t have body content yet[...]\r\n\r\n\r\n ",
                                           "updatedAt":  "2024-09-13T13:26:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86N4GAG",
                                           "createdAt":  "2024-09-27T23:47:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1vEaQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Legion-ale",
                                                                               "createdAt":  "2024-09-30T07:15:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jirikanda",
                                                                               "createdAt":  "2024-10-11T11:06:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "kjkrum",
                                           "body":  "I\u0027m also not seeing this issue when using an exception handler in combination with problem details. The order they\u0027re added to the service collection shouldn\u0027t matter.\r\n\r\n```\r\nbuilder.Services.AddExceptionHandler\u003cExceptionHandler\u003e();\r\nbuilder.Services.AddProblemDetails(options =\u003e\r\n{\r\n\toptions.CustomizeProblemDetails = context =\u003e\r\n\t{\r\n\t\t...\r\n\t};\r\n});\r\n\r\napp.UseStatusCodePages();\r\napp.UseExceptionHandler();\r\n```\r\n\r\nIf (and only if) the `IExceptionHandler` returns false, the exception is available in the customize action as `ProblemDetailsContext.Exception`. This makes sense, since I think the exception handler returning true means the exception does not propagate.\r\n\r\nBut letting an exception propagate so it appears in `ProblemDetailsContext.Exception` (e.g., so you can use it to add information to the problem details) triggers another bug. `ProblemDetailsContext.ProblemDetails` is always initialized as a 500 regardless of the status code set by the exception handler, and there\u0027s no way to leverage the existing defaults to re-initialize it (#47978).",
                                           "updatedAt":  "2024-09-27T23:47:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86c_i9V",
                                           "createdAt":  "2025-02-04T13:22:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEN0VHA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tryhp3",
                                                                               "createdAt":  "2025-04-11T09:25:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Kiran9684",
                                           "body":  "Hi, Any updates on this Fix ? ",
                                           "updatedAt":  "2025-02-04T13:22:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86dAGEp",
                                           "createdAt":  "2025-02-04T13:58:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Legion-ale",
                                           "body":  "\u003e Hi, Any updates on this Fix ?\n\nBased on my understanding of the problem, my previous answer is a full fledged solution (at least until you hit [that other bug](https://github.com/dotnet/aspnetcore/issues/47978)).\nthat problem is more a lack of documentation than an actual bug...\nWe were waiting confirmation from someone of the dev team if there is a more \"clean\" implementation... but at least we can consider it an acceptable alternative solution.",
                                           "updatedAt":  "2025-02-04T13:58:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86m63fo",
                                           "createdAt":  "2025-04-14T04:33:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svengeance",
                                           "body":  "Also running into this presently - we do not have error pages operating solely as an API, and do not wish to create them. My expectation is that the ServiceCollection DI will handle errors in order of IExceptionHandler registration, and the default error handling pipeline kicks in if no handlers are able to handle the exception. ",
                                           "updatedAt":  "2025-04-14T04:33:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86paE7U",
                                           "createdAt":  "2025-04-30T14:31:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "binoypatel",
                                           "body":  "Still the same issue, as a workaround I need to use UseExceptionHandler(_ =\u003e { })",
                                           "updatedAt":  "2025-04-30T14:31:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86phE0X",
                                           "createdAt":  "2025-05-01T03:52:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEQqBkA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "jmevel",
                                                                               "createdAt":  "2025-05-03T08:14:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I re-read this issue. @captainsafia made an attempt and there were some breaking change considerations. I see \u003e 20 updates on https://github.com/dotnet/aspnetcore/issues/51888#issuecomment-2059642998. Has anyone in this issue looked at the PR and considered what the behavior should be given the potential breaking change? \n\nI\u0027d love to see more of a technical discussion here rather than asking for updates. This issue is in the backlog, it\u0027s not going to get prioritized in its current state. If anyone feels really strongly about this and has time to dig in, that could really help get it unstuck.",
                                           "updatedAt":  "2025-05-01T03:52:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86pjuwI",
                                           "createdAt":  "2025-05-01T12:05:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEQmeRQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "shawnwildermuth",
                                                                               "createdAt":  "2025-05-02T16:26:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "kjkrum",
                                           "body":  "@davidfowl The whole pipeline is broken. They need to stop worrying about backward compatibility and just fix it.",
                                           "updatedAt":  "2025-05-01T12:05:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86pkom1",
                                           "createdAt":  "2025-05-01T14:30:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@kjkrum What\u0027s the proposal for what the behavior should be in all of the cases expressed in the original PR?",
                                           "updatedAt":  "2025-05-01T14:30:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86qGSzg",
                                           "createdAt":  "2025-05-06T08:56:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Legion-ale",
                                           "body":  "I\u0027m not a .NET developer, so maybe I\u0027m missing something... but as @Tratcher said in the original PR, the issue lies in the interop between the new `IExceptionHandler` (which is basically a pipeline itself) and the old exception handling methods (which are more like a pseudo-pipeline that doesn’t integrate well with the new one).\n\nThe dev team tried to bind the new implementation to support the older ones, but that created a lot of unhandled scenarios.\n\nInstead, we probably need to modify `ProblemDetails` and the old delegate so they can become part of the new `IExceptionHandler` pipeline (maybe by appending them at the end?)\n\nBut doing that without rethinking how the entire pipeline works leads to backward compatibility issues, because these changes will likely force end users to update their code when released in production.\n\nAm I wrong?\n\n",
                                           "updatedAt":  "2025-05-06T08:57:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86vzk_H",
                                           "createdAt":  "2025-06-06T14:59:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEWhtIQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "jmevel",
                                                                               "createdAt":  "2025-06-10T06:38:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Legion-ale",
                                                                               "createdAt":  "2025-06-13T14:09:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "nthornton2010",
                                           "body":  "Is there a reason you don\u0027t want to add `service.AddProblemDetails()` to your Program.cs file?\n\nThe error message recommends doing one of the 3 things to fix:\n1. Set either `ExceptionHandlingPath` or `ExceptionHandler` property in the `UseExceptionHandler` method. --- This is what you did as a workaround\n2. Add/Set some options in `services.AddExceptionHandler`\n3. Call `service.AddProblemDetails`\n\nThe first 2 seem like cases that should be done if you need to handle some special case. The 3rd seems like the ideal solution if you just want to use everything out of the box. I\u0027ve done this in multiple services now and everything works as expected.\n\nSince the error message specifies doing 1 of the 3 things, I\u0027m not sure there\u0027s actually an issue here other than maybe for the error message to be worded better and possibly suggest calling `service.AddProblemDetails` first.\n\nPerhaps I\u0027m missing something regarding why we wouldn\u0027t want to do any of the 3 suggestions the error makes?",
                                           "updatedAt":  "2025-06-06T14:59:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86y4kD-",
                                           "createdAt":  "2025-06-24T16:41:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcYM-Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TRB7",
                                                                               "createdAt":  "2025-07-18T16:11:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wallym",
                                                                               "createdAt":  "2025-07-29T19:10:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "MauNguyenVan",
                                           "body":  "Wow, this issue took me 2 hours to find out why the docs have this API but my app breaks when I use it.\nIf a newbie has just begun working with ASP and runs into this issue, someone would give up.\nit is messy",
                                           "updatedAt":  "2025-06-24T16:41:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde864LU59",
                                           "createdAt":  "2025-07-18T16:14:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcYM5g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wallym",
                                                                               "createdAt":  "2025-07-29T19:10:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "TRB7",
                                           "body":  "I got the same error today and tried this workaround `app.UseExceptionHandler(o =\u003e {});` as mentioned by @dse-copsfs and it worked.\nI\u0027m not sure when this will be fixed but if someone doesn\u0027t know, he may spend hours of searching for the root cause...",
                                           "updatedAt":  "2025-07-18T16:14:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde864VMgL",
                                           "createdAt":  "2025-07-19T20:48:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcYM2g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jmevel",
                                                                               "createdAt":  "2025-07-21T06:31:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wallym",
                                                                               "createdAt":  "2025-07-29T19:09:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "shawnwildermuth",
                                           "body":  "That\u0027s been my issue. It\u0027s non-obvious. ",
                                           "updatedAt":  "2025-07-19T20:48:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde866yLcK",
                                           "createdAt":  "2025-07-29T19:09:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcYt0A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TRB7",
                                                                               "createdAt":  "2025-07-29T20:12:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wallym",
                                           "body":  "I started getting the issue today after adding a custom exception handler.  I just happened to stumble upon this discussion.  The work around worked. I\u0027m on .NET 9, if that matters.",
                                           "updatedAt":  "2025-07-29T19:09:42Z"
                                       }
                                   ],
                         "totalCount":  24
                     },
        "title":  "AddExceptionHandler/UseExceptionHandler Fails in a non-Obvious Way",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/51960",
        "createdAt":  "2023-11-09T12:54:42Z",
        "number":  51960,
        "author":  "charytech",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8Tf3Q==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "albertocorrales",
                                            "createdAt":  "2023-11-22T15:03:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fa-fen",
                                            "createdAt":  "2023-11-22T15:05:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "arekgwizdziel",
                                            "createdAt":  "2024-10-31T11:53:56Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-07-29T18:07:17Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nIn HostFilteringMiddleware we are using IOptionsManager. \r\nDuring reloading the configuration, it clears the state used to evaluate the host.\r\nIn edge cases we may end up with an inconsistent state when calling the main Middleware method, the state can be cleared during the execution of the \"Invoke\" method. \r\n\r\n### Expected Behavior\r\n\r\nMiddleware shouldn\u0027t return us badrequest when allowed host are properly configured.\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n_No response_\r\n\r\n### Anything else?\r\n\r\nWe shouldn\u0027t clear state but re-evaluate it during OnChange action.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkgMVNA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85rjLko",
                                           "createdAt":  "2023-11-09T18:47:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "This change notification code should probably re-calculate the list inline and swap out atomically. _allowAnyNonEmptyHost would also need to be made part of an atomic swap object.\r\nhttps://github.com/dotnet/aspnetcore/blob/da1d588a9afe7d1ae5591b45265045abf270515e/src/Middleware/HostFiltering/src/HostFilteringMiddleware.cs#L49-L55\r\n\r\nAlso call Configure in the constructor and remove EnsureConfigured.\r\nhttps://github.com/dotnet/aspnetcore/blob/da1d588a9afe7d1ae5591b45265045abf270515e/src/Middleware/HostFiltering/src/HostFilteringMiddleware.cs#L76C34-L76C52",
                                           "updatedAt":  "2023-11-09T18:49:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85rkUN4",
                                           "createdAt":  "2023-11-09T21:04:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "charytech",
                                           "body":  "I agree with the above comment.\r\nProposal solution for #51960 is to reevaluate _allowAnyNonEmptyHost and _allowedHosts instead of resetting them to empty values.\r\nhttps://github.com/dotnet/aspnetcore/blob/da1d588a9afe7d1ae5591b45265045abf270515e/src/Middleware/HostFiltering/src/HostFilteringMiddleware.cs#L49-L55\r\nThe method will be similar to the already existing  \"Configure()\". \r\nhttps://github.com/dotnet/aspnetcore/blob/da1d588a9afe7d1ae5591b45265045abf270515e/src/Middleware/HostFiltering/src/HostFilteringMiddleware.cs#L100-L123\r\nWe should also handle reseteting the _allowAnyNonEmptyHost state when it is not top level wildcard and allow _allowedHosts to be adjusted to empty values instead of throwing an exception.",
                                           "updatedAt":  "2023-11-09T21:04:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85rkU4b",
                                           "createdAt":  "2023-11-09T21:06:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMRCSg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "charytech",
                                                                               "createdAt":  "2023-11-09T21:39:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Thanks, do you want to try it and send a PR?\r\n\r\nNote, _allowedHosts and _allowAnyNonEmptyHost will likely need to be combine into a type \u0026 field that can be swapped out atomically. It\u0027s not safe to update them separately.",
                                           "updatedAt":  "2023-11-09T21:06:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85vHqlp",
                                           "createdAt":  "2023-12-20T11:04:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "charytech",
                                           "body":  "Hey, @Tratcher are you planning to patch previous versions with the above fix?",
                                           "updatedAt":  "2023-12-20T11:04:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85vJ1pu",
                                           "createdAt":  "2023-12-20T17:16:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "What\u0027s the impact on you? E.g. how often does the config change, and how many requests are disrupted in the meantime. Issues have to have significant impact before they\u0027re considered for backport.",
                                           "updatedAt":  "2023-12-20T17:16:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85vwjT4",
                                           "createdAt":  "2024-01-03T08:25:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "charytech",
                                           "body":  "In a couple of microservices config is refreshing a couple of times per minute. We have a problem with this every day depends on the traffic, day and luck as it is nondeterministic behavior, but even hundreds of errors per month. From my perspective, it is a significant impact as the error happens all the time day after day.",
                                           "updatedAt":  "2024-01-03T08:25:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85vzR1i",
                                           "createdAt":  "2024-01-03T17:22:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "@adityamandaleeka for servicing consideration.",
                                           "updatedAt":  "2024-01-03T17:22:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde850GZtU",
                                           "createdAt":  "2024-02-16T06:37:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "charytech",
                                           "body":  "@adityamandaleeka any updates on the above?",
                                           "updatedAt":  "2024-02-16T06:37:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde8513_SB",
                                           "createdAt":  "2024-03-04T22:55:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "@charytech Are you looking to get this in .NET 8 servicing?",
                                           "updatedAt":  "2024-03-04T22:55:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde851_VCJ",
                                           "createdAt":  "2024-03-05T20:02:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "charytech",
                                           "body":  "hey @adityamandaleeka\r\nI think both .NET 6 and .NET 8 should be patched as they are still under LTS.\r\nWe are still using NET 6, but now we are starting migration to .NET 8. \r\nWhen do you plan to add it? It\u0027s already been a few months since the PR was merged.\r\n",
                                           "updatedAt":  "2024-03-05T20:02:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86SAxU0",
                                           "createdAt":  "2024-10-31T11:57:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arekgwizdziel",
                                           "body":  "Hey, we started to see this issue in our .NET APIs as well, do we have any update on this? Is there a plan to patch it in .NET8?",
                                           "updatedAt":  "2024-10-31T11:57:07Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "HostFilteringMiddleware. It is returning \"The host \u0027{Host}\u0027 does not match an allowed host.\" time to time.",
        "labels":  [
                       "bug",
                       "area-middleware",
                       "help candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/52025",
        "createdAt":  "2023-11-13T17:26:38Z",
        "number":  52025,
        "author":  "Tratcher",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-21T19:04:16Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nThe request timeout feature relies on options, middleware, and attributes. If uses supply options or attributes, but forget the middleware, there\u0027s no indication that the timeouts aren\u0027t being applied.\r\n\r\n### Expected Behavior\r\n\r\nConfiguring timeouts on routes (or a default timeout policy ?) without adding the middleware should produce at least a runtime error rather than process the request without a timeout (dangerous). Note we also shouldn\u0027t short circuit endpoints with timeouts, we don\u0027t know what the short circuit logic is going to do.\r\n\r\nAn analyzer might help too.\r\n\r\nWe already have similar checks for auth, cors, and anti-forgery.\r\nhttps://github.com/dotnet/aspnetcore/blob/997a1e8e659e69dbf7e157518da18cbca91f5183/src/Http/Routing/src/EndpointRoutingMiddleware.cs#L161-L178\r\nhttps://github.com/dotnet/aspnetcore/blob/997a1e8e659e69dbf7e157518da18cbca91f5183/src/Http/Routing/src/EndpointMiddleware.cs#L39-L58\r\n\r\nFound when consuming this feature in YARP, and mitigated there: https://github.com/microsoft/reverse-proxy/pull/2307\r\n\r\n### Steps To Reproduce\r\n\r\n```csharp\r\nusing Microsoft.AspNetCore.Http.Timeouts;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.AddRequestTimeouts();\r\n\r\nvar app = builder.Build();\r\n// app.UseRequestTimeouts(); // Woops, forgot this, nothing works.\r\n\r\napp.MapGet(\"/\", async (HttpContext context) =\u003e {\r\n    try\r\n    {\r\n        await Task.Delay(TimeSpan.FromSeconds(10), context.RequestAborted);\r\n    }\r\n    catch (TaskCanceledException)\r\n    {\r\n        return Results.Content(\"Timeout!\", \"text/plain\");\r\n    }\r\n\r\n    return Results.Content(\"No timeout!\", \"text/plain\");\r\n}).WithRequestTimeout(TimeSpan.FromSeconds(2));\r\n// Returns \"Timeout!\"\r\n\r\napp.MapGet(\"/attribute\",\r\n    [RequestTimeout(milliseconds: 2000)] async (HttpContext context) =\u003e {\r\n        try\r\n        {\r\n            await Task.Delay(TimeSpan.FromSeconds(10), context.RequestAborted);\r\n        }\r\n        catch (TaskCanceledException)\r\n        {\r\n            return Results.Content(\"Timeout!\", \"text/plain\");\r\n        }\r\n\r\n        return Results.Content(\"No timeout!\", \"text/plain\");\r\n    });\r\n// Returns \"Timeout!\"\r\n\r\napp.Run();\r\n```\r\n\r\n### Exceptions (if any)\r\n\r\nNone (but there should be).\r\n\r\n### .NET Version\r\n\r\n.NET 8\r\n\r\n### Anything else?\r\n\r\nThis enforcement pattern isn\u0027t scalable/extensible. 3rd parties can\u0027t use the Endpoint/RoutingMiddleware to do their own enforcement for the presence of middleware. And for us, if we keep adding checks it\u0027s going to get messy. Could this be abstracted to a service? What happens if the user then forgets to add the service?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOv2-QPQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85r8goD",
                                           "createdAt":  "2023-11-14T19:13:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "captainsafia",
                                           "body":  "We don\u0027t currently have an abstraction for adding these kinds of checks in our API layer.\r\n\r\nA similar issue came up when I was working on the anti-forgery middleware, which checks to see if anti-forgery metadata is provided on an endpoint and ensures the middleware is registered. At the time, I filed https://github.com/dotnet/aspnetcore/issues/49936 to track possible work to create an abstraction layer that allows us to execute these kinds of checks during routing.\r\n\r\nIn some follow-up conversations about this, it was clear that we needed to be cautious about the performance ramifications of this strategy, especially because the code is running in a hot path.\r\n\r\nI\u0027d be curious to see if we could make the API happen with static analysis instead of runtime analysis.\r\n\r\nI wonder if there is a model where we can use a source generator to detect certain attributes and then populate the `UseX` call into Program.cs?",
                                           "updatedAt":  "2023-11-14T19:13:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85r8hHT",
                                           "createdAt":  "2023-11-14T19:13:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 9 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-11-14T19:13:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86_b5A9",
                                           "createdAt":  "2025-08-21T19:04:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kemsky",
                                           "body":  "Also, timeouts are not applied when debugger is attached, no log message, nothing.",
                                           "updatedAt":  "2025-08-21T19:04:16Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Request timeouts are not applied without the middleware, no error given",
        "labels":  [
                       "area-middleware",
                       "area-routing"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/52165",
        "createdAt":  "2023-11-17T19:33:56Z",
        "number":  52165,
        "author":  "BrennanConroy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T17:44:26Z",
        "body":  "`IOutputCacheBufferStore.TryGetAsync` isn\u0027t used anywhere today. We should use it.\r\n\r\ncc @mgravell ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Use IOutputCacheBufferStore.TryGetAsync",
        "labels":  [
                       "feature-output-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/52310",
        "createdAt":  "2023-11-22T18:02:09Z",
        "number":  52310,
        "author":  "FP3ixoto",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-22T21:17:24Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWhen there\u0027s a racing condition on OutputCache, with \"Locking\" enabled, and the first request to hit the OutputCache middleware is cancelled by the client, the middleware resolves the second request to an empty response.\r\n\r\nI suspect that the cancelled request ends up caching an empty response and that\u0027s the one served on the subsequent requests.\r\n\r\nNote that it only happens with the locking feature enabled.\r\n\n\n### Expected Behavior\n\nThe OutputCache middleware should not cache the cancelled request, empty response, and the successful request should return content.\n\n### Steps To Reproduce\n\nMinimal repo: https://github.com/FP3ixoto/OutputCacheIssue\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n7.0.404; 8.0.100\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOudNBgg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde851s-LP",
                                           "createdAt":  "2024-03-02T08:38:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODaxfXw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "FP3ixoto",
                                                                               "createdAt":  "2024-03-15T22:40:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mgravell",
                                           "body":  "Will aim to investigate and resolve ~~this week~~ (well clearly that didn\u0027t happen)",
                                           "updatedAt":  "2024-10-21T14:02:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86QpHmf",
                                           "createdAt":  "2024-10-21T13:32:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ArkadiyShuvaev",
                                           "body":  "Is there a workaround for this issue?",
                                           "updatedAt":  "2024-10-21T13:32:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86Qpff4",
                                           "createdAt":  "2024-10-21T14:08:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD3fd7Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ArkadiyShuvaev",
                                                                               "createdAt":  "2024-10-22T08:04:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mgravell",
                                           "body":  "The problem is understood; moving to .NET 10 planning; there are two ways we can resolve this:\n\n1. detect the cancellation condition in such a way that one of the other requests becomes activated (this has a niche edge case where a malicious actor could queue up and cancel a bunch of sequential requests, causing another party to be delayed indefinitely)\n2. copy the machinery from `HybridCache` which tracks all shared consumers, meaning that the down-stream operation is only cancelled if all interested parties cancel\n\nFor the risk stated, 2 is a better option, but is much more complicated. But the basic design exists.",
                                           "updatedAt":  "2024-10-21T14:08:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86500GC",
                                           "createdAt":  "2025-07-25T12:37:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mgravell",
                                           "body":  "(if someone could unassign me, that\u0027d be awesome, thx)",
                                           "updatedAt":  "2025-07-25T12:37:38Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "OutputCache - Racing condition returns empty response when locking enabled",
        "labels":  [
                       "investigate",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/52411",
        "createdAt":  "2023-11-27T22:21:14Z",
        "number":  52411,
        "author":  "ValentinVadasz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODMDfZQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tjwolfe",
                                            "createdAt":  "2024-03-05T13:30:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "paulsimkinswtw",
                                            "createdAt":  "2024-05-24T13:29:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ValentinVadasz",
                                            "createdAt":  "2024-05-29T07:04:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Stone-Red-Code",
                                            "createdAt":  "2024-06-06T14:18:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pmoleri",
                                            "createdAt":  "2024-08-01T12:49:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ddimitrov9405",
                                            "createdAt":  "2024-08-01T12:51:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "soroushkavousi",
                                            "createdAt":  "2024-10-04T08:45:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lonix1",
                                            "createdAt":  "2024-10-18T03:57:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2024-10-18T06:21:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Deathwrap",
                                            "createdAt":  "2024-11-12T10:12:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "esbenbach",
                                            "createdAt":  "2024-11-20T14:02:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JeFou",
                                            "createdAt":  "2024-12-20T12:32:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sandeep-vemula",
                                            "createdAt":  "2025-02-22T06:21:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "whoeevee",
                                            "createdAt":  "2025-04-04T23:33:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kapral",
                                            "createdAt":  "2025-04-18T09:53:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Makciek",
                                            "createdAt":  "2025-06-25T06:53:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "thomotron",
                                            "createdAt":  "2025-08-21T03:08:49Z"
                                        }
                                    ],
                          "totalCount":  17
                      },
        "updatedAt":  "2025-08-21T03:57:15Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nAccording to the [documentation](https://learn.microsoft.com/en-us/aspnet/core/performance/rate-limit?view=aspnetcore-8.0#limiter-with-onrejected-retryafter-and-globallimiter):\r\n\r\n\u003e retryAfter can be used with the TokenBucketRateLimiter, FixedWindowLimiter, and SlidingWindowLimiter because these algorithms are able to estimate when more permits will be added.\r\n\r\nHowever, when I use a `SlidingWindowLimiter,` the `RETRY_AFTER` metadata is null in the lease object. \r\nThe RETRY_AFTER metadata name is present in the MetadataNames enumerable, but the `_retryAfter` field behind it is null.\r\n\r\nRegister the rate limiter:\r\n\r\n```          \r\nrateLimiterOptions.AddSlidingWindowLimiter(\"rateLimiterName\", options =\u003e\r\n{\r\n    options.PermitLimit = rateLimiterConfiguration.PermitLimit;\r\n    options.Window = TimeSpan.FromSeconds(rateLimiterConfiguration.TimeWindowInSeconds);\r\n    options.QueueProcessingOrder = QueueProcessingOrder.OldestFirst;\r\n    options.SegmentsPerWindow = 10;\r\n});\r\n```\r\n\r\nRead the RETRY_AFTER:\r\n\r\n```             \r\nrateLimiterOptions.OnRejected = (context, cancellationToken) =\u003e\r\n{\r\n    if (context.Lease.TryGetMetadata(MetadataName.RetryAfter, out var retryAfter))\r\n    {\r\n        context.HttpContext.Response.Headers.RetryAfter =\r\n            ((int)retryAfter.TotalSeconds).ToString(NumberFormatInfo.InvariantInfo);\r\n    }\r\n};\r\n```\r\n\r\n### Expected Behavior\r\n\r\nOn `SlidingWindowLease` object, `_retryAfter` field should be estimated and populated.\r\n\r\n### Steps To Reproduce\r\n\r\n[Github repo](https://github.com/ValentinVadasz/SlidingWindowRateLimiterBug)\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\nnet7.0, net8.0\r\n\r\n### Anything else?\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOv0QTfQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86QUeTw",
                                           "createdAt":  "2024-10-18T04:00:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEfDbSA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Deathwrap",
                                                                               "createdAt":  "2024-11-12T10:52:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JeFou",
                                                                               "createdAt":  "2024-12-20T12:32:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JustinAren",
                                                                               "createdAt":  "2025-01-22T10:24:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kaspianturbo",
                                                                               "createdAt":  "2025-02-12T20:36:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kapral",
                                                                               "createdAt":  "2025-04-18T09:53:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nwoolls",
                                                                               "createdAt":  "2025-05-12T19:08:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Makciek",
                                                                               "createdAt":  "2025-06-25T06:53:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "thomotron",
                                                                               "createdAt":  "2025-08-21T03:11:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  8
                                                         },
                                           "author":  "lonix1",
                                           "body":  "Agreed: *this is  bug, and also is documented incorrectly.*\n\nWithout the retry property, the sliding window limiter is effectively useless in most use cases.\n\nCan someone please label it as a bug, as it seems to have been forgotten?\n\nAlso, could it be fixed for v9?",
                                           "updatedAt":  "2024-10-18T04:00:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86fgT-q",
                                           "createdAt":  "2025-02-22T06:22:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sandeep-vemula",
                                           "body":  "seems, this is still not fixed. Anyone able to find any workaround on this or any alternate package?",
                                           "updatedAt":  "2025-02-22T06:22:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86_RBN9",
                                           "createdAt":  "2025-08-21T03:57:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "thomotron",
                                           "body":  "I ran into this issue today as well.\n\nLooking at the rate limiter itself it seems that the `SlidingWindowLease`, despite having a constructor which accepts the retry after `TimeSpan`, is never actually given a value for it. The lease acquisition process uses [two static lease instances](https://github.com/dotnet/runtime/blob/3b1cfdc32ac10833176a22d2d5b9ae03595472bf/src/libraries/System.Threading.RateLimiting/src/System/Threading/RateLimiting/SlidingWindowRateLimiter.cs#L35-L36) which are created with a null timespan.\n\nIf this is truly not supposed to be implemented then the documentation ought to be updated to reflect that, but the fact `SlidingWindowLease` has [a constructor](https://github.com/dotnet/runtime/blob/3b1cfdc32ac10833176a22d2d5b9ae03595472bf/src/libraries/System.Threading.RateLimiting/src/System/Threading/RateLimiting/SlidingWindowRateLimiter.cs#L442) explicitly defined to accept a `TimeSpan` suggests otherwise.",
                                           "updatedAt":  "2025-08-21T03:57:15Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "RETRY_AFTER is null in Lease object in case of SlidingWindow rate limiter",
        "labels":  [
                       "feature-rate-limit",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/52419",
        "createdAt":  "2023-11-28T07:08:35Z",
        "number":  52419,
        "author":  "witskeeper",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:07:18Z",
        "body":  "## Background and Motivation\r\n\r\nThe ASP.NET Core output caching middleware is great, but \"limited\" in terms of policy validation. Let\u0027s start with some code that you can write today in .NET 7:\r\n```\r\nbuilder.Services.AddOutputCache(options =\u003e\r\n{\r\n    options.AddPolicy(\"customPolicy\", builder =\u003e  builder.Expire(TimeSpan.FromSeconds(20)));\r\n});\r\n```\r\nThere is no way to validate that customPolicy actually exists. This is useful when configuring multiple routes from configuration such as is the case for YARP. See https://github.com/microsoft/reverse-proxy/pull/2328\r\n\r\n## Proposed API\r\n\r\nIt would be preferred to something similar to [IAuthorizationPolicyProvider](https://github.com/dotnet/aspnetcore/blob/2b63a5fc7fee6944af03723767be2335f1d9bf9c/src/Security/Authorization/Core/src/IAuthorizationPolicyProvider.cs) implemented via [DefaultAuthorizationPolicyProvider](https://github.com/dotnet/aspnetcore/blob/2b63a5fc7fee6944af03723767be2335f1d9bf9c/src/Security/Authorization/Core/src/DefaultAuthorizationPolicyProvider.cs) and [ICorsPolicyProvider](https://github.com/dotnet/aspnetcore/blob/2b63a5fc7fee6944af03723767be2335f1d9bf9c/src/Middleware/CORS/src/Infrastructure/ICorsPolicyProvider.cs) implemented via [DefaultCorsPolicyProvider](https://github.com/dotnet/aspnetcore/blob/2b63a5fc7fee6944af03723767be2335f1d9bf9c/src/Middleware/CORS/src/Infrastructure/DefaultCorsPolicyProvider.cs)\r\n\r\n```diff\r\nnamespace Microsoft.AspNetCore.OutputCaching;\r\n\r\n+ public interface IOutputCachePolicyProvider\r\n+ {\r\n+     ValueTask\u003cIOutputCachePolicy?\u003e GetPolicyAsync(string policyName);\r\n+ }\r\n+\r\n+ public class DefaultOutputCachePolicyProvider : IOutputCachePolicyProvider\r\n+ {\r\n+     private readonly OutputCacheOptions _options;\r\n+     \r\n+     public DefaultOutputCachePolicyProvider(IOptions\u003cOutputCacheOptions\u003e options)\r\n+     {\r\n+     \r\n+     }\r\n+     \r\n+     public ValueTask\u003cIOutputCachePolicy?\u003e GetPolicyAsync(string policyName)\r\n+     {\r\n+         options.NamedPolicies[policyName];\r\n+     }\r\n+ }\r\n```\r\nOutputCacheOptions.NamedPolicies is internal hence this feature cannot be added in another library or the final application.\r\n\r\n## Usage Examples\r\n\r\nSee YARP: https://github.com/microsoft/reverse-proxy/blob/02435e0e2eb3e757fc928d9157cfcc7f2859910b/src/ReverseProxy/Configuration/RouteValidators/OutputCachePolicyValidator.cs#L27-L33\r\n\r\n## Alternative Designs\r\n\r\nNone\r\n\r\n## Risks\r\n\r\nNone\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiKy7MQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85tCFOk",
                                           "createdAt":  "2023-11-28T07:36:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "witskeeper",
                                           "body":  "like #45684 ",
                                           "updatedAt":  "2023-11-28T07:36:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85tFiXD",
                                           "createdAt":  "2023-11-28T16:08:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \"champion\" this change in the meeting, and they understand the impact and design of the change.",
                                           "updatedAt":  "2023-11-28T16:08:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85uCh_p",
                                           "createdAt":  "2023-12-07T21:44:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "@sebastienros Have you seen this yet? Do you think it\u0027s a good idea?",
                                           "updatedAt":  "2023-12-07T21:44:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85uC4hB",
                                           "createdAt":  "2023-12-07T23:14:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sebastienros",
                                           "body":  "My naive response would be to add a `GetPolicy(string name)` to the options, but the suggested design would offer more flexibility and allow new patterns to provide custom policies.\r\n\r\nNote that the API suggestion seems to be a copy-paste of the RateLimiting one since it\u0027s referring to `DefaultKeyType` which is not part of OutputCache. The returned value should be `IOutputCachePolicy`.\r\n\r\n**Update:** API suggestion has been fixed",
                                           "updatedAt":  "2023-12-07T23:53:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85uDBBA",
                                           "createdAt":  "2023-12-07T23:56:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "API Review Notes:\r\n\r\n- We removed references to `DefaultKey` in the proposal that appears to be copy-pasted from the rate limiter proposal in https://github.com/dotnet/aspnetcore/issues/45684.\r\n- We don\u0027t think the implementation needs to be public.\r\n- Given that this doesn\u0027t need to expose a new key type publicly like the rate limiter proposal, we think we can accept this.\r\n- The current middleware should use this interface without accessing the options directly to make replacing the implementation useful.\r\n\r\nAPI Approved!\r\n\r\n```diff\r\nnamespace Microsoft.AspNetCore.OutputCaching;\r\n\r\n+ public interface IOutputCachePolicyProvider\r\n+ {\r\n+     ValueTask\u003cIOutputCachePolicy?\u003e GetPolicyAsync(string policyName);\r\n+ }\r\n```",
                                           "updatedAt":  "2023-12-07T23:56:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86IbKV2",
                                           "createdAt":  "2024-08-14T13:52:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODuFjRQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "witskeeper",
                                                                               "createdAt":  "2024-08-14T17:06:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "onurkanbakirci",
                                           "body":  "I\u0027m working on it",
                                           "updatedAt":  "2024-08-14T13:52:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86IrLsx",
                                           "createdAt":  "2024-08-16T07:58:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODvCJKQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "witskeeper",
                                                                               "createdAt":  "2024-08-21T06:49:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "onurkanbakirci",
                                           "body":  "Done #57362\r\n\r\n@witskeeper ",
                                           "updatedAt":  "2024-08-16T07:59:09Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "OutputCache configuration - policy validation",
        "labels":  [
                       "api-approved",
                       "feature-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/52622",
        "createdAt":  "2023-12-07T09:32:27Z",
        "number":  52622,
        "author":  "jamezamm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6K_eQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KennethHoff",
                                            "createdAt":  "2023-12-10T13:08:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "refractalize",
                                            "createdAt":  "2024-08-14T09:56:20Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-29T17:44:26Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [x] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nProgram.cs:\r\n\r\n```\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.Services.AddExceptionHandler\u003cGlobalExceptionHandler\u003e();\r\n\r\nvar app = builder.Build();\r\n\r\n// Configure the HTTP request pipeline.\r\nif (!app.Environment.IsDevelopment())\r\n{\r\n    app.UseExceptionHandler(\"/Error\");\r\n    app.UseHsts();\r\n}\r\nelse\r\n{\r\n    app.UseDeveloperExceptionPage();\r\n}\r\n\r\n...\r\n\r\napp.Run();\r\n```\r\n\r\nGlobalExceptionHandler.cs:\r\n\r\n```\r\npublic class GlobalExceptionHandler : IExceptionHandler\r\n{\r\n    public async ValueTask\u003cbool\u003e TryHandleAsync(HttpContext httpContext, Exception exception, CancellationToken cancellationToken)\r\n    {\r\n        ...\r\n\r\n        return false;\r\n    }\r\n}\r\n```\r\n\r\nAs stated within the [documentation ](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/error-handling?view=aspnetcore-8.0), registered exception handlers are triggered when using either **UseExceptionHandler()** or **UseDeveloperExceptionPage()**.\r\n\r\nWhen in production (**UseExceptionHander()**) the GlobalExceptionHandler is triggered successfully, while in development (**UseDeveloperExceptionPage()**) the GlobalExceptionHandler is **NOT** triggered.\r\n\r\n\r\n### .NET Version\r\n\r\n8",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOek1RMw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85t_9N9",
                                           "createdAt":  "2023-12-07T14:51:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yugabe",
                                           "body":  "In the default templates, the exception handler middleware is only added to the pipeline in non-development scenarios, for example:\r\n```csharp\r\n    if (app.Environment.IsDevelopment())\r\n    {\r\n        app.UseWebAssemblyDebugging();\r\n    }\r\n    else\r\n    {\r\n        app.UseExceptionHandler(\"/error\", createScopeForErrors: true);\r\n        app.UseHsts();\r\n    }\r\n```\r\n\r\nAdditionally, in the Development environment, the DeveloperExceptionPage middleware is ambiently added to the pipeline. It will only handle unhandled Exceptions. So if you want to handle the exception yourself, you have to add `app.UseExceptionHandler` to the pipeline.\r\n\r\nIf you want to register it in Development environment as well, you can do so. Or you can use any of the alternative ways, like a custom (non-`IExceptionHandler`) middleware with `try-catch`. ",
                                           "updatedAt":  "2023-12-07T14:51:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85uA3bC",
                                           "createdAt":  "2023-12-07T17:02:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kahbazi",
                                           "body":  "@jamezamm This is by design currently the \u0027IExceptionHandler\u0027 only works for the `UseExceptionHandler()` middleware and not the `UseDeveloperExceptionPage()`. \r\n\r\nPerhaps this would be a good feature to add.",
                                           "updatedAt":  "2023-12-07T17:02:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85uEyiJ",
                                           "createdAt":  "2023-12-08T08:21:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jamezamm",
                                           "body":  "@Kahbazi In my opinion this feature is a **MUST** as I cannot use Developer exception pages together with IExceptionHandler. Therefore my only option is not to use the developer exception pages middleware.\r\n\r\nAdditionally, this feature is heavily implied within the [documentation](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/error-handling?view=aspnetcore-8.0). Specifically:\r\n\r\n\u003e When the preceding code runs in the Development environment:\r\n\u003e \r\n\u003e - The CustomExceptionHandler is called first to handle an exception.\r\n\u003e - After logging the exception, the TryHandleException method returns false, so the [developer exception page](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/error-handling?view=aspnetcore-8.0#developer-exception-page) is shown.\r\n",
                                           "updatedAt":  "2023-12-08T08:26:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85uLOH4",
                                           "createdAt":  "2023-12-09T15:08:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kahbazi",
                                           "body":  "\u003e Additionally, this feature is heavily implied within the [documentation](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/error-handling?view=aspnetcore-8.0).\r\n\r\nThis seems like a problem with docs. \r\n\r\nAlso you can use `IDeveloperPageExceptionFilter` for DeveloperPageException.",
                                           "updatedAt":  "2023-12-09T15:08:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85uNPEF",
                                           "createdAt":  "2023-12-10T13:17:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD9QRbg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "travisklotz-lt",
                                                                               "createdAt":  "2024-03-11T18:47:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Meigs2",
                                                                               "createdAt":  "2024-12-02T19:15:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "KennethHoff",
                                           "body":  "This confused me a lot as well, and I resorted to simply remove the call to `UseDeveloperExceptionPage`.\r\n\r\nBasically what I want is for the developer exception page to effectively be the last in the pipeline of exception handlers.\r\n\r\n```c#\r\n// Stuff before...\r\nbuilder.Services.AddExceptionHandler\u003cFirstCustomExceptionHandler\u003e() // Handles some specific case\r\nbuilder.Services.AddExceptionHandler\u003cSecondCustomExceptionHandler\u003e() // Handles another specific case\r\n\r\nif (!builder.Environment.IsDevelopment())\r\n{\r\n\tbuilder.Services.AddExceptionHandler\u003cFallbackExceptionHandler\u003e(); // Fallback handler for Prod\r\n}\r\n\r\n// Stuff in-between...\r\n\r\nif (!app.Environment.IsDevelopment())\r\n{\r\n    app.UseExceptionHandler();\r\n}\r\nelse\r\n{\r\n    app.UseDeveloperExceptionPage(); // Fallback handler for development\r\n}\r\n\r\n// Stuff after..\r\n```\r\n\r\nMaybe it could even be refactored _into_ an exception handler á la this:\r\n\r\n```c#\r\n// Stuff before...\r\n\r\nbuilder.Services.AddExceptionHandler\u003cFirstCustomExceptionHandler\u003e();\r\nbuilder.Services.AddExceptionHandler\u003cSecondCustomExceptionHandler\u003e();\r\n\r\nif (!builder.Environment.IsDevelopment())\r\n{\r\n\tbuilder.Services.AddExceptionHandler\u003cFallbackExceptionHandler\u003e();\r\n}\r\nelse\r\n{\r\n\tbuilder.Services.AddExceptionHandler\u003cDeveloperExceptionPageExceptionHandler\u003e() // This is the built-in one.\r\n}\r\n\r\n// Stuff in-between...\r\n\r\napp.UseExceptionHandler();\r\n\r\n// Stuff after..\r\n```",
                                           "updatedAt":  "2023-12-10T13:21:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde854tDrI",
                                           "createdAt":  "2024-03-28T12:32:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "emetrix",
                                           "body":  "I\u0027m facing the same issue. In my opinion and refering to the docs a custom exception handing middleware should ALWAYS be called, whether or not the UseDeveloperExceptionPage() is used ?",
                                           "updatedAt":  "2024-03-28T12:32:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde856TVEz",
                                           "createdAt":  "2024-04-12T14:38:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "voroninp",
                                           "body":  "[Why?](https://github.com/dotnet/aspnetcore/blob/ba3460aa8247c43e834cb1568b80590b7d218a16/src/Middleware/Diagnostics/src/ExceptionHandler/ExceptionHandlerMiddlewareImpl.cs#L130C9-L130C94)\r\n\r\nWhy is it unhandled, if `IExceptionHandler` can handle it?\r\n\r\nI see the same exception twice. The first one is from the middleware, and then it is logged by `IExceptionHanlder`.",
                                           "updatedAt":  "2024-04-12T14:40:56Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "IExceptionHandler not being called when using UseDeveloperExceptionPage()",
        "labels":  [
                       "Docs",
                       "feature-diagnostics",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/52670",
        "createdAt":  "2023-12-08T15:23:16Z",
        "number":  52670,
        "author":  "dv00d00",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:27:19Z",
        "body":  "### Background and motivation\n\nTo dynamically set cache expiration based on customer logic.\n\n### API Proposal\n\nNo changes to api\n\n### API Usage\n\n```csharp\r\n    ValueTask IOutputCachePolicy.ServeResponseAsync(OutputCacheContext c, CancellationToken ct)\r\n    {\r\n        switch (c.HttpContext.Response.StatusCode)\r\n        {\r\n            case \u003e= 200 and \u003c 300:\r\n                c.AllowCacheStorage = true;\r\n                break;\r\n            \r\n            case \u003e= 400 and \u003c 500 when CachedResponseValidForPropertyInfo != null:\r\n                c.AllowCacheStorage = true;\r\n                // currently ignored by middleware\r\n                c.ResponseExpirationTimeSpan = TimeSpan.FromMinutes(0.5);\r\n                // CachedResponseValidForPropertyInfo.SetValue(c, _errorExpirationBoxed);\r\n                break;\r\n            \r\n            default:\r\n                c.AllowCacheStorage = false;\r\n                break;\r\n        };\r\n\r\n        return ValueTask.CompletedTask;\r\n    }\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoUIOmw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde856Iz5_",
                                           "createdAt":  "2024-04-11T07:51:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Raziel233",
                                           "body":  "Please implement this :)",
                                           "updatedAt":  "2024-04-11T07:51:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86hQg6b",
                                           "createdAt":  "2025-03-07T03:45:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xavierjohn",
                                           "body":  "Why is ResponseExpirationTimeSpan  getting ignored?",
                                           "updatedAt":  "2025-03-07T03:45:21Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[API Proposal]: Microsoft.AspNetCore.OutputCaching consider adding a way to change expiration time based on logic in IOutputCachePolicy",
        "labels":  [
                       "api-suggestion",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/52738",
        "createdAt":  "2023-12-11T18:38:06Z",
        "number":  52738,
        "author":  "Rebel028",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4Rg6w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eulerchavez",
                                            "createdAt":  "2024-04-05T01:10:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zlant",
                                            "createdAt":  "2024-04-16T11:31:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bitbound",
                                            "createdAt":  "2024-05-30T17:25:18Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-07-29T17:44:27Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nThe title pretty much says it all.\r\nThere is related issue https://github.com/dotnet/aspnetcore/issues/45469 which pretty much describes this bug/feature but I\u0027d like to focus on the other aspect of the problem. \r\n\r\nOutput caching was introduced in .net7 as more reliable alternative to response caching. One of it\u0027s core features was that unlike response caching it couldn\u0027t be disabled by sending  `max-age=0` or `no-cache` in `Cache-control` header. \r\n\r\nDefault policy for output caching has this check that seems a bit doubtful:\r\nhttps://github.com/dotnet/aspnetcore/blob/e0e1d582a993feddf346e7224c7fbd712376d91f/src/Middleware/OutputCaching/src/Policies/DefaultPolicy.cs#L76\r\n\r\nThis check passes if there\u0027s `Authorization` header present **regardles of it\u0027s content and of controller\u0027s requirements**, which means any output cache can be effectively bypassed by adding an `Authorization` header to any request.\r\n\r\nThe question is: should it behave like this **by default?**\r\n\r\nYes, I know that \r\n\u003e authenticated requests are not cached by design \r\n\r\n_Originally posted by @sebastienros in https://github.com/dotnet/aspnetcore/issues/45469#issuecomment-1338323610_\r\n\r\nbut the presence of a single specific header does not make the request authenticated!\r\n\r\nYes, I know that I can configure my own caching policy but shouldn\u0027t something like this be a default?\r\n\n\n### Expected Behavior\n\nIn my humble opinion the correct condition for this chek should be something like:\r\n\r\n```csharp\r\nif (request.HttpContext.User?.Identity?.IsAuthenticated == true)\r\n{\r\n    return false;\r\n}\r\n```\r\n\r\nIn case of someone putting the correct Bearer Token in a header by mistake. It works only if `[Authorize]` attribute is present on a controller action. Otherwise `HttpContext.User` is not authenticated. However this solution has a downside as it will only work with minimal API or if the api controller itself does not have the `[Authorize]` attribute.\r\n\r\nBut regardless of `[Authorize]` attribute this also prevents the malicious use of invalid `Authorization` header to purposely perform a Thundering Herd attack.\n\n### Steps To Reproduce\n\n1. Create a controller action or a minimal API endpoint with Output caching configured. (The controller **and** the action should **not** have `[Authorize]` attribute if you plan to use valid jwt authentication bearer in the next step). \r\n2. Make a request to an endpoint with the Authorization header present (the value of header doesn\u0027t matter). Observe that the response is not cached.\r\n3. Make the same request to the same endpoint without the Authorization header present. Observe that it will be cached.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.100\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Output Caching DefaultPolicy allows bypassing cache with any Authorization header even if there\u0027s no [Authorize] attribute specified",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/53210",
        "createdAt":  "2024-01-08T09:44:40Z",
        "number":  53210,
        "author":  "TediSalivio",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T17:44:27Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI added this code to my program.cs but its not getting triggered, i already have my Error page\r\n\r\napp.UseStatusCodePagesWithRedirects(\"/Error?code={0}\");\n\n### Expected Behavior\n\nWhen my token is expired the UseStatusCodePagesWithRedirects should automatically detect a 401 error returned by my api call and will automatically redirect to the Error page\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n.NET 8\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcC5zXw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85wJpWb",
                                           "createdAt":  "2024-01-08T18:02:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "What happens instead?\r\n\r\nWhat do the server logs say?\r\n\r\nPlease show your program.main / startup code in context to ensure the correct ordering.",
                                           "updatedAt":  "2024-01-08T18:02:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85wLnNf",
                                           "createdAt":  "2024-01-09T00:52:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TediSalivio",
                                           "body":  "\u003e What happens instead?\r\n\u003e \r\n\u003e What do the server logs say?\r\n\u003e \r\n\u003e Please show your program.main / startup code in context to ensure the correct ordering.\r\n\r\nThis is the program.cs screenshot\r\n\r\n![program cs screenshot](https://github.com/dotnet/aspnetcore/assets/120305713/2ab66fbc-20f8-4b58-a5f8-7c5f55378b05)\r\n",
                                           "updatedAt":  "2024-01-09T00:52:07Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "UseStatusCodePagesWithRedirects not working",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/53229",
        "createdAt":  "2024-01-09T04:57:39Z",
        "number":  53229,
        "author":  "danroth27",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCBivQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "boukenka",
                                            "createdAt":  "2024-01-09T07:11:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "monkeyTrainer",
                                            "createdAt":  "2024-01-09T13:20:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mairaw",
                                            "createdAt":  "2024-01-22T18:05:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aabiryukov",
                                            "createdAt":  "2024-02-26T10:45:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "shubham1172",
                                            "createdAt":  "2024-04-22T18:14:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "odan",
                                            "createdAt":  "2024-06-23T11:16:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "george-chakhidze",
                                            "createdAt":  "2025-05-05T12:17:10Z"
                                        }
                                    ],
                          "totalCount":  7
                      },
        "updatedAt":  "2025-07-29T18:27:19Z",
        "body":  "We\u0027ve received several reports from new users trying out ASP.NET Core that are confused by the \"Failed to determine the https port for redirect\" warning when running with the default http launch profile:\r\n\r\n- https://github.com/dotnet/core/issues/9044\r\n- https://github.com/dotnet/core/issues/9010\r\n- https://github.com/dotnet/core/issues/8960\r\n- https://github.com/dotnet/core/issues/9074\r\n\r\n@mairaw ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOn1X47Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86fVfjt",
                                           "createdAt":  "2025-02-21T02:41:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bluesherpa",
                                           "body":  "I agree with this confusion. Has it been resolved, or is there some sort of explanation that might help with understanding why the default template is configured this way?\n\nWhat I know...\n\nThe default application created with by running \"dotnet new mvc -n testApp\", will have https support, but it won\u0027t use it when executing the application with the command:\n\ndotnet run\n\nThis is what most people seem to do.  Instead, you have to use the command \n\ndotnet run --launch-profile \"https\"\n\nThis will tell the app to launch on a profile, which is defined in the file Properties \u003e launchSettings.json\n\nYou now have a solution to the problem, but I honestly think this shouldn\u0027t be necessary for new users.",
                                           "updatedAt":  "2025-02-21T02:47:28Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "New users are confused by the \"Failed to determine the https port for redirect\" warning",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/53426",
        "createdAt":  "2024-01-16T22:02:01Z",
        "number":  53426,
        "author":  "BrennanConroy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODOG6qQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2024-01-16T22:04:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2024-01-17T07:07:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "apoulet-olo",
                                            "createdAt":  "2024-01-24T09:13:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2024-01-27T12:25:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NielsPilgaard",
                                            "createdAt":  "2024-02-02T20:02:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Pinox",
                                            "createdAt":  "2024-02-03T16:56:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "altso",
                                            "createdAt":  "2024-02-05T20:21:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "glen-84",
                                            "createdAt":  "2024-02-11T16:51:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DavidNepozitek",
                                            "createdAt":  "2024-02-13T12:43:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cecilphillip",
                                            "createdAt":  "2024-02-15T04:25:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "brijeshb",
                                            "createdAt":  "2024-02-20T19:48:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tjwolfe",
                                            "createdAt":  "2024-03-05T13:29:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EvanMulawski",
                                            "createdAt":  "2024-03-15T19:00:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Zodt",
                                            "createdAt":  "2024-03-16T02:08:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GMouaad",
                                            "createdAt":  "2024-03-17T16:08:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sergiojrdotnet",
                                            "createdAt":  "2024-03-18T00:30:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kz-gonzalo-curbelo",
                                            "createdAt":  "2024-03-18T14:28:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "igorpos",
                                            "createdAt":  "2024-03-19T13:16:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KennethHoff",
                                            "createdAt":  "2024-03-20T20:51:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "md-redwan-hossain",
                                            "createdAt":  "2024-03-29T06:27:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "splitt3r",
                                            "createdAt":  "2024-04-01T11:10:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "guibranco",
                                            "createdAt":  "2024-04-17T10:21:48Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "guibranco",
                                            "createdAt":  "2024-04-17T10:21:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YohanSciubukgian",
                                            "createdAt":  "2024-04-21T23:50:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Daniel-Svensson",
                                            "createdAt":  "2024-05-23T17:28:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2024-05-27T23:54:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xshaheen",
                                            "createdAt":  "2024-06-06T14:27:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "leniency",
                                            "createdAt":  "2024-06-07T15:47:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "codeprefect",
                                            "createdAt":  "2024-06-28T10:35:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "saithis",
                                            "createdAt":  "2024-10-23T09:40:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "marekott",
                                            "createdAt":  "2024-10-30T11:43:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "plachor",
                                            "createdAt":  "2024-10-30T11:44:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "grsw92",
                                            "createdAt":  "2024-10-30T11:45:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KrzysztofBranicki",
                                            "createdAt":  "2024-10-30T12:47:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ramonesz297",
                                            "createdAt":  "2025-01-04T23:48:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "david-visma",
                                            "createdAt":  "2025-01-13T15:38:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bronteq",
                                            "createdAt":  "2025-02-11T09:49:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jmbryan4",
                                            "createdAt":  "2025-02-27T15:32:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "orjan",
                                            "createdAt":  "2025-03-26T22:01:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "npeeples",
                                            "createdAt":  "2025-05-20T22:49:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Varorbc",
                                            "createdAt":  "2025-09-03T08:48:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sandrohanea-msft",
                                            "createdAt":  "2025-09-03T09:56:14Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "sandrohanea-msft",
                                            "createdAt":  "2025-09-03T09:56:15Z"
                                        }
                                    ],
                          "totalCount":  43
                      },
        "updatedAt":  "2024-11-06T19:47:43Z",
        "body":  "This issue captures issues related to rate limiting work in .NET 9. Issues and categorizations are subject to change as design and planning is underway.\r\n\r\n* Distributed rate limiting\r\n  - Redis Implementation\r\n  - Any new primitives needed?\r\n* More Configuration\r\n  - Changing config at runtime\r\n  - `IConfiguration` support?\r\n* Missing features\r\n  - Weighted endpoints (e.g. `POST /buyItem` costs 2 instead of 1 for `GET /listItems`)\r\n  - Circuit breaker? (X request failures/sec, fail incoming requests to allow service time to self-heal)\r\n* Metrics\r\n  - Any additional metrics needed?\r\n  - At a minimum document how to do manual metric retrieval",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkqpfgg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85yA4jI",
                                           "createdAt":  "2024-01-26T23:43:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOECNrhw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sizzle168",
                                                                               "createdAt":  "2024-02-01T19:25:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NielsPilgaard",
                                                                               "createdAt":  "2024-02-02T20:03:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "altso",
                                                                               "createdAt":  "2024-02-05T20:21:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aKzenT",
                                                                               "createdAt":  "2024-02-06T18:17:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "robcao",
                                                                               "createdAt":  "2024-02-13T22:10:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jscarle",
                                                                               "createdAt":  "2024-02-14T05:01:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "christiannagel",
                                                                               "createdAt":  "2024-02-23T20:55:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EvanMulawski",
                                                                               "createdAt":  "2024-03-15T19:00:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "spanglerco",
                                                                               "createdAt":  "2024-03-25T18:53:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "atomaras",
                                                                               "createdAt":  "2024-03-27T19:26:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cecilphillip",
                                                                               "createdAt":  "2024-05-15T22:43:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TrayanZapryanov",
                                                                               "createdAt":  "2024-05-28T19:01:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xshaheen",
                                                                               "createdAt":  "2024-06-06T14:28:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "permagne",
                                                                               "createdAt":  "2024-07-16T09:21:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MikeNolan678",
                                                                               "createdAt":  "2024-08-09T09:52:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "guibranco",
                                                                               "createdAt":  "2024-09-12T10:11:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kuleshov-aleksei",
                                                                               "createdAt":  "2024-12-23T09:35:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "david-visma",
                                                                               "createdAt":  "2025-01-13T15:39:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  18
                                                         },
                                           "author":  "aKzenT",
                                           "body":  "What is missing from this list is the support of multiple rate limits per endpoint (as requested in #42691 ). E.g. you want to allow your order endpoint to accept a maximum of five orders per IP per minute, but also a maximum of 100 orders per day. ",
                                           "updatedAt":  "2024-01-26T23:43:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde853y9Ml",
                                           "createdAt":  "2024-03-20T15:28:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODjloXA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AlgorithmsAreCool",
                                                                               "createdAt":  "2024-03-21T19:27:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TrayanZapryanov",
                                                                               "createdAt":  "2024-05-28T19:01:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ShaneCourtrille",
                                           "body":  "@BrennanConroy One scenario we\u0027ve run into is the need for rate limiting for the first 3 minutes of startup after which we can safely switch to no limiter.  Is switching the rate limiter based on config going to be possible? Or would we just be using the concurrency limiter and changing the permit limit?",
                                           "updatedAt":  "2024-03-20T15:28:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85_NH-i",
                                           "createdAt":  "2024-05-27T23:47:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEH6Gpw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "altso",
                                                                               "createdAt":  "2024-05-28T15:10:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "expcat",
                                                                               "createdAt":  "2024-05-28T17:32:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "DavidNepozitek",
                                                                               "createdAt":  "2024-05-30T13:38:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "xshaheen",
                                                                               "createdAt":  "2024-06-06T14:29:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "GMouaad",
                                                                               "createdAt":  "2024-06-26T19:39:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "hgutta-bain",
                                                                               "createdAt":  "2024-07-25T03:32:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "MikeNolan678",
                                                                               "createdAt":  "2024-08-09T09:52:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "guibranco",
                                                                               "createdAt":  "2024-09-12T10:12:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "suraciii",
                                                                               "createdAt":  "2024-09-19T02:03:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "kamilzzz",
                                                                               "createdAt":  "2024-10-17T07:21:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "david-visma",
                                                                               "createdAt":  "2025-01-13T15:39:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "jmbryan4",
                                                                               "createdAt":  "2025-02-27T15:33:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  12
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "Unfortunately, the majority of this work is being pushed back to .NET 10.",
                                           "updatedAt":  "2024-05-27T23:47:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86Avb4D",
                                           "createdAt":  "2024-06-11T06:43:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEA7iWA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yardee",
                                                                               "createdAt":  "2024-06-11T06:46:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rjperes",
                                                                               "createdAt":  "2025-01-03T13:36:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jakubsemerak",
                                           "body":  "Also priority queues used inside rate limiters would be pretty nice. In our case we needed to skip the queue line by priority communication to minimize response time as much as possible. So we have replaced standard Queue with PriorityQueue and everything works flawlessly. IMO priority queue inside the limiters would be more universal.",
                                           "updatedAt":  "2024-06-11T06:43:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86LvKza",
                                           "createdAt":  "2024-09-11T18:33:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODx-jmA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "guibranco",
                                                                               "createdAt":  "2024-09-12T10:12:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "Re-titled the issue and moved it to the backlog for now until we find time to work on this area again.",
                                           "updatedAt":  "2024-09-11T18:33:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86R2csF",
                                           "createdAt":  "2024-10-30T12:27:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEfBbEg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KrzysztofBranicki",
                                                                               "createdAt":  "2024-10-30T12:48:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "altso",
                                                                               "createdAt":  "2024-10-30T14:28:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "YohanSciubukgian",
                                                                               "createdAt":  "2024-10-30T18:46:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tomas-pajurek",
                                                                               "createdAt":  "2024-12-01T06:20:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rjperes",
                                                                               "createdAt":  "2025-01-03T13:36:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "david-visma",
                                                                               "createdAt":  "2025-01-13T15:39:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jmbryan4",
                                                                               "createdAt":  "2025-02-27T15:33:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "douglaseccker",
                                                                               "createdAt":  "2025-08-20T20:29:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  8
                                                         },
                                           "author":  "marekott",
                                           "body":  "Hi guys, `Distributed rate limiting` seems like a very useful feature that would prevent many of developers from reinventing the wheel. In our case we are planning to introduce rate limiting on our edge microservice that is implementing YARP. Since it is distributed system there are multiple instances of that microservice varying in number between environments. Current implementation of rate limiting is not sufficient for us since we need to synchronize those limits between instances. \n\nOther developers that need to implement it in their distributed systems will face the same issue. All of us will have to create own implementations based on Redis solving the same problems over and over again. It would be cool if you could find time to introduce this feature :)",
                                           "updatedAt":  "2024-10-30T12:37:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86R8nde",
                                           "createdAt":  "2024-10-30T22:37:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rkargMsft",
                                           "body":  "As a \"right now\" solution, there is this package implementing distributed rate limiting using Orleans:\nhttps://github.com/managedcode/Orleans.RateLimiting\n\nThis includes exposing the core rate limiting primitives with Orleans as the coordinating state storage and implementations using that for Orleans grain calls as well as using them for [ASP.NET Core calls](https://github.com/managedcode/Orleans.RateLimiting?tab=readme-ov-file#attrubutes-for-webapi).",
                                           "updatedAt":  "2024-10-30T22:37:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86Sql-C",
                                           "createdAt":  "2024-11-06T19:47:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dtila",
                                           "body":  "Hi guys so from my point of view some work has to be done to have unified design.\nHere are my thoughts:\n\n1. A rate limit should allow having OnReject per each limit. \nExpected API:\n```\noptions.AddXXX(\"policyName\", options =\u003e\n options.OnRejected = .....\n```\nCurrently this functionality can be achieved by checking policy name by using if statements. However would be nice to have the reject attached to the policy as well.\nThis is needed in case you want to transmit to the client a response, eventually with the properties from the limit metadata\n\n\n2. An overload with options.AddRateLimit(\"name\", PartitionedRateLimiter instance) should be added. With the current design there is a discrepancy when you create a policy using options.AddXX and the GlobalLimiter. \nExpected behavior should be that everywhere should be using a PartitionedRateLimiter instance, similar with the current design of GlobalLimiter.\nAlso all the existing functions to add policy, should should call this new overload \n\n\nFor example, currently if you want to create a chained policy you use this API:\n```\n var ipRateLimit = PartitionedRateLimiter.Create\u003cHttpContext, string\u003e(CreateIpLimitPartition);\n var concurrencyLimit = PartitionedRateLimiter.Create\u003cHttpContext, string\u003e(CreateConcurrencyLimitPartition);\n options.GlobalLimiter = PartitionedRateLimiter.CreateChained(ipRateLimit, concurrencyLimit);\n```\n\nUsing the same API, you should also use call options.Add(\"mypolicy\", result_of_chained_policy)\nCurrently I could not find any way to achieve such a thing, even analysing the code,\n\n\n\n     ",
                                           "updatedAt":  "2024-11-06T19:47:42Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Epic: Rate Limiting",
        "labels":  [
                       "Epic",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/53490",
        "createdAt":  "2024-01-19T17:53:40Z",
        "number":  53490,
        "author":  "igor-henriques",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T17:44:28Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWhen using primary constructors, the `RequestDelegate` comes null, causing `404` to be returned everytime. When using default constructors, it is injected just fine, which is expected.\r\n\r\n![Imagem do WhatsApp de 2024-01-19 à(s) 14 45 09_64192b56](https://github.com/dotnet/aspnetcore/assets/54086793/4c9035f9-0028-490f-9900-8526017085bf)\n\n### Expected Behavior\n\nSince primary constructor is the same of having a single construtor definition, it should have the same behaviour as injecting the `RequestDelegate` in the default constructor.\n\n### Steps To Reproduce\n\n• Create a middleware \r\n• Use the new primary constructor to inject the RequestDelegate\r\n• Verify during debug that it is injected as null\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcU1uCQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85xTTyF",
                                           "createdAt":  "2024-01-19T18:20:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "martincostello",
                                           "body":  "Just to rule out in being a scoping thing, if you remove the field and just capture the parameter (so you don\u0027t have a field and a parameter both called `_request`), is it:\n\n1) null and causing a problem _when you use it_ (e.g. a `NullReferenceException`), or:\n2) does it _appear_ null in the debugger but the code works fine.\n\nI have noticed Visual Studio\u0027s debugger do case 2 in places where I\u0027ve used primary constructors, which obviously isn\u0027t ideal, but would be an IDE issue.",
                                           "updatedAt":  "2024-01-19T18:20:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85xTW4J",
                                           "createdAt":  "2024-01-19T18:27:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODVFUJA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "martincostello",
                                                                               "createdAt":  "2024-01-19T18:54:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pavinan",
                                                                               "createdAt":  "2024-02-01T23:50:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "igor-henriques",
                                           "body":  "\u003e Just to rule out in being a scoping thing, if you remove the field and just capture the parameter (so you don\u0027t have a field and a parameter both called `_request`), is it:\r\n\u003e \r\n\u003e 1. null and causing a problem _when you use it_ (e.g. a `NullReferenceException`), or:\r\n\u003e 2. does it _appear_ null in the debugger but the code works fine.\r\n\u003e \r\n\u003e I have noticed Visual Studio\u0027s debugger do case 2 in places where I\u0027ve used primary constructors, which obviously isn\u0027t ideal, but would be an IDE issue.\r\n\r\nActually, I\u0027m getting a 404 because I\u0027m using a MapWhen: \r\n\r\n![image](https://github.com/dotnet/aspnetcore/assets/54086793/eae8ee04-13dc-4747-85f6-1d04f92e6164)\r\n\r\nIf I just add the middleware directly, the pipeline continue just fine to my controller, even with the RequestDelegate coming as null. About what you\u0027re saying, yes, even removing the field, the RequestDelegate comes as null, but it doesn\u0027t early return the pipeline or throw any exception like I suggested in the description (which is weird).\r\n\r\nStill not sure if this is out of the scope of the issue tho. The RequestDelegate coming as null is a fact and doesn\u0027t reflect the same as using the default constructor, but it is not the reason for the 404, as I just explained above.",
                                           "updatedAt":  "2024-01-19T18:28:23Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "RequestDelegate is not injected on middlewares using Primary Constructor",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/54044",
        "createdAt":  "2024-02-14T21:27:28Z",
        "number":  54044,
        "author":  "thompson-tomo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T17:44:28Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI am trying to implement an actuator for sesssions modeled on the spring defintiion: https://docs.spring.io/spring-boot/docs/current/actuator-api/htmlsingle/#sessions\n\n### Describe the solution you\u0027d like\n\nI would like it to be possible to fetch from the session state additional information about the session such as:\r\n\r\n- Created datetime\r\n- last update datetime\r\n- The idle timeout\r\n\r\nIn the event a user is logged in it should be possible to both fetch the username for that session.\n\n### Additional context\n\nn/a",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdBb2Pg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde850Bk6P",
                                           "createdAt":  "2024-02-15T16:51:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Note that browser based sessions should not be used for any authenticated user information. Logins and browser sessions are independent mechanics with no lifetime guaranties between them.\r\n\r\nIsn\u0027t the idle timeout the same for all sessions? Or do you mean the current calculated value based on last access?\r\n\r\nCreation date you can do yourself by having a field in the session for that which you ensure is present for each request.\r\n\r\nFor last updated, is that just last modified or does it include sliding expiration based on last accessed? You could track last modified yourself but that would be tedious...",
                                           "updatedAt":  "2024-02-15T16:51:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde850FvY-",
                                           "createdAt":  "2024-02-16T02:26:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "thompson-tomo",
                                           "body":  "I am simply wanting to provide the data for the actuator, I don\u0027t plan to store user information other username so I can see which browser sessions have a user logged in \u0026 who. Thinking more about the metadata it would be beneficial to also have a flag logged in for when a user logs out but continued their session.\n\nI know it would be possible to track create date \u0026 idle time but was of the thought a common metadata object would be beneficial. Ie Aspire could have a page \"sessions\" which lists all sessions including start time \u0026 last action.\n\nBy last updated, I meant last Accessed which I know would be tedious hence wanting it to be available natively which I feel would be easier to achieve.",
                                           "updatedAt":  "2024-02-16T02:26:33Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Extend Meta data able to be fetched about a Session ",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/54082",
        "createdAt":  "2024-02-16T20:13:06Z",
        "number":  54082,
        "author":  "amcasey",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-20T10:17:51Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nIf HttpsRedirectionMiddleware redirects a request from http://localhost:5001 to https://localhost:5001, the redirected request will fail with a protocol error, since the port isn\u0027t using https.  When you accidentally get into this state, it can be hard to tell what\u0027s happening, so we should also improve the logging.\n\n### Expected Behavior\n\n1. Redirection should fail, rather than redirect to the same port\r\n2. There should be logging for this particular kind of redirection failure\r\n3. If possible, there should be logging about the conflicting configurations that led to the middleware thinking the port was accepting https\n\n### Steps To Reproduce\n\nMake a new webapi project:\r\n\r\nProgram.cs\r\n```csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.WebHost.UseKestrel(serverOptions =\u003e\r\n{\r\n    serverOptions.ListenAnyIP(5001);\r\n});\r\n\r\nvar app = builder.Build();\r\n\r\napp.UseHttpsRedirection();\r\n\r\napp.Run(async context =\u003e\r\n{\r\n    await context.Response.WriteAsync(\"Hello world!\");\r\n});\r\n\r\napp.Run();\r\n```\r\n\r\nProperties/launchSettings.json\r\n```json\r\n{\r\n  \"profiles\": {\r\n    \"Kestrel\": {\r\n      \"commandName\": \"Project\",\r\n      \"launchBrowser\": false,\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nNote that launchSettings _does not_ specify an application url - this is not the default behavior.\r\n\r\n```\r\n$ curl -v http://localhost:5001/\r\n*   Trying [::1]:5001...\r\n* Connected to localhost (::1) port 5001\r\n\u003e GET / HTTP/1.1\r\n\u003e Host: localhost:5001\r\n\u003e User-Agent: curl/8.4.0\r\n\u003e Accept: */*\r\n\u003e\r\n\u003c HTTP/1.1 307 Temporary Redirect\r\n\u003c Content-Length: 0\r\n\u003c Date: Fri, 16 Feb 2024 19:59:12 GMT\r\n\u003c Server: Kestrel\r\n\u003c Location: https://localhost:5001/\r\n\u003c\r\n* Connection #0 to host localhost left intact\r\n```\r\n\r\n\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9b4c5332ef0ef437120bd06454d2bbd335e030ac\n\n### Anything else?\n\nIt happens in HttpSys as well, setting UrlPrefix, rather than calling `ListenAnyIP`.\r\n\r\nAFAICT, because VS is unaware that the URL is being configured in code, it injects \r\n```\r\nASPNETCORE_HTTPS_PORT=5001\r\nASPNETCORE_URLS=https://localhost:5001/;http://localhost:5000/\r\n```\r\n\r\nAs a result, the middleware sees that https requests should go to port 5001.  Without the env var, the middleware would search existing endpoints to find one supporting https.  Since there isn\u0027t one in this particular repro, it would log a redirection failure and accept the http request as-is.\r\n\r\nIf the configuration in code specified a port other than 5001, the browser would at least show the user redirection to a port they weren\u0027t expecting, but it would still likely fail if the server weren\u0027t listening on that port.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdDBEAg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde850L7Vf",
                                           "createdAt":  "2024-02-16T20:25:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "amcasey",
                                           "body":  "If you change the configuration to\r\n```csharp\r\n    serverOptions.ListenAnyIP(5000);\r\n    serverOptions.ListenAnyIP(5002, listenOptions =\u003e\r\n    {\r\n        listenOptions.UseHttps();\r\n    });\r\n```\r\nand curl http://localhost:5000, you\u0027ll still get redirected to https://localhost:5001, even though the server isn\u0027t listening on that port.  It\u0027s unfortunate that code beats configuration for determining endpoints, but not for determining redirection.  @Tratcher conjectures \r\n\u003e Oh, actually that ordering might be specific to support container and proxy scenarios where https isn\u0027t locally configured\r\n\r\nIf we can\u0027t make the precedence agree, the solution may be to have the middleware compare the target point to the list of active endpoints (from the `IServerAddressesFeature`) and complain if it\u0027s not an https endpoint.",
                                           "updatedAt":  "2024-02-16T20:25:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde850MEQC",
                                           "createdAt":  "2024-02-16T20:53:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "\u003e and complain if it\u0027s not an https endpoint.\r\n\r\nif present. The port may not be bound locally in the reverse proxy scenairo.",
                                           "updatedAt":  "2024-02-16T20:53:00Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "HttpsRedirectionMiddleware should not redirect requests to the same port",
        "labels":  [
                       "area-networking",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/54182",
        "createdAt":  "2024-02-23T02:51:51Z",
        "number":  54182,
        "author":  "JamesNK",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODM9mFQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eerhardt",
                                            "createdAt":  "2024-02-23T15:21:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2024-02-24T23:28:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MortMH",
                                            "createdAt":  "2025-07-15T12:28:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Frulfump",
                                            "createdAt":  "2025-08-08T12:31:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pawchen",
                                            "createdAt":  "2025-08-28T00:56:36Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2025-08-28T01:01:27Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nCaching is a largely invisible operation. It\u0027s useful to have metrics to observe what is happening with caching.\n\n### Describe the solution you\u0027d like\n\nCaching has many APIs and usages in ASP.NET Core. See https://learn.microsoft.com/en-us/aspnet/core/performance/caching/overview?view=aspnetcore-8.0\r\n\r\n* In-memory caching\r\n* Distributed caching\r\n* Output caching\r\n* Response caching\r\n\r\nFind the most useful places to add metrics. Note that we should try to design metrics so that all implementations of a cache benefit. For example, all distributed caching implementations get metrics, rather than just Redis and leaving SQL Server cache out.\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwJAJGw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde8503Vtz",
                                           "createdAt":  "2024-02-23T02:52:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "FYI @mgravell (part of caching epic) @eerhardt",
                                           "updatedAt":  "2024-02-23T02:52:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87AkAkb",
                                           "createdAt":  "2025-08-28T00:59:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pawchen",
                                           "body":  "Yes, need some numbers to see how well it works/helps instead of blindly guessing.",
                                           "updatedAt":  "2025-08-28T01:01:27Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Metrics for caching",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/54216",
        "createdAt":  "2024-02-25T18:32:51Z",
        "number":  54216,
        "author":  "lhidrovo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC2LFXA==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "christolo",
                                            "createdAt":  "2024-02-27T14:01:14Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "audacity76",
                                            "createdAt":  "2024-02-28T09:06:48Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-29T18:27:20Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nI Have a Blazor Server .NET 8 App. In my local environment using the name \"Development\" the application runs correctly. However, after hosting the application on an IIS server side, all the content references at wwwroot are returning 404 like CSS, images, and javascript files. It can\u0027t find any resources (wwroot) even though the folder does exist on the server. As additional information, the application is hosted by  https://www.contoso.com/{MYAPP} and I have configured the App base path described in the documentation at [App Base Path](https://learn.microsoft.com/en-us/aspnet/core/blazor/host-and-deploy/?view=aspnetcore-7.0\u0026tabs=visual-studio#app-base-path). Everything works in the dev environment, but no int the server.\r\n\r\n**Some code examples in the program file**\r\n`WebApplicationBuilder builder = WebApplication.CreateBuilder(args);`\r\n\r\n`builder.WebHost.UseWebRoot(\"wwwroot\");`\r\n`builder.WebHost.UseStaticWebAssets();`\r\n\r\n`......`\r\n\r\n`WebApplication app = builder.Build();`\r\n\r\n`app.UseStaticFiles(\"/App/Treatment\");`\r\n`app.UsePathBase(\"/App/Treatment\");`\r\n\r\n....\r\n`app.UseHttpsRedirection();`\r\n\r\n`app.UseRouting();`\r\n`app.UseCors();`\r\n\r\n`app.UseAntiforgery();`\r\n\r\n`app.UseCookiePolicy();`\r\n`app.UseAuthentication();`\r\n`app.UseAuthorization();`\r\n`app.UseSession();`\r\n`app.UseResponseCaching();`\r\n\r\n`app.MapDefaultControllerRoute();`\r\n\r\n`app.MapRazorComponents\u003cApp\u003e()`\r\n    `.AddInteractiveServerRenderMode();`\r\n\r\n`app.Run();`\r\n\r\n\r\n**App.razor**\r\n`\u003cbase href=\"/App/Treatment/\" /\u003e`\r\n\r\n### Expected Behavior\r\n\r\n_No response_\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0.100\r\n\r\n### Anything else?\r\n\r\n![image](https://github.com/dotnet/aspnetcore/assets/161242684/98363fac-fed3-4931-9cd4-3a01da6cd123)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOowZeQA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde851X1ev",
                                           "createdAt":  "2024-02-28T15:05:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "christolo",
                                           "body":  "As a workaround for now I created a virtual directory in IIS for wwwroot and then setup a rewrite rule for /appsettings.json -\u003e wwwroot/appsettings.json until we figure out the issue.",
                                           "updatedAt":  "2024-02-28T15:05:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde851aiQl",
                                           "createdAt":  "2024-02-28T20:46:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOENS7bg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "christolo",
                                                                               "createdAt":  "2024-02-28T21:13:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maxbanas",
                                                                               "createdAt":  "2024-03-01T14:00:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "azubu23202869",
                                                                               "createdAt":  "2024-04-16T12:21:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CommissarClippy",
                                                                               "createdAt":  "2024-12-10T09:12:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "kalipudi",
                                                                               "createdAt":  "2025-02-20T09:49:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "s-beji",
                                                                               "createdAt":  "2025-03-19T01:38:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "steven-panxd",
                                                                               "createdAt":  "2025-04-08T07:40:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "leonardohidrovo",
                                           "body":  "I believe the issue is related to the **`UseStaticFiles`** middleware and the **`dotnet`** run command, causing an incorrect physical path where it is executed. To address this, I have implemented a workaround by specifying the physical path as follows:\r\n\r\n```\r\nWebApplication app = builder.Build();\r\napp.UseDefaultFiles();\r\n\r\nif (builder.Environment.IsDevelopment())\r\n{\r\n    app.UseStaticFiles(\"/App/Treatment\");\r\n}\r\nelse\r\n{\r\n    app.UseStaticFiles(new StaticFileOptions()\r\n    {\r\n        FileProvider = new PhysicalFileProvider($@\"{AppDomain.CurrentDomain.BaseDirectory}/wwwroot\")\r\n    });\r\n}\r\n\r\napp.UsePathBase(\"/App/Treatment\");\r\n```\r\nIt worked!",
                                           "updatedAt":  "2024-02-28T20:51:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde851arBW",
                                           "createdAt":  "2024-02-28T21:13:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "christolo",
                                           "body":  "Nice work. I\u0027ll give it a go myself. Thanks.",
                                           "updatedAt":  "2024-02-28T21:13:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde851nZQ_",
                                           "createdAt":  "2024-03-01T14:02:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maxbanas",
                                           "body":  "\u003e I believe the issue is related to the **`UseStaticFiles`** middleware and the **`dotnet`** run command, causing an incorrect physical path where it is executed. To address this, I have implemented a workaround by specifying the physical path as follows:\r\n\u003e \r\n\u003e ```\r\n\u003e WebApplication app = builder.Build();\r\n\u003e app.UseDefaultFiles();\r\n\u003e \r\n\u003e if (builder.Environment.IsDevelopment())\r\n\u003e {\r\n\u003e     app.UseStaticFiles(\"/App/Treatment\");\r\n\u003e }\r\n\u003e else\r\n\u003e {\r\n\u003e     app.UseStaticFiles(new StaticFileOptions()\r\n\u003e     {\r\n\u003e         FileProvider = new PhysicalFileProvider($@\"{AppDomain.CurrentDomain.BaseDirectory}/wwwroot\")\r\n\u003e     });\r\n\u003e }\r\n\u003e \r\n\u003e app.UsePathBase(\"/App/Treatment\");\r\n\u003e ```\r\n\u003e \r\n\u003e It worked!\r\n\r\nThis worked for me as well. Thank you! Looks like #51027 may be related?",
                                           "updatedAt":  "2024-03-01T14:02:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde856uc2W",
                                           "createdAt":  "2024-04-16T12:40:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "azubu23202869",
                                           "body":  "This doesn\u0027t work for me as I still cannot read files under the wwwroot directory.\r\n\r\nI added the following code to my code:\r\n```\r\napp.UseStaticFiles(new StaticFileOptions()\r\n{\r\n    FileProvider = new PhysicalFileProvider($@\"{AppDomain.CurrentDomain.BaseDirectory}/wwwroot\")\r\n});\r\n```\r\n![image](https://github.com/dotnet/aspnetcore/assets/43975713/e717625c-f804-4e9e-8dd8-dd6fa5793295)\r\n\r\n",
                                           "updatedAt":  "2024-04-16T12:42:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde858iZE6",
                                           "createdAt":  "2024-05-02T01:43:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "szijarto68",
                                           "body":  "Not working for me either.  I was hopeful to use Blazor for ongoing UI development, but this is a big fail.  I\u0027ve wasted hours trying to get the static files to get served up.",
                                           "updatedAt":  "2024-05-02T01:43:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86jBl5A",
                                           "createdAt":  "2025-03-19T01:39:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "s-beji",
                                           "body":  "Hey,\n\nCould you provide a reproduction project to show this issue?\nIt increases the likelihood that the issue will be picked up in the future\n\nThanks in advance",
                                           "updatedAt":  "2025-03-19T01:39:23Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Blazor server - Static files from wwwroot doesn\u0027t load using IIS (404)",
        "labels":  [
                       "feature-iis",
                       "area-networking",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/54331",
        "createdAt":  "2024-03-03T21:41:13Z",
        "number":  54331,
        "author":  "thompson-tomo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T17:44:29Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI want to be able to offer an api to obtain a list of all sessions as it is done in spring boot\n\n### Describe the solution you\u0027d like\n\nIt should be possible to fetch a list of all sessions that have been created in the system. This list needs to be distributed across instances if distributed cache is being used.\r\n\r\nI am thinking that we almost need a dedicated session to track the sessions with the keys associated with that session being for each session. This approach would then enable us to fetch the session\u0027s using the createsession method and then via the keys get a list of all other sessions.\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Extend ISessionStore to enable fetching a list of all sessions",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/54464",
        "createdAt":  "2024-03-10T03:33:26Z",
        "number":  54464,
        "author":  "fydar",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9nuBw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fowl2",
                                            "createdAt":  "2024-09-12T05:46:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "albi005",
                                            "createdAt":  "2024-12-19T23:27:15Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-03-12T16:49:38Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nCurrently, using the [default antiforgery](https://github.com/dotnet/aspnetcore/blob/b3b8dffff4d092058b2d8942268b498cbfdb14ec/src/Antiforgery/src/Internal/DefaultAntiforgery.cs#L373) implementation (`DefaultAntiforgery`) the headers `\"no-cache, no-store\"` are supplied.\r\n\r\nThe `no-store` header has the unfortunate side effect of slowing browser navigation by incurring additional web requests to the server whenever the user navigates using the forward and backward buttons.\r\n\r\nFrom my (limited) understanding of antiforgery tokens, this should be entirely doable.\r\n\r\nThis results in a page diagnostics warning. The rest of the reasons for this error disappear without the debugger attached.\r\n\r\n![image](https://github.com/dotnet/aspnetcore/assets/19309165/ee4eccf8-7e4d-4171-8c91-7dfd65ad4b32)\r\n\r\nDisabling antiforgery site-wide is not simple nor does it appear to be officially supported.\n\n### Expected Behavior\n\nAntiforgery should use `no-cache` instead of `no-cache, no-store`; or at least make this configurable so that backward-forward caching can be easily enabled.\n\n### Steps To Reproduce\n\n1. Create a blank project\r\n2. Disable dom preservation by replacing\r\n\r\n    ```html\r\n    \u003cscript src=\"_framework/blazor.web.js\"\u003e\u003c/script\u003e\r\n    ```\r\n    \r\n    With\r\n    \r\n    ```html\r\n    \u003cscript src=\"_framework/blazor.web.js\" autostart=\"false\"\u003e\u003c/script\u003e\r\n    \u003cscript\u003e\r\n        Blazor.start({\r\n            ssr: { disableDomPreservation: true }\r\n        });\r\n    \u003c/script\u003e\r\n    ```\r\n3. Add the time to the home page so we can see whether it\u0027s being cached\r\n4. Launch the application.\r\n5. Navigate from the home page to another page, and then navigate back to the home page using the back button.\r\n6. Observe that the time has been updated, and in the network tab observe that a web request has been made.\r\n\r\nYou can check out the project here.\\\r\nhttps://github.com/Fydar/AntiforgeryNoCacheIssue\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.200\n\n### Anything else?\n\nhttps://web.dev/articles/bfcache#minimize-no-store",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdrOvVg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde852s69W",
                                           "createdAt":  "2024-03-12T11:58:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODaQXSw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "fydar",
                                                                               "createdAt":  "2024-03-12T12:24:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "javiercn",
                                           "body":  "@Fydar thanks for contacting us.\r\n\r\nI did a bunch of \"archeology\" and it seems that this was done 8 years ago [here](https://github.com/dotnet/aspnetcore/commit/cd4afdc08384fe3fd255ae08fd4c62cdd7c3ee32).\r\n\r\nI\u0027m not 100% sure what the reasoning at the time was. Although I suspect it might have had to do with bugs being present in browsers at the time.\r\n\r\nI think it\u0027s reasonable for us to change this, but we\u0027ll have to do testing to ensure we don\u0027t introduce a regression on the behaviors this was aimed to address.\r\n\r\nI think this might have had to do with proxies also not following the headers correctly.\r\n\r\nNote for triage:\r\n* If we decide to make this change, we should have E2E tests for this area covering all major browsers to ensure we don\u0027t regress anything.\r\n* It\u0027s also likely that we want to rethink the value of the header, as we probably want to mark it as `private` to avoid storage in shared caches.",
                                           "updatedAt":  "2024-03-12T12:14:39Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Allow backwards-forwards navigation caching with antiforgery tokens",
        "labels":  [
                       "enhancement",
                       "area-middleware",
                       "help candidate",
                       "feature-antiforgery"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/54687",
        "createdAt":  "2024-03-22T10:44:33Z",
        "number":  54687,
        "author":  "marklagendijk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:27:20Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nI am trying to combine OutputCache with the Cache-Control response header.\r\nThe idea is that this allows for 3 layers of caching:\r\n1. The OutputCache\r\n2. Infrastructure cache. In my case caching on Azure FrontDoor POPs.\r\n3. Browser cache.\r\n\r\nThis concept can be nicely implemented by writing a custom `IOutputCachePolicy`. The OutputCache is really nice and allows to control exactly the right things.\r\nExcept two response headers:\r\n1. `Age` https://github.com/dotnet/aspnetcore/blob/ec293ee75c0c022370951a459b188fa81ec8b7c3/src/Middleware/OutputCaching/src/OutputCacheMiddleware.cs#L307\r\n2. `Date` https://github.com/dotnet/aspnetcore/blob/ec293ee75c0c022370951a459b188fa81ec8b7c3/src/Middleware/OutputCaching/src/OutputCacheMiddleware.cs#L400\r\n\r\nThese headers are set _after_ all hooks of the Policies are invoked. Therefore one cannot control them in the custom policy.\r\n\r\nWhy does this matter?\r\nWith this approach we are telling the world (proxies such as CDNs and browsers) that the cached responses we are serving have a certain age that needs to be considered. However, if we know that we purge the OutputCache whenever there is new content, we can consider the Age to be 0.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nI would like to be able to return cached responses with:\r\n- `Date`: Now datetime\r\n- `Age`: `0` (or maybe omitted?)\r\n\r\nBecause I know I will purge all relevant content from the OutputCache using `IOutputCacheStore.EvictByTagAsync(tagName)` calls, cached OutputCache responses are \u0027as fresh\u0027 as non-cached responses.\r\n\r\nI can then properly use `Cache-Control: max-age` and `Cache-Control: s-max-age` to instruct the CDN /  browser when to check whether there is new content. These can then use a rather small age, because the average request will result in a cached OutputCache response.\r\n\r\n### Additional context\r\n\r\nThe implementation of my custom `IOutputCachePolicy`.\r\n\r\n```c#\r\npublic record CacheOptions\r\n{\r\n    public required TimeSpan? OutputCacheDuration { get; init; }\r\n    public required CacheControlHeaderValue HttpCacheControlHeader { get; init; }\r\n}\r\n\r\npublic class OutputCacheWithHttpResponseCacheControlHeaderPolicy(CacheOptions options)\r\n    : IOutputCachePolicy\r\n{\r\n    ValueTask IOutputCachePolicy.CacheRequestAsync(\r\n        OutputCacheContext context,\r\n        CancellationToken cancellationToken)\r\n    {\r\n        SetOutputCacheConfiguration(context);\r\n        SetCacheControlResponseHeader(context);\r\n\r\n        return ValueTask.CompletedTask;\r\n    }\r\n\r\n    ValueTask IOutputCachePolicy.ServeFromCacheAsync\r\n        (OutputCacheContext context, CancellationToken cancellationToken)\r\n    {\r\n        return ValueTask.CompletedTask;\r\n    }\r\n\r\n    ValueTask IOutputCachePolicy.ServeResponseAsync\r\n        (OutputCacheContext context, CancellationToken cancellationToken)\r\n    {\r\n        context.AllowCacheStorage = context.HttpContext.Response.IsValidForCaching();\r\n\r\n        return ValueTask.CompletedTask;\r\n    }\r\n\r\n    private void SetOutputCacheConfiguration(OutputCacheContext context)\r\n    {\r\n        var requestValidForOutputCaching =\r\n            options.OutputCacheDuration != null \u0026\u0026\r\n            context.HttpContext.Request.IsValidForCaching();\r\n\r\n        context.EnableOutputCaching = true;\r\n        context.AllowLocking = true;\r\n        context.AllowCacheLookup = requestValidForOutputCaching;\r\n        context.AllowCacheStorage = requestValidForOutputCaching;\r\n        context.ResponseExpirationTimeSpan = options.OutputCacheDuration;\r\n\r\n        context.CacheVaryByRules.QueryKeys = \"*\";\r\n        context.CacheVaryByRules.VaryByHost = true;\r\n    }\r\n\r\n    private void SetCacheControlResponseHeader(OutputCacheContext context)\r\n    {\r\n        context.HttpContext.Response.Headers.CacheControl = context.HttpContext.Request.IsValidForCaching()\r\n            ? options.HttpCacheControlHeader.ToString()\r\n            : \"no-store,no-cache\";\r\n    }\r\n}\r\n\r\npublic static class OutputCacheExtensions\r\n{\r\n    public static bool IsValidForCaching(this HttpRequest request)\r\n    {\r\n        return\r\n            request.MethodValidForOutputCaching() \u0026\u0026\r\n            !request.IsAuthenticated() \u0026\u0026\r\n            !request.IsCachingDisabledByQuery();\r\n    }\r\n\r\n    public static bool IsValidForCaching(this HttpResponse response)\r\n    {\r\n        return\r\n            !response.HasSetCookieHeader() \u0026\u0026\r\n            response.StatusCodeValidForOutputCaching();\r\n    }\r\n\r\n    private static bool MethodValidForOutputCaching(this HttpRequest request)\r\n    {\r\n        return HttpMethods.IsGet(request.Method) || HttpMethods.IsHead(request.Method);\r\n    }\r\n\r\n    private static bool IsAuthenticated(this HttpRequest request)\r\n    {\r\n        return\r\n            !StringValues.IsNullOrEmpty(request.Headers.Authorization) ||\r\n            request.HttpContext.User.Identity?.IsAuthenticated == true;\r\n    }\r\n\r\n    private static bool IsCachingDisabledByQuery(this HttpRequest request)\r\n    {\r\n        return request.Query[\"noCache\"] == \"true\";\r\n    }\r\n\r\n    private static bool HasSetCookieHeader(this HttpResponse response)\r\n    {\r\n        return !StringValues.IsNullOrEmpty(response.Headers.SetCookie);\r\n    }\r\n\r\n    private static bool StatusCodeValidForOutputCaching(this HttpResponse response)\r\n    {\r\n        return response.StatusCode is\r\n            StatusCodes.Status200OK or\r\n            StatusCodes.Status301MovedPermanently;\r\n    }\r\n}\r\n```\r\n\r\nUsage:\r\n```c#\r\npublic static class CachePolicies\r\n{\r\n    public const string ApplicationLongCdnShortBrowserNone = \"ApplicationLongCdnShortBrowserNone\";\r\n    public const string ApplicationShortCdnShortBrowserShort = \"ApplicationShortCdnShortBrowserShort\";\r\n    public const string None = \"None\";\r\n\r\n    public static void AddNamedCustomCachePolicies(this OutputCacheOptions options)\r\n    {\r\n        options.AddPolicy(ApplicationLongCdnShortBrowserNone, new OutputCacheWithHttpResponseCacheControlHeaderPolicy(\r\n            new CacheOptions\r\n            {\r\n                OutputCacheDuration = TimeSpan.FromHours(1),\r\n                HttpCacheControlHeader = new CacheControlHeaderValue\r\n                {\r\n                    Public = true,\r\n                    SharedMaxAge = TimeSpan.FromMinutes(5)\r\n                }\r\n            }));\r\n\r\n        options.AddPolicy(ApplicationShortCdnShortBrowserShort, new OutputCacheWithHttpResponseCacheControlHeaderPolicy(\r\n            new CacheOptions\r\n            {\r\n                OutputCacheDuration = TimeSpan.FromMinutes(5),\r\n                HttpCacheControlHeader = new CacheControlHeaderValue\r\n                {\r\n                    Public = true,\r\n                    MaxAge = TimeSpan.FromMinutes(5)\r\n                }\r\n            }));\r\n\r\n        options.AddPolicy(None, new OutputCacheWithHttpResponseCacheControlHeaderPolicy(\r\n            new CacheOptions\r\n            {\r\n                OutputCacheDuration = null,\r\n                HttpCacheControlHeader = new CacheControlHeaderValue\r\n                {\r\n                    NoStore = true,\r\n                    NoCache = true\r\n                }\r\n            }));\r\n    }\r\n}\r\n```\r\n\r\nAnd on the controller / action:\r\n```c#\r\n[OutputCache(PolicyName = CachePolicies.ApplicationLongCdnShortBrowserNone)]\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpLOpaQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde854GBSi",
                                           "createdAt":  "2024-03-22T11:00:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marklagendijk",
                                           "body":  "To be sure the issue is clear I will add an example:\r\n- The OutputCache duration is 1 hour\r\n- The Cache-Control `s-maxage` is 5 minutes\r\n\r\n1. 00:00 Request 1, OutputCache caches the Response. The CDN also caches the response.\r\n2. 00:10 Request 2: CDN sees that the cached response has expired and fires a new request. OutputCache returns the cached with `Age: 600`, `Cache-Control: public, s-maxage=300`. If the CDN follows the spec it should not cache this response, because it is \u0027stale\u0027: age \u003e s-maxage.",
                                           "updatedAt":  "2024-03-22T11:53:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde854QpLj",
                                           "createdAt":  "2024-03-25T10:01:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marklagendijk",
                                           "body":  "Possible solutions would be:\r\n1. A configuration option `ReturnCachedResponsesAsFresh`.\r\n2. Adjustments in code order so that the custom hooks can override the standard behavior, and the custom policy has full control.\r\n3. Both.",
                                           "updatedAt":  "2024-03-25T10:01:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86ko-pR",
                                           "createdAt":  "2025-03-28T19:05:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davebaimcmaster",
                                           "body":  "Hi @marklagendijk \nI\u0027m also encountering a similar road block and I wanted to pick your brain if you\u0027ve identified any workarounds/solutions. \n\nI have a Redis backed output cache that is returning the Age response header as the time difference between now and when the response was cached in Redis. As a result, any requests that I make in the browser will bypass the browser disk cache if Age \u003e max-age and attempt to retrieve the response from the Redis cache.\n\nHowever, I know that my responses from the Redis cache are fresh and I\u0027d like to return Age=0 in the response header for those responses so that the browser disk cache will return those responses instead of going to Redis. \n\nMy solution is to try to set the Age response header to Age=0 in the middleware (b/c doing so in the OutputCachePolicy will not work due to the reason you pointed out above: _These headers are set after all hooks of the Policies are invoked. Therefore one cannot control them in the custom policy._)\n\nI tried to set a custom Age response header middleware to set the Age=0 response header that runs after the OutputCacheMiddleware but I\u0027m still seeing a non-0 Age response header in Chrome dev tools. Instead it is still returning the difference between now and when the response was cached in Redis. I was curious:\n\n1. if you\u0027ve encountered something similar \n2. or if you were able to find a workaround to correctly set the age response header to 0 for responses from the output cache \n3. or if you know why my current solution of using a custom middleware is not working as expected?\n\nTIA for any pointers. \n\nEdit: On [line 316](https://github.com/dotnet/aspnetcore/blob/ec293ee75c0c022370951a459b188fa81ec8b7c3/src/Middleware/OutputCaching/src/OutputCacheMiddleware.cs#L316) of OutputCacheMiddleware, we call:\n\n`await context.CachedResponse.CopyToAsync(response.BodyWriter, context.HttpContext.RequestAborted);`\n \nwhich writes the cached response back to the caller and does so before giving us an opportunity to overwrite the Age response header that gets set on [line 307](https://github.com/dotnet/aspnetcore/blob/ec293ee75c0c022370951a459b188fa81ec8b7c3/src/Middleware/OutputCaching/src/OutputCacheMiddleware.cs#L307). ",
                                           "updatedAt":  "2025-03-28T21:38:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86ks6lp",
                                           "createdAt":  "2025-03-29T08:45:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEMPcbA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davebaimcmaster",
                                                                               "createdAt":  "2025-03-31T14:27:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "davebaimcmaster",
                                                                               "createdAt":  "2025-03-31T14:27:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "marklagendijk",
                                           "body":  "@davebaimcmaster as you found in the code of the `OutputCacheMiddleware` there is nothing we can do. Any value we set before gets overridden, and there is no opportunity to access the response after the middleware.",
                                           "updatedAt":  "2025-03-29T08:45:28Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "OutputCache: allow returning cached responses as fully fresh (Date: now, Age: 0)",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/54827",
        "createdAt":  "2024-03-28T08:52:19Z",
        "number":  54827,
        "author":  "alphons",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T17:44:29Z",
        "body":  "### Description\r\n\r\nIn a Microsoft.NET.Sdk.Web project, having one controller having one view with little text, there is NO output when navigating with a browser (Chrome or Firefox), to an url which is served by this controller.  (Using .NET 8.0.3)\r\n\r\n### Reproduction Steps\r\n\r\nProgram.cs\r\n```c#\r\nvar builder = WebApplication.CreateBuilder();\r\n\r\nbuilder.Services.AddRazorPages();\r\nbuilder.Services.AddResponseCompression();\r\n\r\nvar app = builder.Build();\r\n\r\napp.MapControllers();\r\napp.UseResponseCompression();\r\napp.Run();\r\n```\r\n/Index.cshtml.cs (controller)\r\n```C#\r\nusing Microsoft.AspNetCore.Mvc;\r\nnamespace AspNetCoreNotEmpty1;\r\npublic class PopController : Controller\r\n{\r\n\t[HttpGet(\"~/\")]\r\n\tpublic IActionResult Index()\r\n\t{\r\n\t\treturn View(\"/Index.cshtml\");\r\n\t}\r\n}\r\n```\r\n/Index.cshtml\r\n\r\n```html\r\n\u003chtml\u003e\r\n\u003cbody\u003e\r\n\t\u003cp\u003eIndex Test 123\u003c/p\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n```\r\n[SolutionBugDemo.zip](https://github.com/dotnet/runtime/files/14786334/SolutionBugDemo.zip)\r\n\r\n\r\n### Expected behavior\r\n\r\nWhen starting (debugging) the project, here should be the text \u0027Index Test 123\u0027 on a browser.\r\n\r\n\r\n\r\n\r\n### Actual behavior\r\n\r\nStarting the project, browser is navigating to its debug localhost url.\r\nWhen doing a reload of the localhost url, **nothing appears**. \r\nChrome debug console shows \u0027Failed\u0027 request, however, headers seems to be normal.\r\nFireFox shows \u0027Content encoding error\u0027.\r\n\r\n\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nChanging text from \u0027Index Test 123\u0027 to \u0027Index Test 1234\u0027 \r\nSimply adding more text. there is output, as expected.\r\n\r\nIt seems that when using small text messages, the Brotli compressor, or the framework calling the compressor does not function correctly. However the headers (Chrome) are intact.\r\n\r\n![Knipsel](https://github.com/dotnet/runtime/assets/2096186/fbf1189b-2040-4175-a797-51e670572973)\r\n\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Brotli compressor not working when compressing small text output",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/55437",
        "createdAt":  "2024-04-30T14:52:30Z",
        "number":  55437,
        "author":  "bradlis7",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6CnHQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bradlis7",
                                            "createdAt":  "2024-05-09T15:48:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "soligto",
                                            "createdAt":  "2024-08-08T14:28:23Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-29T17:44:29Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI am trying to set the timeout of my request dynamically, but it seems it must be a constant value. \n\n### Describe the solution you\u0027d like\n\nI would suggest that `UseRequestTimeouts` have a callback option with the request context to be evaluated and set the timeout value inside of this callback.\n\n### Additional context\n\nI am using .net in Lambda, and I could use `ILambdaContext.RemainingTime - buffer` to determine when the timeout should happen, but I don\u0027t see how to do so with the current implementation.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfGtbDQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde858T4RN",
                                           "createdAt":  "2024-04-30T15:05:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODgHJlQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bradlis7",
                                                                               "createdAt":  "2024-04-30T16:07:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "martincostello",
                                           "body":  "Taking a quick look at the code, it doesn\u0027t look like it\u0027s possible to dynamically determine the timeout.\r\n\r\nMaybe you could manually do something like the internals do by manually implementing and setting a `IHttpRequestTimeoutFeature` in a middleware like how the timeout middleware does itself?\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/207bc7d00c00bf454dc83789d6824609b1d8b02a/src/Http/Http/src/Timeouts/RequestTimeoutsMiddleware.cs#L96-L108\r\n",
                                           "updatedAt":  "2024-04-30T15:05:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde858UsVH",
                                           "createdAt":  "2024-04-30T16:07:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODgHMug==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "martincostello",
                                                                               "createdAt":  "2024-04-30T16:11:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "bradlis7",
                                           "body":  "\u003e Maybe you could manually do something like the internals do by manually implementing and setting a `IHttpRequestTimeoutFeature` in a middleware like how the timeout middleware does itself?\r\n\r\nThat\u0027s a good workaround, I\u0027ll do that for now.",
                                           "updatedAt":  "2024-04-30T16:07:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde858a1sN",
                                           "createdAt":  "2024-04-30T21:34:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bradlis7",
                                           "body":  "So many internal classes... in order to create a workaround, I have to copy a bunch of classes in. I guess I\u0027ll just use static timeouts for now.",
                                           "updatedAt":  "2024-04-30T21:34:57Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Request Timeouts dynamically calculated",
        "labels":  [
                       "api-suggestion",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/55593",
        "createdAt":  "2024-05-08T03:24:38Z",
        "number":  55593,
        "author":  "YataoFeng",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-28T08:53:31Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nGarnet Better compatibility.\n\n### Describe the solution you\u0027d like\n\n If I use Garnet, I prefer to use ‘Microsoft.Extensions.Caching.Garnet\u0027 Instead of \u0027Microsoft.Extensions.Caching.StackExchangeRedis\u0027.\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "New Project Microsoft.Extensions.Caching.Garnet",
        "labels":  [
                       "feature-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/55809",
        "createdAt":  "2024-05-20T20:02:27Z",
        "number":  55809,
        "author":  "julealgon",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T17:44:30Z",
        "body":  "## Background and Motivation\r\n\r\nI want to create a parameterized custom policy to dynamically generate tags based on route values so that I can evict only a subset of the cached contents later on on one of my APIs.\r\n\r\nTo allow me to tag cache entries based on route values, I need to pass the name of the route parameter to my custom policy, as well as the tag prefix to use. Both values are primitive `string`s.\r\n\r\nHowever, due to the way `OutputCachePolicyBuilder` works today, it only allows one to pass a custom policy object by specifying a `Type`:\r\n```csharp\r\npublic OutputCachePolicyBuilder AddPolicy(Type)\r\n```\r\n\r\nOr by specifing the type via generics and letting the container resolve the policy automatically:\r\n```csharp\r\npublic OutputCachePolicyBuilder AddPolicy\u003cT\u003e()\r\n    where T : IOutputCachePolicy\r\n```\r\n\r\nThis makes it extremely convoluted to pass a parameterized policy like this:\r\n```csharp\r\npublic sealed class TagPerRouteOutputCachePolicy : IOutputCachePolicy\r\n{\r\n    private readonly string tagPrefix;\r\n    private readonly string routeValueName;\r\n\r\n    public TagPerRouteOutputCachePolicy(string tagPrefix, string routeValueName)\r\n    {\r\n        ArgumentNullException.ThrowIfNull(tagPrefix);\r\n        ArgumentNullException.ThrowIfNull(routeValueName);\r\n\r\n        this.tagPrefix = tagPrefix;\r\n        this.routeValueName = routeValueName;\r\n    }\r\n\r\n    ...\r\n```\r\n\r\nThe only way I see to allow for my use case would be to somehow pre-register the type in the container with a lambda factory and hardcoded values, but that\u0027s not possible since the values I\u0027m passing are coming from the policy setup logic which happens in a different place.\r\n\r\nI\u0027m now forced to completely change the design of my object to use some sort of fake mutable container object so I can pass in values from the outside using the container in a convoluted manner.\r\n\r\nI\u0027d rather simply pass the instance directly using the currently `internal` overload:\r\n```csharp\r\ninternal OutputCachePolicyBuilder AddPolicy(IOutputCachePolicy)\r\n```\r\n\r\n\u003c!--\r\nWe welcome API proposals! We have a process to evaluate the value and shape of new API. There is an overview of our process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md). This template will help us gather the information we need to start the review process.\r\nFirst, please describe the purpose and value of the new API here.\r\n--\u003e\r\n\r\n## Proposed API\r\n\r\n\u003c!--\r\nPlease provide the specific public API signature diff that you are proposing. For example:\r\n```diff\r\npublic sealed class OutputCachePolicyBuilder\r\n{\r\n-    internal OutputCachePolicyBuilder AddPolicy(IOutputCachePolicy)\r\n+    public OutputCachePolicyBuilder AddPolicy(IOutputCachePolicy)\r\n}\r\n```\r\nYou may find the [Framework Design Guidelines](https://github.com/dotnet/runtime/blob/master/docs/coding-guidelines/framework-design-guidelines-digest.md) helpful.\r\n--\u003e\r\n\r\n```diff\r\npublic sealed class OutputCachePolicyBuilder\r\n{\r\n-    internal OutputCachePolicyBuilder AddPolicy(IOutputCachePolicy)\r\n+    public OutputCachePolicyBuilder AddPolicy(IOutputCachePolicy)\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\n```csharp\r\npublic static class OutputCachePolicyBuilderExtensions\r\n{\r\n    public static OutputCachePolicyBuilder TagByRouteValue(\r\n        this OutputCachePolicyBuilder builder,\r\n        string tagPrefix,\r\n        string routeValueName)\r\n    {\r\n        ArgumentNullException.ThrowIfNull(builder);\r\n        ArgumentNullException.ThrowIfNull(tagPrefix);\r\n        ArgumentNullException.ThrowIfNull(routeValueName);\r\n\r\n        return builder.AddPolicy(new TagPerRouteOutputCachePolicy(tagPrefix, routeValueName));\r\n    }\r\n}\r\n```\r\n\r\nThis API is also used extensively for all existing extensions and policy operations as the way policy builder works relies on composing several smaller implementations of `IOutputCachePolicy`.\r\n\r\n## Alternative Designs\r\n\r\n\u003c!--\r\nWere there other options you considered, such as alternative API shapes?\r\nHow does this compare to analogous APIs in other ecosystems and libraries?\r\n--\u003e\r\n\r\nI don\u0027t see any alternative design that allows me to add a parameterized policy from the builder perspective. I\u0027d have to forcefully introduce hard-to-use mutable fake \"parameter container\" objects in DI, then pass those in as my parameters in the policy. Then, before I call `AddPolicy\u003cMyPolicy\u003e()`, I\u0027d have to resolve those fake container objects and set the values in them so that I can later fetch the values from the DI-injected instance.\r\n\r\nSomething like this which is absolutely terrible design:\r\n```csharp\r\npublic interface IParameterPosition;\r\n\r\npublic sealed class FirstParameterPosition : IParameterPosition;\r\npublic sealed class SecondParameterPosition : IParameterPosition;\r\n\r\npublic sealed class TagPerRouteOutputCachePolicy : IOutputCachePolicy\r\n{\r\n    private readonly string tagPrefix;\r\n    private readonly string routeValueName;\r\n\r\n    public TagPerRouteOutputCachePolicy(\r\n        ParameterContainer\u003cTagPerRouteOutputCachePolicy, string, FirstParameterPosition\u003e tagPrefix,\r\n        ParameterContainer\u003cTagPerRouteOutputCachePolicy, string, SecondParameterPosition\u003erouteValueName)\r\n    {\r\n        this.tagPrefix = tagPrefix.Value;\r\n        this.routeValueName = routeValueName.Value;\r\n    }\r\n```\r\n\r\nAnd even then, this would only work if I have a single instance of this class. It is completely unmanageable.\r\n\r\n## Risks\r\n\r\n\u003c!--\r\nPlease mention any risks that to your knowledge the API proposal might entail, such as breaking changes, performance regressions, etc.\r\n--\u003e\r\n\r\nI see zero risk in exposing the widely used `internal` method as it relies on public-facing interfaces already.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Expose `OutputCachePolicyBuilder.AddPolicy(IOutputCachePolicy)` as `public`",
        "labels":  [
                       "api-suggestion",
                       "feature-output-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/55892",
        "createdAt":  "2024-05-26T11:50:27Z",
        "number":  55892,
        "author":  "ScarletKuro",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC53jng==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "arkiaconsulting",
                                            "createdAt":  "2024-08-01T14:04:50Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-29T17:44:31Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nHi,\r\n\r\nPlease backport fix #52687 to .NET 8.\r\n\r\nSome MudBlazor customers report (https://github.com/MudBlazor/MudBlazor/issues/7879) that they get exceptions when using:\r\n```C#\r\napp.UseExceptionHandler(\"/Error\", createScopeForErrors: true);\r\n```\r\nor when they use Azure (https://github.com/MudBlazor/MudBlazor/discussions/8850).\r\n\r\nThe main problem is that our services added to the DI are implementing only `IAsyncDisposable`. We find this justified as we need to use some async code during disposal, and you can\u0027t use `GetAwaiter().GetResult()` in Blazor WASM. We also don\u0027t think that fire-and-forget is a good practice either.\r\n\r\nI find that it\u0027s a bug in .NET 8 that it\u0027s calling `CreateScope` instead of `CreateAsyncScope`. Since it was fixed for .NET 9, it should be ported to .NET 8 as it\u0027s still supported. I don\u0027t see any breaking change risks here nor it doesn\u0027t require any new API.\r\n\r\nThank you.\r\n\r\n### Expected Behavior\r\n\r\nNot to throw exception.\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n```\r\nSystem.InvalidOperationException: \u0027MudBlazor.BrowserViewportService\u0027 type only implements IAsyncDisposable. Use DisposeAsync to dispose the container.\r\nat Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope.Dispose()\r\nat Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddlewareImpl.HandleException(HttpContext context, ExceptionDispatchInfo edi)\r\n```\r\n\r\n### .NET Version\r\n\r\n_No response_\r\n\r\n### Anything else?\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Backport #52687 to .NET8",
        "labels":  [
                       "feature-diagnostics",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/55988",
        "createdAt":  "2024-05-31T03:23:41Z",
        "number":  55988,
        "author":  "andrew-at-v",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:38:12Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nHi,\r\n\r\nI got error message in log while i swear my endpoint output is cached\r\nAny how I can find what the cause of this exception?\r\n\r\nMoved from https://github.com/StackExchange/StackExchange.Redis/issues/2732\n\n### Expected Behavior\n\n- No exception at all\r\n- A way to debug the exception? log the key for example\r\n- Or simply warn, this key is null instead of throwing exception\n\n### Steps To Reproduce\n\n- The code is nothing fancy\r\nIt is based on example https://learn.microsoft.com/en-us/aspnet/core/performance/caching/output?view=aspnetcore-8.0\r\n- New custom policy\r\n- VaryByQuery *\r\n- VarByHeader Authorization\r\n- I removed part where if there is Authorization, do not cache (which mean I do need to cache authorized request)\r\n- I used yarp\n\n### Exceptions (if any)\n\nSystem.ArgumentException: A null value is not valid in this context\r\n   at StackExchange.Redis.RedisValue.AssertNotNull() in /_/src/StackExchange.Redis/RedisValue.cs:line 308\r\n   at StackExchange.Redis.RedisDatabase.ScriptEvalMessage..ctor(Int32 db, CommandFlags flags, RedisCommand command, String script, Byte[] hexHash, RedisKey[] keys, RedisValue[] values) in /_/src/StackExchange.Redis/RedisDatabase.cs:line 4814\r\n   at StackExchange.Redis.RedisDatabase.ScriptEvalMessage..ctor(Int32 db, CommandFlags flags, RedisCommand command, String script, RedisKey[] keys, RedisValue[] values) in /_/src/StackExchange.Redis/RedisDatabase.cs:line 4790\r\n   at StackExchange.Redis.RedisDatabase.ScriptEvaluateAsync(String script, RedisKey[] keys, RedisValue[] values, CommandFlags flags) in /_/src/StackExchange.Redis/RedisDatabase.cs:line 1547\r\n   at Microsoft.AspNetCore.OutputCaching.StackExchangeRedis.RedisOutputCacheStore.Microsoft.AspNetCore.OutputCaching.IOutputCacheBufferStore.SetAsync(String key, ReadOnlySequence`1 value, ReadOnlyMemory`1 tags, TimeSpan validFor, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.OutputCaching.OutputCacheEntryFormatter.StoreAsync(String key, OutputCacheEntry value, HashSet`1 tags, TimeSpan duration, IOutputCacheStore store, ILogger logger, CancellationToken cancellationToken)\n\n### .NET Version\n\n8\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOudM5Sg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85_oAMA",
                                           "createdAt":  "2024-05-31T04:01:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "andrew-at-v",
                                           "body":  "Just learned how to debug aspnetcore source code...\r\n\r\nThe issue caused by null tag (not the value of the cache itself)\r\nI have more than one tags, one of it has null value\r\n\r\nmaybe context.Tags.Add(xxx); //if xxx is null, then throw over here already?",
                                           "updatedAt":  "2024-05-31T04:01:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85_oAln",
                                           "createdAt":  "2024-05-31T04:03:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "andrew-at-v",
                                           "body":  "but having exception in policy is not nice\r\njust log it with warn? reason is that cache tag may or may not available\r\nthe endpoint queries might be there or not there",
                                           "updatedAt":  "2024-05-31T04:03:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85_o1tH",
                                           "createdAt":  "2024-05-31T07:47:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mgravell",
                                           "body":  "Propose there are 2 bugs here:\r\n\r\n- the backend is the immediate bug; need to investigate\r\n- IMO the middleware layer should mask such errors turning them into logged errors but making failed writes simply continue (logged) and failed reads (logged) manifest as misses",
                                           "updatedAt":  "2024-05-31T07:47:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde8650zlK",
                                           "createdAt":  "2025-07-25T12:36:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mgravell",
                                           "body":  "(if someone could unassign me, that\u0027d be awesome, thx)",
                                           "updatedAt":  "2025-07-25T12:36:52Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "ArgumentException while OutputCache is cached",
        "labels":  [
                       "feature-output-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/56233",
        "createdAt":  "2024-06-14T14:50:31Z",
        "number":  56233,
        "author":  "pf56",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T17:44:31Z",
        "body":  "`DistributedSession.CommitAsync` branches on `_isModified` and either calls `_cache.SetAsync` to write the modified session content to the cache, or it calls `_cache.RefreshAsync` to refresh the cache entry and extend its sliding expiration window.\r\n\r\nWhen handling a request without a session cookie, the `SessionMiddleware` will generate a new session key and later on end up calling `DistributedSession.CommitAsync`. If the session hasn\u0027t been modified by the endpoint, the call to `_cache.RefreshAsync` will happen with the newly generated session key. Since the session is newly created and wasn\u0027t modified, it cannot exist in the cache at this point and the attempt to refresh the cache entry seems to be pointless.\r\n\r\nIf the application only requires access to the session in some specific areas, this will cause every single request to hit the cache backend with a refresh for a non-existent key.\r\n\r\nWhile the performance and latency penalty (depending on the cache backend) are likely negligible, I would have expected `DistributedSession.CommitAsync` to account for it by checking `_isNewSessionKey`.\r\n\r\n```\r\nif (_isModified)\r\n{\r\n   // update cache entry\r\n}\r\nelse if (!_isNewSessionKey)  // \u003c-- else if instead of else\r\n{\r\n    // refresh cache entry\r\n}\r\n```\r\n\r\nIs there a reason this isn\u0027t done?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "`DistributedSession` tries to refresh non-existent keys",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/56427",
        "createdAt":  "2024-06-24T17:40:25Z",
        "number":  56427,
        "author":  "gnjack",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODFGEeg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ArkadiyShuvaev",
                                            "createdAt":  "2024-10-21T13:19:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "swh-cb",
                                            "createdAt":  "2025-03-05T10:53:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "levanvunam",
                                            "createdAt":  "2025-03-15T17:25:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ndhu",
                                            "createdAt":  "2025-03-20T13:42:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bbelius",
                                            "createdAt":  "2025-06-29T18:16:47Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2025-07-29T17:44:32Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nThe output caching middleware returns an empty response body for subsequent requests when an in progress request for the same resource is cancelled by the client.\r\n\r\nI believe this is because the request cancellation causes the cancellation of writing the JSON stream to the response buffer however the caching middleware still considers this response buffer to be valid cacheable output and returns that incomplete buffer to all other pending / subsequent requests until the cache expires.\r\n\r\n### Expected Behavior\r\n\r\nEmpty / partial output from a cancelled request should not be cached.\r\n\r\n### Steps To Reproduce\r\n\r\nHere is a minimal API that reproduces the issue:\r\n```c#\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.AddOutputCache(o =\u003e\r\n{\r\n    o.AddBasePolicy(b =\u003e b.Expire(TimeSpan.FromSeconds(10)));\r\n});\r\n\r\nvar app = builder.Build();\r\napp.UseOutputCache();\r\napp.MapGet(\"/time\", async () =\u003e\r\n{\r\n    await Task.Delay(TimeSpan.FromSeconds(5));\r\n    return new { Time = DateTimeOffset.UtcNow.ToString(\"O\") };\r\n}).CacheOutput();\r\napp.Run();\r\n```\r\nThe API takes 5 seconds to return some JSON with the current time, simulating a slow response. This should be cached for 10 seconds.\r\n\r\nLoading `/time` in the browser and hitting refresh a few times in the 5 seconds while the page loads will cause an empty response to be returned instead of the JSON. Subsequent requests will immediately return the invalid empty cached response.\r\n\r\nIf you wait 10 seconds for the cache to expire and load the page a single time, a valid JSON response is returned and cached for subsequent requests.\r\n\r\nI was unable to reproduce the issue using `TestServer` in memory integration tests - I think this might be because [the test `HttpClient` doesn\u0027t properly reproduce request cancellation](https://github.com/dotnet/aspnetcore/issues/5938).\r\n\r\nThis console app sends a request to the above API every second, but cancels the first request.\r\n```c#\r\nvar client = new HttpClient\r\n{\r\n    BaseAddress = new Uri(\"http://localhost:5268\")\r\n};\r\n\r\nvar cts = new CancellationTokenSource();\r\nList\u003cTask\u003e requests = [ SendRequest(0, cts.Token) ];\r\nawait Task.Delay(TimeSpan.FromSeconds(1));\r\ncts.Cancel();\r\n\r\nfor (var i = 1; i \u003c 15; i++)\r\n{\r\n    requests.Add(SendRequest(i));\r\n    await Task.Delay(1000);\r\n}\r\n\r\nawait Task.WhenAll(requests);\r\n\r\nasync Task SendRequest(int i, CancellationToken cancellationToken = default)\r\n{\r\n    try\r\n    {\r\n        var response = await client.GetStringAsync(\"time\", cancellationToken);\r\n        Log(i, $\"response: {response}\");\r\n    }\r\n    catch (TaskCanceledException)\r\n    {\r\n        Log(i, \"cancelled\");\r\n    }\r\n}\r\n\r\nvoid Log(int i, string msg) =\u003e Console.WriteLine($\"{Now()} Request {i} \" + msg);\r\nstring Now() =\u003e DateTimeOffset.UtcNow.ToString(\"T\");\r\n```\r\n\r\nThe invalid empty cache response can be seen in the logs, which resolves after the cache expires:\r\n```\r\n17:35:57 Request 0 cancelled\r\n17:36:01 Request 4 response:\r\n17:36:01 Request 5 response:\r\n17:36:01 Request 3 response:\r\n17:36:01 Request 1 response:\r\n17:36:01 Request 2 response:\r\n17:36:07 Request 7 response: {\"time\":\"2024-06-24T17:36:07.8436504+00:00\"}\r\n17:36:07 Request 10 response: {\"time\":\"2024-06-24T17:36:07.8436504+00:00\"}\r\n17:36:07 Request 8 response: {\"time\":\"2024-06-24T17:36:07.8436504+00:00\"}\r\n17:36:07 Request 9 response: {\"time\":\"2024-06-24T17:36:07.8436504+00:00\"}\r\n17:36:07 Request 6 response: {\"time\":\"2024-06-24T17:36:07.8436504+00:00\"}\r\n17:36:07 Request 11 response: {\"time\":\"2024-06-24T17:36:07.8436504+00:00\"}\r\n17:36:08 Request 12 response: {\"time\":\"2024-06-24T17:36:07.8436504+00:00\"}\r\n17:36:09 Request 13 response: {\"time\":\"2024-06-24T17:36:07.8436504+00:00\"}\r\n17:36:10 Request 14 response: {\"time\":\"2024-06-24T17:36:07.8436504+00:00\"}\r\n```\r\n\r\n### .NET Version\r\n\r\n8.0.200",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOglzzvQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86CXPO9",
                                           "createdAt":  "2024-06-24T18:07:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEYaMkw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ArkadiyShuvaev",
                                                                               "createdAt":  "2024-10-21T13:19:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "levanvunam",
                                                                               "createdAt":  "2025-03-15T17:25:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bbelius",
                                                                               "createdAt":  "2025-06-29T18:16:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "gnjack",
                                           "body":  "A possible workaround is to implement a custom `IOutputCachePolicy` which disables `AllowCacheStorage` when the request is cancelled:\r\n```c#\r\npublic ValueTask ServeResponseAsync(OutputCacheContext context, CancellationToken cancellationToken)\r\n{\r\n    if (cancellationToken.IsCancellationRequested)\r\n    {\r\n        context.AllowCacheStorage = false;\r\n        return ValueTask.CompletedTask;\r\n    }\r\n    ...\r\n    return ValueTask.CompletedTask;\r\n}\r\n```\r\n\r\nWhich should possibly be part of the default policy?\r\n\r\nHowever, when combined with resource locking this can cause nasty cache stampedes. Resource locking ensures that all requests for a given response wait for the first request to populate the cache and is the default cache behaviour.\r\n\r\nCurrently, if you disable `AllowCacheStorage` in `ServeResponseAsync` while using the default `LockingPolicy.Enabled` then all queued requests locked behind the single running request will all be allowed through at once by the caching middleware, resulting in many concurrent non-cached requests for the same resource.\r\n\r\nIf the application is running slowly due to load and a request is aborted due to timeout, this can result in undesirable behaviour where a struggling application now needs to serve many concurrent uncached requests for a resource, instead of only one at a time.\r\n\r\nWe\u0027ve instead opted to use `cancellationToken.ThrowIfCancellationRequested();` in `ServeResponseAsync`. This will ensure empty responses from cancelled requests are not cached due to the thrown expetion. Any pending requests that were waiting on the cancelled request to populate the cache will receive a 500 error. Having one client cancelling a request cause other clients to receive an error is not ideal, but allows the clients to retry while still only allowing a single concurrent request to attempt to populate the cache on retry - preventing a cache stampede.\r\n\r\nIdeally the caching middleware should only allow one request at a time to attempt to populate the cache when locking is enabled, even if the first request failed to populate the cache, to prevent failures from causing cache stampedes.",
                                           "updatedAt":  "2024-06-25T09:21:16Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Output caching middleware caches empty response body when request cancelled",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/56539",
        "createdAt":  "2024-07-01T10:31:16Z",
        "number":  56539,
        "author":  "Xymanek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T17:44:32Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\n`DatabaseDeveloperPageExceptionFilter` attempts to get `IModel`s from all registered `DbContextOptions`:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/d301328737c4912b95f236c4b349cf46ef7a473a/src/Middleware/Diagnostics.EntityFrameworkCore/src/DatabaseDeveloperPageExceptionFilter.cs#L58-L69\r\n\r\nIn our case, some of the registered `DbContext`s are expected to be used under very specific circumstances and throw an exception otherwise. Since `GetContextDetailsAsync` is not guarded against exceptions in any way, the \"final\" exception is the `DbContext` initialization failure, not the original exception, hindering debugging.\r\n\r\n### Expected Behavior\r\n\r\nOriginal exception is clearly reported\r\n\r\n### Steps To Reproduce\r\n\r\n1) `DbContext` with \r\n\r\n```cs\r\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n    {\r\n        throw new Exception(\"Bad DbContext\");\r\n    }\r\n```\r\n\r\n2) Throw exception in any endpoint (doesn\u0027t matter if controller/razor page/minimal api)\r\n\r\nThe logs will report `Bad DbContext`; likewise the debugger will break there.\r\n\r\n**Original exception will be buried very deep in debug output.**\r\n\r\n### Exceptions (if any)\r\n\r\n_See above_\r\n\r\n### .NET Version\r\n\r\n8.0.300\r\n\r\n### Anything else?\r\n\r\n```\r\n.NET SDK:\r\n Version:           8.0.300\r\n Commit:            326f6e68b2\r\n Workload version:  8.0.300-manifests.5273bb1c\r\n MSBuild version:   17.10.4+10fbfbf2e\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19045\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.300\\\r\n\r\n.NET workloads installed:\r\n [aspire]\r\n   Installation Source: VS 17.10.35004.147\r\n   Manifest Version:    8.0.0/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.aspire\\8.0.0\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n\r\nHost:\r\n  Version:      8.0.5\r\n  Architecture: x64\r\n  Commit:       087e15321b\r\n\r\n.NET SDKs installed:\r\n  8.0.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 7.0.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 7.0.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 7.0.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n```\r\n\r\nThis appears to be very similar to #32976, just under different circumstances ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "`DatabaseDeveloperPageExceptionFilter` produces bizzare exception if model fails to initialize",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/56757",
        "createdAt":  "2024-07-12T09:09:27Z",
        "number":  56757,
        "author":  "lindeberg",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T17:44:33Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI want all 4xx and 5xx status codes to respond with the ProblemDetails format. I have configured `.AddProblemDetails()`, yet when auth middleware returns 401 it is not in the ProblemDetails format. I know it is possible to override, but I think ProblemDetails should be the default.\r\n\r\n- [ ] \n\n### Describe the solution you\u0027d like\n\nMake ProblemDetails the default response format for 401, or at least when using `.AddProblemDetails()`.\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Auth middleware should respond with ProblemDetails",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/56769",
        "createdAt":  "2024-07-13T08:50:15Z",
        "number":  56769,
        "author":  "6pac",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODDJ7xg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gr8tushar",
                                            "createdAt":  "2025-03-02T02:15:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "s-beji",
                                            "createdAt":  "2025-03-19T01:48:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rsmith-goodyear",
                                            "createdAt":  "2025-06-02T17:14:27Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-07-29T18:27:20Z",
        "body":  "## Background and Motivation\r\n\r\nWhen designing intranet based web enabled database systems, which always require authorization and are accessed from secure company computers using an internal IP address, it would greatly enhance speed to be able to cache some page content.  There are often long lists of data, frequently 10+Mb of data, that changes infrequently and must currently be added to every page load. Sometimes these apps are used remotely over a slow VPN connection.\r\nThis change would give developers the choice to cache content data.\r\n\r\nAn alternative that may be suggested is AJAX partial loading, however this is not much more efficient and on slow connections can severely affect responsiveness. The best model IMO is one that has a long initial page load, but then only short delays for small AJAX payloads and short subsequent page loads, ie. cached data.\r\n\r\nAt the moment, the only option to achieve this in DotNet is to mod up a custom version of the middleware, which is surely far more fraught. \r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace Microsoft.AspNetCore.ResponseCaching;\r\n\r\npublic class ResponseCachingOptions\r\n{\r\n+    /// \u003csummary\u003e\r\n+    /// \u003cc\u003etrue\u003c/c\u003e if caching is allowed for authorised endpoints\r\n+    /// \u003c/summary\u003e\r\n+    public bool AllowAuthorizedEndpoint { get; set; } = false;\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\nIn Startup.cs:\r\n\r\n    public void ConfigureServices(IServiceCollection services) {\r\n      ...\r\n      services.AddResponseCaching(options =\u003e { options.AllowAuthorizedEndpoint = true; });\r\n      ...\r\n   }\r\n\r\n## Alternative Designs\r\n\r\nNone. This proposal simply exposes a new member to enable missing functionality.\r\n\r\n## Risks\r\n\r\nThere are no explicit risks. It is a non breaking change, and as such the new option defaults to existing behaviour and does not need to be specified.\r\n\r\nIn terms of implicit risk, the reason that has been given re the lack of configurability to date around authorized endpoints is that cached authorized data is a security risk. I would argue that while this is often the case, it is not always the case. The developer should be able to configure the framework so as to acheive their own desired balance of security, network performance and device CPU/resource loading.\r\n\r\nTo further protect cached data, it would also be possible to cache it in encrypted form and use javascript to decrypt before parsing to JSON, using an encryption key passed only with authorized page loads. This would sacrifice client CPU loading for network bandwidth, very likely a productive swap in terms of page load speed. \r\n\r\nSee PR to implement the full functionality: https://github.com/dotnet/aspnetcore/pull/56768",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoH4xzw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86Fjf-j",
                                           "createdAt":  "2024-07-19T23:31:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "It does seem pretty scary to enable something like this globally.\r\n\r\nIs there a reason that you\u0027re proposing this API specifically for [response caching](https://learn.microsoft.com//aspnet/core/performance/caching/response) and not [output caching](https://learn.microsoft.com/aspnet/core/performance/caching/response)? Most people seem to prefer output caching because it will cache more often even if the client is a web browser that doesn\u0027t send `Cache-Control` headers explicitly allowing for stale content.\r\n\r\nOutput caching also allows you to specify [custom policies](https://learn.microsoft.com/aspnet/core/performance/caching/output?view=aspnetcore-8.0#override-the-default-policy) globally or per-endpoint which allow caching even authenticated requests. @sebastienros might be able to provide more details.",
                                           "updatedAt":  "2024-07-19T23:31:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86FmLVu",
                                           "createdAt":  "2024-07-21T01:51:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "6pac",
                                           "body":  "@halter73 It depends on your niche - as I say, this application is used on an intranet. I think poor design - which is rife - is far more dangerous by leaking unwanted information in AJAX datasets *within* authenticated pages.\r\n\r\nAs to enabling it globally, (1) it\u0027s off by default, and (2) without adding cache headers specifically to an authorised endpoint, it won\u0027t be cached.  I suppose the change could, however, be framed as a per-endpoint setting. If you think that would be more likely to succeed, I could look into a change to approach it that way instead.\r\n\r\nNote that I am wanting the client (ie. web browser) to be able to cache the data from specific dedicated URLs/endpoints. From what I understand, output caching is server side, which I don\u0027t care about at all. Most of my apps have less than 100 users and run on about the third to bottom tier AWS VM costing maybe $60 a month - traffic and server load is almost negligible. These are internal facing custom database solutions, not public facing websites doing high traffic volume.\r\n\r\nIf I\u0027ve gotten the caching configuration wrong, please let me know - if there is any way to do what I want in the existing framework, I\u0027m completely happy to use it.\r\n\r\nPerhaps I\u0027ll run down my scenario.\r\n\r\nClearly all the static assets in my sites are already being cached. I came to this because I wanted to start caching specific dynamic response datasets.  \r\nMy total page load for some apps is typically ~12Mb and it\u0027s the same 11.5Mb of background data being loaded every time (for example a list of all 4500 clients and 400 staff in the system) - the actual page HTML and page specific data can be meaured in kb.  \r\nSo this gives me two options, (1) to either move to AJAX loading or (2) to work out how to cache the dataset for a period of time (say 2 weeks).  \r\nI dislike AJAX loading for any but truly enormous datasets, simply because it kills page responsiveness, especially on slow connections (and I live and work in a remote area where occasionally we are using a satellite internet connection which is very slow - the yardstick I use for my designs is \u0027how well will it work over a 1 Mbps connection at 1000 ping?\u0027). \r\nI coded up a system that will detect the differences to the cached dataset since it was first generated, so for example we cache the user dataset at a dedicated URL and then for the next two weeks the page load will contain only the user data that has changed since the time the cached dataset was read, and this is used to update the cached data. It worked flawlessly - until I noticed that the file wasn\u0027t actually being cached, despite the cache headers.\r\n\r\nMy only other option would be, I suppose, to write the data as a .js file to the site and serve it up as static content, but that feels quite hacky, and I think *would* have more serious security risks associated with it, not to mention the locking and contention issues.\r\n\r\nAs I have said, I think the framework needs to acknowledge that there is a line where it needs to hand the responsibility over to the developers to do things the right way. We can\u0027t block useful features just because they *could* be misused.\r\n",
                                           "updatedAt":  "2024-07-22T00:27:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86FwQAS",
                                           "createdAt":  "2024-07-23T00:09:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "\u003e Note that I am wanting the client (ie. web browser) to be able to cache the data from specific dedicated URLs/endpoints. From what I understand, output caching is server side, which I don\u0027t care about at all.\r\n\r\nThe response caching middleware is also server-side which is why it\u0027s potentially dangerous. Not only will it return a 304 if the client sends the right If-None-Match or If-Modified-Since headers, it will also return a 200 with the cached response body given the right Cache-Control response headers unless the client sends request headers that prevent it.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/95039134856e8af85aeccd7d404ec96ec5bb73d4/src/Middleware/ResponseCaching/src/ResponseCachingMiddleware.cs#L183-L189\r\n\r\nFurthermore, output cache middleware will also return a 304 instead of just returning a 200 with the cached response if given the right If-None-Match or If-Modified-Since headers.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/95039134856e8af85aeccd7d404ec96ec5bb73d4/src/Middleware/OutputCaching/src/OutputCacheMiddleware.cs#L283-L295\r\n\r\nThe primary difference between ASP.NET Core response caching and output caching is that output caching allows more configurable caching rules instead of strictly basing caching decisions based on request headers.\r\n\r\n\u003e - Is typically not beneficial for UI apps such as Razor Pages because browsers generally set request headers that prevent caching. [Output caching](https://learn.microsoft.com/en-us/aspnet/core/performance/caching/output?view=aspnetcore-8.0), which is available in ASP.NET Core 7.0 and later, benefits UI apps. With output caching, configuration decides what should be cached independently of HTTP headers.\r\n\r\nhttps://learn.microsoft.com/aspnet/core/performance/caching/response?view=aspnetcore-8.0\r\n\r\nAnd you can see that the \"Authorization\" header is specifically called out one of the non-configurable headers that response caching depends on:\r\n\r\n\u003e - The `Authorization` header must not be present.\r\n\r\nhttps://learn.microsoft.com/aspnet/core/performance/caching/middleware?view=aspnetcore-8.0#cfc\r\n\r\nThere are a lot of headers that you cannot make the response caching middleware ignore. The Authorization header is just one of them. Rather than adding global flags for each and every one of these headers, we introduced the new output caching middleware which gives you far more control of what does and doesn\u0027t get cached and defaults to serving cached results even if the client sends something like `Cache-Control: no-cache` as a request header.\r\n\r\nHowever, output caching still allows you to respect the  `Cache-Control: no-cache` with a custom policy if you keep `OutputCacheContext.AllowCacheLookup = false` for that request. It\u0027s just the defaults that are different from response caching. Otherwise, output caching just the newer, more flexible version of response caching.\r\n\r\nhttps://learn.microsoft.com/aspnet/core/performance/caching/output?view=aspnetcore-8.0#override-the-default-policy",
                                           "updatedAt":  "2024-07-23T00:09:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86FwTTg",
                                           "createdAt":  "2024-07-23T00:23:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIJgJg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gr8tushar",
                                                                               "createdAt":  "2025-03-02T01:59:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "6pac",
                                           "body":  "Thanks for the info, it will take me a little while to digest. I\u0027m sorry if I misunderstand the fundamentals - I realise that your time is valuable and I don\u0027t want to waste it.  \r\nComing from the database and desktop world, my knowledge of HTTP is informal and I\u0027m not at all familiar with the nitty gritty of caching header types and behaviours.\r\n\r\nI didn\u0027t realise that there were server-side security issues, I thought it was all about cached data for the authorised endpoint being stored on the client.  \r\nSurely though, if the page is subject to authorisation, an unauthorised user can\u0027t access it, regardless of cache settings? I\u0027ve always assumed that the authorization is ahead of caching in the pipeline, otherwise this would be a huge security issue.\r\n\r\nAlso, can we just turn off server side caching altogether? I\u0027m just a little puzzled as to why, when all I\u0027m after is some client side caching, I\u0027m being dragged into a discussion of the security issues around server side caching.  \r\nSurely the framework should be able to separate these two? If it\u0027s blocking client side caching because of server side caching issues, isn\u0027t that a fundamental architectural flaw?\r\n\r\nFrom what I understand, client side caching works like this:\r\n1) Server flags that an endpoint/url is allowed to be cached (via a header not containing NO-CACHE)\r\n2) Browser stores (caches) endpoint content\r\n3) Browser subsequently ignores requests to the endpoint/url and substitutes the cached data, for the caching period\r\n4) This can be overridden by a hard refresh. From a server-side perspective, if updated data is issued, a different unique ID is added to the querystring so that the URL changes and the content is updated.\r\n\r\nThe only security issue here is the storage of the data by the browser. Other than the \u0027NO-CACHE\u0027 header flag, the server is not even involved in the caching process.\r\n\r\nThe issue here as I understand it is that (1) ASP NET adds the NO-CACHE flag to dynamic endpoints, (2) to circumvent that, one must turn on Response Caching, (3) Response Caching cannot be used for authorised endpoints.",
                                           "updatedAt":  "2024-07-23T01:12:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86GtW2d",
                                           "createdAt":  "2024-07-31T09:11:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIJgKA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gr8tushar",
                                                                               "createdAt":  "2025-03-02T01:59:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "6pac",
                                           "body":  "@halter73 I\u0027ve read up on your above points and it looks to me like they are 100% referring to server side caching. I\u0027m starting to think that this reflects a fundamental architectural problem in the framework, ie. that logic for client and server side caching cannot be separated. I think there are some good points in my above reply. Could you respond?\r\n\r\nParticularly:\r\n- there seems to be no way to enable client side caching without server side caching, when these are entirely separate functionalities and should be treated using separate APIs/middleware\r\n- does my explanation of client side caching above sound accurate to you?\r\n- I also note that the auth step in the pipeline does occur before \u0027custom handlers\u0027 (according to https://learn.microsoft.com/en-us/aspnet/core/fundamentals/middleware/?view=aspnetcore-8.0) ",
                                           "updatedAt":  "2024-07-31T09:11:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86HcRt5",
                                           "createdAt":  "2024-08-06T23:33:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIJgZA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gr8tushar",
                                                                               "createdAt":  "2025-03-02T02:02:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "halter73",
                                           "body":  "\u003e (1) ASP NET adds the NO-CACHE flag to dynamic endpoint\r\n\r\nThere are a lot of times ASP.NET Core components like the cookie authentication handler do set the `Cache-Control` and `Pragma` to `no-cache`, but it\u0027s not just any dynamic endpoint. Generally, it\u0027s for a good reason like not wanting to cache a `Set-Cookie` header which could even be bad even for client caching if it causes a fresh cookie to get overwritten by a stale one. Or not wanting to cache an error page.\t\r\n\r\n\u003e  (2) to circumvent that, one must turn on Response Caching\r\n\r\nWe\u0027d recommend output caching over response caching for most scenarios these days, but there are other options. There\u0027s nothing stopping you from removing `no-cache` from every response inside of a `HttpContext.Response.OnStarting` callback, not that we\u0027d recommend that. It would probably be best to determine exactly which component is adding `no-cache` and preventing that component from running if it\u0027s really unneeded.\r\n\r\n\u003e (3) Response Caching cannot be used for authorised endpoints.\r\n\r\nBut output caching can be used for authorized endpoints if you really want to. But it\u0027s a security risk, so you have to go out of your way to allow it with a custom `IOutputCachePolicy`.\r\n\r\n\u003e there seems to be no way to enable client side caching without server side caching, when these are entirely separate functionalities and should be treated using separate APIs/middleware\r\n\r\nThis I agree more with. I\u0027m not sure that these should be entirely separate middleware considering configuring things like per-endpoint cache expiration policies would largely be the same. I cannot see a scenario where you would want to use a server cache over a client cache if the client sent a request with an If-None-Match header indicating their cache is up to date.\r\n\r\nI do however agree it would be nice if the output caching middleware\u0027s support for client caching didn\u0027t rely on caching the entire response body on the server. Caching response bodies shouldn\u0027t be necessary just to appropriately with 304s based on what policy is configured, what ETags were sent in previous responses, and whether any cache entries were evicted. I talked to @sebastienros and he agrees. However, as far as we know, you\u0027re the first person to request this functionality. I wonder if everyone else is just writing custom middleware for this, there isn\u0027t a big demand, or people just don\u0027t know they want this.\r\n\r\nThis diverges quite a bit from the original issue title to \"Allow Response Caching for Authorized Endpoints\" though. Would you be fine if we renamed this issue to \"Add support for client-only caching to output caching\"? If not, please feel free to file a separate issue with that request. I don\u0027t think there\u0027s going to be any interest in supporting any kind of caching for authorized endpoints by default, server or client. But as I mentioned, it\u0027s at least possible to configure output caching to ignore whether or not the current user is authenticated.",
                                           "updatedAt":  "2024-08-06T23:33:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86HdqeF",
                                           "createdAt":  "2024-08-07T06:17:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKdZSw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gr8tushar",
                                                                               "createdAt":  "2025-03-02T02:02:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "s-beji",
                                                                               "createdAt":  "2025-03-19T01:48:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "6pac",
                                           "body":  "Thanks for getting back. Again, I\u0027ll have to investigate ```IOutputCachePolicy```.\r\n\r\nThought I should mention, I have found a way of only doing client side only caching with ResponseCaching:\r\n \r\n     [ResponseCache(Duration = 6000, Location = ResponseCacheLocation.Client)]\r\n\r\nOther ```ResponseCacheLocation``` values are ```All``` (client + server) and ```None``` (caching turned off). So for example, allowing authorized endpoints might be acceptable only for endpoints with the ```Client``` location.  However the dependency injection model appears to make it very difficult to bring the configuration of the endpoint and the policy together.  \r\nI\u0027m probably getting ahead of myself here, so I\u0027ll investigate more before posting again.\r\n\r\nRe renaming the issue - be my guest.  \r\n\r\nNote that there are a lot of people with my scenario and echoing my sentiments out there in support posts, and I haven\u0027t seen anyone with a solution yet, so if a good workaround comes out of this, I\u0027m happy to publicise it.",
                                           "updatedAt":  "2024-08-07T06:18:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86KesbB",
                                           "createdAt":  "2024-09-01T11:40:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "6pac",
                                           "body":  "@halter73 after all this, it looks like this is all I need:\r\n\r\n    using System;\r\n    using System.Text;\r\n    using System.Collections.Generic;\r\n    using Microsoft.AspNetCore.Http;\r\n    using Microsoft.AspNetCore.Mvc.Filters;\r\n    using Microsoft.AspNetCore.Mvc.Infrastructure;\r\n    using Microsoft.AspNetCore.Mvc;\r\n    using Microsoft.Net.Http.Headers;\r\n    \r\n    namespace AspMvcApp {\r\n      // https://stackoverflow.com/questions/67901155/why-is-asp-net-core-setting-cache-control-headers-on-error-responses\r\n    \r\n      public class CacheControlAttribute : ActionFilterAttribute {\r\n        public int DurationSec { get; set; } = 0;\r\n    \r\n        public override void OnActionExecuted(ActionExecutedContext context) {\r\n            SetCacheControlHeaders(context.HttpContext.Response);\r\n        }\r\n    \r\n        private void SetCacheControlHeaders(HttpResponse response) {\r\n          response.Headers[HeaderNames.CacheControl] = $\"private,max-age={DurationSec}\";\r\n        }\r\n      }\r\n    }\r\n\r\nimplemented like so:\r\n\r\n    namespace AspMvcApp.Controllers { \r\n      [Authorize]\r\n      [CacheControl(DurationSec = 2629746)]  // cache for a month\r\n      public class ScriptController : Controller {\r\n          [Route(\"Script/list-view-cache.js\")]\r\n          public IActionResult list_view_cache(string hash) {\r\n            var scriptText= ListViewCache.GetLVFlexTableCacheItemByHash(hash).FlexTableBaseDataSerialised;\r\n            return Content(scriptText, \"text/javascript\");\r\n          }\r\n      }\r\n    }\r\n\r\nMy immediate question is: why on earth was it so hard to find this information!? It is not discussed *anywhere* in MS documentation as far as I can see.   \r\nThe obvious follow up question: is this really all there is to it, or am I missing something?",
                                           "updatedAt":  "2024-09-01T11:40:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86LK9vY",
                                           "createdAt":  "2024-09-06T22:43:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "If all you need is to add `Cache-Control: $\"private,max-age={DurationSec}\"` to responses produced by MVC, your solution is fine. Is there a particular reason you didn\u0027t use the `[ResponseCache]` attribute since you\u0027re just focused on MVC? That shouldn\u0027t have the limitation around authorized endpoints like the middleware does unless I\u0027m missing something.",
                                           "updatedAt":  "2024-09-06T22:43:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86LL6RY",
                                           "createdAt":  "2024-09-07T11:13:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "6pac",
                                           "body":  "Sorry, are you saying that we can use the ```[ResponseCache]``` attribute without using the middleware? Is that documented anywhere?",
                                           "updatedAt":  "2024-09-07T11:13:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86dwv73",
                                           "createdAt":  "2025-02-10T02:48:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "samsp-msft",
                                           "body":  "ping @halter73, if the attribute works, this can probably be closed",
                                           "updatedAt":  "2025-02-10T02:48:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86gfILN",
                                           "createdAt":  "2025-03-02T02:05:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gr8tushar",
                                           "body":  "This is something I have been looking for years now. Partial caching of pages / user controls only at client side. \nFor enterprise applications, it would be a boon to have only client- side caching. ",
                                           "updatedAt":  "2025-03-02T02:05:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86gfjHP",
                                           "createdAt":  "2025-03-02T08:42:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "6pac",
                                           "body":  "@gr8tushar my solution above should do what you want. I also wrote a blog post: https://low-bandwidth.blogspot.com/",
                                           "updatedAt":  "2025-03-02T08:42:49Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Allow Response Caching for Authorized Endpoints",
        "labels":  [
                       "feature-response-caching",
                       "api-suggestion",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/56906",
        "createdAt":  "2024-07-20T02:05:59Z",
        "number":  56906,
        "author":  "aetos382",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC5pOQA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "runceel",
                                            "createdAt":  "2024-07-21T04:36:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "q0v0p",
                                            "createdAt":  "2024-07-24T05:06:20Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-29T18:07:18Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nIf I am using the `WebApplication.Create` method, the DeveloperExceptionPage is automatically enabled in the development environment.\r\nPlease provide a way to disable this.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nThere are multiple ways to do this. Any method is fine.\r\n\r\nFor example:\r\n\r\n```cs\r\nservices.DisableDeveloperExceptionPage();\r\n```\r\n\r\nOr\r\n\r\n```cs\r\nWebApplication.CreateBuilder(\r\n  new WebApplicationOptions {\r\n    Args = args,\r\n    DisableDeveloperExceptionPage = true\r\n  });\r\n```\r\n\r\n### Additional context\r\n\r\nSimilar requests have been submitted and rejected in the past. (#43870, #47293)\r\n\r\nI want to observe the behavior when an exception occurs in the production environment during development.\r\nBut when DeveloperExceptionPage is enabled, a user-friendly display is shown, and I don\u0027t get the actual error that would be returned in the production environment (e.g. `application/problem+json`).\r\n\r\nSolutions such as setting the `DOTNET_ENVIRONMENT` environment variable to `Production` or using `WebApplication.CreateSlimBuilder` method are difficult to use.\r\n\r\nIf the `DOTNET_ENVIRONMENT` environment variable is changed, the `appsettings.*.json` file that is loaded will change, which may result in settings that are unsuitable for the development environment, for example, preventing database connections.\r\n\r\nAnd if I use the `WebApplication.CreateSlimBuilder` method instead of the `WebApplication.Create` method, there are some services that will be disabled, so I have to investigate and supplement them.\r\nI only want to disable the DeveloperExceptionPage, and I don\u0027t want to disable any other services.\r\n\r\nI don\u0027t want to complete and deploy this application with DeveloperExceptionPage disabled. I only want to temporarily disable it in local environment with minimal changes.\r\nThe method mentioned above is too costly for this purpose.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlUzRJg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86FlSRP",
                                           "createdAt":  "2024-07-20T12:53:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aetos382",
                                           "body":  "I will now give you a more specific example of something I recently encountered.\r\n\r\nI recently upgraded my application from .NET 7.0 to .NET 8.0.\r\n\r\nWhen using .NET 7.0, I was setting the `JsonTypeInfoResolver` as follows to accelerate the (de)serialization of API request/response payloads.\r\n\r\n```cs\r\nservices\r\n    .AddControllers()\r\n    .AddJsonOptions(static options =\u003e\r\n    {\r\n        options.JsonSerializerOptions.TypeInfoResolver = JsonTypeInfoResolver.Combine(\r\n            MyApiPayloadsSerializerContext.Default,\r\n            new DefaultJsonTypeInfoResolver());\r\n    });\r\n```\r\n\r\nIt is important to combine `MyApiPayloadsSerializerContext.Default` with `new DefaultJsonTypeInfoResolver()`.\r\nIf I only set `MyApiPayloadsSerializerContext.Default` as follows, it will fail to serialize objects that it does not support (e.g. `ProblemDetails`) if they are returned.\r\n\r\n```cs\r\nservices\r\n    .AddControllers()\r\n    .AddJsonOptions(static options =\u003e\r\n    {\r\n        options.JsonSerializerOptions.TypeInfoResolver = MyApiPayloadsSerializerContext.Default;\r\n    });\r\n```\r\n\r\nWhen writing as above, if the application receives an invalid request, the framework will try to return `ProblemDetails` to indicate that the request is invalid, but an error will occur that it cannot be serialized, so the original error will be masked.\r\n\r\nIn .NET 8.0, it would be better to rewrite it as follows.\r\n\r\n```cs\r\nservices\r\n    .AddControllers()\r\n    .AddJsonOptions(static options =\u003e\r\n    {\r\n        options.JsonSerializerOptions.TypeInfoResolverChain.Insert(0, MyApiPayloadsSerializerContext.Default);\r\n    });\r\n```\r\n\r\nThe `TypeInfoResolverChain` includes the reflection-based `DefaultJsonTypeInfoResolver` by default, so there is no need to explicitly add it as before.\r\n\r\nI wanted to verify that my application was not broken by this change.\r\nIn other words, I wanted to make sure that if I sent an invalid request to the application, I would receive a response in the `application/problem+json` format that correctly indicated that the request was invalid, rather than an error that `ProblemDetails` could not be serialized.\r\n\r\nHowever, if DeveloperExceptionPage is enabled, even if I send a request using `curl`, the console displays the error message generated by DeveloperExceptionPage, rather than the response in `application/problem+json` format.\r\n\r\nI just want to confirm it, but if I change the `DOTNET_ENVIRONMENT` environment variable or use the `WebApplication.CreateSlimBuilder` method, a lot of other changes will be required.\r\nSo, without doing those things, I just want to disable the DeveloperExceptionPage.",
                                           "updatedAt":  "2024-07-20T12:53:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86GKc3G",
                                           "createdAt":  "2024-07-25T16:25:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "amcasey",
                                           "body":  "Thanks for the detailed explanation of your scenario and motivation!",
                                           "updatedAt":  "2024-07-25T16:25:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86VMnbE",
                                           "createdAt":  "2024-11-27T07:30:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@captainsafia have we seen other requests for this?",
                                           "updatedAt":  "2024-11-27T07:31:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86VTNEm",
                                           "createdAt":  "2024-11-27T21:50:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "captainsafia",
                                           "body":  "\u003e [@captainsafia](https://github.com/captainsafia) have we seen other requests for this?\n\nOutside of the ones linked in the original issue, there are semi-related ones like https://github.com/dotnet/aspnetcore/issues/52622.\n\nIt seems like the overall goal people have here is to be able to model behavior that happens in production environments when exceptions occur locally.\n\nI think the \"right\" thing to do here is to use a non-Development environment if you want to replicate Production-behavior locally but there definitely is a cliff you follow of because this will disable other features that are behind a Development check, like validating scopes on services in the DI container or injection of user secrets.\n\nAdding `DisableDeveloperExceptionPage` to `WebApplicationOptions` could help here but given how targeted the API is I don\u0027t see overwhelming demand for it.\n",
                                           "updatedAt":  "2024-11-27T21:50:06Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Please provide a way to disable the DeveloperExceptionPage during development.",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/57204",
        "createdAt":  "2024-08-07T02:05:48Z",
        "number":  57204,
        "author":  "AndriySvyryd",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:07:19Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nEF 9 now throws an exception by default when `MigrateAsync` is called when there are pending model changes and this isn\u0027t detected by DatabaseDeveloperPage.\r\n\r\nAs a workaround, it can be configured to just log a message, see https://github.com/dotnet/aspnetcore/pull/57060/commits/c7cc6eba2c60e11f359b429a01fa0554e8975cf7\r\n\r\n### Expected Behavior\r\n\r\nConsider special-casing this exception.\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n9.0-rc1\r\n\r\n### Anything else?\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "DatabaseDeveloperPage is not shown for pending model changed by default with EF 9.0",
        "labels":  [
                       "feature-diagnostics",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/57242",
        "createdAt":  "2024-08-08T20:58:41Z",
        "number":  57242,
        "author":  "SemaphoreSlim1",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:27:21Z",
        "body":  "https://github.com/dotnet/aspnetcore/blob/e31445e897e416b743f436b27cb81f3c87c56d27/src/Middleware/HttpLogging/src/HttpLoggingMiddleware.cs#L261C27-L261C28\r\n\r\nIn the HttpLoggingMiddleware, when opting into duration, an additional entry is created. Expected behavior would be that the duration is added as a property of the response log",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh7RVvg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86HtCvJ",
                                           "createdAt":  "2024-08-08T21:52:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "The `CombineLogs` option exists if you want all the logs to be under a single log message\r\nhttps://github.com/dotnet/aspnetcore/blob/e31445e897e416b743f436b27cb81f3c87c56d27/src/Middleware/HttpLogging/src/HttpLoggingOptions.cs#L117",
                                           "updatedAt":  "2024-08-08T21:52:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86HtDna",
                                           "createdAt":  "2024-08-08T21:56:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SemaphoreSlim1",
                                           "body":  "I did see that, but I want the request/response log entries to be separate",
                                           "updatedAt":  "2024-08-08T21:56:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86HtFW-",
                                           "createdAt":  "2024-08-08T22:02:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SemaphoreSlim1",
                                           "body":  "I guess the confusing thing is that you opt into it via HttpLoggingFields.Duration - but it\u0027s not a field added to the entry, it\u0027s a completely new entry all on its own. \r\n\r\nI can say the same thing about HttpLoggingFields.RequestBody and HttpLoggingFields.ResponseBody as well - opting into these makes 4 distinct log entries when I would expect two",
                                           "updatedAt":  "2024-08-08T22:02:59Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Unexpected behavior in HttpLoggingMiddleware",
        "labels":  [
                       "area-middleware",
                       "feature-http-logging"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/57517",
        "createdAt":  "2024-08-26T08:02:35Z",
        "number":  57517,
        "author":  "brettwinters",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:07:19Z",
        "body":  "## Background and Motivation\r\n\r\nFor outout caching its often useful to be able to create tags based on the response. This occurs where different requests all touch the same underlying data and the tag representing this underlying data cannot be constructed based on the request data. For example, say, requests for a same user details based on UserId, Identity and EmailAddress. \r\n\r\n```\r\nhttps://api.com/userdetailsbyid?userid=1234\r\nhttps://api.com/userdetailsbyemail?emailaddress=ua@oa.com\r\nhttps://api.com/userdetailsbyidentity?identityprovider=https://idp.com\u0026subject=abc\r\n```\r\n\r\nAt the moment the only way to build the tags for these queries is to use the request data. The problem is that any command handlers would need to look up these details, and evict all these tags separately\r\n\r\n```c#\r\nawait _outputCacheStore.EvictByTagAsync(\"Tag_User_by_userid=...);\r\nawait _outputCacheStore.EvictByTagAsync(\"Tag_User_by_emailaddress=...);\r\nawait _outputCacheStore.EvictByTagAsync(\"Tag_User_by_identity=...);\r\netc\r\n```\r\n\r\nWhat I\u0027d like to do is to add a tag for each request in a custom policy by using the response which in my example contains the userid\r\n\r\n```c#\r\nawait _outputCacheStore.EvictByTagAsync(\r\n    \"Tag_UserId_1234\",\r\n    CancellationToken.None\r\n);\r\n```\r\n\r\nThe workaround is to use reflection in the `ServeResponseAsync(..)` to get the value of the `outputCacheContext.OutputCacheStream` then invoke the `GetCachedResponseBody()` in the internal `OutputCacheStream` before reading the response (my policy is a generic typed policy so it\u0027s easy to deserialise and add the tags to the tags collection: \r\n\r\n```c#\r\nif (_responseTags.Count != 0)\r\n{\r\n     var responseBodyJson = await ExtractResponseBodyAsync(\r\n\tcontext: context, \r\n\tcancellationToken: cancellationToken\r\n    );\r\n\r\n  var view = JsonConvert.DeserializeObject\u003cTView\u003e(responseBodyJson);\r\n\r\n  if (view is not null)\r\n  {\r\n\t  foreach (var tag in _responseTags)\r\n\t  {\r\n\t\t  context.Tags.Add(tag.Compile().Invoke(view));\r\n\t  }\r\n  }\r\n}\r\n```\r\n\r\nThen somehow write it back. Who knows what this breaks...\r\n\r\n## Proposed API\r\n\r\nMake the `OutputCacheStream` property public or provide a public method to `GetCachedResponseBody()` from the `OutputCacheContext` in the `ServeResponseAsync(...)` method. \r\n\r\n## Usage Examples\r\n\r\n```c#\r\npublic async ValueTask ServeResponseAsync(\r\n\t    OutputCacheContext context, \r\n\t    CancellationToken cancellationToken)\r\n    {\r\n     var responseBody= await context.GetCachedResponseBody();\r\n    //etc\r\n}\r\n```\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOicn0fw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86JqhPA",
                                           "createdAt":  "2024-08-26T08:18:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODvqALQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "brettwinters",
                                                                               "createdAt":  "2024-08-26T08:18:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "martincostello",
                                           "body":  "Have reported the post above to GitHub for posting what\u0027s likely malware. Received an identical comment from a different account in the Swashbuckle repo today as well.",
                                           "updatedAt":  "2024-08-26T12:23:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86JyfR_",
                                           "createdAt":  "2024-08-27T06:55:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brettwinters",
                                           "body":  "[Stackoverflow ](https://stackoverflow.com/q/78917485/9388563)",
                                           "updatedAt":  "2024-08-27T06:55:12Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "OutputCache: expose `OutputCacheStream ` for reading in `ServeResponseAsync(..)` so response tags can be built",
        "labels":  [
                       "api-suggestion",
                       "feature-output-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/57544",
        "createdAt":  "2024-08-27T10:33:05Z",
        "number":  57544,
        "author":  "John0King",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:07:20Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nwhen I create a  proxy service with `YARP` , I need to serve static files like nginx,  but  it need to be able to configure mime type mapping throw `appsettings.json`.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/369b2dedc04c58d20322a71d2d8eb255615d5757/src/Middleware/StaticFiles/src/StaticFileExtensions.cs#L25-L30\r\n\r\nthe \"default\"  `UseStaticFile` indeed use `IOptions\u003cStaticFileOptions\u003e`, but it  is  a  `Singleton` service injected to `constructor`  \r\nand it can not to configure it through `appsettings.json`\r\n\n\n### Describe the solution you\u0027d like\n\n1. use a new base method `UseStaticFile(this IApplicationBuilder app,Func\u003cIServiceProvider, IOptionsMonitor\u003cStaticFileOptions\u003e\u003e)`   \r\n2. middleware use `IOptionsMonitor\u003cStaticFileOptions\u003e\u003e`\r\n3. add an easy configuration structure\r\n\r\n```jsonc\r\n{\r\n  \"StaticFile\": {\r\n    \"AllowDefaultMappings\": true, // default to true,   false will clear all default mime mappings\r\n    \"Mappings\" : {\r\n        \".apk\":\"application/vnd.android.package-archive\",\r\n        \".xxx\":\"yyyyyyyy\"\r\n    },\r\n    \"ServeUnknownFileTypes\":false,\r\n    \"RedirectToAppendTrailingSlash\":fase,\r\n    \"DefaultFileNames\":[  // this is for configure  UseDefaultFiles\r\n      \"index.html\",\r\n      \"index.htm\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "allow configure static files  with `IOptions\u003cT\u003e` and `IConfiguration`",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/57546",
        "createdAt":  "2024-08-27T12:00:21Z",
        "number":  57546,
        "author":  "alrz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:07:20Z",
        "body":  "## Background and Motivation\r\n\r\nThe header Access-Control-Expose-Headers supports wildcard as with other cors headers.\r\n\r\n## Proposed API\r\n```cs\r\nnamespace Microsoft.AspNetCore.Cors.Infrastructure;\r\n\r\npublic class CorsPolicyBuilder\r\n{\r\n+    public CorsPolicyBuilder AllowAnyExposedHeader();\r\n}\r\n```\r\n## Usage Examples\r\n```cs\r\npolicyBuilder.AllowAnyExposedHeader();\r\n```\r\n\r\n## Alternative Designs\r\n\r\n\u003c!--\r\nWere there other options you considered, such as alternative API shapes?\r\nHow does this compare to analogous APIs in other ecosystems and libraries?\r\n--\u003e\r\n\r\n## Risks\r\n\r\nJust like `AnyOrigins` this is not gonna work with `AllowCredentials`. Perhaps an analyzer could flag misusage for both.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[API Proposal]: Add `CorsPolicyBuilder.AllowAnyExposedHeader`",
        "labels":  [
                       "api-suggestion",
                       "feature-cors",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/57687",
        "createdAt":  "2024-09-04T11:50:26Z",
        "number":  57687,
        "author":  "hansmbakker",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:07:20Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nI have an ASP.NET Core app running in Azure Container Apps, which is protected by Azure App Gateway. Users access the app via the url of the app gateway.\r\n\r\nThe documentation at https://learn.microsoft.com/en-us/aspnet/core/host-and-deploy/proxy-load-balancer seems not to lead to a working setup where the `ForwardedHeadersMiddleware` understands the original host (app gateway hostname) that users used to send requests to the app. See https://github.com/MicrosoftDocs/azure-docs/issues/97027#issuecomment-1229143586 for a similar thread.\r\n\r\n[The Application Gateway sends the original host name in the `X-Original-Host` header](https://learn.microsoft.com/en-us/azure/application-gateway/how-application-gateway-works#:~:text=X%2Doriginal%2Dhost%20header%20contains%20the%20original%20host%20header%20with%20which%20the%20request%20arrived). I see that the `ForwardedHeadersOptions` has [`OriginalHostHeaderName`](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.forwardedheadersoptions.originalhostheadername#microsoft-aspnetcore-builder-forwardedheadersoptions-originalhostheadername) but [the `ForwardedHeadersMiddleware` seems to overwrite that value instead of using it](https://github.com/dotnet/aspnetcore/blob/16e32c0594a55bf68c9589a9416dd64b60376e3e/src/Middleware/HttpOverrides/src/ForwardedHeadersMiddleware.cs#L348).\r\n\r\nIn any case, the resulting effect I see is that links generated using the [`LinkGenerator`](https://github.com/dotnet/aspnetcore/blob/main/src/Http/Routing.Abstractions/src/LinkGenerator.cs) do not have the hostname that users are using.\r\n\r\n### Expected Behavior\r\n\r\n- Understandable documentation on how to setup ASP.NET Core behind Application Gateway.\r\n- LinkGenerator generating links that are correct for end users, with the application being aware of the original host (from app gateway) that users are using.\r\n\r\n### Steps To Reproduce\r\n\r\nI tried configuring my app according to the documentation:\r\n- I [set `ASPNETCORE_FORWARDEDHEADERS_ENABLED` to `true`](https://learn.microsoft.com/en-us/aspnet/core/host-and-deploy/proxy-load-balancer?view=aspnetcore-8.0#forward-the-scheme-for-linux-and-non-iis-reverse-proxies) in the container app\u0027s environment variables\r\n- I added `app.UseForwardedHeaders()` (default settings) in `Program.cs`\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0.401\r\n\r\n### Anything else?\r\n\r\nOutput of `dotnet --info`:\r\n\r\n```\r\n.NET SDK:\r\n Version:           8.0.401\r\n Commit:            811edcc344\r\n Workload version:  8.0.400-manifests.57f7c351\r\n MSBuild version:   17.11.4+37eb419ad\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22631\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.401\\\r\n\r\n.NET workloads installed:\r\nConfigured to use loose manifests when installing new manifests.\r\n [android]\r\n   Installation Source: SDK 8.0.400, VS 17.12.35209.166\r\n   Manifest Version:    34.0.113/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.android\\34.0.113\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n [aspire]\r\n   Installation Source: SDK 8.0.400, VS 17.12.35209.166\r\n   Manifest Version:    8.2.0/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.aspire\\8.2.0\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n [ios]\r\n   Installation Source: SDK 8.0.400, VS 17.12.35209.166\r\n   Manifest Version:    17.5.8020/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.ios\\17.5.8020\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n [maccatalyst]\r\n   Installation Source: SDK 8.0.400, VS 17.12.35209.166\r\n   Manifest Version:    17.5.8020/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.maccatalyst\\17.5.8020\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n [maui-windows]\r\n   Installation Source: SDK 8.0.400, VS 17.12.35209.166\r\n   Manifest Version:    8.0.72/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.maui\\8.0.72\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n\r\nHost:\r\n  Version:      9.0.0-preview.7.24405.7\r\n  Architecture: x64\r\n  Commit:       static\r\n\r\n.NET SDKs installed:\r\n  8.0.401 [C:\\Program Files\\dotnet\\sdk]\r\n  9.0.100-preview.7.24407.12 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 8.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 9.0.0-preview.7.24406.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 8.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 9.0.0-preview.7.24405.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 8.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 9.0.0-preview.7.24405.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  X:\\source\\ra\\mobile-app-backend\\global.json\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOitc1cA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86K1zVw",
                                           "createdAt":  "2024-09-04T15:20:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEC-zuQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tndata",
                                                                               "createdAt":  "2025-01-17T12:22:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hansmbakker",
                                           "body":  "I found this documentation for Container Apps: https://learn.microsoft.com/en-us/azure/container-apps/dotnet-overview#define-x-forwarded-headers\r\n\r\nIt recommends clearing KnownNetworks / KnownProxies in order to remove the loopback restriction.",
                                           "updatedAt":  "2024-09-04T15:20:54Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ForwardedHeadersMiddleware seems not to pick up original host from Azure App Gateway",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/57693",
        "createdAt":  "2024-09-04T17:16:21Z",
        "number":  57693,
        "author":  "arkadiuszwojcik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:07:21Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWhen creating mod_rewrite _RewriteRule_  with redirection to different host/domain name (absolute url) it doesn\u0027t work properly because instead changing entire redirected url, destination is appended to requested url.\r\n\r\n### Expected Behavior\r\n\r\nFor redirections _RewriteRule_ is internaly creating _RedirectAction_ object that takes path base url always from: `context.HttpContext.Request.PathBase` but what if redirection destination is full url to other hostname/domain? In such case base url should be taken from destination and not like now from requested url.\r\n\r\nWhen for example I have rule:\r\nRewriteCond %{REQUEST_URI} ^.*/test/.*$ [NC]\r\nRewriteRule ^(.*)$ https://google.pl$1 [R=307,L]\r\n\r\nWhen I enter: https://myhost.mydomain/test/abc I expect to be redirected to https://google.pl/test/abc but instead final url is:  https://myhost.mydomainhttps://google.pl/test/abc\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n9.0.100-preview.7.24407.12\r\n\r\n### Anything else?\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Mod Rewrite - RewriteRule - redirections with absolute urls doesn\u0027t work",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/57850",
        "createdAt":  "2024-09-13T00:30:39Z",
        "number":  57850,
        "author":  "Fear0",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_uVvQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TheEagleByte",
                                            "createdAt":  "2024-09-16T12:24:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mattgrayson",
                                            "createdAt":  "2024-09-17T13:17:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cleftheris",
                                            "createdAt":  "2024-09-26T10:10:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lipa44",
                                            "createdAt":  "2024-10-30T10:39:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tiakun",
                                            "createdAt":  "2024-11-29T13:02:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "unsafePtr",
                                            "createdAt":  "2024-12-30T11:56:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MohamedAliTera",
                                            "createdAt":  "2025-01-30T15:34:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "swh-cb",
                                            "createdAt":  "2025-03-05T10:50:30Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2025-07-29T18:07:21Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nHi,\r\n\r\nI am using Output Caching with Redis in my .NET 8 web API. The IOutputCacheStore API only provides a method for evicting cache by tags and not by cache keys. This is limiting, as the Tag() method in the CacheOutput fluent API chain only accepts strings as parameters and does not allow for delegates, unlike the VaryByValue() method, where we can access the HttpContext and query parameters to dynamically create cache keys. As a result, it\u0027s not possible to dynamically create a tag in the same way as in VaryByValue() to use as input for the EvictByTag() method.\r\n\r\nI have overridden the caching policy to allow output caching of authenticated requests, enabling me to cache by an ID value (e.g., user ID) and evict the cache entry associated with that specific value.\r\n\r\nIs there a way to address this issue, allowing more granular cache eviction by user or query parameter, without having to evict the entire cache for the endpoint in ASP.NET Core Output Caching?\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nAn fluent api that allows evicting cache entries by value in Asp.Net Core OutputCaching\r\n\r\n### Additional context\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjDxziQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86MPHOJ",
                                           "createdAt":  "2024-09-16T12:25:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheEagleByte",
                                           "body":  "+1 on this request.",
                                           "updatedAt":  "2024-09-16T12:25:17Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Is there a way to evict a cache entry by value in addition to evicting by tag  - OutputCaching Asp.Net Core",
        "labels":  [
                       "feature-output-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/57987",
        "createdAt":  "2024-09-20T15:13:01Z",
        "number":  57987,
        "author":  "benjaminpetit",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:07:22Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWhen the URL has been modified by the rewrite middleware, it will force to run the routing middleware just after, disregarding the order configured by the developer.\r\n\r\nThis is an issue because routing might find a suitable endpoint before we had a chance to execute any other middleware (like the static file middleware).\r\n\n\n### Expected Behavior\n\nThe rewrite middleware doesn\u0027t change the middleware order when the URL has been modified.\n\n### Steps To Reproduce\n\nGood repro here from  @sgarnovsky https://github.com/sgarnovsky/AspNetCoreIssues/tree/main/BlazorAppUrlRewritingTest\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8\n\n### Anything else?\n\nRelated issue: https://github.com/microsoft/reverse-proxy/issues/2532",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "The Rewrite middleware changes middleware ordering",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/58130",
        "createdAt":  "2024-09-28T00:14:07Z",
        "number":  58130,
        "author":  "kjkrum",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:38:13Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI tried to use problem details middleware and exception handler middleware in this manner:\r\n\r\n```\r\nbuilder.Services.AddExceptionHandler\u003cMyExceptionHandler\u003e();\r\nbuilder.Services.AddProblemDetails(options =\u003e\r\n{\r\n\toptions.CustomizeProblemDetails = context =\u003e\r\n\t{\r\n\t\tif (context.Exception is MyUserFacingException)\r\n\t\t{\r\n\t\t\tcontext.ProblemDetails.Details = context.Exception.Message;\r\n\t\t}\t\r\n\t};\r\n});\r\n\r\napp.UseStatusCodePages();\r\napp.UseExceptionHandler();\r\n```\r\n\r\nIf the exception handler returns true then `ProblemDetailsContext.Exception` is null. I think this makes sense since the handler returning true means the exception does not propagate. The problem details middleware initializes `ProblemDetailsContext.ProblemDetails` to whatever status code was set by the exception handling middleware.\r\n\r\nIf the exception handler returns false, then the exception is available in `ProblemDetailsContext.Exception`, which is good. But now the problem details middleware always initializes `ProblemDetailsContext.ProblemDetails` as a 500, ignoring the status code set by the exception handler middleware. And there\u0027s no way to leverage the existing defaults to re-initialize it (https://github.com/dotnet/aspnetcore/issues/47978). The actual HTTP response code is the one set by the exception handler, not the 500 shown in the problem details.\r\n\r\nSearching the code base for uses of `ProblemDetailsDefaults.Apply`, the only place it\u0027s called with a null status code that would result in it defaulting to 500 is here:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/6b9bba1472da66a9f02ae3cd0f564ad6e2bb5fff/src/Http/Http.Results/src/ProblemHttpResult.cs#L24\n\n### Expected Behavior\n\nThe problem details middleware should always initialize `ProblemDetailsContext.ProblemDetails` using `HttpContext.Response.StatusCode`.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.400\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsaNKMA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86N6Kmj",
                                           "createdAt":  "2024-09-28T17:01:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kjkrum",
                                           "body":  "My workaround is for the exception handler to always return true and pass user-facing information to problem details via `HttpContext.Items`.",
                                           "updatedAt":  "2024-09-28T17:01:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86xo0ow",
                                           "createdAt":  "2025-06-17T12:52:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hekystyle",
                                           "body":  "My workaround is to take exception from `IExceptionHandlerFeature`:\n\n```csharp\nbuilder.Services.Configure\u003cProblemDetailsOptions\u003e(static options =\u003e\n{\n    options.CustomizeProblemDetails = static context =\u003e\n    {\n        var feature = context.HttpContext.Features.Get\u003cIExceptionHandlerFeature\u003e();\n        context.ProblemDetails.Detail = feature?.Error.Message;\n    };\n});\n```",
                                           "updatedAt":  "2025-06-17T12:52:39Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Problem details middleware ignores response status code when handling an exception.",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/58164",
        "createdAt":  "2024-09-30T19:18:49Z",
        "number":  58164,
        "author":  "stasberkov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:07:22Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nTime to time webpage receives corrupted json text:\r\n\r\n\"\\u0000\\u0000\\u0000 ... \\u0000\\u0000\\u0000\\u00009cd8-287f-4df0-a645-558e5cff0c63\",\"name\":\"Corn\",\"symbols\":[\"ZCE?1\",\"ZCE?2\",\"ZCE?3\",\"ZCE?4\",\"ZCE?5\",\"ZCE?6\",\"F.US.ZCEZ24\"]},{\"id\":\"de2579b3-5340-40ff-9ab3-dea0dbe774dc\",\"name\":\"MN Spring Wheat\",\"symbols\":[\"F.US.MWEU23\",\"F.US.MWEZ23\",\"F.US.MWEH24\",\"F.US.MWEK24\",\"F.US.MWEN24\",\"F.US.MWEU24\",\"F.US.MWEZ24\"]},{\"id\":\"e4300ad3-ae20-4ea1-ba6e-fcae7b12b41f\",\"name\":\"Metals\",\"symbols\":[\"GCE\",\"FGD\",\"CPE\",\"TGD\",\"SIE\",\"LDKZ\",\"GCES2\",\"PLE\",\"TPL\",\"LALZ\",\"LZHZ\",\"PA\",\"PAE\",\"LNIZ\",\"TMG\"]},{\"id\":\"ee406e54-b082-4dce-9eb0-361467ebd4a2\",\"name\":\"Corn\",\"symbols\":[\"ZCE?1\",\"ZCE?2\",\"ZCE?3\",\"ZCE?4\",\"ZCE?5\",\"ZCE?6\",\"F.US.ZCEZ24\"]}]\"\r\n\r\nI.e. significant part of the response is replaced by \\u0000. It looks as if memory buffer was partially erased.\r\n\r\nI am using ASP.NET Core 8 with response caching, hosted within docker container in kuber cluster.\r\n\r\nController code:\r\n```\r\n[ResponseCache(VaryByQueryKeys = [\"ts\", \"brandName\"], Duration = 2592000 /* 30 days */)]\r\npublic async Task\u003cIActionResult\u003e GetBrandSymbolLists(string brandName) {\r\n    try \r\n    {\r\n        AssetPackageSymbolListDto[] result = [];\r\n        var brand = await em.Brand.GetBrandByNameAsync(brandName);\r\n        var packageId = await em.BrandContentProfile.GetProfilePackageIdAsync(brand.ProfileId);\r\n\r\n        if (packageId.HasValue) \r\n        {\r\n            result = (await em.AssetPackageSymbolList\r\n                              .GetByPackageIdAsync(packageId.Value))\r\n                     .Select(l =\u003e new AssetPackageSymbolListDto(l))\r\n                     .ToArray();\r\n        }\r\n\r\n        return Ok(result);\r\n    } \r\n    catch (Exception ex) \r\n    {\r\n        logger.LogError(ex, \"Failed to get profile symbol lists\");\r\n        return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);\r\n    }\r\n}\r\n```\r\nThis happens once a month, not so often but it happens. Already get several complains from our clients.\r\nPreviously I tried using response caching middleware for static files. Time to time server started serving zeroed content. Removing `public` cache-control directive helped to workaround the problem but also disabled server cache.\r\n\r\nWe started observing this issue since we migrated to asp.net 8.0 from 6.0.\n\n### Expected Behavior\n\nNo data corruption when serving response.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.7\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Response cache middleware corrupts data",
        "labels":  [
                       "feature-response-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/58380",
        "createdAt":  "2024-10-12T17:54:35Z",
        "number":  58380,
        "author":  "zengqinglei",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:27:21Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nI reviewed the source code and found that adding \"ResponseBody\" to the logContext\u0027s \"Parameters\" occurs after the interceptor\u0027s \"OnResponseAsync\" method is executed. I want to access the \"ResponseBody\" within this method and add it to the diagnostic context for logging with Serilog, but I have found that this is currently not achievable.\n![Image](https://github.com/user-attachments/assets/7a36fcfb-583e-4a87-9b34-bc71375a22c1)\n\nI expect to add the \"ResponseBody\" to the diagnostic context in the red box area in the diagram, so that it can be provided to Serilog for file logging, like in the line diagnosticContext.Set(\"RequestBody\", requestBody);\n![Image](https://github.com/user-attachments/assets/4a966af6-8250-4101-aecf-440d19bb1686)\n\nThe log template content for Serilog is like this:\n![Image](https://github.com/user-attachments/assets/637a7837-1fea-453c-950b-13553c2a47d6)\n\n\n\n\n### Expected Behavior\n\nIn the SampleHttpLoggingInterceptor\u0027s OnResponseAsync method, read the ResponseBody from the logContext\u0027s Parameters, and then add it to the diagnostic context using diagnosticContext.Set(\"RequestBody\", requestBody); to provide it to Serilog for file logging.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n.net 8.0\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqICl7A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86ogI5p",
                                           "createdAt":  "2025-04-24T09:41:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zengqinglei",
                                           "body":  "@martincostello \nIs there any further progress on this issue?",
                                           "updatedAt":  "2025-04-24T09:41:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86ogKXs",
                                           "createdAt":  "2025-04-24T09:44:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "martincostello",
                                           "body":  "I don\u0027t know. I guess not due to the lack of any activity from the product team.",
                                           "updatedAt":  "2025-04-24T09:44:13Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "After using services.AddHttpLogging(), the ResponseBody cannot be passed to Serilog for file logging.",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/58461",
        "createdAt":  "2024-10-16T17:09:39Z",
        "number":  58461,
        "author":  "halter73",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC76Klg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "brgrz",
                                            "createdAt":  "2024-10-17T09:48:08Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-09-04T07:10:35Z",
        "body":  "We have a general rule that errors that can be caused by a misbehaving client connected to a well-configured and functioning web app should not raise log messages higher than the debug level because it could allow attackers to effectively spam the logs. This is a principle we follow in the `ForwardedHeadersMiddleware`. However, this makes it much harder to figure out what\u0027s going on when the middleware ignores `X-Forwarded-...` headers because the request comes from an \"unknown\" proxy in development. See #58455 and #57650 for some recent examples of this.\n\nThe only indication that things are going wrong (other than `HttpRequest.Host` and some other properties not getting set to the expected forwarded values) is the following log:\n\n\u003e ```\n\u003e dbug: Microsoft.AspNetCore.HttpOverrides.ForwardedHeadersMiddleware[1]\n\u003e      Unknown proxy: [::ffff:10.0.0.100]:54321\n\u003e ```\n\nRaising the severity of the log only in development seems like one of the easiest possible fixes, but most of the time this issue only occurs after deploying to a production environment. Another option would be to reject requests containing `X-Forwarded-` headers from an unknown source with a 400 status and a description of the issue in the response body even in production, but that seems like a very risky breaking change.\n\nI\u0027m not sure what the best solution is, but the current behavior has wasted a lot of people\u0027s time debugging.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwbTvmg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde87BtO-a",
                                           "createdAt":  "2025-09-03T16:01:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fredericDelaporte",
                                           "body":  "The log has been promoted to a warning, see [here](https://github.com/dotnet/aspnetcore/pull/62687/files#r2258681451).\n\nI do not think it is adequate though. Maybe it will be rollback-ed.",
                                           "updatedAt":  "2025-09-04T07:10:35Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "UseForwardedHeaders should raise more prominent errors for unknown proxies",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/58643",
        "createdAt":  "2024-10-25T23:05:01Z",
        "number":  58643,
        "author":  "Tri125",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:07:23Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nWriteAsJsonAsync will not write to the response body when used inside a RequestTimeoutPolicy of the RequestTimeoutsMiddleware.\n\nFor example, a user could be configuring the WriteTimeoutResponse delegate to return an error type for the policy.\nThe middleware will successfully execute the policy, the response status code will be correctly set but the response body will stay empty.\n\nI investigated and I found that the problem is in the slow path of the extension method.\nIf a user doesn’t pass a cancellable CancellationToken to WriteAsJsonAsync, then it will use the token from the httpContext ``response.HttpContext.RequestAborted``. If that token is cancelled then the call that it does to JsonSerializer.SerializeAsync will be cancelled.\n\nIn this scenario with the TimeoutMiddleware, when the delegate for the RequestTimeoutPolicy is executed the request is already aborted and the call to WriteAsJsonAsync will be immediately cancelled, which is why the response body remains empty.\n\nAs a workaround a user can create a new CancellationTokenSource in the scope of the delegate and pass its token to WriteAsJsonAsync.\n\ncontext.Response.WriteAsync doesn\u0027t have this problem.\n\n### Expected Behavior\n\nWriteAsJsonAsync should write to the request body when used inside the WriteTimeoutResponse delegate of a RequestTimeoutPolicy when called without a CancellationToken.\n\n### Steps To Reproduce\n\n\nHere\u0027s a minimal repro case made with ASP.NET Core Web API.\n\nMake sure to start the program without debugging or the TimeoutMiddleware will not be enabled.\n\n```\n// Program.cs\n\nusing Microsoft.AspNetCore.Http.Timeouts;\nusing System;\n\nvar summaries = new[]\n{\n    \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n};\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddRequestTimeouts(options =\u003e\n{\n    options.DefaultPolicy = new RequestTimeoutPolicy\n    {\n        Timeout = TimeSpan.FromSeconds(2),\n        WriteTimeoutResponse = async (HttpContext context) =\u003e\n        {\n            var weather = new WeatherForecast\n            (\n                DateOnly.FromDateTime(DateTime.Now),\n                Random.Shared.Next(-20, 55),\n                summaries[Random.Shared.Next(summaries.Length)]\n            );\n\n            await context.Response.WriteAsJsonAsync(weather);\n        }\n    };\n});\n\nvar app = builder.Build();\napp.UseRequestTimeouts();\n\n// Configure the HTTP request pipeline.\n\napp.MapGet(\"/\", async (HttpContext context) =\u003e\n{\n    await Task.Delay(TimeSpan.FromSeconds(10), context.RequestAborted);\n    return Results.Content(\"No timeout!\", \"text/plain\");\n});\n\n\n\napp.Run();\n\ninternal record WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)\n{\n    public int TemperatureF =\u003e 32 + (int)(TemperatureC / 0.5556);\n}\n```\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.403\n\n### Anything else?\n\nASP.NET Core Web API\nVisual Studio Version 17.11.5\n\n```\n.NET SDK:\n Version:           8.0.403\n Commit:            c64aa40a71\n Workload version:  8.0.400-manifests.e99c892e\n MSBuild version:   17.11.9+a69bbaaf5\n\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.22631\n OS Platform: Windows\n RID:         win-x64\n Base Path:   c:\\program files\\dotnet\\sdk\\8.0.403\\\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkZa0xg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86RlrTG",
                                           "createdAt":  "2024-10-28T20:35:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "We might want to set\n`context.RequestAborted = originalToken;`\nbefore calling the policy so `WriteAsJsonAsync` will only see an error if the client canceled the request.\nhttps://github.com/dotnet/aspnetcore/blob/1d98312ff65d4e668bc93a843e985fdacb7d2e7c/src/Http/Http/src/Timeouts/RequestTimeoutsMiddleware.cs#L124",
                                           "updatedAt":  "2024-10-28T20:35:47Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "WriteAsJsonAsync doesn\u0027t write to the response body when used inside a RequestTimeoutPolicy of the RequestTimeoutsMiddleware",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/58737",
        "createdAt":  "2024-11-01T06:02:37Z",
        "number":  58737,
        "author":  "WeihanLi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:27:21Z",
        "body":  "## Background and Motivation\n\nSometimes, we may want to avoid response compression for some endpoints, such as small responses; it may cause bad performance for small responses, and some may want to get rid of response compression.\n\n## Proposed API\n\n```diff\nnamespace Microsoft.AspNetCore.Http.Metadata;\n\n+ public interface IDisableResponseCompressionMetadata\n+ {\n+ }\n```\n\n```diff\nnamespace Microsoft.AspNetCore.Http;\n\n+ public sealed class DisableResponseCompressionAttribute : Attribute, IDisableResponseCompressionMetadata\n+ {\n+ }\n\n+ public static class HttpResponseCompressionEndpointConventionBuilderExtensions\n+ {\n+     public static IEndpointConventionBuilder DisableResponseCompression(this IEndpointConventionBuilder builder);\n+ }\n```\n\n\n## Usage Examples\n\n```cs\napp.UseResponseCompression();\napp.MapGet(\"/deploy-info\", (IOptions\u003cDeployInfo\u003e option) =\u003e Results.Ok(option.Value)).DisableResponseCompression();\napp.MapMetrics().DisableHttpMetrics().DisableResponseCompression();\n```\n\n## Alternative Designs\n\n```diff\nnamespace Microsoft.AspNetCore.ResponseCompression;\n\npublic class ResponseCompressionOptions\n{\n+   public Func\u003cHttpContext, ValueTask\u003cbool\u003e\u003e Predict { get; set; }\n}\n```\n\n```c#\nservices.AddResponseCompression(options =\u003e\n{\n    options.Predict = context =\u003e \n    {\n        var noCompressionExists = context.Request.Headers.TryGetValue(\"no-compression\", out _);\n        return noCompressionExists is not true;\n    };\n});\n```\n\n\n```c#\nservices.AddResponseCompression(options =\u003e\n{\n    options.Predict = context =\u003e \n    {\n        var contentLength = context.Response.ContentLength;\n        return contentLength.HasValue \u0026\u0026 contentLength.Value \u003e 1024;\n    };\n});\n```\n\n## Risks\n\n\u003c!--\nPlease mention any risks that to your knowledge the API proposal might entail, such as breaking changes, performance regressions, etc.\n--\u003e\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Introduce ability to disable response compression",
        "labels":  [
                       "api-suggestion",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/58785",
        "createdAt":  "2024-11-04T21:12:58Z",
        "number":  58785,
        "author":  "skillmaker-dev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:07:23Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nHey, I\u0027m trying to implement OutputCache with MultiTenancy Support, So I had to create a custom policy for that, I also used tags so that I can evict cache by tags + tenant id, this is how I\u0027m doing it:\n\nCustom OutputCache policy, MultitenantCachePolicy:\n\n```\npublic class MultitenantCachePolicy : IOutputCachePolicy\n{\n    public ValueTask CacheRequestAsync(OutputCacheContext context, CancellationToken cancellation)\n    {\n        var attemptOutputCaching = AttemptOutputCaching(context);\n        context.EnableOutputCaching = true;\n        context.AllowCacheLookup = attemptOutputCaching;\n        context.AllowCacheStorage = attemptOutputCaching;\n        context.AllowLocking = true;\n        context.CacheVaryByRules.QueryKeys = \"*\";\n\n        var tenantId = context.HttpContext.Items[\"tenantId\"] as string ?? \"\";\n\n        HashSet\u003cstring\u003e newTags = [];\n\n        foreach (var tag in context.Tags)\n        {\n            newTags.Add($\"tenant:{tenantId}:{tag}\");\n        }\n\n        newTags.Add($\"tenant:{tenantId}\");\n        context.Tags.UnionWith(newTags);\n\n        return ValueTask.CompletedTask;\n    }\n\n    public ValueTask ServeFromCacheAsync(OutputCacheContext context, CancellationToken cancellation)\n    {\n        var response = context.HttpContext.Response;\n\n        if (!StringValues.IsNullOrEmpty(response.Headers.SetCookie))\n        {\n            context.AllowCacheStorage = false;\n            return ValueTask.CompletedTask;\n        }\n\n        if (response.StatusCode != StatusCodes.Status200OK)\n        {\n            context.AllowCacheStorage = false;\n            return ValueTask.CompletedTask;\n        }\n\n        return ValueTask.CompletedTask;\n    }\n\n    public ValueTask ServeResponseAsync(OutputCacheContext context, CancellationToken cancellation)\n        =\u003e ValueTask.CompletedTask;\n\n    private static bool AttemptOutputCaching(OutputCacheContext context)\n    {\n        var request = context.HttpContext.Request;\n\n        if (!HttpMethods.IsGet(request.Method) \u0026\u0026 !HttpMethods.IsHead(request.Method))\n        {\n            return false;\n        }\n\n        return true;\n    }\n}\n```\n\nAnd this is how I register it:\n\n```\nservices.AddOutputCache(options =\u003e\n{\n    options.AddPolicy(CacheConfig.CachePolicies.MultiTenantCache, o =\u003e\n    {\n        o.Expire(TimeSpan.FromMinutes(10))\n            .VaryByValue(context =\u003e CacheExtension.VaryByTenantId(context))\n            .AddPolicy\u003cMultitenantCachePolicy\u003e();\n    });\n}\n```\nAnd this is how I use it in controller endpoints:\n\n`[OutputCache(PolicyName = CacheConfig.CachePolicies.MultiTenantCache, Tags = [CacheConfig.CacheTags.DummyTag])]`\n\nThe problem is that the `DummyTag`is not getting used at all, when i set a breakpoint in `CacheRequestAsync`the context Tags list is empty, however, if i set the Tag using this way:\n```\noptions.AddPolicy(CacheConfig.CachePolicies.MultiTenantCache, o =\u003e\n    {\n        o.Expire(TimeSpan.FromMinutes(10))\n            .VaryByValue(context =\u003e CacheExtension.VaryByTenantId(context))\n            .AddPolicy\u003cMultitenantCachePolicy\u003e()\n            .Tag(CacheConfig.CacheTags.DummyTag);\n    });\n```\n\nIt works this way, what am I doing wrong here?\n\n### Expected Behavior\n\nI should be able to register one custom policy, however, when I use that policy in the OutputCache attribute, I should be able to use the `Tags` property so that each controller endpoint has its Tag while sharing the same policy.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.403\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkn-HgA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86SYyP7",
                                           "createdAt":  "2024-11-05T00:22:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "Have you tried looking at `Tags` in `ServeFromCacheAsync`? I believe attribute policies run after policies from options.",
                                           "updatedAt":  "2024-11-05T00:22:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86SdJoB",
                                           "createdAt":  "2024-11-05T13:04:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "skillmaker-dev",
                                           "body":  "@BrennanConroy The method doesn\u0027t get hit, But i checked ServeResponseAsync and it contains the tag",
                                           "updatedAt":  "2024-11-05T13:04:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86Sf4eA",
                                           "createdAt":  "2024-11-05T17:57:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "Sure, whichever method is called will have the tag. This seems like expected behavior then.",
                                           "updatedAt":  "2024-11-05T17:57:17Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "The Tags Property in OutputCache attribute is not working when using custom policies.",
        "labels":  [
                       "feature-output-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/58843",
        "createdAt":  "2024-11-08T20:34:01Z",
        "number":  58843,
        "author":  "cloudlucky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAFcqg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MeikelLP",
                                            "createdAt":  "2025-03-14T12:54:17Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-29T18:07:24Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nThe RequestLocalizationMiddleware sets the culture to default even if the ```RequestLocalizationOptions``` supports ```CultureInfo.InvariantCulture``` since version 8.\n\nExample:\n```c#\nbuilder.Services.Configure\u003cRequestLocalizationOptions\u003e(options =\u003e {\n    var supportedCultures = new[]\n    {\n        CultureInfo.InvariantCulture,\n        CultureInfo.GetCultureInfo(\"fr\"),\n        CultureInfo.GetCultureInfo(\"en\"),\n    };\n\n    options.DefaultRequestCulture = new(supportedCultures[1]);\n    options.SupportedCultures = supportedCultures;\n    options.SupportedUICultures = supportedCultures;\n\n    options.RequestCultureProviders =\n    [\n        new DefaultRequestCultureProvider()\n    ];\n});\n\npublic class DefaultRequestCultureProvider : IRequestCultureProvider\n{\n    public Task\u003cProviderCultureResult?\u003e DetermineProviderCultureResult(HttpContext httpContext)\n    {\n        var result = new ProviderCultureResult(culture: CultureInfo.InvariantCulture.Name, uiCulture: CultureInfo.CurrentUICulture.Name);\n\n        return Task.FromResult\u003cProviderCultureResult?\u003e(result);\n    }\n}\n``` \n\nAt the end, ```CultureInfo.CurrentCulture``` was always the ```DefaultRequestCulture``` instead of ```CultureInfo.InvariantCulture```.\n\nNote: this code worked until version 8\n\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n_No response_\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkvsGlg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86S-waW",
                                           "createdAt":  "2024-11-09T00:10:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "It seems like not returning InvariantCulture here was an intentional decision: https://github.com/dotnet/aspnetcore/pull/46637#issuecomment-1482094780\n\n@mitchdenny, what are your thoughts?",
                                           "updatedAt":  "2024-11-09T00:10:08Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "RequestLocalizationMiddleware does not handle CultureInfo.InvariantCulture since version 8",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/59127",
        "createdAt":  "2024-11-24T03:26:16Z",
        "number":  59127,
        "author":  "tiakun",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:07:24Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI was working to migrate from my old caching mechanism to Output Cache, but I was struggled on an issue. I was trying to revalidate the cache in IOutputCachePolicy.ServeFromCacheAsync because the document said that at that point the freshness of the cached response can be updated. What I found out is.\n\n1. There is no way to tell the framework from within IOutputCachePolicy.ServeFromCacheAsync that the cache is not fresh anymore. From my investigation, the [only logic implemented in the middleware](https://github.com/dotnet/aspnetcore/blob/0a5f4deafc371a78e89eea7bfaa615404c52cd6a/src/Middleware/OutputCaching/src/OutputCacheMiddleware.cs#L270) is just determining the age of the cache.\n2. Even if the earlier were possible, the cached response is not publicly accessible through OutputCacheContext. This makes it impossible to inspect from outside if the cached response is still fresh or not. For example, we at least need to inspect the cached response\u0027s Etag to determine the freshness.\n\n### Describe the solution you\u0027d like\n\nI would like to suggest the following solution.\n1. Allow IOutputCachePolicy to tell the framework that the cache is already invalid inside ServeFromCacheAsync. This could be a simple method added to OutputContext, e.g. `MarkCacheInvalid()`.\n2. Allow IOutputCachePolicy to inspect cached response inside IOutputCachePolicy.ServeFromCacheAsync through OutputCacheContext\n\n### Additional context\n\nNow it is possible by hacking through internal members by reflection, but I believe it should be implemented because right now there is not much we can do related to the cache in IOutputCachePolicy.ServeFromCacheAsync.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlPx6Iw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86U8wXB",
                                           "createdAt":  "2024-11-25T20:20:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "captainsafia",
                                           "body":  "@tiakun Thanks for filling this issue!\n\nIt seems like you\u0027d like to propose some new API to solve the problem that you\u0027re running into here.\n\n\u003e  I was trying to revalidate the cache in IOutputCachePolicy.ServeFromCacheAsync because the document said that at that point the freshness of the cached response can be updated. What I found out is.\n\nCan you share an example of the code you wish you could write with the missing APIs to solve this problem?",
                                           "updatedAt":  "2024-11-25T20:20:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86U_Hoj",
                                           "createdAt":  "2024-11-26T03:26:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tiakun",
                                           "body":  "\u003e [@tiakun](https://github.com/tiakun) Thanks for filling this issue!\n\u003e \n\u003e It seems like you\u0027d like to propose some new API to solve the problem that you\u0027re running into here.\n\u003e \n\u003e \u003e I was trying to revalidate the cache in IOutputCachePolicy.ServeFromCacheAsync because the document said that at that point the freshness of the cached response can be updated. What I found out is.\n\u003e \n\u003e Can you share an example of the code you wish you could write with the missing APIs to solve this problem?\n\nMy pleasure. Here is an example of IOutputCachePolicy I would like to write\n\n```\nclass MyOutputCachePolicy : IOutputCachePolicy \n{\n     public async ValueTask ServeFromCacheAsync(OutputCacheContext context, CancellationToken cancellation)\n     {\n         var cachedEtag = context.GetCachedResponseEtag();\n         // IsFresh here is my own method to check if the cache is fresh or not\n         if (!await IsFreshAsync(context, cachedEtag)) \n         {\n              context.MarkCachedResponseInvalid();\n         }\n     }\n     ...    \n}\n```\n\nFrom the example, `GetCachedResponseEtag` returns cached etag and `MarkCachedResponseInvalid` flag the cached response to be stale, effectively prevent the middleware to return the cache and allow the middleware to evict the cache.\n\nI\u0027m not sure if I should have used an API proposal template instead. I could do it if it is more appropriate.\n",
                                           "updatedAt":  "2024-11-27T00:56:35Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Output-caching should support custom cache invalidation through IOutputCachePolicy",
        "labels":  [
                       "Needs: Attention :wave:",
                       "feature-output-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/59537",
        "createdAt":  "2024-12-18T06:25:01Z",
        "number":  59537,
        "author":  "leeriorio",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:07:25Z",
        "body":  "There are two places, where Null-Conditional Operator (`?.`) using seems redundant in `CreateStorageVaryByKey()` method of `internal class ResponseCachingKeyProvider`.\n\nhttps://github.com/dotnet/aspnetcore/blob/6ae3ea387b20f6497b82897d613e9b8a6e31d69c/src/Middleware/ResponseCaching/src/ResponseCachingKeyProvider.cs#L99\n\nand\n\nhttps://github.com/dotnet/aspnetcore/blob/6ae3ea387b20f6497b82897d613e9b8a6e31d69c/src/Middleware/ResponseCaching/src/ResponseCachingKeyProvider.cs#L126\n\nThere is sufficient check of `varyByRules` value at the start of the method. Isn\u0027t it?\n\nhttps://github.com/dotnet/aspnetcore/blob/6ae3ea387b20f6497b82897d613e9b8a6e31d69c/src/Middleware/ResponseCaching/src/ResponseCachingKeyProvider.cs#L80-L83\n\nFound by Linux Verification Center (linuxtesting.org) with SVACE.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Redundant checks in ResponseCachingKeyProvider",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/59870",
        "createdAt":  "2025-01-14T17:51:40Z",
        "number":  59870,
        "author":  "wtgodbe",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:07:25Z",
        "body":  "\u003c!--\nNote this issue template is specifically for failing tests within the dotnet/aspnetcore repo.\n--\u003e\n\n## Failing Test(s)\n\n\u003c!--\nProvide the fully qualified name(s) of the failing tests.\n--\u003e\n\n- Failed Microsoft.AspNetCore.ResponseCompression.Tests.ResponseCompressionMiddlewareTest.SendFileAsync_AfterFirstWrite_CompressesAndFlushes\n\n## Error Message\n\n\u003c!--\nProvide the error message associated with the test failure, if applicable.\n--\u003e\n\n```text\n2025-01-14T10:02:12.7516868Z Expected: 46\n2025-01-14T10:02:12.7516920Z Actual:   43\n```\n\n## Stacktrace\n\n\u003cdetails\u003e\n\u003c!--\nProvide the stack trace associated with the test failure, if applicable.\n--\u003e\n\n```text\n2025-01-14T10:02:12.7532953Z      at Microsoft.AspNetCore.ResponseCompression.Tests.ResponseCompressionMiddlewareTest.CheckResponseCompressed(HttpResponseMessage response, Nullable`1 expectedBodyLength, String expectedEncoding) in /_/src/Middleware/ResponseCompression/test/ResponseCompressionMiddlewareTest.cs:line 1303\n2025-01-14T10:02:12.7533052Z    at Microsoft.AspNetCore.ResponseCompression.Tests.ResponseCompressionMiddlewareTest.SendFileAsync_AfterFirstWrite_CompressesAndFlushes() in /_/src/Middleware/ResponseCompression/test/ResponseCompressionMiddlewareTest.cs:line 1167\n```\n\u003c/details\u003e\n\n\n## Logs\n\n\u003cdetails\u003e\n\u003c!--\nIf this is a Helix test failure, include the text of the .log artifact from the failing test.\nNote that you have to be signed in to Azure DevOps to see the test artifacts.\n--\u003e\n\n```text\n\n```\n\u003c/details\u003e\n\n## Build\n\n\u003c!--\nProvide a link to the build where the test failure occurred.\n--\u003e\n\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=916632\u0026view=results\n\nOther tests such as `Failed Microsoft.AspNetCore.ResponseCompression.Tests.ResponseCompressionMiddlewareTest.SendFileAsync_FirstWrite_CompressesAndFlushes` fail in a similar way:\n\n\u003e 2025-01-14T10:02:13.9643316Z Expected: 34\n2025-01-14T10:02:13.9643333Z Actual:   31\n\nLikely related to the recent update from Fedore38 to Fedora41",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmnOXtw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86aazBV",
                                           "createdAt":  "2025-01-14T17:52:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wtgodbe",
                                           "body":  "CC @adityamandaleeka new 8.0 test failures on Fedora41",
                                           "updatedAt":  "2025-01-14T17:52:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86aa51G",
                                           "createdAt":  "2025-01-14T18:03:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "Compression (at least zlib probably other algorithms too) don\u0027t have a guaranteed size between algorithm versions. We either do the simple \"fix\" of changing the expected size, or we try to be a little looser in our checks by checking a range potentially.\n\ne.g.\n`Assert.InRange(compressedSize, 20, 40);`",
                                           "updatedAt":  "2025-01-14T18:03:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86abcI8",
                                           "createdAt":  "2025-01-14T18:59:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wtgodbe",
                                           "body":  "Did we already make that change in `main`? I don\u0027t see the same failures there",
                                           "updatedAt":  "2025-01-14T18:59:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86abdsU",
                                           "createdAt":  "2025-01-14T19:02:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "I remember we did the lazy fix during a runtime update when the runtime changed the zlib library. It might not be affected by the OS change in the same way.",
                                           "updatedAt":  "2025-01-14T19:02:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86abf8i",
                                           "createdAt":  "2025-01-14T19:07:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wtgodbe",
                                           "body":  "Looks like that was https://github.com/dotnet/aspnetcore/pull/56684 - that doesn\u0027t touch `SendFileAsync_AfterFirstWrite_CompressesAndFlushes` though, so it\u0027s not obvious to me why we\u0027re not seeing failure on main",
                                           "updatedAt":  "2025-01-14T19:07:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86abwdu",
                                           "createdAt":  "2025-01-14T19:45:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "\u003e runtime changed the zlib library. It might not be affected by the OS change in the same way.\n\n",
                                           "updatedAt":  "2025-01-14T19:45:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86ac5e3",
                                           "createdAt":  "2025-01-14T22:49:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wtgodbe",
                                           "body":  "Should we just update the 8.0 tests to use a range then? Are you the right person to make the fix?",
                                           "updatedAt":  "2025-01-14T22:49:28Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "ResponseCompressionMiddlewareTests failing in release/8.0 on Fedora41",
        "labels":  [
                       "test-failure",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/59899",
        "createdAt":  "2025-01-16T08:12:21Z",
        "number":  59899,
        "author":  "tnuanchuay",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-MKyg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kchinburarat",
                                            "createdAt":  "2025-01-16T08:16:17Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-29T18:27:22Z",
        "body":  "## Background and Motivation\n\nCurrently, retrieving RateLimitStatistics from a PartitionedRateLimiter requires specifying the resource for which the statistics are needed. This parameter is used to identify the appropriate rate limiter associated with those resources. However, in certain use cases, it may be desirable to retrieve the statistics for all rate limiters managed by the PartitionedRateLimiter.\n\n## Proposed API\n\n```diff\nnamespace System.Threading.RateLimiting;\n\npublic abstract class PartitionedRateLimiter\u003cTResource\u003e : IAsyncDisposable, IDisposable\n{\n+    public abstract RateLimiterStatistics[] GetStatistics();\n}\n```\n\n## Usage Examples\n\n```csharp\npublic class RateLimiterHealthCheck : BackgroundService {\n   private readonly PartitionedRateLimiter\u003cHttpContext\u003e _partitionedRateLimiter\n   public RateLimiterHealthCheck(PartitionedRateLimiter\u003cHttpContext\u003e partitionedRateLimiter){\n      _partitionedRateLimiter = partitionedRateLimiter\n   }\n\n   protected override async Task ExecuteAsync(CancellationToken stoppingToken) {\n      while(!stoppingToken.IsCancellationRequested) {\n         foreach(var stats in _partitionedRateLimiter.GetStatistics()){\n            //Sending measurement\n            MeasurementSender.Send(stats)\n         }\n      }\n   }\n}\n```\n\n## Alternative Designs\n\nWe attempted to retrieve metrics from metric `Microsoft.AspNetCore.RateLimiting`, but found that the provided data is aggregated, which may not satisfy scenarios requiring more detailed or per-partition insights.\n\n## Risks\n\nThere is a possibility of encountering race conditions when accessing the dictionary that holds rate limiter instances.\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Retriving RateLimiterStatistics from PartitionedRateLimiter without providing a resource",
        "labels":  [
                       "api-suggestion",
                       "feature-rate-limit",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/60008",
        "createdAt":  "2025-01-23T08:11:02Z",
        "number":  60008,
        "author":  "ItsVeryWindy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBRtkw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "joelverhagen",
                                            "createdAt":  "2025-03-27T17:30:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alex-zyl",
                                            "createdAt":  "2025-04-16T16:20:05Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-29T18:07:25Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\n[https://httpwg.org/specs/rfc5861.html](RFC 5861)  extends the Cache-Control header to include two new directives for http responses, `stale-while-revalidate` and `stale-if-error`.\n\n`stale-while-revalidate` in particular is supported by all main browsers, `stale-if-error` whilst doesn\u0027t appear to have browser support is in use by some cdns.\n\nCurrently to set either of these means having to manually play about with the Cache-Control header and/or implementing your own middleware.\n\n### Describe the solution you\u0027d like\n\nIt would be nice if either of these could be supported by the `ResponseCachingMiddleware` in order to signal clients how caching should be handled.\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Support RFC 5861 Cache-Control Extensions",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/60093",
        "createdAt":  "2025-01-29T16:06:54Z",
        "number":  60093,
        "author":  "Dimoner",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODB5U0w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "m-abrosimov",
                                            "createdAt":  "2025-01-29T17:27:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rameel",
                                            "createdAt":  "2025-03-16T13:13:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dev693",
                                            "createdAt":  "2025-04-30T14:45:05Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-07-29T18:07:26Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nWhen using ResponseCachingMiddleware, I encountered several limitations that make it difficult to extend or optimize its behavior:\n\n1) Custom Key Provider is not possible\nIResponseCachingKeyProvider is internal, so I cannot modify the key generation logic.\nI need to use a hashed key (XxHash128 with a fixed key) for security reasons (storing encrypted cache keys).\nThis also allows optimizations with stackalloc and enables distributed caching with Redis.\n\n2) Cannot invalidate cache manually\nIResponseCache is internal, which means there is no public API to invalidate cache entries.\nI need to forcefully remove cache entries when an event occurs in my system without waiting for TTL expiration.\n\n3) No reusable CachedResponse API\nCachedResponse has useful functionality for copying HttpContext, but it is not encapsulated in a reusable service.\nIf I want to implement custom caching logic, I have to copy existing internal code, which is not ideal.\n\n\n### Describe the solution you\u0027d like\n\n1) Make IResponseCachingKeyProvider and IResponseCache public\nThis allows for custom implementations of key providers and caching mechanisms.\n\n2) Extract caching logic from ResponseCachingMiddleware into a separate service\nThis makes caching logic more modular and reusable.\nImproves testability and makes it easier to integrate with other storage solutions (e.g., Redis, distributed caching).\n\n3) Optimize the implementation\nIf the proposal is accepted, I can submit a PR that includes modern optimizations such as Span\u003cT\u003e usage where applicable.\n\n### Additional context\n\nIf this approach makes sense, I would be happy to implement the necessary changes and submit a PR. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "ResponseCachingMiddleware is too restrictive – IResponseCachingKeyProvider and IResponseCache should be public",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/60235",
        "createdAt":  "2025-02-06T20:33:03Z",
        "number":  60235,
        "author":  "Porozhniakov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:27:22Z",
        "body":  "\u003c!--\nThis template is useful to build consensus about whether work should be done, and if so, the high-level shape of how it should be approached. Use this before fixating on a particular implementation.\n--\u003e\n\n## Summary\n\nDesign proposal for [Short circuit attribute](https://github.com/dotnet/aspnetcore/issues/49181). Change internal `ShortCircuitMetadata` to public `ShortCircuitAttribute`.\n\n## Motivation and goals\n\nCurrently, short circuit routing can only be used with the Minimal API. But many solutions are still based on controllers. Having an attribute would allow MVC actions to support short circuiting. Also, it would be useful for gRPC methods. More arguments in favor of the `ShortCircuitAttribute` can be found in the [original issue](https://github.com/dotnet/aspnetcore/issues/49181).\n\nThis feature is very similar to [Disabling HTTP metrics](https://github.com/dotnet/aspnetcore/issues/56039), where there is both an `DisableHttpMetricsAttribute` and an extension method `DisableHttpMetrics` for `IEndpointConventionBuilder`.\n\n## In scope\n\nAny non-minimal endpoints.\n\n## Out of scope\n\nNone.\n\n## Risks / unknowns\n\nNone come to mind right now.\n\n## Examples\n\n```c#\n[ApiController]\n[Route(\"[controller]\")]\n[ShortCircuit]\npublic class WeatherForecastController : ControllerBase\n{\n}\n``` \n```c#\n[ApiController]\n[Route(\"[controller]\")]\npublic class WeatherForecastController : ControllerBase\n{\n    [HttpGet]\n    [ShortCircuit(200)]\n    public IEnumerable\u003cWeatherForecast\u003e Get()\n    {\n        return Enumerable.Range(1, 5).Select(index =\u003e new WeatherForecast\n        {\n            Date = DateOnly.FromDateTime(DateTime.Now.AddDays(index)),\n            TemperatureC = Random.Shared.Next(-20, 55),\n            Summary = Summaries[Random.Shared.Next(Summaries.Length)]\n        })\n        .ToArray();\n    }\n}\n``` \n\n# Detailed design\n\nNow we have a `ShortCircuitMetadata` class:\n```c#\ninternal sealed class ShortCircuitMetadata\n{\n    public int? StatusCode { get; }\n\n    public ShortCircuitMetadata(int? statusCode)\n    {\n        StatusCode = statusCode;\n    }\n}\n``` \nI suggest adding a new class `ShortCircuitAttribute` instead.\n```c#\nnamespace Microsoft.AspNetCore.Routing;\n\n/// \u003csummary\u003e\n/// Short circuit the endpoint(s).\n/// The execution of the endpoint will happen in UseRouting middleware.\n/// \u003c/summary\u003e\n[AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, Inherited = false, AllowMultiple = false)]\n[DebuggerDisplay(\"{ToString(),nq}\")]\npublic sealed class ShortCircuitAttribute : Attribute\n{\n    /// \u003csummary\u003e\n    /// Constructs an instance of \u003csee cref=\"ShortCircuitAttribute\"/\u003e.\n    /// \u003c/summary\u003e\n    public ShortCircuitAttribute()\n    {\n    }\n\n    /// \u003csummary\u003e\n    /// Constructs an instance of \u003csee cref=\"ShortCircuitAttribute\"/\u003e.\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"statusCode\"\u003eThe status code to set in the response.\u003c/param\u003e\n    public ShortCircuitAttribute(int statusCode)\n    {\n        StatusCode = statusCode;\n    }\n\n    /// \u003csummary\u003e\n    /// The status code to set in the response.\n    /// \u003c/summary\u003e\n    public int? StatusCode { get; }\n\n    /// \u003cinheritdoc/\u003e\n    public override string ToString()\n    {\n        return \"ShortCircuit\";\n    }\n}\n``` \nThe new class is fully backward compatible with the old one, but allows it to be used as an attribute.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Short circuit attribute",
        "labels":  [
                       "design-proposal",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/60255",
        "createdAt":  "2025-02-07T17:16:26Z",
        "number":  60255,
        "author":  "AdmiralSnyder",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-4dmA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SleepWellPupper",
                                            "createdAt":  "2025-02-07T17:23:49Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-29T18:27:23Z",
        "body":  "first, sorry, I didn\u0027t find a matching issue template, since this really isn\u0027t a bug nor a behaviour problem, but an IDE integration one - it\u0027s _maybe_ a documentation issue, but you don\u0027t have a template for that :-(\n\nnow: i intended to find out what the EnableCorsAttribtue does in VS, and VS showed me the docs for the base type, which is Attribute, which is not helpful at all.\n\nThe reason is that there\u0027s a \n```cs\n/// \u003cinheritdoc /\u003e\n```\nabove the class definition.\n\n - this is also the case for DisableCorsAttribute, btw - \n\nalso, specific for those two attributes, the documentation over at \nhttps://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.cors.enablecorsattribute?view=aspnetcore-9.0 \njust writes the summary of the shared interface - which while a little more specific is wrong, since those classes a) aren\u0027t interfaces and b) have specific _meaning_ which should be a) in the docs and b) in the xmlcomment.\n\nso i suggest that someone writes some explanation there.\n\nalso, maybe, a policy should be made that prevents \u003cinheritdoc\u003e for each Attribute subclass - they are just not useful.\n\nthanks, sorry if this means additional work, but i think it might be worth the effort.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "EnableCors, DisableCors: Attribute classes shouldn\u0027t have \u003cinheritdocs\u003e in their class XML-comments",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/60516",
        "createdAt":  "2025-02-20T08:06:34Z",
        "number":  60516,
        "author":  "ItsVeryWindy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-20T22:25:57Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI am using the `ResponseCacheAttribute`. The duration that I\u0027m trying to set is not a static value and is expected to change per request. I want to take the duration that\u0027s been given and apply a transformation on top of it.\n\n`ResponseCacheAttribute` implements a reusable filter that evaluates the values it needs when that filter is first created. What it exposes publicly is also very limited.\n\nThis makes reusing the existing logic fairly difficult.\n\n\n### Describe the solution you\u0027d like\n\nBased on how it works, the most obvious solution would be some kind of factory for the `CacheProfile` that is evaluated per request. At the minimum it should provide access to the requests services. As only one value is changing I would still want to rely on most of the existing behaviour.\n\nBy default this could be set up to serve the static `CacheProfile`. Something similar to:\n\n```csharp\npublic class ResponseCacheAttribute\n{\n    public virtual Func\u003cFilterContext, CacheProfile\u003e GetCacheProfileFactory(IServiceProvider serviceProvider)\n    {\n        var loggerFactory = serviceProvider.GetRequiredService\u003cILoggerFactory\u003e();\n        var optionsAccessor = serviceProvider.GetRequiredService\u003cIOptions\u003cMvcOptions\u003e\u003e();\n        var cacheProfile = GetCacheProfile(optionsAccessor.Value);\n\n        return _ =\u003e cacheProfile;\n    }\n}\n```\n\nwhich could be overridden to:\n\n```csharp\npublic class MyAttribute : ResponseCacheAttribute\n{\n    public override Func\u003cFilterContext, CacheProfile\u003e GetCacheProfileFactory(IServiceProvider serviceProvider)\n    {\n        var loggerFactory = serviceProvider.GetRequiredService\u003cILoggerFactory\u003e();\n        var optionsAccessor = serviceProvider.GetRequiredService\u003cIOptions\u003cMvcOptions\u003e\u003e();\n\n        return context =\u003e \n        {\n            // get required services... context.HttpContext.\n\n            var cacheProfile = GetCacheProfile(optionsAccessor.Value);\n\n            cacheProfile.Duration = xyz;\n\n            return cacheProfile;\n        }\n    }\n}\n```\n\n\n### Additional context\n\nI currently do have a workaround to this problem which seems to work, in that I wrap the `ResponseCacheAttribute` in my own filter factory attribute that has the same properties. For each request it creates a new `ResponseCacheAttribute` and assigns each property on it respectively, and then gets it to create the filter. It does feel like a bit of a hack though.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOn1Ak0w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86fUCTT",
                                           "createdAt":  "2025-02-20T22:25:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "captainsafia",
                                           "body":  "@ItsVeryWindy Thanks for filing this issue!\n\nAs you noticed, the implementation for the current response-cache attribute makes it difficult to configure the duration outside of construction time.\n\nSince you\u0027re open to workarounds, a simpler one might be to create your own subclass of the attribute:\n\n```\npublic class DynamicResponseCacheAttribute : ResponseCacheAttribute\n{\n    base.Duration = /* compute here */\n}\n```\n\nDepending on how exactly you\u0027re computing the duration (e.g. if it depends on the properties within the HttpRequest), this might not be sufficient.\n\nI\u0027m not sure that we\u0027d consider changing the implementation of the `ResponseCachingAttribute` here. I\u0027m sitcking this issue in the backlog for now to see if there\u0027s more interest in this kinda of dynamic duration caching.",
                                           "updatedAt":  "2025-02-20T22:25:52Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Setting a dynamic duration with ResponseCacheAttribute",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/60587",
        "createdAt":  "2025-02-24T15:53:06Z",
        "number":  60587,
        "author":  "josh-romanowski",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-30T11:57:08Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nWhen multiple values are sent for the X-Forwarded-Prefix header, e.g.  `/firstsegment, /secondsegment`, contrary to the documentation [here](https://learn.microsoft.com/en-us/aspnet/core/host-and-deploy/proxy-load-balancer?view=aspnetcore-9.0#forwarded-headers) only the first value is consumed and the other values are not moved. The resulting PathBase is `/firstsegment` instead of `/firstsegment/secondsegment`. The documentation states that all values should be moved one after the other.\n\nFrom a quick look into the ForwardedHeaderMiddleware it appears to me that in the loop in L220ff. `currentValues` is repeatedly replaced for all entries of `sets` instead of actually accumulating all the entries, despite the index being called `consumedValues`. `sets` contains two values in reverse order of the segments (first /secondsegment, then /firstsegment)\n\n```C#\nfor (; entriesConsumed \u003c sets.Length; entriesConsumed++)\n{\n    var set = sets[entriesConsumed];\n    ...\n    if (checkPrefix)\n    {\n        if (!string.IsNullOrEmpty(set.Prefix) \u0026\u0026 set.Prefix[0] == \u0027/\u0027)\n        {\n            applyChanges = true;\n            currentValues.Prefix = set.Prefix;\n```\n\nThus, in L383 the incomplete PathBase is set because `currentValues.Prefix` only contains `/firstsegment`. \n\n```C#\nrequest.PathBase = PathString.FromUriComponent(currentValues.Prefix);\n```\n\nThe check in L371 is also false (both `forwarded.Prefix!.Length` and `currentValues` are 2) although the header is only partially handled. Therefore, the header is not correctly trucated either.\n\n```C#\nif (forwardedPrefix!.Length \u003e entriesConsumed)\n{\n    // Truncate the consumed header values\n    requestHeaders[_options.ForwardedPrefixHeaderName] =\n        TruncateConsumedHeaderValues(forwardedPrefix, entriesConsumed);\n```\n\nI did not check the logic for other headers in detail but since the handling is very similar, also similar issues might apply there.\n\nI might be missing something in the intent of these headers, so please feel free to discuss if I misinterpret them. My use case is resolving headers behind multiple reverse proxies that are each responsible for one segment correctly.\n\n### Expected Behavior\n\nThe path base contains all segments of the header, e.g. X-Forwarded-Prefix header  `/firstsegment, /secondsegment` results in request.PathBase `/firstsegment/secondsegment`.\n\n### Steps To Reproduce\n\n```C#\nusing Microsoft.AspNetCore.HttpOverrides;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nvar app = builder.Build();\n\napp.UseForwardedHeaders(new ForwardedHeadersOptions\n{\n    ForwardLimit = null,\n    ForwardedHeaders = ForwardedHeaders.All\n});\n\napp.Run(ctx =\u003e\n{\n    Console.WriteLine(ctx.Request.PathBase);\n    return Task.CompletedTask;\n});\n\napp.Run();\n```\n\nWhen I CURL the server on path `/` with X-Forwarded-Prefix `/firstsegment, /secondsegment` ctx.Request.PathBase prints `/firstsegment`\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0.100\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuurlCw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde866xrcW",
                                           "createdAt":  "2025-07-29T18:23:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sebastienros",
                                           "body":  "I believe the documentation has been updated, and I don\u0027t see any explanation about it handling multiple values. I couldn\u0027t even find some examples of values which are not \"clean\" paths. Does this issue still make sense?",
                                           "updatedAt":  "2025-07-29T18:23:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde8666uUL",
                                           "createdAt":  "2025-07-30T11:54:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcfnqw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "M0ns1gn0r",
                                                                               "createdAt":  "2025-07-30T13:41:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "josh-romanowski",
                                           "body":  "@sebastienros I\u0027m not entirely sure that removing support for multiple levels of reverse proxies from the documentation really solves the problem.\n\nI also was not able to find a version of the doc live or on some branch without the section that outlines the envisioned support for multiple levels/values.\n\n\u003e Note: This process may be repeated several times if there are multiple values in X-Forwarded-For/Proto/Host/Prefix, resulting in several values moved to X-Original-*, including the original RemoteIpAddress/Host/Scheme/PathBase.\n\nMultiple reverse proxies is a valid use case. The headers themselves and most proxies supporting the headers support this. And it seems like it\u0027s at least outlined in the implementation, even if the implementation isn\u0027t fully finalized. So it feels like actually supporting multiple levels is the only valid resolution. Just removing the support for multiple levels from documentation leaving the implementation as is limits the use-case and makes the middleware potentially not useable to us.",
                                           "updatedAt":  "2025-07-30T11:57:08Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Multiple X-Forwarded-Prefix header segments are not handled correctly in ForwarededHeadersMiddleware",
        "labels":  [
                       "Needs: Attention :wave:",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/60674",
        "createdAt":  "2025-02-28T23:55:17Z",
        "number":  60674,
        "author":  "DamianEdwards",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_mr6w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2025-03-01T06:12:02Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-29T18:38:14Z",
        "body":  "## Problem\n\nI recently deployed a new domain name for an existing site and found myself having to write a custom middleware to handle the transition. The site is still listening on both domains (e.g. `olddomain.com` and `newdomain.com`) but requests to `olddomain.com` now redirect to `newdomain.com`.\n\nThis feels like it would be a pretty common scenario (site listening on multiple hosts/domains but one is preferred).\n\nASP.NET Core contains multiple features related to URL rewriting/redirecting and host matching, but none of them actually address this scenario directly. The [URL rewriting middleware](https://learn.microsoft.com/aspnet/core/fundamentals/url-rewriting) only has first-class support for path rewriting (not host). [Host filtering](https://learn.microsoft.com/aspnet/core/fundamentals/servers/kestrel/host-filtering) is about limiting which specific host names are allowed, but doesn\u0027t do redirection. The most similar scenario is HTTPS redirection for which we have a specific dedicated middleware for.\n\n## Proposal\n\nWe should consider adding a new middleware, `PreferredHostRedirectionMiddleware`, that can be used to facilitate this scenario. This middleware can be added to the pipeline, much like the HTTPS redirection middleware, and it will redirect requests to a preferred host if one is configured.\n\nThe middleware should support direct configuration, e.g. passing a preferred host in as a string, or via the configuration/options system.\n\n### Example Usage\n\n```csharp\nvar builder = WebApplication.CreateBuilder(args);\n\nvar app = builder.Build();\n\napp.UsePreferredHostRedirection(\"newdomain.com\");\napp.UseHttpsRedirection();\n\napp.MapGet(\"/\", () =\u003e \"Hello, World!\");\n\napp.Run();\n```\n\n## Strawman\n\nHere\u0027s the implementation from the site I did this on recently. It doesn\u0027t use `IOptions\u003cT\u003e` but rather it just looks at configuration directly but of course that can be changed. It also supports setting a query string flag on the new URL so that a message can be displayed on the site after the redirect. This likely wouldn\u0027t be something baked in, but perhaps a delegate could be set on the middleware options to allow modifying the URL being redirected to in order to enable scenarios like that.\n\n```csharp\nusing System.Net;\nusing Microsoft.AspNetCore.Http.Extensions;\nusing Microsoft.AspNetCore.WebUtilities;\n\nnamespace MySite.Middleware;\n\npublic class PreferredHostRedirectionMiddleware(ILogger\u003cPreferredHostRedirectionMiddleware\u003e logger, IConfiguration configuration) : IMiddleware\n{\n    public const string PreferredHostKey = \"PreferredHost\";\n    public const string RedirectedKey = \"r\";\n    public const string TrueValue = \"true\";\n\n    private readonly ILogger\u003cPreferredHostRedirectionMiddleware\u003e _logger = logger;\n    private readonly string? _preferredHost = configuration[PreferredHostKey];\n\n    public Task InvokeAsync(HttpContext context, RequestDelegate next)\n    {\n        if (!string.IsNullOrEmpty(_preferredHost) \u0026\u0026 !string.Equals(context.Request.Host.Host, _preferredHost, StringComparison.Ordinal))\n        {\n            if (_logger.IsEnabled(LogLevel.Information))\n            {\n                _logger.LogInformation(\"Request host \u0027{RequestHost}\u0027 is not the preferred host. Redirecting to preferred host \u0027{PreferredHost}\u0027.\",\n                    context.Request.Host.Host, _preferredHost);\n            }\n\n            var redirectUriBuilder = new UriBuilder(context.Request.GetDisplayUrl()) { Host = _preferredHost };\n\n            if (context.GetEndpoint() is not null)\n            {\n                // Request is for an endpoint (e.g. a page) so set query string to ensure notification is displayed\n                var query = QueryHelpers.ParseQuery(redirectUriBuilder.Query);\n                query.Remove(RedirectedKey);\n                query.Add(RedirectedKey, TrueValue);\n                redirectUriBuilder.Query = QueryHelpers.AddQueryString(\"\", query);\n            }\n\n            var redirectUrl = redirectUriBuilder.ToString();\n\n            if (_logger.IsEnabled(LogLevel.Debug))\n            {\n                _logger.LogDebug(\"Will redirect to URL \u0027{RedirectUrl}\u0027.\", redirectUrl);\n            }\n\n            context.Response.Redirect(redirectUrl);\n            return Task.CompletedTask;\n        }\n\n        return next(context);\n    }\n}\n\npublic static class PreferredHostRedirectionExtensions\n{\n    public static IServiceCollection AddPreferredHostRedirection(this IServiceCollection services)\n    {\n        services.AddTransient\u003cPreferredHostRedirectionMiddleware\u003e();\n\n        return services;\n    }\n\n    public static IApplicationBuilder UsePreferredHostRedirection(this IApplicationBuilder app)\n    {\n        var logger = app.ApplicationServices.GetRequiredService\u003cILoggerFactory\u003e().CreateLogger(nameof(PreferredHostRedirectionExtensions));\n        var configuration = app.ApplicationServices.GetRequiredService\u003cIConfiguration\u003e();\n        var preferredHost = configuration[PreferredHostRedirectionMiddleware.PreferredHostKey];\n\n        if (string.IsNullOrEmpty(preferredHost))\n        {\n            return app;\n        }\n\n        if (!Uri.CheckHostName(preferredHost).Equals(UriHostNameType.Dns))\n        {\n            if (logger.IsEnabled(LogLevel.Error))\n            {\n                logger.LogError(\"The preferred host is not a valid DNS name: {PreferredHost}\", preferredHost);\n            }\n            return app;\n        }\n\n        app.UseMiddleware\u003cPreferredHostRedirectionMiddleware\u003e();\n\n        return app;\n    }\n}\n```\n\n*appsettings.json*\n\n```json\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"AllowedHosts\": \"olddomain.com;newdomain.com\",\n  \"PreferredHost\": \"newdomain.com\"\n}\n```\n\n*appsettings.Development.json*\n\n```json\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"AllowedHosts\": \"127.0.0.1;localhost\",\n  \"PreferredHost\": \"localhost\"\n}\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOudM12w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86g8vpk",
                                           "createdAt":  "2025-03-05T09:00:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kahbazi",
                                           "body":  "@DamianEdwards I\u0027m interested in sending a PR for this middleware when the API got approved.",
                                           "updatedAt":  "2025-03-05T09:00:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde8650zXb",
                                           "createdAt":  "2025-07-25T12:36:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mgravell",
                                           "body":  "(if someone could unassign me, that\u0027d be awesome, thx)",
                                           "updatedAt":  "2025-07-25T12:36:33Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Consider adding a middleware to redirect to a preferred host",
        "labels":  [
                       "api-suggestion",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/60813",
        "createdAt":  "2025-03-07T19:22:35Z",
        "number":  60813,
        "author":  "samsp-msft",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:27:23Z",
        "body":  "One of the top customer asks for rate limiting is supporting distributed rate limiting. To make that work you need to be able to share state between each of the nodes doing the rate limiting. The two main architectures for doing that in .NET are using Orleans or Redis.\n\nThere are a number of moving pieces involved in either solution. Packaging those up into a library that can be redeployed would be substantially more work that creating a sample, as it would need considerable configuration flexibility, that is more easily expressed when you can modify the code. Using Aspire orchestration should simplify the setup configuration and make it easy enough that a developer can copy the sample and be able to \"F5\" and have it running without additional work.\n\nThe Aspire samples repo already exists, so is a good place to place such a sample. We can then refer to it from the rate-limiting documentation.\n\n@ReubenBond has a couple of samples he wrote a few years ago:\n- https://github.com/ReubenBond/DistributedRateLimiting.Orleans\n- https://github.com/ReubenBond/DistributedRateLimiting.Redis\n\nWe should use one (or both) as the starting point. Suggestion is to do the Orleans version first.\n\n## Goals\n\nA simple sample that can be downloaded and run. The sample should comprise of:\n\n- A library project for the distributed sampling infrastructure\n- A WebAPI project with an endpoint that has a rate limit defined using the library project\n- A single page Blazor project that will invoke the API endpoint that is rate limited\n  - can just be a button and log of the API calls together with success/failure status\n  - has a list of endpoints and a simple round-robin approach to calling them - it should not use anything complicated to make the API calls\n- Aspire Apphost\n  - creates multiple instances of the WebAPI project\n  - sets up the storage for Orleans or Redis\n  - passes the WebAPI endpoints to the blazor project so it knows what to hit\n- Service defaults\n  - includes the metrics namespace for the rate limiting counters\n\n\nIdeally the WebAPI project can use builder and apphost extension methods from the library to setup the rate limiting sharing. The policy definition with the constraints (10 / min, easy to demonstrate in the sample) should be in the WebAPI project. The ideal being that the sample can be cloned and just the WebAPI project needs to be replaced with what developers want to protect with rate limiting.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Port distributed rate limiting sample(s) to the Aspire samples repo",
        "labels":  [
                       "feature-rate-limit",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/60852",
        "createdAt":  "2025-03-10T09:25:47Z",
        "number":  60852,
        "author":  "AndreasHogstrandUltromics",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:27:24Z",
        "body":  "### Description\n\nWhen creating a ChainedPartionedRateLimiter that uses a FixedWindowRateLimiter/SlidingWindowRateLimiter/TokenBucketRateLimiter followed by a rate limiter configured to allow a queue, requests that are queued by the inner limiter will count as 2 requests for the outer limiter.\n\nThis is because after AttemptAcquireCore fails due to a queue on an internal limiter, ChainedPartionedRateLimiter will attempt to return already acquired leases by disposing, but affected limiter leases offer no behaviour to return leases to the pool on disposal. As a result after calling AcquireAsyncCore to wait for the queue, the request will require 2 leases from the outer limiter.\n\n### Reproduction Steps\n\nProgram.cs:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddRateLimiter(_ =\u003e\n{\n    _.OnRejected = async (context, cancellationToken) =\u003e\n    {\n        if (context.Lease.TryGetMetadata(MetadataName.RetryAfter, out var retryAfter))\n        {\n            context.HttpContext.Response.Headers.RetryAfter =\n                ((int)retryAfter.TotalSeconds).ToString(NumberFormatInfo.InvariantInfo);\n        }\n\n        context.HttpContext.Response.StatusCode = StatusCodes.Status429TooManyRequests;\n        await context.HttpContext.Response.WriteAsync(\"Too many requests. Please try again later.\", cancellationToken);\n    };\n    _.GlobalLimiter = PartitionedRateLimiter.CreateChained(\n        PartitionedRateLimiter.Create\u003cHttpContext, string\u003e(httpContext =\u003e\n        {\n            var userAgent = httpContext.Request.Headers.UserAgent.ToString();\n\n            return RateLimitPartition.GetFixedWindowLimiter\n            (userAgent, _ =\u003e\n                new FixedWindowRateLimiterOptions\n                {\n                    AutoReplenishment = true,\n                    PermitLimit = 2,\n                    Window = TimeSpan.FromSeconds(10)\n                });\n        }),\n        PartitionedRateLimiter.Create\u003cHttpContext, string\u003e(httpContext =\u003e\n        {\n            var userAgent = httpContext.Request.Headers.UserAgent.ToString();\n\n            return RateLimitPartition.GetFixedWindowLimiter\n            (userAgent, _ =\u003e\n                new FixedWindowRateLimiterOptions\n                {\n                    AutoReplenishment = true,\n                    PermitLimit = 1,\n                    QueueLimit = 1,\n                    Window = TimeSpan.FromSeconds(10)\n                });\n        }));\n});\n\nvar app = builder.Build();\napp.UseRateLimiter();\n\nstatic string GetTicks() =\u003e (DateTime.Now.Ticks \u0026 0x11111).ToString(\"00000\");\n\napp.MapGet(\"/\", () =\u003e Results.Ok($\"Hello {GetTicks()}\"));\n\napp.Run();\n```\n\nAbove configures a chained rate limiter with 2 fixed window limiters, the outer allowing 2 requests per window and the inner allowing 1 and 1 queued. Expected behaviour would be 2 requests within a window would result in neither failing, with the first completing immediately and the second completing after queueing. \n\nIn reality, sending two requests within a 10s window will result in failure with status 429, as the second request is counted twice against the outer limiter, resulting in 3 permits which exceeds the allowance.\n\n### Expected behavior\n\nQueued requests should count as a single request for other rate limiters sharing a ChainedPartionedRateLimiter.\n\n### Actual behavior\n\nQueued requests count as a two requests for rate limiters sharing a ChainedPartionedRateLimiter that come before the queue in the chain.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET SDK 9.0.200\n\nTested on linux/windows x64, should apply to all configurations.\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoZuQtg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86hm5C2",
                                           "createdAt":  "2025-03-10T15:18:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-10T15:18:11Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ChainedPartitionedRateLimiter double-counts when internal limiter uses queue",
        "labels":  [
                       "feature-rate-limit",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/60869",
        "createdAt":  "2025-03-11T16:34:52Z",
        "number":  60869,
        "author":  "mariuszlip",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:27:24Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nWhile reviewing options to migrate from `IHttpModule` and `IHttpSessionState` (.Net Framework 4.8) to `ISessionStore` and `ISession` (.Net 8) we noticed that there\u0027s no modern equivalent for `ISessionIDManager`. While it\u0027s not a big problem (old project already works with Guids), it would be nice to provide custom generator (and possibly validator)\n\n### Describe the solution you\u0027d like\n\n1. Create a new interface ISessionKeyGenerator (feel free to suggest a better name)\n```\npublic interface ISessionKeyGenerator\n{\n    string Generate();\n    //bool IsValid(string sessionKey);\n}\n```\n2. As a default implementation, use lines 71-76 from src/Middleware/Session/src/SessionMiddleware.cs\n```\npublic class DefaultSessionKeyGenerator : ISessionKeyGenerator\n{\n    public string Generate()\n    {\n        Span\u003cbyte\u003e guidBytes = stackalloc byte[16];\n        RandomNumberGenerator.Fill(guidBytes);\n        return new Guid(guidBytes).ToString();\n    }\n}\n```\n3. Extend the src/Middleware/Session/src/SessionOptions.cs with a new property\n`public ISessionKeyGenerator SessionKeyGenerator { get; set; } = new DefaultSessionKeyGenerator();`\n4. Replace the session key generation call in line 69 of src/Middleware/Session/src/SessionMiddleware.cs\n`sessionKey = _options.SessionKeyGenerator.Generate();`\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Custom generator for sessionKey in SessionMiddleware",
        "labels":  [
                       "feature-session",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/60904",
        "createdAt":  "2025-03-12T23:48:56Z",
        "number":  60904,
        "author":  "captainsafia",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:27:24Z",
        "body":  "\u003c!--\nNote this issue template is specifically for failing tests within the dotnet/aspnetcore repo.\n--\u003e\n\n## Failing Test(s)\n\n\u003c!--\nProvide the fully qualified name(s) of the failing tests.\n--\u003e\n\n- Microsoft.AspNetCore.OutputCaching.Tests.CachedResponseBodyTests.Copy_MultipleSegments\n\n## Error Message\n\n\u003c!--\nProvide the error message associated with the test failure, if applicable.\n--\u003e\n\n```text\nSystem.OperationCanceledException : The operation was canceled.\n```\n\n## Stacktrace\n\n\u003cdetails\u003e\n\u003c!--\nProvide the stack trace associated with the test failure, if applicable.\n--\u003e\n\n```text\nat System.Threading.CancellationToken.ThrowOperationCanceledException()\n   at System.Threading.CancellationToken.ThrowIfCancellationRequested()\n   at System.IO.Pipelines.Pipe.GetReadAsyncResult()\n   at Microsoft.AspNetCore.OutputCaching.Tests.CachedResponseBodyTests.ReceiveDataAsync(PipeReader reader, List`1 receivedSegments, CancellationToken cancellationToken) in /_/src/Middleware/OutputCaching/test/CachedResponseBodyTests.cs:line 100\n   at Microsoft.AspNetCore.OutputCaching.Tests.CachedResponseBodyTests.Copy_MultipleSegments() in /_/src/Middleware/OutputCaching/test/CachedResponseBodyTests.cs:line 84\n--- End of stack trace from previous location ---\n```\n\u003c/details\u003e\n\n\n## Logs\n\n\u003cdetails\u003e\n\u003c!--\nIf this is a Helix test failure, include the text of the .log artifact from the failing test.\nNote that you have to be signed in to Azure DevOps to see the test artifacts.\n--\u003e\n\n```text\n\n```\n\u003c/details\u003e\n\n## Build\n\n\u003c!--\nProvide a link to the build where the test failure occurred.\n--\u003e\n- https://dev.azure.com/dnceng-public/public/_build/results?buildId=977817\u0026view=results",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Quarantine Copy_MultipleSegments",
        "labels":  [
                       "test-failure",
                       "feature-output-caching",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/61053",
        "createdAt":  "2025-03-21T00:57:52Z",
        "number":  61053,
        "author":  "RussKie",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:27:25Z",
        "body":  "\u003c!--\nNote this issue template is specifically for failing tests within the dotnet/aspnetcore repo.\n--\u003e\n\n## Failing Test(s)\n\n\u003c!--\nProvide the fully qualified name(s) of the failing tests.\n--\u003e\n\n- Microsoft.AspNetCore.OutputCaching.Tests.CachedResponseBodyTests.Copy_SingleSegment\n\n\n## Stacktrace\n\n\u003cdetails\u003e\n\u003c!--\nProvide the stack trace associated with the test failure, if applicable.\n--\u003e\n\n```text\n   Failed Microsoft.AspNetCore.OutputCaching.Tests.CachedResponseBodyTests.Copy_SingleSegment [28 s]\n   Error Message:\n    System.OperationCanceledException : The operation was canceled.\n   Stack Trace:\n      at System.Threading.CancellationToken.ThrowOperationCanceledException()\n    at System.Threading.CancellationToken.ThrowIfCancellationRequested()\n    at System.IO.Pipelines.Pipe.GetReadAsyncResult()\n    at Microsoft.AspNetCore.OutputCaching.Tests.CachedResponseBodyTests.ReceiveDataAsync(PipeReader reader, List`1 receivedSegments, CancellationToken cancellationToken) in /_/src/Middleware/OutputCaching/test/CachedResponseBodyTests.cs:line 102\n    at Microsoft.AspNetCore.OutputCaching.Tests.CachedResponseBodyTests.Copy_SingleSegment() in /_/src/Middleware/OutputCaching/test/CachedResponseBodyTests.cs:line 61\n\n```\n\u003c/details\u003e\n\n\n\n## Build\n\n\u003c!--\nProvide a link to the build where the test failure occurred.\n--\u003e\n\n```\n20250318.18\t   Test Microsoft.AspNetCore.OutputCaching.Tests.CachedResponseBodyTests.Copy_SingleSegment has failed. Check the Test tab or this console log: https://helix.dot.net/api/2019-06-17/jobs/323cb906-30c1-4c7f-8414-ee50ec7e7615/workitems/Microsoft.AspNetCore.OutputCaching.Tests--net10.0/console\n20250318.19\t   Test Microsoft.AspNetCore.OutputCaching.Tests.CachedResponseBodyTests.Copy_SingleSegment has failed. Check the Test tab or this console log: https://helix.dot.net/api/2019-06-17/jobs/2ff19a03-ef63-48b3-9667-37c23ee48e58/workitems/Microsoft.AspNetCore.OutputCaching.Tests--net10.0/console\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Quarantine Microsoft.AspNetCore.OutputCaching.Tests.CachedResponseBodyTests.Copy_SingleSegment",
        "labels":  [
                       "test-failure",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/61293",
        "createdAt":  "2025-04-03T01:15:38Z",
        "number":  61293,
        "author":  "mitchdenny",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:27:25Z",
        "body":  "\u003c!--\nNote this issue template is specifically for failing tests within the dotnet/aspnetcore repo.\n--\u003e\n\n## Failing Test(s)\n\nMicrosoft.AspNetCore.ResponseCaching.Tests.CachedResponseBodyTests.Copy_MultipleSegments\n\n## Error Message\n\n\u003c!--\nProvide the error message associated with the test failure, if applicable.\n--\u003e\n\n```text\nSystem.OperationCanceledException : The operation was canceled.\n```\n\n## Stacktrace\n\n\u003cdetails\u003e\n\u003c!--\nProvide the stack trace associated with the test failure, if applicable.\n--\u003e\n\n```text\nat System.Threading.CancellationToken.ThrowOperationCanceledException()\n   at System.Threading.CancellationToken.ThrowIfCancellationRequested()\n   at System.IO.Pipelines.Pipe.GetReadAsyncResult()\n   at Microsoft.AspNetCore.ResponseCaching.Tests.CachedResponseBodyTests.ReceiveDataAsync(PipeReader reader, List`1 receivedSegments, CancellationToken cancellationToken) in /_/src/Middleware/ResponseCaching/test/CachedResponseBodyTests.cs:line 105\n   at Microsoft.AspNetCore.ResponseCaching.Tests.CachedResponseBodyTests.Copy_MultipleSegments() in /_/src/Middleware/ResponseCaching/test/CachedResponseBodyTests.cs:line 90\n```\n\u003c/details\u003e\n\n\n## Logs\n\n\u003cdetails\u003e\n\u003c!--\nIf this is a Helix test failure, include the text of the .log artifact from the failing test.\nNote that you have to be signed in to Azure DevOps to see the test artifacts.\n--\u003e\n\n```text\n\n2025-04-02T22:25:15.2557106Z   Failed Microsoft.AspNetCore.ResponseCaching.Tests.CachedResponseBodyTests.Copy_MultipleSegments [8 s]\n2025-04-02T22:25:15.2558210Z   Error Message:\n2025-04-02T22:25:15.2559600Z    System.OperationCanceledException : The operation was canceled.\n2025-04-02T22:25:15.2560937Z   Stack Trace:\n2025-04-02T22:25:15.2562313Z      at System.Threading.CancellationToken.ThrowOperationCanceledException()\n2025-04-02T22:25:15.2562434Z    at System.Threading.CancellationToken.ThrowIfCancellationRequested()\n2025-04-02T22:25:15.2562488Z    at System.IO.Pipelines.Pipe.GetReadAsyncResult()\n2025-04-02T22:25:15.2562640Z    at Microsoft.AspNetCore.ResponseCaching.Tests.CachedResponseBodyTests.ReceiveDataAsync(PipeReader reader, List`1 receivedSegments, CancellationToken cancellationToken) in /_/src/Middleware/ResponseCaching/test/CachedResponseBodyTests.cs:line 105\n2025-04-02T22:25:15.2562755Z    at Microsoft.AspNetCore.ResponseCaching.Tests.CachedResponseBodyTests.Copy_MultipleSegments() in /_/src/Middleware/ResponseCaching/test/CachedResponseBodyTests.cs:line 90\n\n```\n\u003c/details\u003e\n\n## Build\n\n\u003c!--\nProvide a link to the build where the test failure occurred.\n--\u003e\n\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=1003216\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Quarantine Microsoft.AspNetCore.ResponseCaching.Tests.CachedResponseBodyTests.Copy_MultipleSegments",
        "labels":  [
                       "test-failure",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/61670",
        "createdAt":  "2025-04-24T15:13:16Z",
        "number":  61670,
        "author":  "radical",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:27:25Z",
        "body":  "\u003c!--\nNote this issue template is specifically for failing tests within the dotnet/aspnetcore repo.\n--\u003e\n\n## Failing Test(s)\n\n\u003c!--\nProvide the fully qualified name(s) of the failing tests.\n--\u003e\n\n- Microsoft.AspNetCore.ResponseCaching.Tests.CachedResponseBodyTests.Copy_SingleSegment\n\n## Error Message\n\n\u003c!--\nProvide the error message associated with the test failure, if applicable.\n--\u003e\n\n```text\nSystem.OperationCanceledException : The operation was canceled.\n```\n\n## Stacktrace\n\n\u003cdetails\u003e\n\u003c!--\nProvide the stack trace associated with the test failure, if applicable.\n--\u003e\n\n```text\nStack trace\n   at System.Threading.CancellationToken.ThrowOperationCanceledException()\n   at System.Threading.CancellationToken.ThrowIfCancellationRequested()\n   at System.IO.Pipelines.Pipe.GetReadAsyncResult()\n   at Microsoft.AspNetCore.ResponseCaching.Tests.CachedResponseBodyTests.ReceiveDataAsync(PipeReader reader, List`1 receivedSegments, CancellationToken cancellationToken) in /_/src/Middleware/ResponseCaching/test/CachedResponseBodyTests.cs:line 107\n   at Microsoft.AspNetCore.ResponseCaching.Tests.CachedResponseBodyTests.Copy_SingleSegment() in /_/src/Middleware/ResponseCaching/test/CachedResponseBodyTests.cs:line 68\n--- End of stack trace from previous location ---\n```\n\u003c/details\u003e\n\n\n## Logs\n\n\u003cdetails\u003e\n\u003c!--\nIf this is a Helix test failure, include the text of the .log artifact from the failing test.\nNote that you have to be signed in to Azure DevOps to see the test artifacts.\n--\u003e\n\n```text\n\n```\n\u003c/details\u003e\n\n## Build\n\n\u003c!--\nProvide a link to the build where the test failure occurred.\n--\u003e\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=1025374\u0026view=results",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Retry Microsoft.AspNetCore.ResponseCaching.Tests.CachedResponseBodyTests.Copy_SingleSegment",
        "labels":  [
                       "test-failure",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/61784",
        "createdAt":  "2025-05-03T15:43:22Z",
        "number":  61784,
        "author":  "GiviKDev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:27:26Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\n\u003c!-- area-localization --\u003e\n\nWhen no configured `IRequestCultureProvider` (route, header, cookie, query, etc.) can determine a supported culture, the built-in `RequestLocalizationMiddleware` silently falls back to the `DefaultRequestCulture`. In some API or multi-tenant scenarios, falling back unexpectedly hides mis-configured clients or unsupported locales. I’d like an option to instead have the middleware fail fast—returning a 406 Not Acceptable—when no supported culture was found.\n\n\n### Describe the solution you\u0027d like\n\n1. **Add a new boolean property to** `RequestLocalizationOptions`:\n\n```csharp\n    /// \u003csummary\u003e\n    /// Gets or sets a value indicating whether to set the request culture to the\n    /// \u003csee cref=\"DefaultRequestCulture\"/\u003e when no supported culture can be determined\n    /// by the configured \u003csee cref=\"IRequestCultureProvider\"/\u003es (after any parent culture fallback).\n    /// Defaults to \u003cc\u003etrue\u003c/c\u003e.\n    /// \u003c/summary\u003e\n    /// \u003cremarks\u003e\n    /// This setting only takes effect if none of the configured providers returns a supported culture\n    /// (and after parent culture fallback, if \u003csee cref=\"FallBackToParentCultures\"/\u003e is \u003cc\u003etrue\u003c/c\u003e). \n    /// When \u003cc\u003etrue\u003c/c\u003e, the middleware will fall back to \u003csee cref=\"DefaultRequestCulture\"/\u003e.\n    /// When \u003cc\u003efalse\u003c/c\u003e, the middleware will throw \u003csee cref=\"RequestCultureNotSupportedException\"/\u003e,\n    /// terminating the pipeline.\n    /// \u003c/remarks\u003e\n    /// \u003cexample\u003e\n    /// If \u003csee cref=\"FallBackToDefaultCulture\"/\u003e is \u003cc\u003etrue\u003c/c\u003e (default), and none of the\n    /// providers determines a supported culture, the request culture is set to the default\n    /// (e.g., \"en-US\"). If it is \u003cc\u003efalse\u003c/c\u003e, the middleware throws a\n    /// \u003csee cref=\"RequestCultureNotSupportedException\"/\u003e, resulting in a 406 response.\n    /// \u003c/example\u003e\n    public bool FallBackToDefaultCulture { get; set; } = true;\n```\n\n2. **Introduce a new exception** `RequestCultureNotSupportedException`:\n\n```csharp\n/// \u003csummary\u003e\n/// Thrown only when no supported cultures could be determined\n/// and \u003csee cref=\"RequestLocalizationOptions.FallBackToDefaultCulture\"/\u003e is \u003cc\u003efalse\u003c/c\u003e.\n/// \u003c/summary\u003e\n/// \u003cremarks\u003e\n/// This exception indicates that the middleware was unable to match any of the\n/// incoming culture values to the \u003csee cref=\"RequestLocalizationOptions.SupportedCultures\"/\u003e\n/// or \u003csee cref=\"RequestLocalizationOptions.SupportedUICultures\"/\u003e, and default fallback\n/// behavior has been disabled.\n/// \u003c/remarks\u003e\npublic class RequestCultureNotSupportedException : Exception\n{\n    /// \u003csummary\u003e\n    /// Initializes a new instance of the \u003csee cref=\"RequestCultureNotSupportedException\"/\u003e class.\n    /// \u003c/summary\u003e\n    public RequestCultureNotSupportedException()\n        : base(Resources.Exception_RequestCultureNotSupported)\n    {\n    }\n}\n```\n\n3. **Modify** `RequestLocalizationMiddleware.Invoke(...)` **to throw when strict mode is on**:\n\n```csharp\n/// \u003csummary\u003e\n/// Invokes the logic of the middleware.\n/// \u003c/summary\u003e\n/// \u003cparam name=\"context\"\u003eThe \u003csee cref=\"HttpContext\"/\u003e.\u003c/param\u003e\n/// \u003creturns\u003eA \u003csee cref=\"Task\"/\u003e that completes when the middleware has completed processing.\u003c/returns\u003e\npublic async Task Invoke(HttpContext context)\n{\n    ArgumentNullException.ThrowIfNull(context);\n\n    RequestCulture? requestCulture = null;\n\n    IRequestCultureProvider? winningProvider = null;\n\n    if (_options.RequestCultureProviders != null)\n    {\n        foreach (var provider in _options.RequestCultureProviders)\n        {\n            var providerResultCulture = await provider.DetermineProviderCultureResult(context);\n            if (providerResultCulture == null)\n            {\n                continue;\n            }\n            var cultures = providerResultCulture.Cultures;\n            var uiCultures = providerResultCulture.UICultures;\n\n            CultureInfo? cultureInfo = null;\n            CultureInfo? uiCultureInfo = null;\n            if (_options.SupportedCultures != null)\n            {\n                cultureInfo = GetCultureInfo(\n                    cultures,\n                    _options.SupportedCultures,\n                    _options.FallBackToParentCultures);\n\n                if (cultureInfo == null)\n                {\n                    _logger.UnsupportedCultures(provider.GetType().Name, cultures);\n                }\n            }\n\n            if (_options.SupportedUICultures != null)\n            {\n                uiCultureInfo = GetCultureInfo(\n                    uiCultures,\n                    _options.SupportedUICultures,\n                    _options.FallBackToParentUICultures);\n\n                if (uiCultureInfo == null)\n                {\n                    _logger.UnsupportedUICultures(provider.GetType().Name, uiCultures);\n                }\n            }\n\n            if (cultureInfo == null \u0026\u0026 uiCultureInfo == null)\n            {\n                continue;\n            }\n\n            cultureInfo ??= _options.DefaultRequestCulture.Culture;\n            uiCultureInfo ??= _options.DefaultRequestCulture.UICulture;\n\n            var result = new RequestCulture(cultureInfo, uiCultureInfo);\n            requestCulture = result;\n            winningProvider = provider;\n            break;\n        }\n    }\n\n    // If we found a culture OR default-fallback is allowed, continue\n    if (_options.FallBackToDefaultCulture || requestCulture != null)\n    {\n        requestCulture ??= _options.DefaultRequestCulture;\n\n        context.Features.Set\u003cIRequestCultureFeature\u003e(new RequestCultureFeature(requestCulture, winningProvider));\n\n        SetCurrentThreadCulture(requestCulture);\n\n        if (_options.ApplyCurrentCultureToResponseHeaders)\n        {\n            var headers = context.Response.Headers;\n            headers.ContentLanguage = requestCulture.UICulture.Name;\n        }\n\n        await _next(context);\n        return;\n    }\n\n    // Strict mode: no culture and no fallback → fail fast\n    throw new RequestCultureNotSupportedException();\n}\n```\n\n4. **Example**:\n\n```csharp\nvar options = new RequestLocalizationOptions\n{\n    DefaultRequestCulture    = new RequestCulture(\"en-US\"),\n    SupportedCultures        = { new CultureInfo(\"fr-FR\") },\n    SupportedUICultures      = { new CultureInfo(\"fr-FR\") },\n    FallBackToDefaultCulture = false\n};\napp.UseRequestLocalization(options);\n```\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqjWwCg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86qEJT-",
                                           "createdAt":  "2025-05-06T04:03:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hishamco",
                                           "body":  "\u003e When no configured IRequestCultureProvider (route, header, cookie, query, etc.) can determine a supported culture, the built-in RequestLocalizationMiddleware silently falls back to the DefaultRequestCulture.\n\nIMHO, this is normal behavior, that\u0027s why the built-in localization APIs came with some `RequestCultureProvider(s)`\n\n\u003e Introduce a new exception RequestCultureNotSupportedException\n\nIf I recall @DamianEdwards proposed a few fallback mechanisms when the resource is not found, but for `IRequestCultureProvider` we return `null`",
                                           "updatedAt":  "2025-05-06T04:03:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86qNbAK",
                                           "createdAt":  "2025-05-06T19:12:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GiviKDev",
                                           "body":  "\u003e \u003e When no configured IRequestCultureProvider (route, header, cookie, query, etc.) can determine a supported culture, the built-in RequestLocalizationMiddleware silently falls back to the DefaultRequestCulture.\n\u003e \n\u003e IMHO, this is normal behavior, that\u0027s why the built-in localization APIs came with some `RequestCultureProvider(s)`\n\nThanks for the feedback. I fully agree that the built-in providers are doing exactly what they should. My proposal doesn’t change any of those providers; it simply adds an **opt-in “strict” mode** at the **middleware** level so you get two flows:\n\n1. **Permissive (default)**: exactly today’s behavior — try each `IRequestCultureProvider`, then parent-culture fallback, then `DefaultRequestCulture`.\n2. **Strict**: same checks, but if no provider (or parent) yields a supported culture **and** you’ve set\n\n```csharp\n    options.FallBackToDefaultCulture = false;\n```\n\nThen the middleware throws a `RequestCultureNotSupportedException` (or another exception), returns a `ProblemDetails` response with `406` (or another status) via the `ProblemDetailsWriter`, or otherwise interrupts the normal pipeline execution instead of silently falling back.\n\n\n",
                                           "updatedAt":  "2025-05-06T19:12:53Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Add FallBackToDefaultCulture option to disable default‐culture fallback in RequestLocalizationMiddleware",
        "labels":  [
                       "feature-localization",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/61973",
        "createdAt":  "2025-05-17T12:35:41Z",
        "number":  61973,
        "author":  "HakamFostok",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:27:26Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI want to implement RateLimiting on BlazorWebServer, I am doing that according to the documentation\n\nhttps://learn.microsoft.com/en-us/aspnet/core/performance/rate-limit?view=aspnetcore-9.0#apply-rate-limiting-to-server-side-blazor-apps\n\n```\nservices.AddRateLimiter(options =\u003e\n{\n    options.RejectionStatusCode = (int)HttpStatusCode.TooManyRequests;\n    options.AddTokenBucketLimiter(\"pages\", opt =\u003e\n    {\n        opt.TokenLimit = 10;\n        opt.TokensPerPeriod = 10;\n        opt.ReplenishmentPeriod = TimeSpan.FromSeconds(5);\n        opt.QueueProcessingOrder = QueueProcessingOrder.OldestFirst;\n    });\n});\n\n\n  app.UseRateLimiter(); \n  app.MapRazorComponents\u003cApp\u003e()\n     .AddInteractiveServerRenderMode()\n     .RequireRateLimiting(\"pages\");\n```\n\nI sometimes get error 329 in the browser console when SignalR and web sockets establish the connection.\nThose technologies are chatty, if I am not mistaken.\nhere is an example of the errors I am receiving\n\n```\nWebSocket connection to \u0027ws://localhost:5000/_blazor?id=N4noD6idr-OZDfLxIUIgXg\u0027 failed: Error during WebSocket handshake: Unexpected response code: 429\n\thttp://localhost:5000/_framework/blazor.web.js:0:0\nError: Failed to start the transport \u0027WebSockets\u0027: Error: WebSocket failed to connect. The connection could not be found on the server, either the endpoint may not be a SignalR endpoint, the connection ID is not present on the server, or there is a proxy blocking WebSockets. If you have multiple servers check that sticky sessions are enabled.\n\thttp://localhost:5000/_framework/blazor.web.js:0:47018\nFailed to load resource: the server responded with a status of 429 (Too Many Requests)\t\thttp://localhost:5000/_blazor/negotiate?negotiateVersion=1:0:0\nFailed to complete negotiation with the server: Error: Too Many Requests: Status code \u0027429\u0027\thttp://localhost:5000/_framework/blazor.web.js:0:47018\nFailed to start the connection: Error: Failed to complete negotiation with the server: Error: Too Many Requests: Status code \u0027429\u0027\thttp://localhost:5000/_framework/blazor.web.js:0:47018\nFailed to complete negotiation with the server: Error: Too Many Requests: Status code \u0027429\u0027\thttp://localhost:5000/_framework/blazor.web.js:0:39472\n```\n\nI think everyone needs rate limiting only for the browsing of the pages, I do not need the user to refresh the page 5 times in one second, for example.\n\nBut when I come to SignalR and WebSocket, I do not want to interfere with them, if they are chatty, then this is how they are designed.\n\nI have consulted GPT and it suggests the following\n\n```\nbuilder.Services.AddRateLimiter(options =\u003e\n{\n    options.RejectionStatusCode = (int)HttpStatusCode.TooManyRequests;\n\n    options.GlobalLimiter = PartitionedRateLimiter.Create\u003cHttpContext, string\u003e(httpContext =\u003e\n    {\n        var path = httpContext.Request.Path;\n\n        // Bypass SignalR/WebSocket paths\n        if (path.StartsWithSegments(\"/_blazor\") || path.StartsWithSegments(\"/chathub\"))\n        {\n            return RateLimitPartition.GetNoLimiter(\"SignalR\");\n        }\n\n        return RateLimitPartition.GetTokenBucketLimiter(\"pages\", _ =\u003e new TokenBucketRateLimiterOptions\n        {\n            TokenLimit = 10,\n            TokensPerPeriod = 10,\n            ReplenishmentPeriod = TimeSpan.FromSeconds(5),\n            QueueProcessingOrder = QueueProcessingOrder.OldestFirst,\n        });\n    });\n});\n```\n\nbut I am not sure if this is good enough or not?\n\n\n### Describe the solution you\u0027d like\n\nI am suggesting **either**\n\n1. Updating the documentation to explain how to exclude SignalR and WebSockets from the Rate Limiting\n2. Excluding the SignalR and WebSockets from rate limiting automatically and applying the policy only on page requests\n\nThank you\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Exclude Rate Limiting for SignalR and WebSockets In BlazorServer",
        "labels":  [
                       "feature-rate-limit",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/61996",
        "createdAt":  "2025-05-19T15:48:02Z",
        "number":  61996,
        "author":  "DoxxableSetanta",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:27:27Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nWe currently have a peculiar architecture, where our reverse proxy for service fabric is exposed over the public internet, and we also have an API management that hits the application directly bypassing our reverse proxy. This APIm instance will perform SSL termination and we are looking to add mutualTLS there that will validate the incoming client certificates. However, as the reverse proxy is still exposed to the internet, anyone can send their own generated certificate in the forwarded header format and we will then trust it in the application. \n\nCurrently, when you enable Certificate Forwarding, there is no validation on the proxy that has forwarded this header [available in the options. ](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.httpoverrides.certificateforwardingoptions?view=aspnetcore-9.0)\n\nHowever, there is validation on the proxy that has forwarded the other headers typically done by a reverse proxy (x-proto, etc.) by setting the [KnownProxies or KnownNetworks](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.forwardedheadersoptions.knownnetworks?view=aspnetcore-9.0) value.\n\n As a result, in some cases, [like your appservice documentation](https://learn.microsoft.com/en-us/azure/app-service/app-service-web-configure-tls-mutual-auth?tabs=azureportal%2Cflask), it is said that you should always validate incoming certificates that are forwarded on within the application.\n\nHowever, as we are using the Azure product API Management, this allows us to do all of the [certificate validation](https://learn.microsoft.com/en-us/azure/api-management/validate-client-certificate-policy) outside of the application.\n\nWith this in mind, I want to validate that the certificate that has been forwarded comes from my expected proxy so that I can trust it without having to validate it again, but the certificate forwarding middleware does not offer that functionality - you have to validate the entire client cert. \n  \nCan we add this validation to align it with the behaviour with the forwarded headers middleware?\n\nThanks\n\n### Describe the solution you\u0027d like\n\nAdd two properties to the [CertificateForwardingOptions](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.httpoverrides.certificateforwardingoptions?view=aspnetcore-9.0) class called KnownProxies and KnownNetworks that have the same behaviour as those properties in the [ForwardedHeaderOptions](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.forwardedheadersoptions?view=aspnetcore-9.0) i.e. you only accept forwarded client certs in the header from certain IP addresses. \n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Consider restricting what proxies you accept forwarded certificates from",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/62143",
        "createdAt":  "2025-05-28T14:08:23Z",
        "number":  62143,
        "author":  "amyboose",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODE3Z2g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "imcainess",
                                            "createdAt":  "2025-06-26T13:49:01Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-29T18:38:15Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nIn ASP.NET Core Minimal APIs, however, there is currently no built-in support for setting `Cache-Control` headers declaratively—unlike what exists in MVC via [ResponseCache] or [OutputCache].\n\nThis gap forces developers to manually set cache headers in each endpoint, which is repetitive, error-prone, and inconsistent.\n\n\n### Use Case A — Private caching (only client)\n**Endpoint**: GET `/api/user/ownProfile`\n\nIn this case, the response contains user-specific data. The ideal behavior is to cache the response only on the client side, not on intermediate proxies. **Server-side caching is optional but not required.**\n\nDesired header (example):\n```\nCache-Control: private, max-age=60\n```\n\n\n### Use Case B — Shared caching (client + reverse proxy)\n**Endpoint**: GET `/api/user/publicDepartments`\n\nThis endpoint returns public, infrequently changing data. It should be cached both by clients and reverse proxies.\n\nDesired header (example):\n```\nCache-Control: public, max-age=300\n```\n\n\nAt the moment, there\u0027s no unified way to describe and apply this caching policy declaratively in Minimal APIs. Developers are forced to do things like:\n```\napp.MapGet(\"/api/user/publicDepartments\", () =\u003e\n{\n    context.Response.Headers[\"Cache-Control\"] = \"public,max-age=300\";\n    return Results.Ok(...);\n});\n```\n\nThere are also custom solutions proposed by other community members. Some of them include custom filters, others implement their own OutputCachePolicy and etc. `But they do not provide a robust implementation, which can lead to major security issues in applications.`\n\nThis topic was partially discussed [here](https://github.com/dotnet/aspnetcore/issues/56769#issuecomment-2272336761) and [here](https://github.com/dotnet/aspnetcore/issues/49130).\n\n### Describe the solution you\u0027d like\n\nIntroduce a builder-based extension for Minimal APIs to declaratively configure HTTP response caching behavior, focusing solely on HTTP-compliant cache directives such as Cache-Control, Vary, ETag, and Last-Modified.\n\nKey Goals\n\n- Fluent API design allows for flexibility in configuration, unlike the old implementation with the ResponseCache attribute. This allow combining multiple directives in a fluent and composable way.\n- Support [HTTP Caching RFC](https://datatracker.ietf.org/doc/html/rfc9111)\n- No server-side response caching or storage (unlike OutputCache)\n\nProposal:\n```\napp.MapGet(\"/api/user/publicDepartments\", () =\u003e ...)\n   .WithCacheControl(policy =\u003e policy\n       .Public()\n       .MaxAge(TimeSpan.FromMinutes(5))\n       .VaryByHeader(\"Accept-Encoding\")\n   );\n\napp.MapGet(\"/api/user/ownProfile\", () =\u003e ...)\n   .WithCacheControl(policy =\u003e policy\n       .Private()\n       .MaxAge(TimeSpan.FromSeconds(60))\n       .NoTransform()\n   );\n\napp.MapGet(\"/api/data/download\", () =\u003e ...)\n   .WithCacheControl(policy =\u003e policy\n       .Public()\n       .Immutable()\n       .MaxAge(TimeSpan.FromDays(30))\n   );\n```\n\n**Rationale for Additional Features (example)**\n\n`NoTransform`: Prevents proxies from modifying images, videos, or text.\n`Immutable`: Allows aggressive client-side caching when content is versioned (e.g., fingerprinted URLs).\n`SharedMaxAge`: Important when intermediaries (e.g., CDNs) should cache differently than browsers.\n`MustRevalidate`: Helps enforce strict revalidation when freshness expires.\n\nIn my opinion, the topic of dividing the cache into an external one based on headers and an internal one based on internal storage requires very careful consideration.\n\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrehH4Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86t6Efh",
                                           "createdAt":  "2025-05-28T21:40:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrendanRidenour",
                                           "body":  "@amyboose Do the [OutputCacheConventionBuilderExtensions](https://github.com/dotnet/aspnetcore/blob/05c5d65ceb6a59dd7aa5feaeb38a59f338d2c7f1/src/Middleware/OutputCaching/src/Policies/OutputCacheConventionBuilderExtensions.cs#L12) not work for you for some reason?",
                                           "updatedAt":  "2025-05-28T21:40:35Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Add ResponseCache (CacheControl) to Minimal Api",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/62182",
        "createdAt":  "2025-05-30T17:55:40Z",
        "number":  62182,
        "author":  "lavielp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:38:15Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nThe certificate forwarding middleware only parses base64-encoded PEM certificates. When the certificate is URL-encoded (as is standard with some reverse proxies), it fails to parse the certificate and populate HttpContext.Connection.ClientCertificate.  This limits compatibility with common reverse proxies that perform mutual TLS and URL-encode the client certificate in headers.\n\nI think it is this function that would need to be updated to return the certificate from both a url encoded or base64 encoded PEM certificate in the specified header.  https://github.com/dotnet/aspnetcore/blob/d382ae48752a70264b32d9d8610f6ad5e71e1bcf/src/Middleware/HttpOverrides/src/CertificateForwardingOptions.cs#L27\n\n### Expected Behavior\n\nThe middleware should correctly parse and return the client certificate from the header for both base64-encoded and URL-encoded PEM certificates in the specified header.\n\n### Steps To Reproduce\n\n- Configure a reverse proxy (e.g., Azure Application Gateway or AWS ALB) to perform mutual TLS and forward the client certificate in a header.\n- Deploy an ASP.NET Core application using the Certificate Forwarding Middleware.\n- Observe the behavior when the forwarded certificate is URL-encoded.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.410\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Certificate Forwarding Middleware Does Not Support URL-Encoded PEM Certificates",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/62632",
        "createdAt":  "2025-07-09T14:04:12Z",
        "number":  62632,
        "author":  "petrroll",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T18:38:16Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI\u0027m trying to find out how often decompression middleware is engaged and it\u0027d be very useful to have a metric that reports how often each of the providers is engaged.\n\n### Describe the solution you\u0027d like\n\nInbuild metric for decompression middleware that reports how often each provider is engaged.\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "(request) Decompression middlewares should emit metric for decompression usage",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/62728",
        "createdAt":  "2025-07-15T17:03:03Z",
        "number":  62728,
        "author":  "danmoseley",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODKcZKA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Frulfump",
                                            "createdAt":  "2025-08-08T12:16:02Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-19T18:32:28Z",
        "body":  "This should be fully superseded by OutputCaching. Let\u0027s share a sample of how OutputCaching can achieve the same result.\n\ncc @sebastienros ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Obsolete ResponseCaching",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/63120",
        "createdAt":  "2025-08-05T07:06:33Z",
        "number":  63120,
        "author":  "KevinKrueger",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-16T10:47:10Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nConfigureServices:\n\n            services.AddCors(options =\u003e\n            {\n                options.AddPolicy(\"CorsPolicy\",\n                   builder =\u003e builder\n                        .WithOrigins(\"http://192.168.3.9:8080\")\n                        .AllowAnyMethod()\n                        .AllowAnyHeader());\n            });\n\nConfigure:\n\n            app.UseRouting();\n            app.UseCors(\"CorsPolicy\");\n\n\nResult:\n\u003cimg width=\"719\" height=\"51\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/fcd0a218-c7eb-4bbe-801f-2959c846517e\" /\u003e\n\nI also had the effect for a short time although it didn\u0027t work before, but then it suddenly worked.\n\nI deleted the bin and obj folders and recompiled them..no effect\n\n### Expected Behavior\n\nThat it works.\n\n### Steps To Reproduce\n\n- Create an separated api and blazor wasm client in .net 9 \n- Create an endpoint and connect to this on client side\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n.net 9\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw6CNwQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde867-tV8",
                                           "createdAt":  "2025-08-05T07:09:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "Possible related and/or duplicate issue:\n- https://github.com/dotnet/aspnetcore/issues/21533",
                                           "updatedAt":  "2025-08-05T07:09:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87AAOsv",
                                           "createdAt":  "2025-08-25T18:17:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@BrennanConroy who\u0027s the right person to evaluate this one?",
                                           "updatedAt":  "2025-08-25T18:17:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87ADhJO",
                                           "createdAt":  "2025-08-26T00:33:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sebastienros",
                                           "body":  "Maybe @javiercn can help",
                                           "updatedAt":  "2025-08-26T00:33:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87ARmjy",
                                           "createdAt":  "2025-08-26T21:51:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sebastienros",
                                           "body":  "@KevinKrueger is it blazor wasm specific? Have you tried other types of apps?",
                                           "updatedAt":  "2025-08-26T21:51:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87AVd3A",
                                           "createdAt":  "2025-08-27T06:06:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KevinKrueger",
                                           "body":  "@sebastienros I can\u0027t say for sure, but so far I\u0027ve only encountered this problem with Blazor WASM.",
                                           "updatedAt":  "2025-08-27T06:06:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87BLBPK",
                                           "createdAt":  "2025-09-01T05:20:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KevinKrueger",
                                           "body":  "Got one :) ...wait",
                                           "updatedAt":  "2025-09-01T05:20:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87BLHjZ",
                                           "createdAt":  "2025-09-01T05:35:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KevinKrueger",
                                           "body":  "https://github.com/KevinKrueger/CorsIssue\n\nI tried it with Add and UseCors and it works.\nSo if we omit AddCors and UseCors, I get a Cors error message in the console!\n\nI am deliberately ignoring the other errors from Blazor here!",
                                           "updatedAt":  "2025-09-01T05:35:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87CGEia",
                                           "createdAt":  "2025-09-04T23:33:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "Thanks for providing a repro, @KevinKrueger.\n\n\u003e I tried it with Add and UseCors and it works.\n\u003e So if we omit AddCors and UseCors, I get a Cors error message in the console!\n\nThat\u0027s expected. In the repro you provided, the Blazor app is served from a different origin than your API (`http://localhost:5266` and `http://localhost:5101` respectively).\n\nI was able to get your repro to work after adding the following to `Program.cs`\n\n```csharp\nbuilder.Services.AddCors(options =\u003e\n{\n    options.AddDefaultPolicy(policy =\u003e policy.WithOrigins(\"http://localhost:5266\"));\n});\n\n// ...\n\nvar app = builder.Build();\n\n// ...\n\napp.UseCors();\n```\n\n...and also fixing the URI in `Weather.razor` to be correct (`\"weatherforecast\"`, not `\"GetWeatherForecast\"`).\n\nCould you confirm whether this matches what you\u0027re experiencing? If it does, please note that this behavior is by design. Please see the docs for [Blazor CORS guidance](https://learn.microsoft.com/aspnet/core/blazor/call-web-api?view=aspnetcore-9.0#cross-origin-resource-sharing-cors) and [Enabling CORS](https://learn.microsoft.com/aspnet/core/security/cors?view=aspnetcore-9.0#enable-cors).",
                                           "updatedAt":  "2025-09-04T23:33:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87C1wJq",
                                           "createdAt":  "2025-09-09T04:57:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KevinKrueger",
                                           "body":  "My experience with CORS is that when I configure it with AnyOrigin any-etc., I still get a ‘blocked by cors’ message.",
                                           "updatedAt":  "2025-09-09T04:57:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87DoI3B",
                                           "createdAt":  "2025-09-11T17:55:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "@KevinKrueger, it\u0027s not clear that there\u0027s an issue with the framework here. If you think there\u0027s a framework bug, could you please provide us with a repro project that clearly demonstrates it? The already-provided repro project seems to demonstrate a misconfigured application.\n\nIf this is a question about how to set up CORS, I\u0027d recommend checking out [Blazor CORS guidance](https://learn.microsoft.com/aspnet/core/blazor/call-web-api?view=aspnetcore-9.0#cross-origin-resource-sharing-cors) and [Enabling CORS](https://learn.microsoft.com/aspnet/core/security/cors?view=aspnetcore-9.0#enable-cors). If you need guidance specific to your app, we\u0027d generally recommend forums like StackOverflow.",
                                           "updatedAt":  "2025-09-11T17:55:47Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "CORS - AnyOrigin \u0026 WithOrigins has no effect",
        "labels":  [
                       "Needs: Attention :wave:",
                       "feature-cors",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/63187",
        "createdAt":  "2025-08-08T13:02:23Z",
        "number":  63187,
        "author":  "daniel-dewa",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-26T21:47:25Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nWhen using the new .NET 7 ProblemDetails-based exception handling, the middleware pipeline is not reexecuted during ExceptionHandler execution in [ExceptionHandlerMiddlewareImpl](https://github.com/dotnet/aspnetcore/blob/9fd58cfcfc83d92bf372459e62ab4b017cc8da7b/src/Middleware/Diagnostics/src/ExceptionHandler/ExceptionHandlerMiddlewareImpl.cs).\n\nThis leads to the clearing of headers that were set during the initial middleware execution,\nafter problem details are returned in [DefaultProblemDetailsWriter](https://github.com/dotnet/aspnetcore/blob/52b1c18e83dab1fae63b38bd4ed9538634ca3ded/src/Http/Http.Extensions/src/DefaultProblemDetailsWriter.cs#L17).\n\nHave I misconfigured my ASP.NET application / is there a correct way of reexecuting middleware when returning ProblemDetails using a custom IExceptionHandler?\n\nReproducible example: https://github.com/daniel-dewa/ErrorDetailsExample\n\n### Expected Behavior\n\nI expect middleware to be reexecuted or not be cleared when returning an exception.\n\n### .NET Version\n\n9.0.108\n\n### Anything else?\n\nASP.NET Core version: `Microsoft.AspNetCore.App 9.0.7`\nMight have something to do with #51888?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[AspNetCore .NET 9] Headers lost when HttpContext is cleared in ExceptionHandlerMiddlewareImpl",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/63221",
        "createdAt":  "2025-08-11T17:35:19Z",
        "number":  63221,
        "author":  "fstugren",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-26T21:35:48Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nHi Asp.net team,\n\nI\u0027ve been a big proponent of using unhandled exception handlers in our asp.net web services. However, the more we looked at it in detail, the less the strategy works. This applies both to the \"classic\" asp.net error handlers enabled via UseExceptionHandler() and the modern one based on the IExceptionHandler interface.\n\nWe use custom error handlers for several things:\n\n1. To return an error status code and error payload to the caller\n2. To close some request-specific objects, i.e. issue some custom error metrics and logs \n\nWe\u0027ve been aware that if an exception happens after the response has started (i.e. while writing to the output stream) the custom exception handlers are not invoked. However, recently we discovered a new confusing case - **in a percentage of the requests (but not all), when the caller of the service drops the connection (i.e. HttpContext.RequestAborted is signaled) the exception handler is also not invoked**.\n\nThese cases make it very hard to write a consistent error handling strategy based on the built-in error handling mechanisms. We can write error handling code that takes into consideration whether the response has already started. However, these error cases leave a significant number of failed requests outside of the default error handling, and they must be handled somehow.\n\nI decided to remove the error handlers and wrap the top-level middleware in **a custom middleware that catches and handles all exceptions from the inner middlewares and controllers**, whether the response has started or not, whether the caller dropped the connection or not, and processes them the same way as the former custom error handler did. This works just fine, but it leads to the obvious question - what\u0027s the \"right\" thing to do?\n\nStrangely, the asp.net runtime\u0027s unhandled exception handler is invoked every time an exception makes it through, regardless of request status, it\u0027s just the custom handlers that are skipped.\n\n**What does the Asp.Net team recommend**? I need an exception handler that is guaranteed to be executed regardless of when the exception happens. I can continue to use my custom top-level middleware, but the very existence of the error handling documented mechanisms gives a misleading picture to developers. This issue has caused us to undercount errors, and it\u0027s unclear for how long. If the RequestAborted case had caused the error handler to be skipped 100%, we would have identified the issue right away, but because only some requests end up in this corner case we did not identify it until much later.\n\nThanks\nF.\n\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n1. Service A accepts calls from a variety of clients\n2. Service A calls service B asynchronously (using standard HttpClient APIs)\n3. The call to service B has a guarded timeout that involves the request cancellation token HttpContext.RequestAborted\n4. Caller drops connection for whatever reason, at any time\n5. If request to B is in progress at the time, it is correctly aborted and a TaskCanceledException is rethrown\n6. Service A expects this exception to be caught by its unhandled exception handler where final logging/metrics are issued\n7. Exception handler is not invoked. We validated this in various ways, even placed an \"entered exception handler\" log line as the first code in the error handler.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n.Net 8.0\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvhgOJA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde869Trcu",
                                           "createdAt":  "2025-08-11T17:38:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "Possible related and/or duplicate issues:\n- https://github.com/dotnet/aspnetcore/issues/13170\n- https://github.com/dotnet/aspnetcore/issues/9839",
                                           "updatedAt":  "2025-08-11T17:38:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86-GA4k",
                                           "createdAt":  "2025-08-14T17:16:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fstugren",
                                           "body":  "Does the asp.net team have any feedback or recommendation on this?\nCC @MihaZupan  ",
                                           "updatedAt":  "2025-08-14T17:16:14Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Why are Unhandled Exception Handlers such a mess?",
        "labels":  [
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/63292",
        "createdAt":  "2025-08-16T13:16:25Z",
        "number":  63292,
        "author":  "javiercn",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-22T14:41:38Z",
        "body":  "We will want to cover better the MSBuild switches on the csproj that can be used to tweak the build process",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOv5s27w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86_HIoG",
                                           "createdAt":  "2025-08-20T13:20:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEe-lsg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Frulfump",
                                                                               "createdAt":  "2025-08-20T15:00:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "guardrex",
                                           "body":  "The [API/config on the other issue](https://github.com/dotnet/aspnetcore/issues/59315#issuecomment-3200171263) will be placed per my work on https://github.com/dotnet/AspNetCore.Docs/issues/35810.\n\nI\u0027ll ping for review when the PR goes up, hopefully later today (Wed, 8/20).\n",
                                           "updatedAt":  "2025-08-20T13:20:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86_maTu",
                                           "createdAt":  "2025-08-22T14:10:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "Here is a collection of all the MSBuild properties.\n\n| Property | Description |\n|----------|-------------|\n| `EnableDefaultCompressedItems` | Enables default compression include/exclude patterns |\n| `CompressionIncludePatterns` | Semicolon-separated list of file patterns to include for compression |\n| `CompressionExcludePatterns` | Semicolon-separated list of file patterns to exclude from compression |\n| `EnableDefaultCompressionFormats` | Enables default compression formats (gzip and brotli) |\n| `BuildCompressionFormats` | Compression formats to use during build |\n| `PublishCompressionFormats` | Compression formats to use during publish |\n| `DisableBuildCompression` | Disables compression during build |\n| `CompressDiscoveredAssetsDuringBuild` | Compresses discovered assets during build |\n| `BrotliCompressionLevel` | Compression level for Brotli algorithm |\n| `LinkAlternativeRepresentationsToOriginalResource` | How to link compressed assets to original resources |\n| `StaticWebAssetBuildCompressAllAssets` | Compresses all assets during build (not just discovered/computed) |\n| `StaticWebAssetPublishCompressAllAssets` | Compresses all assets during publish (not just discovered/computed) |\n\n| Property | Description |\n|----------|-------------|\n| `StaticWebAssetBasePath` | Base URL path for all the assets in a library |\n| `StaticWebAssetsFingerprintContent` | Enables content fingerprinting for cache busting |\n| `StaticWebAssetFingerprintingEnabled` | Enables fingerprinting feature for static web assets |\n| `StaticWebAssetsCacheDefineStaticWebAssetsEnabled` | Enables caching for static web asset definitions |\n| `StaticWebAssetBuildManifestPath` | Path to the build manifest JSON file |\n| `StaticWebAssetsBuildManifestCacheFilePath` | Path to the build manifest cache file |\n| `StaticWebAssetEndpointExclusionPattern` | Pattern for excluding endpoints |\n\n| Item Group | Description | Metadata |\n|------------|-------------|----------|\n| `StaticWebAssetContentTypeMapping` | Maps file patterns to content types and cache headers for endpoints | Pattern, Cache |\n| `StaticWebAssetFingerprintPattern` | Defines patterns for applying fingerprints to static web assets for cache busting | Pattern, Expression |\n\nMetadata Descriptions\n\n**Pattern**: A glob pattern used to match files. For `StaticWebAssetContentTypeMapping`, it matches files to determine their content type (e.g., `*.js` for JavaScript files). For `StaticWebAssetFingerprintPattern`, it identifies multi-extension files that need special fingerprinting treatment (e.g., `*.lib.module.js`).\n\n**Cache**: Specifies the Cache-Control header value for the matched content type. This controls browser caching behavior (e.g., `max-age=3600, must-revalidate` for media files).\n\n**Expression**: Defines how the fingerprint is inserted into the filename. The default is `#[.{fingerprint}]` which inserts the fingerprint before the extension.\n\n---\n\nHere are the runtime config options\n| Configuration Key | Description |\n|-------------------|-------------|\n| ReloadStaticAssetsAtRuntime | Enables dev-time hot reloading of static assets: serves modified wwwroot files (recomputes ETag, re-compresses if needed) instead of build-time manifest versions. Defaults to enabled only when serving a build manifest unless explicitly set. |\n| DisableStaticAssetNotFoundRuntimeFallback | When true, suppresses the fallback endpoint that serves newly added files not present in the build manifest. When false/absent, a file-exists-checked `{**path}` fallback (GET/HEAD) logs a warning and serves the file with a computed ETag. |\n| EnableStaticAssetsDevelopmentCaching | When true, preserves original Cache-Control headers on asset descriptors. When false/absent, rewrites any Cache-Control header to `no-cache` to avoid aggressive client caching during development. |\n| EnableStaticAssetsDevelopmentIntegrity | When true, keeps `integrity` properties on asset descriptors. When false/absent, removes any integrity property to prevent mismatches when files change during development. |\n\n---\nHere are recipes for common scenarios\n\n**Pipeline execution:**\n\nIf you want to avoid running the entire middleware pipeline after a static asset is served (similar to how UseStaticFiles works), you can call Shortcircuit() after MapStaticAssets as follows:\n```\napp.MapStaticAssets()\n   .ShortCircuit();\n```\n\nThis will immediately execute the endpoint and return the response, preventing any other middleware from executing for static asset requests.\n\n**Auth fallback policy**\n\nYou can add AllowAnonymous to the files you want to serve without authentication.\n```\napp.MapStaticAssets()\n    .Add(endpointBuilder =\u003e endpointBuilder.Metadata.Add(new AllowAnonymousAttribute()));\n```\n\nThis allows you to setup a fallback policy like:\n```\nbuilder.Services.AddAuthorization(o =\u003e\n{\n    o.FallbackPolicy = new Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder()\n        .RequireAuthenticatedUser()\n        .Build();\n});\n```\n\nAnd auth will be bypassed for static assets.\n\n**Large collection of assets**\n\nWhen dealing with large collections of assets (~1000) it is best to use a bundler to reduce the final number of assets served by the app, or to combine `MapStaticAssets` with `UseStaticFiles`. MapStaticAssets eagerly loads the precomputed metadata captured during the build process for the resources in order to support compression, caching and fingerprinting. That comes at a cost of more memory usage by the app. For assets that are frequently accessed, that makes sense, but for assets that aren\u0027t the trade-off might not be worth it.\n\nIf you don\u0027t use bundling, we recommend you combine `MapStaticAssets` with `UseStaticFiles` in those situations as follows:\n\nProject file configuration (.csproj):\n\n````xml\n\u003cProject Sdk=\"Microsoft.NET.Sdk.Web\"\u003e\n\n  \u003cPropertyGroup\u003e\n    \u003cTargetFramework\u003enet10.0\u003c/TargetFramework\u003e\n    \u003cStaticWebAssetEndpointExclusionPattern\u003e$(StaticWebAssetEndpointExclusionPattern);lib/icons/**\u003c/StaticWebAssetEndpointExclusionPattern\u003e\n  \u003c/PropertyGroup\u003e\n\n\u003c/Project\u003e\n````\n\nProgram.cs configuration:\n\n````csharp\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container\nbuilder.Services.AddRazorPages();\n\nvar app = builder.Build();\n\nif (!app.Environment.IsDevelopment())\n{\n    app.UseExceptionHandler(\"/Error\");\n    app.UseHsts();\n}\n\napp.UseHttpsRedirection();\n\nHandles the excluded files (lib/icons/*) and any other files not covered by MapStaticAssets\napp.UseStaticFiles();\n\napp.UseAuthorization();\n\n// MapStaticAssets handles critical application files (CSS, JS, images)\napp.MapStaticAssets();\n\n...\n\napp.Run();\n````\n\n`StaticWebAssetEndpointExclusionPattern)` is used to filter out endpoints from the final manifest. Those files then get served by `UseStaticFiles` but don\u0027t benefit from compression, caching or fingerprinting.",
                                           "updatedAt":  "2025-08-22T14:10:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86_mzbv",
                                           "createdAt":  "2025-08-22T14:41:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEfRtlQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "javiercn",
                                                                               "createdAt":  "2025-08-22T14:48:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "guardrex",
                                           "body":  "*Pipeline execution* and *Auth fallback policy* are already on the PR.\n\nI have some tweaks to make on *Large collection of assets*. It\u0027s on the PR, but you made some new remarks ☝️ to roll into it.\n\n*MSBuild properties*/*Metadata Descriptions* and *runtime config options* will need work. In fact, I can\u0027t get that all done today (Friday), so it will be addressed on Monday.\n\nI\u0027ll have Dan look first, so we can get the overall organization right. Then, I\u0027ll ping you for technical review.\n",
                                           "updatedAt":  "2025-08-22T14:41:37Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Better SWA docs",
        "labels":  [
                       "Docs",
                       "feature-static-web-assets",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/63505",
        "createdAt":  "2025-09-02T10:42:01Z",
        "number":  63505,
        "author":  "miroljub1995",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-02T10:43:42Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nRight now custom `PartitionedRateLimiter\u003cHttpContext\u003e` is supported only as `GlobalLimiter` and it is not possible to attach custom implementation of `PartitionedRateLimiter\u003cHttpContext\u003e` to name with `AddPolicy`. \n\nThe closest thing that `AddPolicy` accepts is callback that needs to return `RateLimitPartition\u003cTPartitionKey\u003e` which  has `Factory` property that returns `RateLimiter` and that rate limiter is not `HttpContext` aware.\n\nBackground:\nWe need to build an internal endpoint that needs to do some concurrency rate limiting based on some HTTP header. It should make priorities based on value from header, not just plain FIFO or LIFO queue like `ConcurrencyLimiter` does. In order to prioritise acquires, rate limiter needs to know for `HttpContext`, calculate priority when some `Lease` is disposed and pick the next from queue to be acquired.\n\n### Describe the solution you\u0027d like\n\nOn `RateLimiterOptions`:\n`public RateLimiterOptions AddPolicy(string policyName, Func\u003cHttpContext, PartitionedRateLimiter\u003cHttpContext\u003e\u003e factory)`\nor\n`public RateLimiterOptions AddPolicy(string policyName, PartitionedRateLimiter\u003cHttpContext\u003e rateLimiter)`\n\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Support custom `PartitionedRateLimiter\u003cHttpContext\u003e` per endpoint",
        "labels":  [
                       "feature-rate-limit",
                       "area-middleware"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/63700",
        "createdAt":  "2025-09-16T21:10:07Z",
        "number":  63700,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-17T18:41:35Z",
        "body":  "## Background and Motivation\n\n\u003c!--\nWe welcome API proposals! We have a process to evaluate the value and shape of new API. There is an overview of our process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md). This template will help us gather the information we need to start the review process.\nFirst, please describe the purpose and value of the new API here.\n--\u003e\n\nWe have been finding scenarios where developers need multiple IDistributedCache instances in a single application. For example:\n\n* https://github.com/dotnet/aspire/issues/8528\n* https://github.com/dotnet/runtime/issues/117976\n\nOne concrete example is to have 2 IDistributedCache instances, one pointing to Redis and one pointing to a SqlServer. Another example is 2 caches talking to different instances of Redis. \n\n## Proposed API\n\n```diff\nnamespace Microsoft.Extensions.DependencyInjection;\n\npublic static class StackExchangeRedisCacheServiceCollectionExtensions\n{\n    public static IServiceCollection AddStackExchangeRedisCache(this IServiceCollection services, Action\u003cRedisCacheOptions\u003e setupAction);\n+   public static IServiceCollection AddKeyedStackExchangeRedisCache(this IServiceCollection services, object? key, Action\u003cRedisCacheOptions\u003e setupAction);\n+   public static IServiceCollection AddKeyedStackExchangeRedisCache(this IServiceCollection services, object? serviceKey, string optionsName, Action\u003cRedisCacheOptions\u003e setupAction);\n}\n```\n\nThis follows the same API approach (the optional `optionsName`) as proposed in https://github.com/dotnet/runtime/issues/117976\n\n## Usage Examples\n\n```csharp\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddKeyedStackExchangeRedisCache(\"cache1\", options =\u003e\n{\n    options.Configuration = \"redis1:6379\";\n    options.InstanceName = \"SampleInstance1\";\n});\n\nbuilder.Services.AddKeyedStackExchangeRedisCache(typeof(MyCache), \"myCacheOptionsName\", options =\u003e\n{\n    options.Configuration = \"redis2:6379\";\n    options.InstanceName = \"SampleInstance2\";\n});\n\nvar app = builder.Build();\n\nvar cache1 = app.Services.GetRequiredKeyedService\u003cIDistributedCache\u003e(\"cache1\");\nvar cache2 = app.Services.GetRequiredKeyedService\u003cIDistributedCache\u003e(typeof(MyCache));\n\n```\n\n## Alternative Designs\n\n\u003c!--\nWere there other options you considered, such as alternative API shapes?\nHow does this compare to analogous APIs in other ecosystems and libraries?\n--\u003e\n\n## Risks\n\nThe current approach being employed is to create a new `RedisCache` instance (since the ctor is public). However, the when using `AddStackExchangeRedisCache` today it uses an internal derived type: `RedisCacheImpl`.\n\nAs of .NET 10, the drawback to this approach is that it doesn\u0027t use the internal RedisCacheImpl class. Which means:\n- The RedisCache won\u0027t log appropriately (but it only logs in one place - where it is unable to add library name suffix).\n- If HybridCache is being used, it won\u0027t add the \u0027HC\u0027 library name suffix to the connection. Since the check only happens in RedisCacheImpl.\n\nFYI @mgravell @jeffhandley @captainsafia ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Add support for keyed IDistributedCache in AddStackExchangeRedisCache",
        "labels":  [
                       "api-suggestion",
                       "feature-caching",
                       "area-middleware"
                   ]
    }
]
