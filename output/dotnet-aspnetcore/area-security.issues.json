[
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/53692",
        "createdAt":  "2024-01-29T15:29:09Z",
        "number":  53692,
        "author":  "ShineSmile",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-22T18:01:58Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [x] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nMicrosoft.AspNetCore.Authentication.JwtBearer version 8.0.1\r\n\r\n\r\nInvalid Issuer should response 500 instead of 401 as before. Invalid Issuer is server-side issue. Response 401 and add comments in header may confuse client-side user who request with valid token.\r\n\r\n\u003cimg width=\"720\" alt=\"image\" src=\"https://github.com/dotnet/aspnetcore/assets/8800442/db93e7a9-1d01-4f11-81c9-80b3deec744c\"\u003e\r\n\r\n\u003cimg width=\"720\" alt=\"image\" src=\"https://github.com/dotnet/aspnetcore/assets/8800442/75f30954-3af3-495e-b141-6217c6e7b41b\"\u003e\r\n\r\n\u003cimg width=\"720\" alt=\"image\" src=\"https://github.com/dotnet/aspnetcore/assets/8800442/6f3af57a-5a79-43ae-97f4-bf01f1e29ffa\"\u003e\r\n\r\n\u003cimg width=\"720\" alt=\"image\" src=\"https://github.com/dotnet/aspnetcore/assets/8800442/7b910275-5689-475d-acf2-716a53a3cdde\"\u003e\r\n\r\n\r\n### Expected Behavior\r\n\r\nInvalid Issuer is service side issue so response 500 is expected. The server lost token validate function does not mean user credential is incorrect.\r\n\r\n### Steps To Reproduce\r\n\r\n```\r\nbuilder.Services.AddAuthentication(\"Bearer\")\r\n                .AddJwtBearer(\"Bearer\", config =\u003e\r\n                {\r\n                    config.Authority = \"https://authority.host\";\r\n                    config.Audience = \"audience-here\";\r\n\r\n                    config.SaveToken = true;\r\n                });\r\n```\r\nset up Web API project and request with valid token. **Disconnect all network connection to Authority.** \r\nI have test 3.1, 6, 7, 8 and only response code 401 received in dotnet 8.\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0.101\r\n\r\n### Anything else?\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhnGaoQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85y5VO3",
                                           "createdAt":  "2024-02-05T17:58:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\n\nWe\u0027re moving this issue to the `.NET 9 Planning` milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2024-02-05T17:58:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86GcZqh",
                                           "createdAt":  "2024-07-29T10:42:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgdB9Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ShineSmile",
                                                                               "createdAt":  "2025-09-02T07:05:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "petermicuch",
                                           "body":  "This is indeed a bit misleading and much harder to detect issues from field. Now the first question if we encounter 401 when user claims correct credentials will be test if issuer is valid (i.e. valid certificate). And this is quite common problem when containerized application does not have \"local\" certificates imported into cert store of the container.",
                                           "updatedAt":  "2024-07-29T10:42:30Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Invalid Issuer should response 500 instead of 401 in dotnet 8 Microsoft.AspNetCore.Authentication.JwtBearer ",
        "labels":  [
                       "bug",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/53760",
        "createdAt":  "2024-02-01T14:44:52Z",
        "number":  53760,
        "author":  "csharpfritz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-21T16:46:15Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nIssue #47664 automatically adds AuthN/Z middleware if services are registered.  If UseAuthentication or UseAuthorization are called manually in the configuration process, it creates an error scenario indicating issues with Antiforgery.\r\n\r\nCan we add a check in UseAuthN/Z to prevent duplicate middleware addition?\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/main/src/Security/Authentication/Core/src/AuthAppBuilderExtensions.cs#L20\r\nhttps://github.com/dotnet/aspnetcore/blob/main/src/Security/Authorization/Policy/src/AuthorizationAppBuilderExtensions.cs#L26\r\n\r\n\r\n### Expected Behavior\r\n\r\nExecuting UseAuthentication / UseAuthorization should not trigger an antiforgery error\r\n\r\n### Steps To Reproduce\r\n\r\nUpdate the default template to include:\r\n\r\n```csharp\r\napp.UseStaticFiles();\r\napp.UseAntiforgery();\r\n\r\n// new lines\r\napp.UseAuthentication();\r\napp.UseAuthorization();\r\n```\r\n\r\nRegister and login as a new user and then attempt to logout\r\n\r\n\r\n### Exceptions (if any)\r\n\r\n```\r\nMicrosoft.AspNetCore.Antiforgery.AntiforgeryValidationException: The provided antiforgery token was meant for a different claims-based user than the current user.\r\n\r\n   at Microsoft.AspNetCore.Antiforgery.DefaultAntiforgery.ValidateTokens(HttpContext httpContext, AntiforgeryTokenSet antiforgeryTokenSet)\r\n\r\n   at Microsoft.AspNetCore.Antiforgery.DefaultAntiforgery.ValidateRequestAsync(HttpContext httpContext)\r\n\r\n   at Microsoft.AspNetCore.Antiforgery.Internal.AntiforgeryMiddleware.InvokeAwaited(HttpContext context)\r\n```\r\n\r\n### .NET Version\r\n\r\n8.0.1\r\n\r\n### Anything else?\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcspicw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85yxCQX",
                                           "createdAt":  "2024-02-03T21:14:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kevinchalet",
                                           "body":  "\u003e Executing UseAuthentication / UseAuthorization should not trigger an antiforgery error\r\n\r\nAre you sure it\u0027s not just because you added `app.UseAuthentication()` at the wrong place? The antiforgery stack uses the current identity - resolved from the default authentication scheme - to bind the antiforgery tokens to a specific user: if you add `app.UseAuthentication()` after `app.UseAntiforgery()`, that identity may not be available soon enough for things to work correctly.\r\n\r\nIf anything had to be changed, please be extremely careful: projects like OpenIddict require being able to register the authentication middleware at a different place (typically after CORS). If `app.UseAuthentication()` blindly no-oped just because it was already added by the default app builder, that would likely break things very badly.",
                                           "updatedAt":  "2024-02-03T21:14:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85yxGP7",
                                           "createdAt":  "2024-02-03T22:35:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "csharpfritz",
                                           "body":  "You’ve made EXACTLY my point. Antiforgery calls UseAuth if it hasn’t been called already. If UseAuth is in the wrong place, don’t double execute and perhaps throw an exception so developers can identify the problem. JeffOn Feb 3, 2024, at 16:14, Kévin Chalet ***@***.***\u003e wrote:﻿Re: [dotnet/aspnetcore] When adding AuthN/Z, check if middleware is already added (Issue #53760)Executing UseAuthentication / UseAuthorization should not trigger an antiforgery errorAre you sure it\u0027s not just because you added app.UseAuthentication() at the wrong place? The antiforgery stack uses the current identity - resolved from the default authentication scheme - to bind the antiforgery tokens to a specific user: if you add app.UseAuthentication() after app.UseAntiforgery(), that identity may not be available soon enough for things to work correctly.If anything had to be changed, please be extremely careful: projects like OpenIddict require being able to register the authentication middleware at a different place (typically after CORS). If app.UseAuthentication() blindly no-oped just because it was already added by the default app builder, that would likely break things very badly.—Reply to this email directly, view it on GitHub or unsubscribe.You are receiving this email because you authored the thread.Triage notifications on the go with GitHub Mobile for iOS or Android.                                                           ",
                                           "updatedAt":  "2024-02-03T22:35:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85yxHas",
                                           "createdAt":  "2024-02-03T22:57:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kevinchalet",
                                           "body":  "\u003e Antiforgery calls UseAuth if it hasn’t been called already.\r\n\r\nThat\u0027s not how it works: https://github.com/dotnet/aspnetcore/blob/8aea1cbaaf827bccfaa9a557893bc5b9c956a790/src/Antiforgery/src/AntiforgeryApplicationBuilderExtensions.cs#L21-L30\r\n\r\nThe authentication middleware is added by the host when it detects that middleware hasn\u0027t been explicitly registered by the user, otherwise it already no-ops.",
                                           "updatedAt":  "2024-02-03T22:57:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85yyOF0",
                                           "createdAt":  "2024-02-04T14:14:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "csharpfritz",
                                           "body":  "You\u0027re right @kevinchalet - it does no-op and you can see that change here:\r\nhttps://github.com/dotnet/aspnetcore/pull/47664/files\r\n\r\n.. but it doesn\u0027t no-op if you call UseAuth after UseAntiforgery it throws an error on every form submission. ",
                                           "updatedAt":  "2024-02-04T14:14:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85yyai1",
                                           "createdAt":  "2024-02-04T16:25:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kevinchalet",
                                           "body":  "\u003e .. but it doesn\u0027t no-op if you call UseAuth after UseAntiforgery it throws an error on every form submission.\r\n\r\nThe web host always no-ops independently of the order you use, but if you decide to explicitly register the authentication/authorization middleware, you become responsible for adding them at the right place.\r\n\r\nTry to move `app.UseAuthentication()`/`app.UseAuthorization()` before `app.UseAntiforgery()` to see if it fixes your issue.",
                                           "updatedAt":  "2024-02-04T16:25:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85yycD_",
                                           "createdAt":  "2024-02-04T16:40:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "csharpfritz",
                                           "body":  "Why are you arguing this point?Is there EVER a scenario when UseAuth should be called twice?Is there EVER a parameter to pass in to UseAuth?  I’ll answer this one, no.. those methods don’t take an argument. So if placing it before UseAntiforgery is “correct” and placing it after is “wrong” and omitting it entirely “just works” why don’t we solve this problem and add the same “already registered” check that’s present when you can UseAuth before Antiforgery?JeffOn Feb 4, 2024, at 11:25, Kévin Chalet ***@***.***\u003e wrote:﻿Re: [dotnet/aspnetcore] When adding AuthN/Z, check if middleware is already added (Issue #53760).. but it doesn\u0027t no-op if you call UseAuth after UseAntiforgery it throws an error on every form submission.The web host always no-ops independently of the order you use, but if you decide to explicitly register the authentication/authorization middleware, you become responsible for adding them at the right place.Try to move app.UseAuthentication()/app.UseAuthorization() before app.UseAntiforgery() to see if it fixes your issue.—Reply to this email directly, view it on GitHub or unsubscribe.You are receiving this email because you authored the thread.Triage notifications on the go with GitHub Mobile for iOS or Android.                                                           ",
                                           "updatedAt":  "2024-02-04T16:40:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85yycwB",
                                           "createdAt":  "2024-02-04T16:50:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kevinchalet",
                                           "body":  "\u003e Is there EVER a scenario when UseAuth should be called twice?Is there EVER a parameter to pass in to UseAuth?\r\n\r\nAgain, it\u0027s not called twice: if you call it explicitly, the web host no-ops and doesn\u0027t add it a second time.\r\n\r\nI guess you\u0027re not familiar with the authentication stack, which would explain why you\u0027re so affirmative but there are definitely cases where you want to control the middleware order and call `app.UseAuthentication()` explicitly.\r\n\r\nI already shared one scenario earlier: when you have an `IAuthenticationRequestHandler` implementation and you want CORS to apply to the generated responses, you must call `app.UseCors()` and then `app.UseAuthentication()`, otherwise the authentication middleware added by the web app host is added too early and the CORS middleware doesn\u0027t have a chance to apply its headers to the response prepared by your `IAuthenticationRequestHandler`.\r\n\r\n\u003e So if placing it before UseAntiforgery is “correct” and placing it after is “wrong” and omitting it entirely “just works” why don’t we solve this problem and add the same “already registered” check that’s present when you can UseAuth before Antiforgery?\r\n\r\nThere\u0027s a simpler approach: updating the web host to auto-register the antiforgery middleware.\r\n\r\nYou guys wanted this level of magic...",
                                           "updatedAt":  "2024-02-04T16:50:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85yydOi",
                                           "createdAt":  "2024-02-04T16:56:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kevinchalet",
                                           "body":  "BTW, this concern didn\u0027t exist in previous ASP.NET Core versions because the antiforgery middleware wasn\u0027t a thing: antiforgery was previously handled at the MVC filter level (so much later in the request processing pipeline). The antiforgery middleware (and the `app.UseAntiforgery()` extension that comes with it) was only introduced in 8.0.\r\n\r\nThe requirement to register the authentication middleware before the antiforgery middleware is explicitly listed in the PR that introduced it, BTW:\r\n\r\n\u003e The anti-forgery middleware must run _after_ authentication and authorization middlewares to avoid inadvertendly reading form data when the user is unauthenticated.\r\n\r\nhttps://github.com/dotnet/aspnetcore/pull/49233",
                                           "updatedAt":  "2024-02-04T16:56:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85yyijW",
                                           "createdAt":  "2024-02-04T17:35:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "csharpfritz",
                                           "body":  "Ok.. we agree - there is a requirement to register Auth before Antiforgery. I’ll  go back to the description of the issue: can a check be added to prevent duplication?   I’m not suggesting a solution if the improperly located UseAuth statement triggers an exception or is ignored. I’m a developer who wants to make this easier for novice folks to discover and understand.  Implicit ordering of pipeline processes that is only declared in a pull-request on GitHub should be surfaced to make it easier for developers to succeed. JeffOn Feb 4, 2024, at 11:56, Kévin Chalet ***@***.***\u003e wrote:﻿Re: [dotnet/aspnetcore] When adding AuthN/Z, check if middleware is already added (Issue #53760)BTW, this concern didn\u0027t exist in previous ASP.NET Core versions because the antiforgery middleware wasn\u0027t a thing: antiforgery was previously handled at the MVC filter level (so much later in the request processing pipeline). The antiforgery middleware (and the app.UseAntiforgery() extension that comes with it) was only introduced in 8.0.The requirement to register the authentication middleware before the antiforgery middleware is explicitly listed in the PR that introduced it, BTW:The anti-forgery middleware must run after authentication and authorization middlewares to avoid inadvertendly reading form data when the user is unauthenticated.#49233—Reply to this email directly, view it on GitHub or unsubscribe.You are receiving this email because you authored the thread.Triage notifications on the go with GitHub Mobile for iOS or Android.                                                           ",
                                           "updatedAt":  "2024-02-04T17:35:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85yymJz",
                                           "createdAt":  "2024-02-04T18:01:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kevinchalet",
                                           "body":  "\u003e I’ll  go back to the description of the issue: can a check be added to prevent duplication?\r\n\r\nYou\u0027re really confusing yourself by calling that a \"duplication\": there\u0027s no duplication at all, it\u0027s just a very classical middleware ordering issue here.\r\n\r\n\u003e I’m not suggesting a solution if the improperly located UseAuth statement triggers an exception or is ignored.\r\n\r\nI suggested a potential option that shouldn\u0027t be too invasive: adding more magic to the web host to automatically register the antiforgery middleware so you don\u0027t have to call `app.UseAntiforgery()` yourself.\r\n\r\nAnother potential option: adding an analyzer, but it\u0027s not foolproof and could be complicated if the `app.Use*()` extensions are called from custom extensions (which is a common practice to avoid bloating `Program.cs`/`Startup.cs` too much).\r\n\r\n\u003e I’m a developer who wants to make this easier for novice folks to discover and understand.  Implicit ordering of pipeline processes that is only declared in a pull-request on GitHub should be surfaced to make it easier for developers to succeed.\r\n\r\nThat\u0027s the problem with magic: you hide all these things away from the users who have no idea how things work. Middleware ordering has always been a super fundamental thing and I\u0027m not sure hiding it has really helped (but it sure helped eliminate some lines in those super minimal samples 🤣)",
                                           "updatedAt":  "2024-02-04T18:01:02Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "When adding AuthN/Z, check if middleware is already added",
        "labels":  [
                       "enhancement",
                       "analyzer",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/54132",
        "createdAt":  "2024-02-20T13:26:35Z",
        "number":  54132,
        "author":  "dazinator",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-18T16:56:24Z",
        "body":  "## Background and Motivation\r\n\r\nI\u0027d like to be able to sign in as a user, from a console app, similar to how I can from an aspnet core web app.\r\n\r\naspnet core offers a rich and extensible capability for configuring various authentication schemes, and handlers. However it currently couples itself in its implementation to `HttpContext` - where this coupling is not unnecessary.\r\n\r\nFor example the journey begins when, to authenticate, we must get an `IAuthenticationService` - there are some convenience extension methods for HttpContext that resolve this for us from `HttpContext.RequestServices` and this is fine:\r\n\r\n```\r\n public static class AuthenticationHttpContextExtensions\r\n {\r\n          public static Task\u003cAuthenticateResult\u003e AuthenticateAsync(this HttpContext context, string? scheme) =\u003e\r\n            context.RequestServices.GetRequiredService\u003cIAuthenticationService\u003e().AuthenticateAsync(context, scheme);\r\n```\r\n\r\nThis is not a problem because I can do the same from a console app with an `IServiceProvider` so no issue there.\r\n\r\nHowever looking at `IAuthenticationService.AuthenticateAsync()` (and similar api\u0027s) we can see that they pretty much all want `HttpContext` as an argument. This seems unnecessary coupling because any implementation of `AuthenticationService` including the default, can inject `IHttpContextAccessor` and access `HttpContext` if it needs it that way. This is also true for any `IAuthenticationHandlerProvider` or `IAuthenticationHandler` that is \"web\" specific.\r\n\r\nIn other words, _anything that needs http context has a way to get it, and there is no need to insist on this being passed all the way around the stack via the api\u0027s._\r\n\r\nConceptually, I propose the following, to allow `Microsoft.AspNetCore.Authentication` to be pushed into the runtime libraries as `Microsoft.Extensions.Authentication` with no dependency on HttpContext, and the the current HttpContext convenience authentication methods can remain in an aspnet core package, which is now a thin layer.\r\n\r\n1. Remove the `HttpContext` arguments from `IAuthenticationService`\r\n2. Change the base implementations of `IAuthenticationService` and `IAuthenticationHandlerProvider` (both are \"scoped\" services) to inject `IHttpContextAccessor` and use HttpContext where needed.\r\n3. Do the same as 2 for anything else that needs http context such as the implemenations of `IAuthenticationHandler` themselves like cookies based handlers etc or find away to adapt these to keep compatibility, whilst also allowing the larger goal of having handlers not dependent on HttpContext.\r\n\r\n\r\n## Usage Examples\r\n\r\nThe end goal, is that once `Microsoft.Extensions.Authentication` exists you\u0027d be able to share an authentication story for non web apps that looks a little like this:\r\n\r\n```\r\npublic class ConsoleSignInAuthenticationOptions : AuthenticationSchemeOptions\r\n{\r\n    // Custom options can be added here\r\n}\r\n\r\npublic class ConsoleSignInAuthenticationHandler : AuthenticationHandler\u003cConsoleSignInAuthenticationOptions\u003e\r\n{\r\n    private static AsyncLocal\u003cClaimsPrincipal\u003e _currentPrincipal = new AsyncLocal\u003cClaimsPrincipal\u003e();\r\n\r\n    public ConsoleSignInAuthenticationHandler(\r\n        IOptionsMonitor\u003cConsoleSignInAuthenticationOptions\u003e options,\r\n        ILoggerFactory logger,\r\n        UrlEncoder encoder,\r\n        ISystemClock clock)\r\n        : base(options, logger, encoder, clock)\r\n    {\r\n    }\r\n\r\n    protected override Task\u003cAuthenticateResult\u003e HandleAuthenticateAsync()\r\n    {\r\n        var principal = _currentPrincipal.Value;\r\n        if (principal != null)\r\n        {\r\n            var ticket = new AuthenticationTicket(principal, Scheme.Name);\r\n            return Task.FromResult(AuthenticateResult.Success(ticket));\r\n        }\r\n\r\n        return Task.FromResult(AuthenticateResult.Fail(\"No ClaimsPrincipal is available.\"));\r\n    }\r\n\r\n    public static async Task SignInAsync(ClaimsPrincipal principal)\r\n    {\r\n        _currentPrincipal.Value = principal;\r\n        // Perform any additional sign-in logic here if necessary\r\n    }\r\n\r\n    public static async Task SignOutAsync()\r\n    {\r\n        _currentPrincipal.Value = null;\r\n        // Perform any sign-out cleanup logic here if necessary\r\n    }\r\n}\r\n\r\n```\r\n\r\n```\r\nservices.AddAuthentication(options =\u003e\r\n{\r\n    options.DefaultAuthenticateScheme = \"ConsoleScheme\";\r\n    options.DefaultChallengeScheme = \"ConsoleScheme\";\r\n})\r\n.AddScheme\u003cConsoleSignInAuthenticationOptions, ConsoleSignInAuthenticationHandler\u003e(\"ConsoleScheme\", options =\u003e { });\r\n\r\n\r\n```\r\n\r\n\r\n## Alternative Designs\r\n\r\n\r\n## Risks\r\n\r\nThere would be breaking changes, but these might be minimised by adjusting base implementations to adapt current api\u0027s to conform  to newer api\u0027s in some scenarios.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdMvF1w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde850iopO",
                                           "createdAt":  "2024-02-20T22:37:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODYgqjg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "halter73",
                                                                               "createdAt":  "2024-02-27T23:43:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "This is a huge breaking change that\u0027s just not going to happen. At best you\u0027d get an incompatible fork with no interop between them. Since you wouldn\u0027t be able to use any the HTTP based implementations in any other kind of app, what\u0027s the value in a shared abstraction? I\u0027d expect there to be hardly any code left once you removed the HTTP specific parts, just a hollow shell.\r\n\r\n\u003e 2\\. Change the base implementations of `IAuthenticationService` and `IAuthenticationHandlerProvider` (both are \"scoped\" services) to inject `IHttpContextAccessor` and use HttpContext where needed. \r\n\r\n`IHttpContextAccessor` should be avoided whenever possible, there are too many ways to break it. Passing direct references is always preferred.\r\n\r\n",
                                           "updatedAt":  "2024-02-20T22:37:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde850y8XX",
                                           "createdAt":  "2024-02-22T14:01:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "\u003e what\u0027s the value in a shared abstraction?\r\n\r\nHaving \"one way\" to do authentication irrespective of hosting model / paradigm. Sure the providers you\u0027d pull in look different for a web app vs a non web app, but I see this as similar in nature to how the `IServer` / `IHostLifetime` (from memory!) that is used for web app versus non web app is different but there is still the concept of a generic host - because I guess you want to standardise concepts more broadly across dotnet, so its less cognitive load for developers working across solutions.\r\n\r\nPerhaps it comes down to whether you think `Authentication` and `Authorization` are first class concepts, worthy of addressing as such for dotnet more broadly, so there is a consistent story irrespective of the type of app. Or whether you think various eco systems in dotnet, should roll their own solutions.\r\n\r\n",
                                           "updatedAt":  "2024-02-22T14:08:08Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Microsoft.AspNetCore.Authentication --\u003e Microsoft.Extensions.Authentication",
        "labels":  [
                       "enhancement",
                       "api-suggestion",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/54524",
        "createdAt":  "2024-03-13T10:57:13Z",
        "number":  54524,
        "author":  "pampua84",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3LtmA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vinayaroratech",
                                            "createdAt":  "2024-04-12T12:37:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pampua84",
                                            "createdAt":  "2024-04-12T14:40:17Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-04-22T16:48:17Z",
        "body":  "Hi, the two-factor authentication mechanism and, consequently, the validation of the OTP, generated through an Authenticator app, and validated with Asp.Net Core Identity .NET8 and earlier versions, do not comply with the [RFC6238](https://www.rfc-editor.org/rfc/rfc6238.txt) standard. Below is what the documentation reports:\r\n\r\n\u003e “We recommend a default time-step size of 30 seconds. This default value of 30 seconds is selected as a balance between security and usability.”\r\n\r\nHowever, in the library, the value is set to **90 seconds** forward and backward. Not only is this parameter significantly greater than the standard, but it is also not configurable, as indicated by the comment in the documentation:\r\n\r\n\u003e \r\n“// Allow codes from 90s in each direction (we could make this configurable?)”\r\n\r\nAdditionally, there is an open issue numbered #14423 that has not yet been resolved.\r\n\r\nThanks\r\n\r\n### Expected Behavior\r\n\r\nI expect the validation window to not be a HardCoded value, and to be configurable. Also I expect there is a solution to not accept the same OTP in a specific time window\r\n\r\n### .NET Version\r\n\r\n.NET 8 and previous\r\n\r\n### Anything else?\r\n\r\nASP.NET Core Identity",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOek5Xbw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde856Sjhq",
                                           "createdAt":  "2024-04-12T12:39:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vinayaroratech",
                                           "body":  "Hi there! Could you please confirm whether it\u0027s possible to delete the user token after it has been used? ",
                                           "updatedAt":  "2024-04-12T12:39:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde856Tldv",
                                           "createdAt":  "2024-04-12T15:12:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "No1e",
                                           "body":  "Out of box, no. Because those tokens are not save. But you could implement, just create new table that will serve for this. You can store used tokens there, and use them to validate if token is already used. Don\u0027t forget to implement periodical cleanup of that table, every 15 minutes for example.",
                                           "updatedAt":  "2024-04-12T15:12:10Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "ASP.NET Core Identity .NET 8 two factor authenticator does not comply with the rfc6238 standard",
        "labels":  [
                       "enhancement",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/55389",
        "createdAt":  "2024-04-26T20:51:13Z",
        "number":  55389,
        "author":  "andyolivares",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-02T16:42:13Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nI\u0027m working on a project where I\u0027m using JWT Bearer tokens with simplified auth configuration like this:\r\n\r\n```csharp\r\nbuilder.Services.AddAuthentication().AddJwtBearer();\r\n```\r\n\r\nMy `appsettings.json` looks like this:\r\n\r\n```json\r\n{\r\n  \"Authentication\": {\r\n    \"Schemes\": {\r\n      \"Bearer\": {\r\n        \"Authority\": \"...\",\r\n        \"MetadataAddress\": \"...\",\r\n        \"ValidIssuer\": \"...\",\r\n        \"ValidAudiences\": [ \"account\" ]\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nMy application uses an OIDC server that has a different `NameClaimType` than ASP.NET Security\u0027s default. It would be great to be able to specify that in the same configuration (along with `RoleClaimType` and maybe other options left behind). Something like this:\r\n\r\n```json\r\n{\r\n  \"Authentication\": {\r\n    \"Schemes\": {\r\n      \"Bearer\": {\r\n        \"Authority\": \"...\",\r\n        \"MetadataAddress\": \"...\",\r\n        \"ValidIssuer\": \"...\",\r\n        \"ValidAudiences\": [ \"account\" ],\r\n        \"TokenValidationParameters\": {\r\n          \"NameClaimType\": \"name\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nIt would be straightforward to add a few more options in [JwtBearerConfigureOptions.cs](https://github.com/dotnet/aspnetcore/blob/c157c5c1962a66c4fe0212ed767f167bb9cdfb79/src/Security/Authentication/JwtBearer/src/JwtBearerConfigureOptions.cs#L64) to configure `TokenValidationParameters` further from configuration.\r\n\r\nI could make a PR myself. Let me know what you think.\r\n\r\n### Additional context\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Make a way to configure more options in TokenValidationParameters using simplified authentication configuration",
        "labels":  [
                       "enhancement",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/55602",
        "createdAt":  "2024-05-08T15:35:33Z",
        "number":  55602,
        "author":  "janseris",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-08T16:43:20Z",
        "body":  "## Background and Motivation\r\nThis is not an API change proposal but documentation change/extension proposal.\r\n\r\nIn `AuthenticationHandler` (namespace `Microsoft.AspNetCore.Authentication`), when `AuthenticateResult.Fail` is used, it accepts `failureMessage` parameter. It does not make it into the response. \r\nPlease add documentation for what is intended purpose of this parameter.\r\nThere is an upvoted comment for that on this response: https://stackoverflow.com/a/58643186/3625699\r\n![obrazek](https://github.com/dotnet/aspnetcore/assets/64279914/8f049ffc-c428-42b3-b8c5-3361358035a1)\r\n\r\n## Proposed API\r\n\r\nUpdate documentation\r\n\r\n## Usage Examples\r\n\r\n\r\n\r\n## Alternative Designs\r\n\r\nNone\r\n\r\n## Risks\r\n\r\nNone\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Add documentation for AuthenticateResult.Fail failureMessage parameter.",
        "labels":  [
                       "Docs",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/55634",
        "createdAt":  "2024-05-09T16:17:23Z",
        "number":  55634,
        "author":  "anarian",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-21T12:19:12Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\nIt\u0027s related to #47503 but slightly different\r\n\r\n### Describe the bug\r\n\r\n[`CookieAuthenticationHandler.HandleSignInAsync`](https://github.com/dotnet/aspnetcore/blob/main/src/Security/Authentication/Cookies/src/CookieAuthenticationHandler.cs#L342) re-uses the session key from the session store when a user signs in again.\r\n\r\nThis was fixed because of #22135, but if `HttpContext.SignOutAsync` is called prior to signing in, the session ID is re-used even though it\u0027s been removed from the store. `ITicketStore.RenewAsync` does not return whether the ticket was successfully renewed so the authentication handler expects the session to be present in the store.\r\n\r\nOur application has use cases where the users may share devices (e.g. education, in schools), and the users may log in via IDP-initiated methods or directly from our application. We need to be able to sign them out and avoid re-using the session key between different users if a different user logs in.\r\n\r\n### Expected Behavior\r\n\r\nThe condition on [line 339](https://github.com/dotnet/aspnetcore/blob/main/src/Security/Authentication/Cookies/src/CookieAuthenticationHandler.cs#L339) should be changed to `if (_sessionKey != null \u0026\u0026 !_signOutCalled)` to avoid re-using the session key if a sign out request is made.\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0.204\r\n\r\n### Anything else?\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOn2hBrw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde859d3hb",
                                           "createdAt":  "2024-05-10T17:15:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "We\u0027ve reviewed this in the past and determined that it doesn\u0027t matter, the session key is not a unique id. Once the user object is removed from the session cache then the user is signed out and re-using the session key will not be able to retrieve any of that users creds. Have you found otherwise?\r\n\r\nNote you also can\u0027t rely on the client to stop sending the original cookie, even if you ask nicely for it to be deleted. That\u0027s entirely up to them. That\u0027s why we remove the user object from the cache instead.\r\n\r\nLimiting cookie turnover has other advantages for page caching, etc..",
                                           "updatedAt":  "2024-05-10T17:17:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde859eq46",
                                           "createdAt":  "2024-05-10T19:56:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "anarian",
                                           "body":  "We sign out the previous users\u0027 session prior to signing in the current user. The re-used session key by the second user now references an invalidated session because the sign in doesn\u0027t generate a new session ID. The cookie authentication handler returns a valid cookie pointing to an invalid session, and subsequent requests to the server fail with the error `Identity missing in session store`. \r\n\r\nWe aren\u0027t relying on the session ID being unique, but an invalidated session ID is being assigned to a newly signed in user which is causing issues.\r\n\r\ne.g.\r\n1. User A signs in, Session ID 1 is assigned to them\r\n2. User B tries to sign in on the same browser\r\n3. Application code calls `HttpContext.SignOutAsync(...);`, `ITicketStore.RemoveAsync` is called to invalidate Session ID 1\r\n4. Application code calls `HttpContext.SignInAsync(...)` for User B inside the same request\r\n5. Instead of calling `ITicketStore.StoreAsync`, `CookieAuthenticationHandler` is calling `ITicketStore.RenewAsync`, with Session ID 1\r\n6. That renewal does nothing because the session is invalid, but `SignInAsync` continues to use Session ID 1\r\n7. User B receives a cookie with Session ID 1\r\n8. User B tries to do an authenticated action, `ITicketStore.RetrieveAsync` is called with Session ID 1, but fails because it\u0027s not valid\r\n\r\nWith the suggestion to generate a new session ID if `_signOutCalled`, step 5 would have a new session ID, and this issue wouldn\u0027t occur. ",
                                           "updatedAt":  "2024-05-10T19:56:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde859e_mD",
                                           "createdAt":  "2024-05-10T21:11:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "\u003e Instead of calling ITicketStore.StoreAsync, CookieAuthenticationHandler is calling ITicketStore.RenewAsync, with Session ID 1\r\n\r\nWhile it may be counter-intuitive, renew can re-create the session with arbitrary content.\r\n\r\nPractically speaking, it will be a lot quicker to change your ITicketStore to handle this case than to wait for .NET 9 (Nov?). And since it is easy to change locally it\u0027s unlikely to be a priority to change here.",
                                           "updatedAt":  "2024-05-10T21:11:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86faEGv",
                                           "createdAt":  "2025-02-21T12:19:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Akridian",
                                           "body":  "\u003e While it may be counter-intuitive, renew can re-create the session with arbitrary content.\n\nFaced similar issue.\n\nThanks for the suggestion. Changing Renew, so new ticket is stored when none found by given key, solved it for us.\n\nIt seems like some clarification in documentation is needed. I\u0027m currently working on Custom Store implementation for Identity and mainly using source code from EntityFrameworkCore storage implementation, because documentation lacks some information (like `IRoleClaimStore` for example). But I believe there is no implementation of `ITicketStore` in EntityFrameworkCore storage implementation for Identity. May be a good way to show how it\u0027s properly done.\n\n",
                                           "updatedAt":  "2025-02-21T12:19:08Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Cookie Authentication Handler session key is re-used even when sign out is called before signing in",
        "labels":  [
                       "bug",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/55705",
        "createdAt":  "2024-05-14T08:24:15Z",
        "number":  55705,
        "author":  "y4r9",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-31T22:19:46Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWhen using the Negotiate authentication on a Linux AD domain member with LDAP claim resolution as described at [link](https://learn.microsoft.com/de-de/aspnet/core/security/authentication/windowsauth?view=aspnetcore-8.0\u0026tabs=visual-studio), the nested groups are resolved multiple times, because in file aspnetcore/src/Security/Authentication/Negotiate/src/Internal/LdapAdapter.cs on line [73](https://github.com/dotnet/aspnetcore/blob/3307bf66ac87308d157ce9f9fa10bb56c1ebf602/src/Security/Authentication/Negotiate/src/Internal/LdapAdapter.cs#L73) a new HashSet is created in every iteration of the surrounding foreach loop. Furthermore, on Windows the claims contain the SIDs of the groups instead of the names, whereas on linux only the group names are returned. To allow for more portable code adding the SIDs would be helpful.\r\nAdding the SIDs has also been requested previously by #31959.\r\n\r\n### Expected Behavior\r\n\r\n- Unique group claims should be returned upon authentication.\r\n- Object SIDs should be added to the claims to allow for portable claim based/policy based authorization.\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0.204\r\n\r\n### Anything else?\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgrG9-w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86CoRGF",
                                           "createdAt":  "2024-06-26T12:40:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "y4r9",
                                           "body":  "## API change proposal:\r\n\r\n## Background and Motivation\r\n\r\nWhen adding SID resolution using LDAP on Linux to solve the issue #55705 @halter73 requested to make this an optional feature in order to reduce overhead (see [here](https://github.com/dotnet/aspnetcore/pull/55707#discussion_r1608993615)). To allow for such a configuration to be added the public facing API of `LdapSettings` needs to be changed.\r\n\r\n## Proposed API\r\n\r\nsrc/Security/Authentication/Negotiate/src/LdapSettings.cs\r\n```diff\r\n@@ -16,6 +16,14 @@ public class LdapSettings\r\n     /// This is mainly used on Linux.\r\n     /// \u003c/summary\u003e\r\n     public bool EnableLdapClaimResolution { get; set; }\r\n+    \r\n+    /// \u003csummary\u003e\r\n+    /// Configure whether the SID claims should be resolved when \r\n+    /// EnableLdapClaimResolution is true and the LDAP connection \r\n+    /// is used to resolve claims.\r\n+    /// This is mainly used on Linux.\r\n+    /// \u003c/summary\u003e\r\n+    public bool EnableLdapSIDClaimResolution { get; set; }\r\n \r\n     /// \u003csummary\u003e\r\n     /// The domain to use for the LDAP connection. This is a mandatory setting.\r\n```\r\n\r\nand\r\n\r\nsrc/Security/Authentication/Negotiate/src/PublicAPI.Shipped.txt\r\n```diff\r\n@@ -24,6 +24,8 @@ Microsoft.AspNetCore.Authentication.Negotiate.LdapSettings.Domain.get -\u003e string!\r\n Microsoft.AspNetCore.Authentication.Negotiate.LdapSettings.Domain.set -\u003e void\r\n Microsoft.AspNetCore.Authentication.Negotiate.LdapSettings.EnableLdapClaimResolution.get -\u003e bool\r\n Microsoft.AspNetCore.Authentication.Negotiate.LdapSettings.EnableLdapClaimResolution.set -\u003e void\r\n+Microsoft.AspNetCore.Authentication.Negotiate.LdapSettings.EnableLdapSIDClaimResolution.get -\u003e bool\r\n+Microsoft.AspNetCore.Authentication.Negotiate.LdapSettings.EnableLdapSIDClaimResolution.set -\u003e void\r\n Microsoft.AspNetCore.Authentication.Negotiate.LdapSettings.IgnoreNestedGroups.get -\u003e bool\r\n Microsoft.AspNetCore.Authentication.Negotiate.LdapSettings.IgnoreNestedGroups.set -\u003e void\r\n Microsoft.AspNetCore.Authentication.Negotiate.LdapSettings.LdapConnection.get -\u003e System.DirectoryServices.Protocols.LdapConnection?\r\n```\r\n\r\n## Usage Examples\r\n\r\nSimply enable the optional SID claim resolution by setting the option at initialization.\r\n```csharp\r\nbuilder.Services.AddAuthentication(NegotiateDefaults.AuthenticationScheme)\r\n   .AddNegotiate(options =\u003e\r\n   {\r\n       if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))\r\n       {\r\n           options.EnableLdap(settings =\u003e\r\n           {\r\n               settings.Domain = \"contoso.com\";\r\n               settings.EnableLdapSIDClaimResolution = true;\r\n           });\r\n       }\r\n   });\r\n```\r\n\r\n## Alternative Designs\r\n\r\nAlternatively the option may be included in `EnableLdap`as optional parameter in `NegotiateOptions`:\r\n```csharp\r\nEnableLdap(string domain, bool enableLdapSIDClaimResolution = false)\r\n```\r\n\r\nwhich would result in the following usage example:\r\n\r\n```csharp\r\nbuilder.Services.AddAuthentication(NegotiateDefaults.AuthenticationScheme)\r\n    .AddNegotiate(options =\u003e\r\n    {\r\n        if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))\r\n        {\r\n            options.EnableLdap(\"contoso.com\", true);\r\n        }\r\n    });\r\n```\r\n\r\n## Risks\r\n\r\nApart from not duplicating nested group claims, the added SID claims should not cause breaking changes. However, there will be a performance impact, both due to the additional LDAP queries, but also due to the increased storage demand. Nevertheless, the SID resolution is default on Windows and this change would allow to write more portable code. Furthermore, the overhead can be avoided when disabling the resolution using the newly added option proposed here.\r\n\r\n",
                                           "updatedAt":  "2024-06-27T10:47:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86Csb37",
                                           "createdAt":  "2024-06-26T21:53:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \"champion\" this change in the meeting, and they understand the impact and design of the change.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-26T21:53:16Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Group claim duplication when using Negotiate authentication on Linux AD domain member with LDAP",
        "labels":  [
                       "api-suggestion",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/55766",
        "createdAt":  "2024-05-17T11:44:12Z",
        "number":  55766,
        "author":  "ShadedBlink",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3-X5w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ShadedBlink",
                                            "createdAt":  "2024-05-17T11:55:15Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-06-24T16:38:59Z",
        "body":  "## Background and Motivation\r\n\r\nI believe there are many different web applications that support more than one authentication mode as default like \"if there is an API-key specified, use it, otherwise fallback to cookies\". I had such services in development and had an urge to know current user for logging purposes before authorization takes places and cancells requests with 403. It instantly comes to mind that best place for such middleware is between `app.UseAuthentication()` and `app.UseAuthorization()` steps, but the main problem is that you can specify multiple default authentication schemes only for authorization scheme, i.e. authentication step can handle only single authentication scheme(cookies in our case), while API-key is considered only on authorization step.\r\n\r\n## Proposed API\r\n\r\nThe idea is to allow specifying exact list of authentication schemes in middleware so they are handled in same way as they are handled in authorization.\r\n```diff\r\nnamespace Microsoft.AspNetCore.Builder;\r\n\r\npublic static class AuthAppBuilderExtensions\r\n{\r\n+    public static IApplicationBuilder UseAuthentication(this IApplicationBuilder app, params string[] schemes);\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\n```csharp\r\n     app.UseAuthentication(\"api-key\", \"cookies\");\r\n```\r\nIn given case this middleware should first challenge \"api-key\" scheme. If it succeeds, then step is finished, otherwise fallback to \"cookies\". This overload is not supposed to consider default authentication scheme since all schemes are specified explicitly, i.e. if default authentication scheme is \"jwt\", then only \"api-key\" and \"cookies\" are used, \"jwt\" is ignored since it is not specified. If default scheme is among the specified schemes, then it should be applied exactly in order as it is specified in schemes list. I.e. being a default scheme doesn\u0027t interfere in any way with this middleware.\r\n\r\nAlso this approach should work better with branched middleware chains since you can specify exact auth scheme to reach them. Like in main branch you use scheme \"cookies\", for health or prometheus branch you use scheme \"api-key\". Current approach doesn\u0027t support any configuration for middleware.\r\n\r\n## Risks\r\n\r\nSince this overload is optional and new, it is not supposed to break anything.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOglqwig==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85-k3K-",
                                           "createdAt":  "2024-05-21T23:32:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "If we were to do this, I think the natural place for it would be in `AuthenticationOptions` alongside `DefaultScheme`, `DefaultAuthenticateScheme`, `DefaultChallengeScheme`, etc... In theory, we could try to make plural versions of all of those. I\u0027m not sure it\u0027s a good idea though.\r\n\r\n\u003e the main problem is that you can specify multiple default authentication schemes only for authorization scheme, i.e. authentication step can handle only single authentication scheme(cookies in our case), while API-key is considered only on authorization step.\r\n\u003e\r\n\u003e ## Proposed API\r\n\u003e\r\n\u003e The idea is to allow specifying exact list of authentication schemes in middleware so they are handled in same way as they are handled in authorization.\r\n\r\nIf it\u0027s handled the same way we handle multiple schemes specified as part of the authorization policy, we\u0027d merge together ClaimsPrincipals rather than take the first successful result.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/c64f36d2c7433de43d8fbf24d59887f829015687/src/Security/Authorization/Policy/src/PolicyEvaluator.cs#L36-L52\r\n\r\nI don\u0027t think merging ClaimsPrincipals is necessarily wrong, but most of the time it probably is probably unessary. I\u0027m not sure it\u0027s logic we want to copy to more places. At least authorization polices are usually isolated to particular endpoints where they can specify a subset of globally supported authentication schemes. And usually, it\u0027s just one.\r\n\r\nIf you set both a cookie and API key as global default authentication handlers, the former will attempt to redirect while the latter will attempt to set a 401 given a challenge. What happens would depend on the order they run in which wouldn\u0027t be very intuitive.\r\n\r\nAn application that needs to support both cookie and API keys for auth would probably be best served registering or configuring a [policy scheme](https://learn.microsoft.com/en-us/aspnet/core/security/authentication/policyschemes?view=aspnetcore-8.0) to indicate what scheme should be used what purpose. \r\n\r\nThis requires a little bit more code than just providing an array of scheme names, but it gives far more precise control over how to combine the authentication schemes. For example:\r\n\r\n```csharp\r\n.AddPolicyScheme(\"B2C_OR_AAD\", \"B2C_OR_AAD\", options =\u003e\r\n{\r\n    options.ForwardDefaultSelector = context =\u003e\r\n    {\r\n        string authorization = context.Request.Headers[HeaderNames.Authorization];\r\n        if (!string.IsNullOrEmpty(authorization) \u0026\u0026 authorization.StartsWith(\"Bearer \"))\r\n        {\r\n            var token = authorization.Substring(\"Bearer \".Length).Trim();\r\n            var jwtHandler = new JwtSecurityTokenHandler();\r\n\r\n            return (jwtHandler.CanReadToken(token) \u0026\u0026 jwtHandler.ReadJwtToken(token).Issuer.Equals(\"B2C-Authority\"))\r\n                ? \"B2C\" : \"AAD\";\r\n        }\r\n        return \"AAD\";\r\n    };\r\n});\r\n```\r\n\r\nhttps://learn.microsoft.com/en-us/aspnet/core/security/authorization/limitingidentitybyscheme?view=aspnetcore-8.0#use-multiple-authentication-schemes",
                                           "updatedAt":  "2024-05-21T23:32:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86CWrCK",
                                           "createdAt":  "2024-06-24T16:37:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ShadedBlink",
                                           "body":  "@halter73 , actually this doesn\u0027t have to go along with any existing code since this middleware is supposed to be new. Existing one is expected to use only default scheme and I don\u0027t want to interrupt it in any way.\r\nFor the challenge case we can just provide another parameter to configure challenge order/options.\r\nAlso I want to note that this middleware has to be configured in middleware chain or atleast we need a way to specify policy there. Thus we can write something like this:\r\n```csharp\r\napp.UseCompanyHangfire(\"/hangfire\");\r\napp.UseCompanyHealth(\"/health\");\r\n```\r\nBoth these methods are branched with personal `app.UseAuthentication(\"company-sms-token\");`. In this example both middleware endpoints can use their own authentication schemes without any conflicts between each other and outer logic. For example, company may have both these methods protected under SMS-authentication available internally right out-of-the-box as nuget package. Thus these middlewares will definitely use such authentication, while rest of the application is covered by default cookie authentication.",
                                           "updatedAt":  "2024-06-24T16:38:59Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Allow specifying exact authentication schemes in AuthenticationMiddleware.",
        "labels":  [
                       "enhancement",
                       "api-suggestion",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/55973",
        "createdAt":  "2024-05-30T15:02:59Z",
        "number":  55973,
        "author":  "vanillajonathan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7f7xQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "joegoldman2",
                                            "createdAt":  "2024-05-30T17:27:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "iKingNinja",
                                            "createdAt":  "2024-10-02T10:26:44Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-05-30T16:35:34Z",
        "body":  "## Background and Motivation\r\n\r\nMake it easy to restrict access to a resource to authenticated users carrying a scope in their claims.\r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace Microsoft.AspNetCore.Authorization;\r\n\r\npublic class AuthorizeAttribute : Attribute, Microsoft.AspNetCore.Authorization.IAuthorizeData\r\n{\r\n+    /// \u003csummary\u003e\r\n+    /// Gets or sets the scope name that determines access to the resource.\r\n+    /// \u003c/summary\u003e\r\n+    public string? Scope { get; set; }\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\n```csharp\r\n[Authorize(Scope = \"read:project\")]\r\npublic class HomeController : Controller\r\n{\r\n}\r\n```\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Add a `Scope` property to the `Authorize` attribute",
        "labels":  [
                       "enhancement",
                       "api-suggestion",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/56272",
        "createdAt":  "2024-06-17T16:46:46Z",
        "number":  56272,
        "author":  "etiennelepagel",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7PDsw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andrearossiavanade",
                                            "createdAt":  "2024-08-12T10:01:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stanislavpotapenko561",
                                            "createdAt":  "2024-09-05T09:21:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dp-sgr",
                                            "createdAt":  "2024-09-23T13:35:38Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-06-18T18:02:37Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nWe would need a CancellationToken in our AuthorizationHandlers.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nAs discussed in previous issues (https://github.com/dotnet/aspnetcore/issues/2746 \u0026 https://github.com/aspnet/Security/issues/1598) a non-breaking way of doing this would be to add the CancellationToken in the AuthorizationHandlerContext.\r\n\r\nA work around we have for now  it to get the ctx from the HttpContextAccessor.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgb1rpw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86Bu3lB",
                                           "createdAt":  "2024-06-18T16:47:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiJDGg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "etiennelepagel",
                                                                               "createdAt":  "2024-06-18T17:02:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "enchart",
                                                                               "createdAt":  "2025-09-13T14:26:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "halter73",
                                           "body":  "\u003e A work around we have for now it to get the ctx from the HttpContextAccessor.\r\n\r\nYou can also use `(AuthorizationHandlerContext.Resource as HttpContext).RequestAborted` for this in the meantime.\r\n\r\nhttps://learn.microsoft.com/en-us/dotnet/core/compatibility/aspnet-core/5.0/authorization-resource-in-endpoint-routing",
                                           "updatedAt":  "2024-06-18T16:47:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86BvC1b",
                                           "createdAt":  "2024-06-18T17:13:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "etiennelepagel",
                                           "body":  "\u003e \u003e A work around we have for now it to get the ctx from the HttpContextAccessor.\r\n\u003e \r\n\u003e You can also use `(AuthorizationHandlerContext.Resource as HttpContext).RequestAborted` for this in the meantime.\r\n\u003e \r\n\u003e https://learn.microsoft.com/en-us/dotnet/core/compatibility/aspnet-core/5.0/authorization-resource-in-endpoint-routing\r\n\r\n@halter73 \r\n\r\nWhy not expose the entire HttpContext explicitly in the AuthorizationHandlerContext? Is the AuthorizationHandler ever used outside of an HTTP request context?",
                                           "updatedAt":  "2024-06-18T17:13:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86BvWun",
                                           "createdAt":  "2024-06-18T18:02:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODmIhhw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "etiennelepagel",
                                                                               "createdAt":  "2024-06-18T18:12:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "halter73",
                                           "body":  "Yes. One example is Blazor WebAssembly. Microsoft.AspNetCore.Authorization does not have a dependency on Microsoft.AspNetCore.Http.Abstractions.\r\n\r\nIt would be more feasible to add a CancellationToken to AuthorizationHandlerContext like you suggest. If not for the Microsoft.AspNetCore.Authorization NuGet package which supports netstandard2.0 and net462, we could also consider a new IAuthorizationHandler.HandleAsync overload that takes a CancellationToken parameter directly with a [default implementation](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/default-interface-methods) that drops it.\r\n\r\nIt\u0027s not a high priority given the workaround, but we recognize that it\u0027s not discoverable.",
                                           "updatedAt":  "2024-06-18T18:02:36Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Add support for CancellationToken in AuthorizationHandler or AuthorizationHandlerContext",
        "labels":  [
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/57023",
        "createdAt":  "2024-07-26T15:00:06Z",
        "number":  57023,
        "author":  "olejsc",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-08T17:59:13Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nThe application I work with utilizes two seperate authentication schemes:\r\n- Microsoft entra id for internal users + Cookie\r\n- An external OIDC identity provider for external users + Cookie \r\n\r\nRegarding routing, this is the general structure:\r\n\r\n- **In addition**, any blazor page whose path starts with \"/internal\" is authorized on page with custom authorization policies to check for specific claims, for example  `...RequireClaim(ctx=\u003e ctx.FindFirst(InternalUserIdClaimType) is not null)`\r\n- **Same goes for internal users.** \r\n- For authenticated users, they simply dont use the same paths/route in the application. \r\nHowever, they share the same entry point, route (\"/\"), which is the landing page for the application. This is configured with `[AllowAnonymous]`. \r\n\r\nI\u0027ve followed the instructions here for configuring multiple policy schemes:\r\nhttps://learn.microsoft.com/en-us/aspnet/core/security/authentication/policyschemes?view=aspnetcore-8.0\r\n\r\nMy configuration looks something like this:\r\n##Configuration \r\n### Authentication:\r\n```cs             \r\nservices.AddAuthentication(opts =\u003e\r\n            {\r\n                opts.DefaultScheme = \"multischeme\";\r\n            })\r\n            .AddPolicyScheme(\"multischeme\", \"Internal or External\", opts =\u003e\r\n            {\r\n                opts.ForwardDefaultSelector = ctx =\u003e\r\n                {\r\n                    if (ctx.Request.Path.StartsWithSegments(\"/auth/internal\") || ctx.Request.Path.StartsWithSegments(\"/internal/somepage\") )\r\n                    {\r\n                       return \"InternalScheme\";\r\n                    }\r\n                    // Does not allowed undefined, so we have to return one of the schemes\r\n                    return \"ExternalScheme\";\r\n                };\r\n            })\r\n           .AddOpenIdConnect(\"InternalScheme\", \"Internal auth scheme\", options =\u003e\r\n            {\r\n                options.SignInScheme = \"InternalCookieScheme\";   // \u003c---- CUSTOM COOKIE SCHEME\r\n                options.Authority = \"xxxxxxxxx\";\r\n                options.ClientId = \"xxxxxxxxxxxxx\";\r\n                options.ClientSecret = \"xxxxxxxxxx\";\r\n                options.CallbackPath = new PathString(\"/xxxx/return\");\r\n                options.ResponseType = \"code\";\r\n                options.RequireHttpsMetadata = true;\r\n                options.Events = new OpenIdConnectEvents\r\n                {\r\n                    OnTokenValidated = ctx =\u003e\r\n                    {\r\n                        // abbreviated, reading some claims, adding some custom claims to a new custom identity\r\n                        // custom claim is used to authorize internal users\r\n                        return Task.CompletedTask;\r\n                    }\r\n                };\r\n            })           \r\n         .AddCookie(\"InternalCookieScheme\", \"Internal auth cookie scheme\", options =\u003e\r\n            {\r\n                options.Cookie.Name = \"InternalAuthCookie\";\r\n                // abbreviated...\r\n            })            \r\n            .AddOpenIdConnect(\"ExternalScheme\", \"External auth scheme\", options =\u003e\r\n            {\r\n                options.SignInScheme = \"ExternalCookieScheme\"; // \u003c---- CUSTOM COOKIE SCHEME \r\n                options.Authority = \"XXXXXXXXXXXXX\";\r\n                options.ClientId = \"xxxxxx\";\r\n                options.ClientSecret = \"xxxxx\";\r\n                options.CallbackPath = new PathString(\"/xxxxxx/callback\");\r\n                options.ResponseType = \"code\";\r\n                options.Scope.Clear();\r\n                options.Scope.Add(\"openid\");\r\n                options.RequireHttpsMetadata = true;\r\n                options.Events = new OpenIdConnectEvents\r\n                {\r\n                    OnTokenValidated = async ctx =\u003e\r\n                    {\r\n                        // abbreviated, reading some claims, adding some custom claims to a new custom identity\r\n                        // custom claim is used to authorize external users\r\n                        return Task.CompletedTask;\r\n                    }\r\n                };\r\n            })\r\n            .AddCookie(\"ExternalCookieScheme\", \"External auth cookie scheme\", options =\u003e\r\n            {\r\n                options.Cookie.Name = \"ExternalAuthCookie\";\r\n                // abbreviated...\r\n            });\r\n```\r\n### Authorization:\r\n\r\n```cs\r\nservices.AddAuthorization(config =\u003e\r\n{\r\n    // INTERNAL user policies\r\n    config.AddPolicy(PolicyNames.IS_INTERNAL_USER,\r\n        policy =\u003e\r\n        {\r\n            policy.AddRequirements(new IsInternalUserRequirement());\r\n        });\r\n    // EXTERNAL user policies\r\n    config.AddPolicy(PolicyNames.IS_EXTERNAL_USER,\r\n        policy =\u003e\r\n        {\r\n            policy.AddRequirements(new IsExternalUserRequirement());\r\n        });\r\n});\r\n```\r\n In summary, I have one combined scheme (\"Multischeme\") that wraps around \"InternalScheme\" and \"Externalscheme\", which both respectively connects to \"InternalCookieScheme\" and \"ExternalCookieScheme\".\r\n \r\n ### Endpoints \r\n In addition, i have 2 controller endpoints for each specific scheme: \r\n - /auth/external/login\r\n - /auth/external/signout\r\n - /auth/internal/login\r\n - /auth/internal/signout\r\n \r\n ### Main configuration (program.cs):\r\n - Auth handlers are registered earlier\r\n - Controllers are added \r\n![image](https://github.com/user-attachments/assets/b0af60ca-314c-4338-81a6-bfa2005649e0)\r\n\r\n ### Routes.Razor:\r\n - Has AuthorizeRouteView\r\n![image](https://github.com/user-attachments/assets/c7a693d8-f186-459c-9231-9fe66e8bf753)\r\n\r\n ### App.Razor:\r\n \r\n![image](https://github.com/user-attachments/assets/c2d02204-b04d-404b-9a0f-fcec35c1e29a)\r\n\r\n \r\n As long as \"ExternalScheme\" is the default scheme, I can sign in / sign-out with the external OIDC provider and authorize just fine with it.\r\n However, I cant authorize with internal user. I manage to sign in with it, Cookie gets set with values, but under `...context.User.Identittes`there is no user with those claims available in authorization. \r\n \r\n Appreciate any help with this. I\u0027m stomped! 😣 \r\n \r\n\n\n### Expected Behavior\n\nThe claims from both schemes should be available when signing in. \r\nAuthhandlers should be able to find the claims for both signed in schemes when executing authorization handlers  \u0026 requirements. \r\nOnly the default identity provided from the default scheme seems to be available when dooing authorization (both in authorizationhandlers, but also in controllers!)\n\n### Steps To Reproduce\n\nUnfortunately i\u0027m not at liberty to expose the external providers provided. I hope the code i\u0027ve provided will be sufficient to reproduce the issue.\n\n### Exceptions (if any)\n\nNone. \n\n### .NET Version\n\n8.0.303\n\n### Anything else?\n\nAnother person on stackover flow seems to have a similar issue (unresolved). He only used a single oidc, but seemed to want another cookie. \r\nhttps://stackoverflow.com/questions/78533634/asp-net-core-blazor-multiple-authentication-schemes-oidc-custom-cookies\r\n\r\ndotnet info output:\r\n![image](https://github.com/user-attachments/assets/04b972e3-7def-46e9-99e1-243d2b2982c9)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwr-ncQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86GSYVl",
                                           "createdAt":  "2024-07-26T15:08:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "olejsc",
                                           "body":  "Some things i\u0027ve tried:\r\n\r\n- That both auth schemes map to same cookie. \r\n- To use the `.RequireAuthorization (config=\u003e config.addPolicySchemes(Multischeme)` for the app. I\u0027ve found that this creates other issues..\r\n- Disabled one scheme entirely (works fine with one auth scheme + one cookie scheme just fine). \r\n- Attempted to do `context.SignInAsync(\"NON-defaultscheme\") in controllers as I cant get the auth state available for whichever schema is *not* defaulted. so, for internalSchema: auth/internal/login --\u003e Cant find claims/ identity to the internal user since externalscheme is default.... \r\n- Swapped the default scheme to ensure claims actually gets set and is configured right with respect to the identity providers. ✅",
                                           "updatedAt":  "2024-07-26T15:08:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86GdY0A",
                                           "createdAt":  "2024-07-29T12:51:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "olejsc",
                                           "body":  "This seems to be releated to the part of the issue described here at first glance:\r\n#50122 \r\nEssentually, whatever is default will make any 2nd scheme not work. ",
                                           "updatedAt":  "2024-07-29T12:51:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86GeHIA",
                                           "createdAt":  "2024-07-29T14:05:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "olejsc",
                                           "body":  "I managed to find a workaround by using this in `program.cs`:\r\n\r\n```cs\r\napp.MapRazorComponents\u003cApp\u003e()\r\n    .RequireAuthorization(new AuthorizeAttribute() { AuthenticationSchemes = \"externalScheme\" })\r\n    .RequireAuthorization(new AuthorizeAttribute() { AuthenticationSchemes = \"\"internalScheme\"\" })\r\n    .AllowAnonymous()\r\n    .AddInteractiveServerRenderMode();\r\n```\r\n\r\nand in serviceregistration for authentication:\r\n\r\n```cs \r\n            services.AddAuthentication(opts =\u003e\r\n            {\r\n                opts.DefaultChallengeScheme = \"undefined\"; \u003c -- This scheme doesn\u0027t actually exist.\r\n                opts.DefaultScheme = \"default\";     \u003c -- This scheme doesn\u0027t actually exist.\r\n            })\r\n            // internal \u0026 external scheme registered as defined, we dont register \"multischeme\"\r\n```\r\n\r\nThis is nowhere near what the documentation for multiple schemes state. I\u0027m not even sure this is a good approach on how to do it, or if it has any serious drawbacks. Auth handlers seems to fire for every blazor request now (blazor.web.js for example), but since we have allowanonymous it passes. \r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2024-07-29T14:05:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86Gfke1",
                                           "createdAt":  "2024-07-29T16:48:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "Let\u0027s use this issue to track updating the docs to clarify the behavior in this area.\r\n\r\nIn .NET 10, we could consider making the experience better by throwing a descriptive error message for this case.",
                                           "updatedAt":  "2024-07-29T16:48:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86GkRPv",
                                           "createdAt":  "2024-07-30T07:24:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "olejsc",
                                           "body":  "@MackinnonBuck \r\nWhat exsactly would that error message be ? Isn\u0027t multiple auth schemes intended to be supported ? \r\n",
                                           "updatedAt":  "2024-07-30T07:24:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86G1lb0",
                                           "createdAt":  "2024-08-01T06:57:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "olejsc",
                                           "body":  "it turns out this part isn\u0027t nescesarry:\r\n\r\n```cs \r\n            services.AddAuthentication(opts =\u003e\r\n            {\r\n                opts.DefaultChallengeScheme = \"undefined\"; \u003c -- This scheme doesn\u0027t actually exist.\r\n                opts.DefaultScheme = \"default\";     \u003c -- This scheme doesn\u0027t actually exist.\r\n            })\r\n```\r\n\r\nYou can just get away with adding empty authenticaiton configuration + the internal/external scheme and their respective cookies. \r\n\r\n```cs \r\n            services.AddAuthentication()\r\n                        .AddOpenIdConnect(\"external\"...)\r\n                        .AddCookie(\"externalcookie\"...)\r\n                        .AddOpenIdConnect(\"internal\"...)\r\n                        .AddCookie(\"internalCookie\"...)\r\n```",
                                           "updatedAt":  "2024-08-01T06:57:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde861a_D_",
                                           "createdAt":  "2025-07-07T07:14:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ArcherTrister",
                                           "body":  "I had the same issue, but when I used `services.ConfigureApplicationCookie` instead of `services.AddAuthentication().AddPolicyScheme`, it worked well.",
                                           "updatedAt":  "2025-07-07T07:14:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87Cvk9q",
                                           "createdAt":  "2025-09-08T17:29:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "We should document that authentication scheme challenges don\u0027t happen during interactive navigation.\n\n@javiercn do you think there\u0027s anything we should do to enable this scenario (e.g., refresh the page to force a challenge)?",
                                           "updatedAt":  "2025-09-08T17:29:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87Cv6dx",
                                           "createdAt":  "2025-09-08T17:59:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "\u003e do you think there\u0027s anything we should do to enable this scenario (e.g., refresh the page to force a challenge)?\n\nWe could consider making the changes in #63365 as part of the overall Blazor Authz changes in .NET 11. I don\u0027t think fixing that issue would directly fix this issue, since this issue doesn\u0027t involve attributes on the Blazor Component pages, but it would bring Blazor authz behavior more in line with what happens for normal endpoint authorization handled by middleware.\n\nI think refreshing the page when we get a failed AuthorizationResult for an unauthenticated user could fix this issue, but we\u0027ll need to be careful not to allow infinite redirects somehow. We could go further and try running the IPolicyEvaluator, but that probably isn\u0027t a good idea with a stale HttpContext that you can no longer set headers on.\n\nUnfortunately, I\u0027m not sure if we can make refreshing the default behavior without breaking a bunch of people who basically manually do the challenge in their `\u003cNotAuthorized\u003e` section. And I\u0027m not sure it\u0027s worth changing behavior unless it\u0027s the default, since I doubt people running into this issue would know to opt-in to new behavior.",
                                           "updatedAt":  "2025-09-08T17:59:13Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Net 8 Blazor Web App (Interactive server w/ prerendering ) - multiple schemes doesn\u0027t work",
        "labels":  [
                       "Docs",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/57393",
        "createdAt":  "2024-08-18T18:44:35Z",
        "number":  57393,
        "author":  "iKingNinja",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-22T18:01:30Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI\u0027m having the same problem reported in #17539. The `AddScheme\u003cTOptions,THandler\u003e(String, Action\u003cTOptions\u003e)` method is not setting the options\u0027 values.\r\n\r\n```cs\r\npublic class ApiKeyAuthenticationOptions : AuthenticationSchemeOptions\r\n{\r\n    public string ApiKey { get; set; } = null!;\r\n}\r\n```\r\n\r\n```cs\r\npublic class ApiKeyAuthenticationHandler : AuthenticationHandler\u003cApiKeyAuthenticationOptions\u003e\r\n{\r\n    public ApiKeyAuthenticationHandler(IOptionsMonitor\u003cApiKeyAuthenticationOptions\u003e options,\r\n        ILoggerFactory logger,\r\n        UrlEncoder encoder) : base(options, logger, encoder)\r\n    {\r\n        if (Options.ApiKey == null) throw new ArgumentNullException(nameof(Options.ApiKey)); // NullReferenceException\r\n    }\r\n\r\n    protected override async Task\u003cAuthenticateResult\u003e HandleAuthenticateAsync()\r\n    {\r\n        // Validate API key\r\n        \r\n        if (!Request.Headers.TryGetValue(\"x-api-key\", out var key)) return AuthenticateResult.Fail(\"Missing API key\");\r\n        if (key != Options.ApiKey) return AuthenticateResult.Fail(\"Invalid API key\");\r\n\r\n        return AuthenticateResult.Success(new AuthenticationTicket(new ClaimsPrincipal(), Scheme.Name));\r\n    }\r\n}\r\n```\r\n\r\nThe handler throws a `NullReferenceException` exception with the following details\r\n```\r\nSystem.NullReferenceException: \u0027Object reference not set to an instance of an object.\u0027\r\n\r\nMicrosoft.AspNetCore.Authentication.AuthenticationHandler\u003cTOptions\u003e.Options.get returned null.\r\n```\r\n\r\nThis is how i\u0027m configuring the scheme:\r\n```cs\r\nbuilder.Services.AddAuthentication(options =\u003e\r\n{\r\n    options.DefaultAuthenticateScheme = ApiKeyAuthenticationDefaults.AuthenticationScheme;\r\n    options.DefaultChallengeScheme = ApiKeyAuthenticationDefaults.AuthenticationScheme;\r\n})\r\n    .AddScheme\u003cApiKeyAuthenticationOptions, ApiKeyAuthenticationHandler\u003e(ApiKeyAuthenticationDefaults.AuthenticationScheme, options =\u003e\r\n    {\r\n        options.ApiKey = configuration[\"ApiKey\"] ?? throw new Exception(\"No API key was configured\");\r\n    });\r\n```\r\n\r\nI even tried another approach which follows:\r\n```cs\r\nbuilder.Services.AddAuthentication(options =\u003e\r\n{\r\n    options.DefaultAuthenticateScheme = ApiKeyAuthenticationDefaults.AuthenticationScheme;\r\n    options.DefaultChallengeScheme = ApiKeyAuthenticationDefaults.AuthenticationScheme;\r\n})\r\n    .AddScheme\u003cApiKeyAuthenticationOptions, ApiKeyAuthenticationHandler\u003e(ApiKeyAuthenticationDefaults.AuthenticationScheme, _ =\u003e { });\r\n\r\nbuilder.Services.Configure\u003cApiKeyAuthenticationOptions\u003e(options =\u003e\r\n{\r\n    options.ApiKey = configuration[\"ApiKey\"] ?? throw new Exception(\"No API key was configured\");\r\n});\r\n```\r\nHowever there\u0027s no change in the error.\r\n\r\nOf course both the previous configuration code blocks are followed by\r\n```cs\r\napp.UseAuthentication();\r\napp.UseAuthorization();\r\n```\r\n\r\nI\u0027m sure `configuration[\"ApiKey\"]` is not null as its logged value is correct.\n\n### Expected Behavior\n\nI expect the `AddScheme()` method to set options values.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.400\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiRK_hg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86I6VLF",
                                           "createdAt":  "2024-08-19T16:40:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "The `AuthenticationHandler\u003cTOptions\u003e` constructor doesn\u0027t initialize `Options` because it doesn\u0027t have the scheme name yet. It\u0027s initialized after the authentication middleware calls `InitializeAsync`.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/987dbfb60798183912f52d0769272619b6d7ad7d/src/Security/Authentication/Core/src/AuthenticationHandler.cs#L147-L155\r\n\r\nIf you need access to `Options` while initializing your handler, we recommend overriding `InitializeHandlerAsync` where `Options` should be initialized. Does this address your issue?",
                                           "updatedAt":  "2024-08-19T16:40:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86I7BAS",
                                           "createdAt":  "2024-08-19T18:22:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODu9rSQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Rick-Anderson",
                                                                               "createdAt":  "2024-08-20T18:51:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "iKingNinja",
                                           "body":  "Yes, this indeed solves the issue. It would be nice if this was mentioned in the docs. Thank you for the help.",
                                           "updatedAt":  "2024-08-19T18:22:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86JDLWZ",
                                           "createdAt":  "2024-08-20T16:49:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "@guardrex, we think we should update the docs to include this scenario - is there enough context on this issue for you to add a bit about `InitializeHandlerAsync`?",
                                           "updatedAt":  "2024-08-20T16:49:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86JDOaE",
                                           "createdAt":  "2024-08-20T16:56:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "guardrex",
                                           "body":  "Yes, but this isn\u0027t Blazor specific, so it would map to either @mjrousos (the listed author of the overview security article) and/or @Rick-Anderson, the listed MS author.",
                                           "updatedAt":  "2024-08-20T16:56:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86JEB-t",
                                           "createdAt":  "2024-08-20T18:51:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rick-Anderson",
                                           "body":  "@iKingNinja could you write the simplest possible app to demonstrate this for https://github.com/dotnet/AspNetCore.Docs.Samples/issues/258 and then outline the context for https://github.com/dotnet/AspNetCore.Docs/issues/33405 ?",
                                           "updatedAt":  "2024-08-20T18:51:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86JERaE",
                                           "createdAt":  "2024-08-20T19:22:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iKingNinja",
                                           "body":  "@Rick-Anderson Sorry I\u0027m new to these things, do you want me to write a simple app that throws the exception and create a pull request to https://github.com/dotnet/AspNetCore.Docs.Samples/issues/258?",
                                           "updatedAt":  "2024-08-20T19:22:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86JEr-G",
                                           "createdAt":  "2024-08-20T20:28:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rick-Anderson",
                                           "body":  "@iKingNinja \r\n\u003e @Rick-Anderson Sorry I\u0027m new to these things, do you want me to write a simple app that throws the exception and create a pull request to [dotnet/AspNetCore.Docs.Samples#258](https://github.com/dotnet/AspNetCore.Docs.Samples/issues/258)?\r\n\r\n\r\nTo access the `Options` while initializing your handler, override the `InitializeHandlerAsync` where `Options` should be initialized. \r\n\r\nIs that the typical way to solve the problem? If so, write a sample that does that.",
                                           "updatedAt":  "2024-08-20T22:19:57Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "AddScheme() doesn\u0027t configure options",
        "labels":  [
                       "Docs",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/57586",
        "createdAt":  "2024-08-29T08:31:58Z",
        "number":  57586,
        "author":  "saberone",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODE25Og==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "joemcbride",
                                            "createdAt":  "2025-06-26T12:39:27Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-11-20T09:11:11Z",
        "body":  "I have some strange behavior when using OpenIdConnect authentication. Everything works fine, but as soon as I reference the Microsoft.IdentityModel.Tokens.Saml 8.0.2 (i also tried older versions) I got the following exception. This exceptions happens on the \"way back\" from de identity provider (POST on signin-oidc).\r\n\r\n```\r\nInvalidOperationException: An invalid request URI was provided. Either the request URI must be an absolute URI or BaseAddress must be set.\r\nSystem.Net.Http.HttpClient.PrepareRequestMessage(HttpRequestMessage request)\r\n\r\nAuthenticationFailureException: An error was encountered while handling the remote login.\r\nMicrosoft.AspNetCore.Authentication.RemoteAuthenticationHandler\u003cTOptions\u003e.HandleRequestAsync()\r\n```\r\n\r\nAnd after investigating I saw that _configuration?.TokenEndpoint is null, at the below line of code, as soon as I run with a reference to Microsoft.IdentityModel.Tokens.Saml nuget package.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/258f8baa683db26ea46a00618a8b9b4d8db764b4/src/Security/Authentication/OpenIdConnect/src/OpenIdConnectHandler.cs#L991\r\n\r\nThe .csproj with packagerefences looks like this:\r\n\r\n```\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk.Web\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cUserSecretsId\u003e7f837761-f406-4779-ac6c-3f1cbd16fb67\u003c/UserSecretsId\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Azure.Identity\" Version=\"1.12.0\" /\u003e\r\n    \u003cPackageReference Include=\"Azure.Security.KeyVault.Certificates\" Version=\"4.6.0\" /\u003e\r\n    \u003cPackageReference Include=\"IdentityModel\" Version=\"7.0.0\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Data.SqlClient\" Version=\"5.2.1\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"8.0.7\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"8.0.7\"\u003e\r\n      \u003cPrivateAssets\u003eall\u003c/PrivateAssets\u003e\r\n      \u003cIncludeAssets\u003eruntime; build; native; contentfiles; analyzers; buildtransitive\u003c/IncludeAssets\u003e\r\n    \u003c/PackageReference\u003e\r\n    \u003cPackageReference Include=\"Microsoft.IdentityModel.Tokens.Saml\" Version=\"8.0.2\" /\u003e\r\n    \u003cPackageReference Include=\"Scrutor\" Version=\"4.2.2\" /\u003e\r\n    \u003cPackageReference Include=\"System.Configuration.ConfigurationManager\" Version=\"8.0.0\" /\u003e\r\n    \u003cPackageReference Include=\"System.Text.RegularExpressions\" Version=\"4.3.1\" /\u003e\r\n    \u003cPackageReference Include=\"Yarp.ReverseProxy\" Version=\"2.1.0\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\" Version=\"8.0.8\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.AspNetCore.Authentication.OpenIdConnect\" Version=\"8.0.8\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.AspNetCore.Authentication.WsFederation\" Version=\"8.0.8\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.ApplicationInsights.AspNetCore\" Version=\"2.22.0\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\nAnd I found that I need to reference Microsoft.IdentityModel.Tokens.Saml in order for WsFederation to work. So that\u0027s the reason that I have reference that package.\r\n\r\nIs there something I should configure/override to make this work, or is this a bug?\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlEtwtQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86KLtdh",
                                           "createdAt":  "2024-08-29T16:38:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "@saberone, could you please provide us with your `\u003cPROJECT_NAME\u003e.deps.json` in the `bin` folder? We think this may be caused by a version mismatch between various `Microsoft.IdentityModel.*` packages.",
                                           "updatedAt":  "2024-08-29T16:38:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86KLwle",
                                           "createdAt":  "2024-08-29T16:43:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "Possibly related: https://github.com/dotnet/aspnetcore/issues/52099",
                                           "updatedAt":  "2024-08-29T16:43:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86KL0kV",
                                           "createdAt":  "2024-08-29T16:49:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "\u003e And I found that I need to reference Microsoft.IdentityModel.Tokens.Saml in order for WsFederation to work. So that\u0027s the reason that I have reference that package.\r\n\r\nCould you clarify why this was necessary? What happens if you don\u0027t reference `Microsoft.IdentityModel.Tokens.Saml`?",
                                           "updatedAt":  "2024-08-29T16:49:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86KL3J5",
                                           "createdAt":  "2024-08-29T16:53:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD7tPyg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kriscremers-anb",
                                                                               "createdAt":  "2024-11-20T09:09:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "\u003e  We think this may be caused by a version mismatch between various Microsoft.IdentityModel.* packages.\r\n\r\ni.e., all `Microsoft.IdentityModel.*` package versions should be `8.0.x`.",
                                           "updatedAt":  "2024-08-29T16:53:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86KNMPU",
                                           "createdAt":  "2024-08-29T19:28:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "The output of `dotnet list package --include-transitive` might be easier to read than the `\u003cPROJECT_NAME\u003e.deps.json` file in the bin directory.",
                                           "updatedAt":  "2024-08-29T19:28:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86KOVbo",
                                           "createdAt":  "2024-08-29T21:13:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEYCmyQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kriscremers-anb",
                                                                               "createdAt":  "2024-11-20T09:11:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "joemcbride",
                                                                               "createdAt":  "2025-06-26T12:35:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "saberone",
                                           "body":  "\u003e @saberone, could you please provide us with your `\u003cPROJECT_NAME\u003e.deps.json` in the `bin` folder? We think this may be caused by a version mismatch between various `Microsoft.IdentityModel.*` packages.\r\n\r\nI have attached the  `\u003cPROJECT_NAME\u003e.deps.json`  file.\r\n[RedactedName.deps.json](https://github.com/user-attachments/files/16806013/RedactedName.deps.json)\r\n\r\nOutput of ```dotnet list package --include-transitive```\r\n\r\n```\r\nProject \u0027\u003cRedacted\u003e\u0027 has the following package references\r\n   [net8.0]:\r\n   Top-level Package                                        Requested   Resolved\r\n   \u003e Azure.Identity                                         1.12.0      1.12.0\r\n   \u003e Azure.Security.KeyVault.Certificates                   4.6.0       4.6.0\r\n   \u003e IdentityModel                                          7.0.0       7.0.0\r\n   \u003e Microsoft.ApplicationInsights.AspNetCore               2.22.0      2.22.0\r\n   \u003e Microsoft.AspNetCore.Authentication.JwtBearer          8.0.7       8.0.7\r\n   \u003e Microsoft.AspNetCore.Authentication.OpenIdConnect      8.0.7       8.0.7\r\n   \u003e Microsoft.AspNetCore.Authentication.WsFederation       7.0.20      7.0.20\r\n   \u003e Microsoft.Data.SqlClient                               5.2.1       5.2.1\r\n   \u003e Microsoft.EntityFrameworkCore.SqlServer                8.0.7       8.0.7\r\n   \u003e Microsoft.EntityFrameworkCore.Tools                    8.0.7       8.0.7\r\n   \u003e Microsoft.IdentityModel.Tokens.Saml                    8.0.2       8.0.2\r\n   \u003e Scrutor                                                4.2.2       4.2.2\r\n   \u003e System.Configuration.ConfigurationManager              8.0.0       8.0.0\r\n   \u003e System.Text.RegularExpressions                         4.3.1       4.3.1\r\n   \u003e Yarp.ReverseProxy                                      2.1.0       2.1.0\r\n\r\n   Transitive Package                                                  Resolved\r\n   \u003e Azure.Core                                                        1.40.0\r\n   \u003e Humanizer.Core                                                    2.14.1\r\n   \u003e Microsoft.ApplicationInsights                                     2.22.0\r\n   \u003e Microsoft.ApplicationInsights.DependencyCollector                 2.22.0\r\n   \u003e Microsoft.ApplicationInsights.EventCounterCollector               2.22.0\r\n   \u003e Microsoft.ApplicationInsights.PerfCounterCollector                2.22.0\r\n   \u003e Microsoft.ApplicationInsights.WindowsServer                       2.22.0\r\n   \u003e Microsoft.ApplicationInsights.WindowsServer.TelemetryChannel      2.22.0\r\n   \u003e Microsoft.AspNetCore.Hosting                                      2.1.1\r\n   \u003e Microsoft.AspNetCore.Hosting.Abstractions                         2.1.1\r\n   \u003e Microsoft.AspNetCore.Hosting.Server.Abstractions                  2.1.1\r\n   \u003e Microsoft.AspNetCore.Http                                         2.1.22\r\n   \u003e Microsoft.AspNetCore.Http.Abstractions                            2.1.1\r\n   \u003e Microsoft.AspNetCore.Http.Extensions                              2.1.1\r\n   \u003e Microsoft.AspNetCore.Http.Features                                2.1.1\r\n   \u003e Microsoft.AspNetCore.WebUtilities                                 2.1.1\r\n   \u003e Microsoft.Bcl.AsyncInterfaces                                     6.0.0\r\n   \u003e Microsoft.CodeAnalysis.Analyzers                                  3.3.3\r\n   \u003e Microsoft.CodeAnalysis.Common                                     4.5.0\r\n   \u003e Microsoft.CodeAnalysis.CSharp                                     4.5.0\r\n   \u003e Microsoft.CodeAnalysis.CSharp.Workspaces                          4.5.0\r\n   \u003e Microsoft.CodeAnalysis.Workspaces.Common                          4.5.0\r\n   \u003e Microsoft.Data.SqlClient.SNI.runtime                              5.2.0\r\n   \u003e Microsoft.EntityFrameworkCore                                     8.0.7\r\n   \u003e Microsoft.EntityFrameworkCore.Abstractions                        8.0.7\r\n   \u003e Microsoft.EntityFrameworkCore.Analyzers                           8.0.7\r\n   \u003e Microsoft.EntityFrameworkCore.Design                              8.0.7\r\n   \u003e Microsoft.EntityFrameworkCore.Relational                          8.0.7\r\n   \u003e Microsoft.Extensions.Caching.Abstractions                         8.0.0\r\n   \u003e Microsoft.Extensions.Caching.Memory                               8.0.0\r\n   \u003e Microsoft.Extensions.Configuration                                3.1.0\r\n   \u003e Microsoft.Extensions.Configuration.Abstractions                   8.0.0\r\n   \u003e Microsoft.Extensions.Configuration.EnvironmentVariables           2.1.1\r\n   \u003e Microsoft.Extensions.Configuration.FileExtensions                 3.1.0\r\n   \u003e Microsoft.Extensions.Configuration.Json                           3.1.0\r\n   \u003e Microsoft.Extensions.DependencyInjection                          8.0.0\r\n   \u003e Microsoft.Extensions.DependencyInjection.Abstractions             8.0.0\r\n   \u003e Microsoft.Extensions.DependencyModel                              8.0.1\r\n   \u003e Microsoft.Extensions.FileProviders.Abstractions                   3.1.0\r\n   \u003e Microsoft.Extensions.FileProviders.Physical                       3.1.0\r\n   \u003e Microsoft.Extensions.FileSystemGlobbing                           3.1.0\r\n   \u003e Microsoft.Extensions.Hosting.Abstractions                         2.1.1\r\n   \u003e Microsoft.Extensions.Logging                                      8.0.0\r\n   \u003e Microsoft.Extensions.Logging.Abstractions                         8.0.0\r\n   \u003e Microsoft.Extensions.Logging.ApplicationInsights                  2.22.0\r\n   \u003e Microsoft.Extensions.ObjectPool                                   2.1.1\r\n   \u003e Microsoft.Extensions.Options                                      8.0.0\r\n   \u003e Microsoft.Extensions.Primitives                                   8.0.0\r\n   \u003e Microsoft.Identity.Client                                         4.61.3\r\n   \u003e Microsoft.Identity.Client.Extensions.Msal                         4.61.3\r\n   \u003e Microsoft.IdentityModel.Abstractions                              8.0.2\r\n   \u003e Microsoft.IdentityModel.JsonWebTokens                             7.1.2\r\n   \u003e Microsoft.IdentityModel.Logging                                   8.0.2\r\n   \u003e Microsoft.IdentityModel.Protocols                                 7.1.2\r\n   \u003e Microsoft.IdentityModel.Protocols.OpenIdConnect                   7.1.2\r\n   \u003e Microsoft.IdentityModel.Protocols.WsFederation                    6.35.0\r\n   \u003e Microsoft.IdentityModel.Tokens                                    8.0.2\r\n   \u003e Microsoft.IdentityModel.Xml                                       8.0.2\r\n   \u003e Microsoft.Net.Http.Headers                                        2.1.1\r\n   \u003e Microsoft.NETCore.Platforms                                       3.1.0\r\n   \u003e Microsoft.NETCore.Targets                                         1.1.3\r\n   \u003e Microsoft.SqlServer.Server                                        1.0.0\r\n   \u003e Mono.TextTemplating                                               2.2.1\r\n   \u003e System.Buffers                                                    4.5.0\r\n   \u003e System.ClientModel                                                1.0.0\r\n   \u003e System.CodeDom                                                    4.4.0\r\n   \u003e System.Collections                                                4.3.0\r\n   \u003e System.Collections.Immutable                                      6.0.0\r\n   \u003e System.Composition                                                6.0.0\r\n   \u003e System.Composition.AttributedModel                                6.0.0\r\n   \u003e System.Composition.Convention                                     6.0.0\r\n   \u003e System.Composition.Hosting                                        6.0.0\r\n   \u003e System.Composition.Runtime                                        6.0.0\r\n   \u003e System.Composition.TypedParts                                     6.0.0\r\n   \u003e System.Diagnostics.Debug                                          4.3.0\r\n   \u003e System.Diagnostics.DiagnosticSource                               6.0.1\r\n   \u003e System.Diagnostics.EventLog                                       8.0.0\r\n   \u003e System.Diagnostics.PerformanceCounter                             6.0.0\r\n   \u003e System.Globalization                                              4.3.0\r\n   \u003e System.IdentityModel.Tokens.Jwt                                   7.1.2\r\n   \u003e System.IO                                                         4.3.0\r\n   \u003e System.IO.FileSystem                                              4.3.0\r\n   \u003e System.IO.FileSystem.AccessControl                                4.7.0\r\n   \u003e System.IO.FileSystem.Primitives                                   4.3.0\r\n   \u003e System.IO.Hashing                                                 7.0.0\r\n   \u003e System.IO.Pipelines                                               6.0.3\r\n   \u003e System.Memory                                                     4.5.4\r\n   \u003e System.Memory.Data                                                1.0.2\r\n   \u003e System.Numerics.Vectors                                           4.5.0\r\n   \u003e System.Reflection                                                 4.3.0\r\n   \u003e System.Reflection.Metadata                                        6.0.1\r\n   \u003e System.Reflection.Primitives                                      4.3.0\r\n   \u003e System.Resources.ResourceManager                                  4.3.0\r\n   \u003e System.Runtime                                                    4.3.1\r\n   \u003e System.Runtime.Caching                                            8.0.0\r\n   \u003e System.Runtime.CompilerServices.Unsafe                            6.0.0\r\n   \u003e System.Runtime.Extensions                                         4.3.0\r\n   \u003e System.Runtime.Handles                                            4.3.0\r\n   \u003e System.Runtime.InteropServices                                    4.3.0\r\n   \u003e System.Security.AccessControl                                     4.7.0\r\n   \u003e System.Security.Cryptography.ProtectedData                        8.0.0\r\n   \u003e System.Security.Principal.Windows                                 4.7.0\r\n   \u003e System.Text.Encoding                                              4.3.0\r\n   \u003e System.Text.Encoding.CodePages                                    6.0.0\r\n   \u003e System.Text.Encoding.Extensions                                   4.3.0\r\n   \u003e System.Text.Encodings.Web                                         8.0.0\r\n   \u003e System.Text.Json                                                  8.0.4\r\n   \u003e System.Threading                                                  4.3.0\r\n   \u003e System.Threading.Channels                                         6.0.0\r\n   \u003e System.Threading.Tasks                                            4.3.0\r\n   \u003e System.Threading.Tasks.Extensions                                 4.5.4\r\n   \u003e System.Xml.ReaderWriter                                           4.3.0\r\n   \u003e System.Xml.XmlDocument                                            4.3.0\r\n```\r\n\r\nAnd after some more debugging, I found out that something went wrong with parsing the json from the  OpenIdConnect discovery endpoint. That issue is fixed in a newer of  Microsoft.IdentityModel.Protocols.OpenIdConnect (8.0.2). And I can fix my issue by explicitly reference the nuget package.\r\n\r\nBut how can I prevent this kind of issues, in that the implicitly referenced (transitive) package is of an older version. I was expecting that by refencing the Microsoft.AspNetCore.Authentication.OpenIdConnect 8.0.8 version that, the Microsoft packages that it depends on would also be in the 8.x.x range.\r\n\r\n",
                                           "updatedAt":  "2024-08-29T21:13:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86US3C1",
                                           "createdAt":  "2024-11-20T09:11:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEYCm0w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "joemcbride",
                                                                               "createdAt":  "2025-06-26T12:35:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "kriscremers-anb",
                                           "body":  "Same issue here. Took us a while to figure out that we should explicitly reference Microsoft.IdentityModel.Protocols.OpenIdConnect because the Authentication.OpenIdConnect package is running behind.",
                                           "updatedAt":  "2024-11-20T09:11:09Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "TokenEndpoint empty when referencing Microsoft.IdentityModel.Tokens.Saml nuget package",
        "labels":  [
                       "Docs",
                       "Needs: Attention :wave:",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/58016",
        "createdAt":  "2024-09-22T12:40:12Z",
        "number":  58016,
        "author":  "martinmine",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODLeNxw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OsirisTerje",
                                            "createdAt":  "2024-09-22T12:45:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jokk-itu",
                                            "createdAt":  "2024-10-12T14:48:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pwelter34",
                                            "createdAt":  "2024-12-03T14:34:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "damienbod",
                                            "createdAt":  "2025-01-14T21:24:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Trinitek",
                                            "createdAt":  "2025-02-20T23:59:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Frulfump",
                                            "createdAt":  "2025-02-27T10:03:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Elkoca",
                                            "createdAt":  "2025-03-19T15:40:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Vlaaaaaaad",
                                            "createdAt":  "2025-08-16T19:06:10Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2025-08-17T11:01:58Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\n_No response_\n\n### Describe the solution you\u0027d like\n\n[Demonstrating Proof of Possession (DPoP) RFC 9449](https://datatracker.ietf.org/doc/html/rfc9449) is a new addition to the OAuth 2.0 framework. It makes it possible for clients to prove that the access token being used actually belongs to the client and not to an attacker. Several identity providers have already implemented DPoP support:\r\n\r\nDuende: https://blog.duendesoftware.com/posts/20230504_dpop/\r\nCurity: https://curity.io/resources/learn/dpop-overview/\r\nOkta: https://www.okta.com/blog/2023/06/a-leap-forward-in-token-security-okta-adds-support-for-dpop/\r\n\r\nThe current option in .NET is to either use Duende libraries, or write your own DPoP-implementation on top of the existing authentication stack in aspnetcore. It would be great if this was a capability that would come together with aspnetcore as DPoP is being more adopted by OAuth applications.\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvmVKxA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86jDbfj",
                                           "createdAt":  "2025-03-19T07:26:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKjE5w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kevinchalet",
                                                                               "createdAt":  "2025-03-19T14:23:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "damienbod",
                                           "body":  "@mikekistler @halter73 @danroth27 \n\nThanks a million for this feature. This would be really be awesome and something we really need in .NET, ASP.NET.  Do you plan to implement the following features of DPoP per default?\n\n- JWT Bearer support (APIs)\n- OIDC support (Web integration)\n\nWe can also validate this against Keycloak and other IDs \n\n@kevinchalet This might be an awesome feature for OpenIddict in .NET 10 :)\n\nPS: Anyone at the MVP summit next week, maybe we can meet up\n\nGreetings Damien",
                                           "updatedAt":  "2025-03-19T07:27:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86jILvA",
                                           "createdAt":  "2025-03-19T14:23:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKyE3A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "damienbod",
                                                                               "createdAt":  "2025-03-19T15:10:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "keegan-caruso",
                                                                               "createdAt":  "2025-03-20T20:59:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "kevinchalet",
                                           "body":  "\u003e [@kevinchalet](https://github.com/kevinchalet) This might be an awesome feature for OpenIddict in .NET 10 :)\n\nDefinitely on my radar 😃 \n\n(I was personally waiting to see where https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/issues/2806 would go, but it\u0027s certainly a feature that can be supported outside IdentityModel)",
                                           "updatedAt":  "2025-03-19T14:23:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86ptXqI",
                                           "createdAt":  "2025-05-02T13:41:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEQl2lQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2025-05-02T14:15:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "damienbod",
                                                                               "createdAt":  "2025-05-02T14:58:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "mikekistler",
                                           "body":  "Sadly we need to remove this feature from the .NET 10 roadmap because it requires support in some of our dependencies that will not be available in time for .NET 10.",
                                           "updatedAt":  "2025-05-02T13:41:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86-Y0dk",
                                           "createdAt":  "2025-08-17T06:52:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgikVg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Frulfump",
                                                                               "createdAt":  "2025-08-17T11:09:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "skoruba",
                                                                               "createdAt":  "2025-09-02T17:18:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "damienbod",
                                           "body":  "@mikekistler  Will this make .NET 11? This is being used a lot now, a lot of new security standards integrate this. ",
                                           "updatedAt":  "2025-08-17T06:52:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86-ZUrE",
                                           "createdAt":  "2025-08-17T11:01:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgikWQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Frulfump",
                                                                               "createdAt":  "2025-08-17T11:09:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "skoruba",
                                                                               "createdAt":  "2025-09-02T17:18:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "mikekistler",
                                           "body":  "@damienbod I hope so, but planning for .NET 11 won\u0027t begin in earnest until after .NET 10 ships.\n\nCan you add details here to bolster the case for this feature?",
                                           "updatedAt":  "2025-08-17T11:01:58Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Support for Demonstrating Proof of Possession (DPoP) authorization tokens",
        "labels":  [
                       "enhancement",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/58851",
        "createdAt":  "2024-11-09T12:52:38Z",
        "number":  58851,
        "author":  "atrauzzi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-11-11T23:44:56Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI have a situation where I want to do a one-off validation of an incoming webhook.  In [the one implementation that I\u0027m dealing with](https://fusionauth.io/docs/extend/events-and-webhooks/signing), the webhook comes with a JWT in a custom header.\n\nThe JWT itself can be validated from the same authority as the rest of my application, but based on how they implemented it, it doesn\u0027t represent anything useful to the ASP.NET auth subsystems.\n\n### Describe the solution you\u0027d like\n\nThat all said, I\u0027d still like to be able to leverage the JWKS and JWT already set up in my app.  It would be nice if I could `[FromServices]` some kind of `JwtOneOffValidator` and simply ask it \"hey, is this string/bytes good?\"\n\n### Additional context\n\nI could fuss about with re-wiring a parallel graph for JWT validation, but then I wouldn\u0027t be benefiting from what\u0027s already in my DI.  Seems like needless duplication, I don\u0027t benefit from JWKS caching and I\u0027m now a little more coupled to the framework (not bad, just not great!).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOky6A0Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86TJg1X",
                                           "createdAt":  "2024-11-11T17:59:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "\u003e the webhook comes with a JWT in a custom header.\n\nIt\u0027s possible to grab the JWT yourself via the `OnMessageReceived` event. The following doc demonstrates how you can grab the JWT from the query string, but grabbing the JWT from the header should be very similar since you have access to the `HttpContext`.\n\nhttps://learn.microsoft.com/en-us/aspnet/core/signalr/authn-and-authz?view=aspnetcore-8.0#built-in-jwt-authentication",
                                           "updatedAt":  "2024-11-11T17:59:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86TLoDR",
                                           "createdAt":  "2024-11-11T23:44:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "atrauzzi",
                                           "body":  "I\u0027m talking about validating it, JWKS and a whole lot more than simply grabbing the value.",
                                           "updatedAt":  "2024-11-11T23:44:55Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Make it easier to leverage existing configured JWT and JWKS infra to manually validate tokens",
        "labels":  [
                       "enhancement",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/59790",
        "createdAt":  "2025-01-09T12:08:13Z",
        "number":  59790,
        "author":  "MHHenriksen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-16T17:32:44Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nI\u0027m trying to simplify our auth config code as per minimal API examples, and stumbled upon this quirk: The framework doesn\u0027t automatically populate JwtBearerOptions.Audience from appsettings.json like most of the other properties. \n\nI\u0027m not 100% sure if this is by design, because there are also other properties of JwtBearerOptions (for example AutomaticRefreshInterval) that are not populated automatically from appsettings.json by [JwtBearerConfigureOptions.cs](https://github.com/dotnet/aspnetcore/blob/main/src/Security/Authentication/JwtBearer/src/JwtBearerConfigureOptions.cs) or [JwtBearerPostConfigureOptions.cs](https://github.com/dotnet/aspnetcore/blob/main/src/Security/Authentication/JwtBearer/src/JwtBearerPostConfigureOptions.cs), but it certainly was surprising behaviour to me. Then again, according to [a search](https://github.com/search?q=repo%3Adotnet%2Faspnetcore+path%3A%2F%5Esrc%5C%2FSecurity%5C%2FAuthentication%5C%2FJwtBearer%5C%2F%2F+.Audience\u0026type=code) all this property is used for is to set TokenValidationParameters.ValidAudience, so it\u0027s not exactly a showstopper.\n\nBut it does lead to the weird situation that you can\u0027t get away with only using configuration keys belonging to the same type, i.e. only Authority+Audience from JwtBearerOptions due to the above issue, or only ValidIssuer+ValidAudience from TokenValidationParameters because JwtBearerOptions.MetadataAddress won\u0027t be populated automatically in this case. The only combination that works without extra or redundant config is JwtBearerOptions.Authority+TokenValidationParameters.ValidAudience (which is confusing enough to autistic individuals like myself to write an issue for it :P). \n\n### Expected Behavior\n\nJwtBearerOptions.Audience (and indeed all basic properties of JwtBearerOptions) should be possible to set from simplified authentication configuration as per https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/security?view=aspnetcore-9.0#configuring-authentication-strategy \n\n### Steps To Reproduce\n\n```csharp\n        var builder = WebApplication.CreateBuilder();\n        builder.Configuration.AddInMemoryCollection(new Dictionary\u003cstring, string?\u003e\n            {\n                [\"Authentication:DefaultScheme\"] = \"Bearer\",\n                [\"Authentication:Schemes:Bearer:Authority\"] = \"https://example.com\",\n                [\"Authentication:Schemes:Bearer:Audience\"] = \"example-audience\",\n            });\n\n        builder.Services.AddAuthentication().AddJwtBearer();\n        var serviceProvider = builder.Services.BuildServiceProvider();\n\n        var jwtBearerOptions = serviceProvider.GetRequiredService\u003cIOptionsMonitor\u003cJwtBearerOptions\u003e\u003e().Get(JwtBearerDefaults.AuthenticationScheme);\n        Assert.That(jwtBearerOptions.Authority, Is.EqualTo(\"https://example.com\"));\n        Assert.That(jwtBearerOptions.Audience, Is.EqualTo(\"example-audience\")); // Fails\n        Assert.That(jwtBearerOptions.MetadataAddress, Is.EqualTo(\"https://example.com/.well-known/openid-configuration\"));\n        Assert.IsTrue(jwtBearerOptions.TokenValidationParameters.ValidateIssuer);\n        Assert.IsTrue(jwtBearerOptions.TokenValidationParameters.ValidateAudience);\n```\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0 (but also all other versions as far as I can tell from code)\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmlkcLw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86aPp-0",
                                           "createdAt":  "2025-01-13T17:54:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "Does setting a `ValidAudience` or `ValidAudences` array as demonstrated in https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/security?view=aspnetcore-9.0#configuring-authentication-strategy work for you? It sets `TokenValidationParameters.ValidAudience` or  `TokenValidationParameters.ValidAudiences` respectively rather than `Audience`, but it should have the same impact on token validation inside of the `JwtBearerHandler`. We read these values from configuration [here](https://github.com/dotnet/aspnetcore/blob/8d6d208542cbfa4553ae59436cc90d84aac08c6a/src/Security/Authentication/JwtBearer/src/JwtBearerConfigureOptions.cs#L43-L76)?\n\nEven if that does work, I think we should consider reading `Audience` from config too since this is supported by `Microsoft.Identity.Web` and a top-level `Authority` property works. We should consider doing the same for `OpenIdConnectOptions`.\n",
                                           "updatedAt":  "2025-01-13T22:31:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86aWRwv",
                                           "createdAt":  "2025-01-14T10:20:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MHHenriksen",
                                           "body":  "Yes, that works, but I ended up setting `JwtBearerOptions.Audience` in code from a separate custom config section, just to be safe and explicit about what our app expects and supports. I was just very annoyed by the asymmetry of which properties get populated automatically :P ",
                                           "updatedAt":  "2025-01-14T10:21:10Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "JwtBearerOptions.Audience does not get populated from appsettings.json",
        "labels":  [
                       "enhancement",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/60048",
        "createdAt":  "2025-01-27T11:21:17Z",
        "number":  60048,
        "author":  "marcusber",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-31T05:59:14Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nRelated to https://github.com/dotnet/aspnetcore/issues/4650 (Decrypt UserInfo-response).\n\nI would like to validate the JWT retrieved from the UserInfo-endpoint. The response I\u0027m dealing with is not encrypted so the payload could be read, but I would also like to validate the response before continuing. \nMy workaround is similar to #4650 \n\n\n### Describe the solution you\u0027d like\n\nIt would be nice to be able to implement callback events from the existing handler to be able to validate the JWT (if it shouldn\u0027t be validated at all times, with an opt-out flag in Options and validation handled in the handler itself).\n\n### Additional context\n\nA local [keykloak server](https://quay.io/repository/keycloak/keycloak?tab=tags\u0026tag=latest) could be configured to sign UserInfo-response JWT and I believe also encrypt the JWT if you also would like to fit #4650 into the solution when developing.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnIs_Pw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86cVCUA",
                                           "createdAt":  "2025-01-29T20:21:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "Thanks for filing this issue. I do think #4650 should prioritized ahead of this since a new event prior to parsing the UserInfo response would allow for both handling encrypted JWTs and validating signed JWTs without any breaking changes.\n\nI agree this is not a duplicate of that issue considering you would like at least the option to validate the UserInfo JWT automatically. I suspect we would make this opt-in rather than opt-out, however. We don\u0027t even validate the id token signature in the authorization code flow. See [here](https://github.com/dotnet/aspnetcore/blob/a1d5c09aea4eb4c5a54cc446f39c8c63bdb4d308/src/Security/Authentication/OpenIdConnect/src/OpenIdConnectHandler.cs#L841-L843) for where it\u0027s skipped.\n\nGiven that the UserInfo endpoint is protected by TLS, and you\u0027re presumably solely relying on TLS to ensure the validity of the `.well-known/openid-configuration` endpoint, `jwks_uri`, etc., is there a particular reason the UserInfo response needs an extra layer of validation?",
                                           "updatedAt":  "2025-01-29T20:21:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86cYJVO",
                                           "createdAt":  "2025-01-30T05:51:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marcusber",
                                           "body":  "@halter73 It was a requirement from the IDP. I don\u0027t know the reason behind it. ",
                                           "updatedAt":  "2025-01-30T05:51:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86chwUl",
                                           "createdAt":  "2025-01-31T01:29:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEEs7Bg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "marcusber",
                                                                               "createdAt":  "2025-01-31T05:58:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "halter73",
                                           "body":  "If it\u0027s a hard requirement, I think your best bet until we address this issue would be to leave `GetClaimsFromUserInfoEndpoint` false but set `SaveTokens` to true. Then after successfully signing in, you could make a request to the `userinfo_endpoint` yourself using `HttpClient` with the saved access token. Then you could do any validation of the response you want before reading whatever claims you need and reissuing the cookie.",
                                           "updatedAt":  "2025-01-31T01:29:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86ciz8_",
                                           "createdAt":  "2025-01-31T05:59:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marcusber",
                                           "body":  "Thanks for the suggestion.",
                                           "updatedAt":  "2025-01-31T05:59:13Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "OpenIdConnectEventHandler - enable UserInfo JWT-validation.",
        "labels":  [
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/60106",
        "createdAt":  "2025-01-30T08:49:48Z",
        "number":  60106,
        "author":  "wstaelens",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-12T18:26:53Z",
        "body":  "Since we\u0027ve upgraded to .net 9 (coming from .net 8) we experience that some of our customers can\u0027t click on any buttons/links/.. being rendered in Blazor Server.  The click events are not being accepted/processed.\n\nServer 2019, Blazor Server, .net 9.0 in-process published, IIS.\n\nWe\u0027ve seen that when we see an Event id 5074 WAS in  that the application pool recycles that some users in production are affected by the \"ignoring of click events\". These are not always the same users.\nThese users are not being able to work in the applicaton as the click events are totally ignored.\n\nWe\u0027ve never seen this in earlier versions of .net but since .net 9 we experience this sometimes in production.\n\nAnyone experienced the same? Suggestions?\n\nWhen a customer calls with the issue, the CPU (7%, 6%) and Memory (70%) are normal...",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnictIQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86ccn1l",
                                           "createdAt":  "2025-01-30T15:05:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFwLxA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AJ1000",
                                                                               "createdAt":  "2025-02-09T18:58:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danroth27",
                                           "body":  "@wstaelens When the app pool recycles, any active Blazor Server circuits will be lost, so while the app is recycling there is nothing to handle the UI events. Blazor should detect that the connection to the server was lost, and once the server comes back up, Blazor should try to reconnect and then refresh the browser to establish a new circuit. Are the users not seeing this disconnected state?",
                                           "updatedAt":  "2025-01-30T15:05:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86ck-lW",
                                           "createdAt":  "2025-01-31T11:03:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wstaelens",
                                           "body":  "\u003e [@wstaelens](https://github.com/wstaelens) When the app pool recycles, any active Blazor Server circuits will be lost, so while the app is recycling there is nothing to handle the UI events. Blazor should detect that the connection to the server was lost, and once the server comes back up, Blazor should try to reconnect and then refresh the browser to establish a new circuit. Are the users not seeing this disconnected state?\n\n@danroth27 the users don\u0027t see the disconnected state.\nIf for example 40 users are active, 35  or 38 users have no issue but just a few seem to _sometimes_ have an issue. \nIt are also not always the same user(s) in case it happens.\n\nWe never had this issue in versions \u003c= .net 8. Only started happening in .net 9 in production.\n\nYesterday it happened \"luckily\" with a colleague his account. \nHe had one browser open on a page rendered with blazor server, but could not click on anything.\nNothing in browsers developers console related to javascript or something...\n\nHe copied the url and tried different browsers, normal and incognito, tried F5, ctrl+F5, etc... but no success or no reconnection.\n\nIs there anything we can check/debug or do?\n\nOur solution has grown over the years we started with the first versions of Blazor Server / .net core and evoluated till today Blazor Server and .net 9.\nMaybe something \"old\" is still in the solution, conflicting, but we don\u0027t know what that could be.\n",
                                           "updatedAt":  "2025-01-31T11:03:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86clHZF",
                                           "createdAt":  "2025-01-31T11:23:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wstaelens",
                                           "body":  "@danroth27 some extra:\n\n`Foo.razor`\n\nhas a button (based on DevExpress DXButton) with a Click event:\n\n`Click=\"(async x =\u003e await OpenFoo(fooInfo.Foo))\"`\n\nThis calls:\n\n```\nprotected async Task OpenFoo(FooDto f) {\n   await csession.OpenFoo(new OpenFooCommand { someID = f.Id });\n}\n```\n\nwhich calls:\n\n```\n    public async Task\u003cFooResultDto\u003e OpenFoo(IOpenFooCommand cmd, bool autoNavigate = true, bool handleErr = true)\n    {\n      var loadingDlg = LoadingDialog.ShowDialog(_ModalSrvc, null, \"Please wait\", \"logo.svg\");\n      await Task.Yield(); \n      // ...\n    }\n```\n\n\nWe can\u0027t verify but we think that this is the case or similar\n\n1) website is open where Foo.razor is shown\n2) recycle happens\n3) User is able to click on a button which calls the `Click --\u003e OpenFoo(FooDto --\u003e OpenFoo(IOpenFooCommand`\n4) We think that `await Task.Yield()`  is blocking everything for that user/session.\nbut for the user itself it feels like the click never happened because the UI doesn\u0027t respond (clicks are not registered). If they click on this they cannot click anything else. \n\nThis code never had issues in .net 8 but obviously seems to block in .net 9 somewhere related to recycles.\n\n\nin .net 6 or 7 we had an issue that a dialog was not appearing/rendering and we added in the past await Task.Yield() so that the loading dialog would aways be visible. That is why the Task.Yield() has been added.\n(based on this documentation: https://learn.microsoft.com/en-us/aspnet/core/blazor/components/rendering?view=aspnetcore-8.0#statehaschanged )\n\ndoes that make any sense to you?",
                                           "updatedAt":  "2025-01-31T11:28:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86cyk6h",
                                           "createdAt":  "2025-02-03T10:11:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "@wstaelens thanks for the additional details.\n\nIt makes sense in a very limited way, given that we don\u0027t have the context. The first thing we would suggest is turning logging to debug level both on the server and on the client to try and determine if there are exceptions or other types of errors happening.\n\nIt\u0027s unclear what `var loadingDlg = LoadingDialog.ShowDialog(_ModalSrvc, null, \"Please wait\", \"logo.svg\");` is doing, so we don\u0027t know if that\u0027s causing an error that tears down the entire process (and forces the pool to recycle) or if that\u0027s something that is literally blocking the thread for that user.\n\n`Task.Yield()` is unlikely to block anything, as it literally yields the thread of execution to give other things time to execute.\n\nWe would suggest that you introduce some state change on the UI before `await csession.OpenFoo(new OpenFooCommand { someID = f.Id });` (for example, disable the button clicked) and use `Task.Yield()` before that call. So for example:\n```\n// Some status update\nawait Task.Yield();\nvar task = csession.OpenFoo(new OpenFooCommand { someID = f.Id });\n// Some other status update\nawait Task.Yield();\n// Some other status update\nawait task;\n// Some other status update\n```\n\n",
                                           "updatedAt":  "2025-02-03T10:11:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86c-klj",
                                           "createdAt":  "2025-02-04T11:36:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wstaelens",
                                           "body":  "we\u0027ll give it a try with the await Task.Yield(); before the dialog.\n\nThe dialog is from Blazored.Modal: https://github.com/Blazored/Modal ",
                                           "updatedAt":  "2025-02-04T12:41:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86dWeEz",
                                           "createdAt":  "2025-02-06T14:01:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wstaelens",
                                           "body":  "In startup.cs we had this:\n\n```\n  public class Startup\n  {\n        public void ConfigureServices(IServiceCollection services)\n    {\n\n      services.Configure\u003cCookiePolicyOptions\u003e(options =\u003e\n      {\n        options.CheckConsentNeeded = context =\u003e false;\n          options.MinimumSameSitePolicy = Microsoft.AspNetCore.Http.SameSiteMode.None; // \u003c-- (1)\n        options.Secure = CookieSecurePolicy.SameAsRequest;\n        options.HandleSameSiteCookieCompatibility();\n      });\n\n\n\n      services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)\n        .AddCookie(opt =\u003e\n        {\n          opt.Cookie.SameSite = Microsoft.AspNetCore.Http.SameSiteMode.None; // \u003c-- (2)\n          opt.Cookie.SecurePolicy = CookieSecurePolicy.SameAsRequest;\n\n\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        app.UseHttpsRedirection(); // \u003c--- (3)\n```\n\nToday a customer was unable to log in. We\u0027ve done some tests and after (temporarly) removing these 3 items:\n\n1.   options.MinimumSameSitePolicy = Microsoft.AspNetCore.Http.SameSiteMode.None; \n2.   opt.Cookie.SameSite = Microsoft.AspNetCore.Http.SameSiteMode.None; \n3.  app.UseHttpsRedirection();\n\nThe user was able to click and use the app. \n\n`DxButton Click --\u003e OpenFoo(FooDto --\u003e OpenFoo(IOpenFooCommand` \n\nwhere a `NavigationManager.NavigateTo($\"/FooBar?bar=x....\u0026...\", true);`   happens\n\nit feels like it has something to do with cookies/https/samesite. Not sure if IIS recycle has to do with it or if that part was just accidentially occurring. ",
                                           "updatedAt":  "2025-02-06T14:01:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86dZD7k",
                                           "createdAt":  "2025-02-06T17:54:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "@wstaelens from what you are describing, this is happening during prerendering. Your login is not interactive in any way, isn\u0027t it?",
                                           "updatedAt":  "2025-02-06T17:54:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86d9PBz",
                                           "createdAt":  "2025-02-11T08:08:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wstaelens",
                                           "body":  "\u003e [@wstaelens](https://github.com/wstaelens) from what you are describing, this is happening during prerendering. Your login is not interactive in any way, isn\u0027t it?\n\nlogin is just a static (mvc) page",
                                           "updatedAt":  "2025-02-11T08:08:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86d_FnA",
                                           "createdAt":  "2025-02-11T11:41:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "@wstaelens I don\u0027t think based on your description that this is blazor specific.\n\nThe best recommendation we can offer is to try and gather more detailed server / IIS logs and see if there is something in your code that is causing the process to crash.\n\nAnother think you might want to check is your IIS config in case you\u0027ve changed anything.",
                                           "updatedAt":  "2025-02-11T11:41:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86eIQgy",
                                           "createdAt":  "2025-02-12T08:21:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wstaelens",
                                           "body":  "@javiercn since we\u0027ve removed these 3 items below, we never had the issue again. \n\n```\noptions.MinimumSameSitePolicy = Microsoft.AspNetCore.Http.SameSiteMode.None;\nopt.Cookie.SameSite = Microsoft.AspNetCore.Http.SameSiteMode.None;\napp.UseHttpsRedirection();\n\n```\nSo either cookies or httpsredirection is causing the issue that for some users blazor server/signalr doesn\u0027t reconnect.\nFor these users when it happens, they were logged in and had browser open on the blazor server app but clicks are not processed anymore. \nFor one user we logged in with their credentials on another pc with a different browser on a different network and we were able to log in but once on the blazor server page we had the same issue that the page didn\u0027t process any clicks.\nClearing cookies did also not help.\n\nThinking out load it feels like \"something\" is not aware or did not refresh.\n\nNothing in logs, no exceptions, that is why we are clueless at this moment.\n\nas for now we don\u0027t know what the effects of MinimumSameSitePolicy , SameSite  and UseHttpsRedirection are on a blazor server/signalr app or if any of these three changed behaviour from .net 8 to .net 9.\n\nOn thing is sure it never happened in .net 8.\n\n(we did not change anything ourselves in Microsoft Front Door).",
                                           "updatedAt":  "2025-02-12T08:21:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86eJS6R",
                                           "createdAt":  "2025-02-12T10:05:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "@wstaelens thanks for the additional details.\n\nI\u0027m going to pass this to the security folks to see if they can think of what\u0027s going on here. We haven\u0027t changed anything in this area in 9.0, none of those settings should negatively impact the app in any way, so it\u0027s unclear what\u0027s happening with the current level of detail.\n\nThe ignored clicks very likely correspond to the connection to the server being lost as the app pool recycles and the circuit disappearing from memory. It takes some time for SignalR to notice that the connection is gone, and during that time the app will feel unresponsive. I think all this behavior (WRT to Blazor) is expected.\n\nThe challenge here is to understand why your app pool is recycling so frequently, which I don\u0027t think its related to Blazor at all. The symptoms that you are observing are a consequence of the app pool recycling.\n\nDo you have a mechanism in place to automatically reload the session when a circuit disconnects?",
                                           "updatedAt":  "2025-02-12T10:05:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86eJy0h",
                                           "createdAt":  "2025-02-12T10:56:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wstaelens",
                                           "body":  "\"Do you have a mechanism in place to automatically reload the session when a circuit disconnects?\"\n\nNot that we are aware of. All default...\n\nApp pool reclycing was not every day (we\u0027ve seen it from 1 day to several days). \n\nAnyway for now we have a workaround by removing these 3 items from the config but it is not ideal.\n\n",
                                           "updatedAt":  "2025-02-12T10:56:22Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  ".net 9 Blazor Server application pool recycle issue",
        "labels":  [
                       "investigate",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/60113",
        "createdAt":  "2025-01-30T17:46:06Z",
        "number":  60113,
        "author":  "danroth27",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODLeLoA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "boukenka",
                                            "createdAt":  "2025-01-30T19:23:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bachratyg",
                                            "createdAt":  "2025-02-03T12:15:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "joewashear007",
                                            "createdAt":  "2025-02-13T03:29:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wiktor-golonka",
                                            "createdAt":  "2025-04-06T23:33:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jleblancTK",
                                            "createdAt":  "2025-04-23T02:07:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Vlaaaaaaad",
                                            "createdAt":  "2025-08-16T18:47:25Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2025-02-03T17:59:58Z",
        "body":  "Original request from @kevinchalet:\n\nhttps://github.com/dotnet/aspnetcore/issues/40764#issuecomment-1195532095\n\n\u003e One of the main points that could be improved is how things are currently layered: unlike ASP.NET Core\u0027s authentication stack that offers specialized authentication handlers (cookies, OIDC, etc.), things are tightly coupled in the Blazor WASM world. More specifically, it would be great if the user persistence part (using local or session storage) was independent from the components handling the external authentication dance (in my case, OIDC). Something modeled after ASP.NET Core\u0027s IAuthenticationHandler/IAuthenticationService abstractions would be excellent.\n\nhttps://github.com/dotnet/aspnetcore/issues/40764#issuecomment-1195532095\n\n\u003e As I mentioned in my previous messages, the blocking part is the fact the external authentication handling and the user persistence parts are tightly coupled in the current implementation: Blazor exposes an `IRemoteAuthenticationService` that you can implement to handle the OIDC dance (which is fine), but it can\u0027t work alone without also creating a subclass of `AuthenticationStateProvider` as the default implementation - `RemoteAuthenticationProvider` - is a simple wrapper around `oidc-client-js`.\n\u003e\n\u003e The two things should be decoupled so that you can create `IRemoteAuthenticationService` integrations without also implementing the local/session storage parts (that should be ideally provided OOTB by Blazor WASM).\n\u003e\n\u003e An ASP.NET Core sample using the OpenIddict client stack can be found here: https://github.com/openiddict/openiddict-core/blob/dev/sandbox/OpenIddict.Sandbox.AspNetCore.Client/Controllers/AuthenticationController.cs\n\u003e \n\u003e As you can see in that sample, OpenIddict itself only handles the external authentication dance: the persistence part is handled by ASP.NET Core using the cookie middleware, which is not something we can (easily?) replicate with Blazor due to the tight coupling I mentioned.\n\n\n\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Decouple Blazor external authentication handling and user persistence",
        "labels":  [
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/60115",
        "createdAt":  "2025-01-30T17:59:23Z",
        "number":  60115,
        "author":  "danroth27",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODGpOeg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "boukenka",
                                            "createdAt":  "2025-01-30T19:23:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "c4l3b",
                                            "createdAt":  "2025-02-02T21:55:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bachratyg",
                                            "createdAt":  "2025-02-03T12:16:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "speth410",
                                            "createdAt":  "2025-02-04T20:44:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JvE-iO",
                                            "createdAt":  "2025-07-11T12:16:20Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2025-08-14T13:01:08Z",
        "body":  "Original posted by @Herdo:\n\nhttps://github.com/dotnet/aspnetcore/issues/40764#issuecomment-1567061660\n\nThe current implementation with iframes and silent signin based on _oidc-client-js_ is causing some timeout issues with third-party IdPs. I\u0027ve described the cause of this issue in this Stackoverflow question: [Blazor WASM - Spending a long time initially in Authorizing component](https://stackoverflow.com/questions/74959385/blazor-wasm-spending-a-long-time-initially-in-authorizing-component). I\u0027ll add my analysis results below.\n\nIMHO, the new solution should allow more freedom for cases like this, where you cannot influence IdP configuration like `X-Frame-Options` header.\n\n## Source of issue\nThe issue is caused by a timeout in the underlying implementation of the authentication services. I traced down the source, but there\u0027s no easy solution to this issue.\n\nIf you enable Debug tracing for your WASM client, you should see this log message in the console:\n\n\u003e dbug: Microsoft.AspNetCore.Components.WebAssembly.Authentication.RemoteAuthenticationService[0]\n      Initial silent sign in failed \u0027Frame window timed out\u0027\n\nFor me - using Keycloak (instead of Auth0), and Discord as IdP behind Keycloak -  the Discord login cannot be framed in the hidden iframe:\n\n\u003e Refused to frame \u0027https://discord.com/\u0027 because it violates the following Content Security Policy directive: \"frame-src \u0027self\u0027 my.domain.com\".\n\nOf course this policy can be modified to include `discord.com`, but Discord denies being embedded that way with `X-Frame-Options` header.\n\n## What\u0027s happening\n\n 1. The app gets loaded\n 2. `AuthorizeViewCore` is being rendered, entering [`OnParametersSetAsync`][1]:\n\t```cs\n\t// Clear the previous result of authorization\n\t// This will cause the Authorizing state to be displayed until the authorization has been completed\n\tisAuthorized = null;\n\n\tcurrentAuthenticationState = await AuthenticationState;\n\tisAuthorized = await IsAuthorizedAsync(currentAuthenticationState.User);\n\t```\n 3. The `AuthenticationState` is initialized by [`RemoteAuthenticationService.GetAuthenticationStateAsync`][2]:\n    ```cs\n    new AuthenticationState(await GetUser(useCache: true));\n    ```\n 4. This will invoke `GetAuthenticatedUser`:\n\t```cs\n\t/// \u003csummary\u003e\n\t/// Gets the current authenticated used using JavaScript interop.\n\t/// \u003c/summary\u003e\n\t/// \u003creturns\u003eA \u003csee cref=\"Task{ClaimsPrincipal}\"/\u003ethat will return the current authenticated user when completes.\u003c/returns\u003e\n\tprotected internal virtual async ValueTask\u003cClaimsPrincipal\u003e GetAuthenticatedUser()\n\t{\n\t\tawait EnsureAuthService();\n\t\tvar account = await JsRuntime.InvokeAsync\u003cTAccount\u003e(\"AuthenticationService.getUser\");\n\t\tvar user = await AccountClaimsPrincipalFactory.CreateUserAsync(account, Options.UserOptions);\n\n\t\treturn user;\n\t}\n\t```\n 5. [`AuthenticationService.getUser`][3] will invoke `trySilentSignIn`:\n    ```js\n        async trySilentSignIn() {\n        if (!this._intialSilentSignIn) {\n            this._intialSilentSignIn = (async () =\u003e {\n                try {\n                    this.debug(\u0027Beginning initial silent sign in.\u0027);\n                    await this._userManager.signinSilent();\n                    this.debug(\u0027Initial silent sign in succeeded.\u0027);\n                } catch (e) {\n                    if (e instanceof Error) {\n                        this.debug(`Initial silent sign in failed \u0027${e.message}\u0027`);\n                    }\n                    // It is ok to swallow the exception here.\n                    // The user might not be logged in and in that case it\n                    // is expected for signinSilent to fail and throw\n                }\n            })();\n        }\n\n        return this._intialSilentSignIn;\n    }\n    ```\n 6. The `await this._userManager.signinSilent();` will invoke the **oidc-client-js** [UserManager][4] `signinSilent` and then `_signinSilentIframe`:\n    ```js\n    _signinSilentIframe(args = {}) {\n        let url = args.redirect_uri || this.settings.silent_redirect_uri || this.settings.redirect_uri;\n        if (!url) {\n            Log.error(\"UserManager.signinSilent: No silent_redirect_uri configured\");\n            return Promise.reject(new Error(\"No silent_redirect_uri configured\"));\n        }\n\n        args.redirect_uri = url;\n        args.prompt = args.prompt || \"none\";\n\n        return this._signin(args, this._iframeNavigator, {\n            startUrl: url,\n            silentRequestTimeout: args.silentRequestTimeout || this.settings.silentRequestTimeout\n        }).then(user =\u003e {\n            if (user) {\n                if (user.profile \u0026\u0026 user.profile.sub) {\n                    Log.info(\"UserManager.signinSilent: successful, signed in sub: \", user.profile.sub);\n                }\n                else {\n                    Log.info(\"UserManager.signinSilent: no sub\");\n                }\n            }\n\n            return user;\n        });\n    }\n    ```\n 7. Finally, this will end up at [`IFrameWindow.js`][5], which has **a timeout of 10000 ms** configured:\n    ```js\n    const DefaultTimeout = 10000;\n    ```\n 8. The initially logged **timeout error** is thrown:\n    ```js\n    _timeout() {\n        Log.debug(\"IFrameWindow.timeout\");\n        this._error(\"Frame window timed out\");\n    }\n    ```\n\n  [1]: https://github.com/dotnet/aspnetcore/blob/d0e94423f0ef587b8fe262667c8168e14e4f5ac7/src/Components/Authorization/src/AuthorizeViewCore.cs#LL71C5-L93C1\n  [2]: https://github.com/dotnet/aspnetcore/blob/d0e94423f0ef587b8fe262667c8168e14e4f5ac7/src/Components/WebAssembly/WebAssembly.Authentication/src/Services/RemoteAuthenticationService.cs#LL104C1-L104C141\n  [3]: https://github.com/dotnet/aspnetcore/blob/d0e94423f0ef587b8fe262667c8168e14e4f5ac7/src/Components/WebAssembly/WebAssembly.Authentication/src/Interop/AuthenticationService.ts#LL141C5-L150C6\n  [4]: https://github.com/IdentityModel/oidc-client-js/blob/dev/src/UserManager.js\n  [5]: https://github.com/IdentityModel/oidc-client-js/blob/dev/src/IFrameWindow.js",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Silent sign-in with oidc-client.js causes timeout issues with some IdPs",
        "labels":  [
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/60118",
        "createdAt":  "2025-01-30T18:05:51Z",
        "number":  60118,
        "author":  "danroth27",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODLeLrw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "milkyjoe90",
                                            "createdAt":  "2025-01-30T18:21:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "boukenka",
                                            "createdAt":  "2025-01-30T19:24:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ascott18",
                                            "createdAt":  "2025-01-31T17:34:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bachratyg",
                                            "createdAt":  "2025-02-03T12:17:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Vlaaaaaaad",
                                            "createdAt":  "2025-08-16T18:48:06Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2025-08-22T19:05:58Z",
        "body":  "Originally posted by @ascott18:\n\nhttps://github.com/dotnet/aspnetcore/issues/40764#issuecomment-1781629719\n\n\u003e The HttpClient handler that injects tokens has a hardcoded refresh buffer of [5 minutes](https://github.com/dotnet/aspnetcore/blob/ffa0a028464e13d46aaec0c5ad8de0725a4d5aa5/src/Components/WebAssembly/WebAssembly.Authentication/src/Services/AuthorizationMessageHandler.cs#L59) for attempting a refresh, but AuthenticationService.ts will continue serving the token from the javascript side until it is fully expired (effectively a hardcoded refresh buffer of zero seconds). A buffer of 5 minutes causes problems if your server issues 5-minute access tokens, though, which is the lowest possible access token duration for many services (Okta/Auth0, AWS Cognito, and probably many others)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnTfsJg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86dN-wm",
                                           "createdAt":  "2025-02-05T18:18:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "Some options:\n* Compute the refresh buffer based on the token lifetime\n* Make the refresh buffer directly configurable\n",
                                           "updatedAt":  "2025-02-05T18:18:30Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "The HttpClient handler that injects tokens has a hardcoded refresh buffer of 5 minutes for attempting a refresh",
        "labels":  [
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/60193",
        "createdAt":  "2025-02-04T15:24:41Z",
        "number":  60193,
        "author":  "gerrewsb",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-wfUw==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "guardrex",
                                            "createdAt":  "2025-02-04T15:26:16Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-02-12T19:30:33Z",
        "body":  "Describe the issue\n\nI\u0027m trying to implement Blazor InteractiveServer with Oidc and cookies. Logging in/out and redirecting the loginpage of the IdP works like it\u0027s supposed to, no issues there. My issues start with the `CookieOidcRefresher` class.\n\nI have `@attribute [Authorize]` set in `_Imports.razor` to make sure every page needs authorization. For the rest my testproject uses the code of the `BlazorWebAppOidcServer` example.\n\nWhen i navigate to a different page, the event `OnValidatePrincipal` doesn\u0027t trigger. So the tokens/cookies may be expired when i try to use them on the page. I did some tinkering and found that when i put the code `app.MapBlazorHub()` (this line of code is NOT in the example) then the event triggers when i navigate to a different page. However, now none of the buttons on any page work because of the `AmbiguousMatchException` error. Which is documented [here](https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/signalr?view=aspnetcore-8.0#server-side-circuit-handler-options). So i added the `.WithOrder(-1)`. Now the buttons are working again and i have no `AmbiguousMatchException` anymore, however now the `OnValidatePrincipal` event doesn\u0027t trigger anymore when i navigate to a different page.\n\nI can work around it by adding a timer in the `CookieOidcRefresher` class. But this feels hacky and i don\u0027t think this is the intended way of working.\n\nWhat am i missing here?\n\nExpected behavior\n\nThat the `OnValidatePrincipal` event triggers every time i navigate to a different page.\n\nI created a sample project on [GitHub](https://github.com/gerrewsb/BlazorOidc)\nI removed the authority/clientid/clientsecret from the oidc-settings as those are irrelevant to this issue.\n\ncc: @guardrex https://github.com/dotnet/blazor-samples/issues/470",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Blazor Interactive Server with OIDC",
        "labels":  [
                       "investigate",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/60367",
        "createdAt":  "2025-02-13T13:38:27Z",
        "number":  60367,
        "author":  "saasen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_YPZg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tomberget",
                                            "createdAt":  "2025-02-22T10:48:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "petand10",
                                            "createdAt":  "2025-02-22T11:52:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nathalieschro",
                                            "createdAt":  "2025-02-23T18:40:31Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-02-22T10:12:22Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\n```\nPlatform: macOS Sequoia Version 15.3\nChip: Apple M2 Max\n.NET version: 6 and 8 (read below for more information)\nRelevant packages: Microsoft.AspNetCore.Authentication.OpenIdConnect v6.0.36 and v8.0.13\n```\n\nI\u0027m trying to connect and authenticate users through an OIDC server. I\u0027m getting a valid ID-token in response from the OIDC server. However, I\u0027m struggling with getting decryption of the token to work. \n\nRelevant OIDC setup code:\n\n```cs\nvar privateKey = new JsonWebKey(File.ReadAllText(\"private-key.json\"));\n\n.AddOpenIdConnect(\"oidc\", config =\u003e\n{\n    config.ResponseType = \"code\";\n    config.TokenValidationParameters = new TokenValidationParameters\n    {\n        TokenDecryptionKeys = new[] { privateKey }\n    };\n\n    // Given this is .NET 8, you can fallback to this one here. When using .NET 6, it\u0027s already the default\n    // config.UseSecurityTokenValidator = true;\n\n    config.Scope.Clear();\n    config.Scope.Add(\"openid\");\n    config.Scope.Add(\"profile\");\n   \n    config.UsePkce = true;\n    config.SaveTokens = true;\n    config.GetClaimsFromUserInfoEndpoint = true;\n});\n```\n\nIf I use .NET 6, I\u0027m guessing the `SecurityTokenValidator` will be used, and I get the following error message:\n\n```\nIDX10609: Decryption failed. No Keys tried: token: \u0027\u003credacted\u003e\u0027.\n```\n\nIf I use .NET 8, the `JsonWebTokenHandler` is used by default, and I get the following error message (which makes sense, since that was changed in .NET 7 or 8:\n\n```\nIDX10618: Key unwrap failed using decryption Keys: \u0027Microsoft.IdentityModel.Tokens.JsonWebKey, Use: \u0027enc\u0027,  Kid: \u0027\u003credacted\u003e\u0027, Kty: \u0027RSA\u0027, InternalId: \u0027\u003credacted\u003e\u0027.\n      \u0027.\n      Exceptions caught:\n       \u0027\u0027.\n      token: \u0027\u003credacted\u003e\u0027.\n```\n\nI\u0027m not sure why this isn\u0027t working? And the error message when using `SecurityTokenValidator` doesn\u0027t really make sense to me, but maybe it doesn\u0027t support this `enc` og `alg` so it skips using this decryption key?\n\nThis I\u0027ve checked:\n* I\u0027m pretty sure the private key I have locally is correct. It got all the needed parts which are required\n* The token I get from the OIDC server has the same `kid` as the private key I have\n\nAnother problem is that the token as part of the exception generated is corrupt (it only has 4 parts). Not sure why that happens, and/or if it\u0027s misleading.\n\nExample header of token:\n\n```json\n{\n  \"kid\": \"\u003credacted\u003e\",\n  \"cty\": \"JWT\",\n  \"enc\": \"A128GCM\",\n  \"alg\": \"RSA-OAEP-256\"\n}\n```\n\n### Expected Behavior\n\nI would expect the token to be correctly decrypted.\n\n### Steps To Reproduce\n\nI would love to provide a reproduction, but I don\u0027t have any OIDC server I can use for that, and I would need to expose a private key as well...\n\n### Exceptions (if any)\n\n1. `IDX10609: Decryption failed. No Keys tried: token: \u0027\u003credacted\u003e\u0027.`\n2. \n\n```\nIDX10618: Key unwrap failed using decryption Keys: \u0027Microsoft.IdentityModel.Tokens.JsonWebKey, Use: \u0027enc\u0027,  Kid: \u0027\u003credacted\u003e\u0027, Kty: \u0027RSA\u0027, InternalId: \u0027\u003credacted\u003e\u0027.\n      \u0027.\n      Exceptions caught:\n       \u0027\u0027.\n      token: \u0027\u003credacted\u003e\u0027.\n```\n\n### .NET Version\n\n6 and 8\n\n### Anything else?\n\nIDE: JetBrains Rider 2024.3.5\n\n```\n\u003e dotnet --info\n\n.NET SDK:\n Version:           8.0.100\n Commit:            57efcf1350\n Workload version:  8.0.100-manifests.6c33ef20\n\nRuntime Environment:\n OS Name:     Mac OS X\n OS Version:  15.3\n OS Platform: Darwin\n RID:         osx-arm64\n Base Path:   /usr/local/share/dotnet/sdk/8.0.100/\n\n.NET workloads installed:\n Workload version: 8.0.100-manifests.6c33ef20\nThere are no installed workloads to display.\n\nHost:\n  Version:      8.0.0\n  Architecture: arm64\n  Commit:       5535e31a71\n\n.NET SDKs installed:\n  6.0.411 [/usr/local/share/dotnet/sdk]\n  6.0.417 [/usr/local/share/dotnet/sdk]\n  6.0.425 [/usr/local/share/dotnet/sdk]\n  7.0.305 [/usr/local/share/dotnet/sdk]\n  8.0.100 [/usr/local/share/dotnet/sdk]\n\n.NET runtimes installed:\n  Microsoft.AspNetCore.App 6.0.19 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 6.0.25 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 6.0.33 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 7.0.8 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 8.0.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 6.0.19 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 6.0.25 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 6.0.33 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 7.0.8 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 8.0.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\n\nOther architectures found:\n  None\n\nEnvironment variables:\n  Not set\n\nglobal.json file:\n  /Users/s/code/company/oidc-test/global.json\n\nLearn more:\n  https://aka.ms/dotnet/info\n\nDownload .NET:\n  https://aka.ms/dotnet/download\n\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOn4KDew==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86ecsNN",
                                           "createdAt":  "2025-02-14T05:30:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "saasen",
                                           "body":  "I have narrowed the problem down to where it fails. It seems like in the `SupportedAlgorithms` class in `Microsoft.IdentityModel.Tokens` it contains what RSA encryption algorithms it supports. It does support `RSA-OAEP`, but my token says `RSA-OAEP-256`. Isn\u0027t `RSA-OAEP` considered unsafe? `RSA-OAEP-256` uses `SHA-256`. Is there any workaround I can do to make this work myself? If not, is this something you are considering supporting? \n\n```cs\n// Type: Microsoft.IdentityModel.Tokens.SupportedAlgorithms\n// Assembly: Microsoft.IdentityModel.Tokens, Version=8.0.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n```",
                                           "updatedAt":  "2025-02-14T05:31:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86eih3i",
                                           "createdAt":  "2025-02-14T17:07:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "saasen",
                                           "body":  "I tried adding support for decrypting `RSA-OAEP-256` myself by implementing a custom `ICryptoProvider`. I also changed from passing a `JsonWebKey` into the `TokenValidationParameters` like this:\n\n```cs\nconfig.TokenValidationParameters = new TokenValidationParameters\n{\n    TokenDecryptionKeys = new[] { rsaSec }\n};\n```\n\nI also changed to use my custom `ICryptoProvider`:\n\n```cs\nprivateKey.CryptoProviderFactory.CustomCryptoProvider = new OAEP256CryptoProvider();\n```\n\nHere\u0027s the implementation of my custom `ICryptoProvider` (taken from https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/issues/1293):\n\n```cs\npublic class OAEP256CryptoProvider : ICryptoProvider\n{\n    public const string OAEP_256 = \"RSA-OAEP-256\";\n\n    public bool IsSupportedAlgorithm(string algorithm, params object[] args)\n    {\n        return (algorithm == OAEP_256);\n    }\n\n    public object Create(string algorithm, params object[] args)\n    {\n        return new RsaOaepKeyWrapProvider(args[0] as SecurityKey, algorithm);\n    }\n\n    public void Release(object cryptoInstance)\n    {\n    }\n\n    private class RsaOaepKeyWrapProvider : KeyWrapProvider\n    {\n        public RsaOaepKeyWrapProvider(SecurityKey key, string algorithm)\n        {\n            Key = (RsaSecurityKey) key;\n            Algorithm = algorithm;\n        }\n\n        protected override void Dispose(bool disposing)\n        {\n        }\n\n        public override byte[] UnwrapKey(byte[] keyBytes)\n        {\n            return Key.Rsa.Decrypt(keyBytes, RSAEncryptionPadding.OaepSHA256);\n        }\n\n        public override byte[] WrapKey(byte[] keyBytes)\n        {\n            return Key.Rsa.Encrypt(keyBytes, RSAEncryptionPadding.OaepSHA256);\n        }\n\n        public override string Algorithm { get; }\n        public override string Context { get; set; }\n        public override RsaSecurityKey Key { get; }\n    }\n}\n```\n\nThe code runs, but fails when unwrapping the key in some interop code:\n\n```cs\nMicrosoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectHandler[17]\n      Exception occurred while processing message.\n      Microsoft.IdentityModel.Tokens.SecurityTokenKeyWrapException: IDX10618: Key unwrap failed using decryption Keys: \u0027Microsoft.IdentityModel.Tokens.RsaSecurityKey, KeyId: \u0027\u003credacted\u003e\u0027, InternalId: \u0027\u003credacted\u003e\u0027.\n      \u0027.\n      Exceptions caught:\n       \u0027Interop+AppleCrypto+AppleCFErrorCryptographicException: The operation couldn’t be completed. (OSStatus error -50 - RSAdecrypt wrong input (err -27))\n         at Interop.AppleCrypto.ExecuteTransform(ReadOnlySpan`1 source, SecKeyTransform transform)\n         at Interop.AppleCrypto.RsaDecrypt(SafeSecKeyRefHandle privateKey, Byte[] data, RSAEncryptionPadding padding)\n         at OAEP256CryptoProvider.RsaOaepKeyWrapProvider.UnwrapKey(Byte[] keyBytes) in /Users/s/code/help/signicat-oidc-test/SignicatOidcExample/RsaOaep256Provider.cs:line 40\n         at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.GetContentEncryptionKeys(JsonWebToken jwtToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)\n      \u0027.\n      token: \u0027\u003credacted\u003e\u0027.\n```\n\nNot sure if this helps...",
                                           "updatedAt":  "2025-02-14T18:34:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86emkkZ",
                                           "createdAt":  "2025-02-15T12:47:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "saasen",
                                           "body":  "I got a little further by generating a new pair of private/public JWKs. I also added the following in my `launchSettings.json`:\n\n```cs\n\"DYLD_LIBRARY_PATH\": \"/opt/homebrew/opt/openssl@3/lib\"\n```\n\nThis helped, but now I have a different error. For some reason it\u0027s trying to load `BCrypt.dll`? That won\u0027t work on Mac, will it?\n\n```cs\nIDX10603: Decryption failed. Keys tried: \u0027Microsoft.IdentityModel.Tokens.SymmetricSecurityKey, KeyId: \u0027\u0027, InternalId: \u0027fmIqRm1c3l_jwDj0DWm_njH32y6hChS-lHNecA82-1A\u0027.\n      \u0027.\n      Exceptions caught:\n       \u0027System.TypeInitializationException: The type initializer for \u0027Microsoft.IdentityModel.Tokens.AesGcm\u0027 threw an exception.\n       ---\u003e System.DllNotFoundException: Unable to load shared library \u0027BCrypt.dll\u0027 or one of its dependencies. In order to help diagnose loading problems, consider setting the DYLD_PRINT_LIBRARIES environment variable: \n      dlopen(/usr/local/share/dotnet/shared/Microsoft.NETCore.App/9.0.2/BCrypt.dll.dylib, 0x0001): tried: \u0027/opt/homebrew/opt/openssl@3/lib/BCrypt.dll.dylib\u0027 (no such file), \u0027/usr/local/share/dotnet/shared/Microsoft.NETCore.App/9.0.2/BCrypt.dll.dylib\u0027 (no such file), \u0027/System/Volumes/Preboot/Cryptexes/OS/usr/local/share/dotnet/shared/Microsoft.NETCore.App/9.0.2/BCrypt.dll.dylib\u0027 (no such file), \u0027/usr/local/share/dotnet/shared/Microsoft.NETCore.App/9.0.2/BCrypt.dll.dylib\u0027 (no such file)\n      dlopen(/Users/s/code/d/e/f/bin/Debug/net9.0/BCrypt.dll.dylib, 0x0001): tried: \u0027/opt/homebrew/opt/openssl@3/lib/BCrypt.dll.dylib\u0027 (no such file), \u0027/Users/s/code/d/e/SignicatOidcExample/bin/Debug/net9.0/BCrypt.dll.dylib\u0027 (no such file), \u0027/System/Volumes/Preboot/Cryptexes/OS/Users/s/code/d/e/SignicatOidcExample/bin/Debug/net9.0/BCrypt.dll.dylib\u0027 (no such file), \u0027/Users/s/code/d/e/SignicatOidcExample/bin/Debug/net9.0/BCrypt.dll.dylib\u0027 (no such file)\n      dlopen(BCrypt.dll.dylib, 0x0001): tried: \u0027/opt/homebrew/opt/openssl@3/lib/BCrypt.dll.dylib\u0027 (no such file), \u0027BCrypt.dll.dylib\u0027 (no such file), \u0027/System/Volumes/Preboot/Cryptexes/OSBCrypt.dll.dylib\u0027 (no such file), \u0027/usr/lib/BCrypt.dll.dylib\u0027 (no such file, not in dyld cache), \u0027BCrypt.dll.dylib\u0027 (no such file)\n      dlopen(/usr/local/share/dotnet/shared/Microsoft.NETCore.App/9.0.2/libBCrypt.dll.dylib, 0x0001): tried: \u0027/opt/homebrew/opt/openssl@3/lib/libBCrypt.dll.dylib\u0027 (no such file), \u0027/usr/local/share/dotnet/shared/Microsoft.NETCore.App/9.0.2/libBCrypt.dll.dylib\u0027 (no such file), \u0027/System/Volumes/Preboot/Cryptexes/OS/usr/local/share/dotnet/shared/Microsoft.NETCore.App/9.0.2/libBCrypt.dll.dylib\u0027 (no such file), \u0027/usr/local/share/dotnet/shared/Microsoft.NETCore.App/9.0.2/libBCrypt.dll.dylib\u0027 (no such file)\n      dlopen(/Users/s/code/d/e/SignicatOidcExample/bin/Debug/net9.0/libBCrypt.dll.dylib, 0x0001): tried: \u0027/opt/homebrew/opt/openssl@3/lib/libBCrypt.dll.dylib\u0027 (no such file), \u0027/Users/s/code/d/e/SignicatOidcExample/bin/Debug/net9.0/libBCrypt.dll.dylib\u0027 (no such file), \u0027/System/Volumes/Preboot/Cryptexes/OS/Users/s/code/d/e/SignicatOidcExample/bin/Debug/net9.0/libBCrypt.dll.dylib\u0027 (no such file), \u0027/Users/s/code/d/e/SignicatOidcExample/bin/Debug/net9.0/libBCrypt.dll.dylib\u0027 (no such file)\n      dlopen(libBCrypt.dll.dylib, 0x0001): tried: \u0027/opt/homebrew/opt/openssl@3/lib/libBCrypt.dll.dylib\u0027 (no such file), \u0027libBCrypt.dll.dylib\u0027 (no such file), \u0027/System/Volumes/Preboot/Cryptexes/OSlibBCrypt.dll.dylib\u0027 (no such file), \u0027/usr/lib/libBCrypt.dll.dylib\u0027 (no such file, not in dyld cache), \u0027libBCrypt.dll.dylib\u0027 (no such file)\n      dlopen(/usr/local/share/dotnet/shared/Microsoft.NETCore.App/9.0.2/BCrypt.dll, 0x0001): tried: \u0027/opt/homebrew/opt/openssl@3/lib/BCrypt.dll\u0027 (no such file), \u0027/usr/local/share/dotnet/shared/Microsoft.NETCore.App/9.0.2/BCrypt.dll\u0027 (no such file), \u0027/System/Volumes/Preboot/Cryptexes/OS/usr/local/share/dotnet/shared/Microsoft.NETCore.App/9.0.2/BCrypt.dll\u0027 (no such file), \u0027/usr/local/share/dotnet/shared/Microsoft.NETCore.App/9.0.2/BCrypt.dll\u0027 (no such file)\n      dlopen(/Users/s/code/d/e/SignicatOidcExample/bin/Debug/net9.0/BCrypt.dll, 0x0001): tried: \u0027/opt/homebrew/opt/openssl@3/lib/BCrypt.dll\u0027 (no such file), \u0027/Users/s/code/d/e/SignicatOidcExample/bin/Debug/net9.0/BCrypt.dll\u0027 (no such file), \u0027/System/Volumes/Preboot/Cryptexes/OS/Users/s/code/d/e/SignicatOidcExample/bin/Debug/net9.0/BCrypt.dll\u0027 (no such file), \u0027/Users/s/code/d/e/SignicatOidcExample/bin/Debug/net9.0/BCrypt.dll\u0027 (no such file)\n      dlopen(BCrypt.dll, 0x0001): tried: \u0027/opt/homebrew/opt/openssl@3/lib/BCrypt.dll\u0027 (no such file), \u0027BCrypt.dll\u0027 (no such file), \u0027/System/Volumes/Preboot/Cryptexes/OSBCrypt.dll\u0027 (no such file), \u0027/usr/lib/BCrypt.dll\u0027 (no such file, not in dyld cache), \u0027BCrypt.dll\u0027 (no such file)\n      dlopen(/usr/local/share/dotnet/shared/Microsoft.NETCore.App/9.0.2/libBCrypt.dll, 0x0001): tried: \u0027/opt/homebrew/opt/openssl@3/lib/libBCrypt.dll\u0027 (no such file), \u0027/usr/local/share/dotnet/shared/Microsoft.NETCore.App/9.0.2/libBCrypt.dll\u0027 (no such file), \u0027/System/Volumes/Preboot/Cryptexes/OS/usr/local/share/dotnet/shared/Microsoft.NETCore.App/9.0.2/libBCrypt.dll\u0027 (no such file), \u0027/usr/local/share/dotnet/shared/Microsoft.NETCore.App/9.0.2/libBCrypt.dll\u0027 (no such file)\n      dlopen(/Users/s/code/d/e/SignicatOidcExample/bin/Debug/net9.0/libBCrypt.dll, 0x0001): tried: \u0027/opt/homebrew/opt/openssl@3/lib/libBCrypt.dll\u0027 (no such file), \u0027/Users/s/code/d/e/SignicatOidcExample/bin/Debug/net9.0/libBCrypt.dll\u0027 (no such file), \u0027/System/Volumes/Preboot/Cryptexes/OS/Users/s/code/d/e/SignicatOidcExample/bin/Debug/net9.0/libBCrypt.dll\u0027 (no such file), \u0027/Users/s/code/d/e/SignicatOidcExample/bin/Debug/net9.0/libBCrypt.dll\u0027 (no such file)\n      dlopen(libBCrypt.dll, 0x0001): tried: \u0027/opt/homebrew/opt/openssl@3/lib/libBCrypt.dll\u0027 (no such file), \u0027libBCrypt.dll\u0027 (no such file), \u0027/System/Volumes/Preboot/Cryptexes/OSlibBCrypt.dll\u0027 (no such file), \u0027/usr/lib/libBCrypt.dll\u0027 (no such file, not in dyld cache), \u0027libBCrypt.dll\u0027 (no such file)\n      \n         at Microsoft.IdentityModel.Tokens.Interop.BCrypt.BCryptOpenAlgorithmProvider(SafeAlgorithmHandle\u0026 phAlgorithm, String pszAlgId, String pszImplementation, Int32 dwFlags)\n         at Microsoft.IdentityModel.Tokens.Cng.BCryptOpenAlgorithmProvider(String pszAlgId, String pszImplementation, OpenAlgorithmProviderFlags dwFlags)\n         at Microsoft.IdentityModel.Tokens.AesBCryptModes.\u003c\u003ec__DisplayClass0_0.\u003cOpenAesAlgorithm\u003eb__0()\n         at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)\n         at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\n         at System.Lazy`1.CreateValue()\n         at Microsoft.IdentityModel.Tokens.AesGcm..cctor()\n         --- End of inner exception stack trace ---\n         at Microsoft.IdentityModel.Tokens.AesGcm.ImportKey(Byte[] key)\n         at Microsoft.IdentityModel.Tokens.AesGcm..ctor(Byte[] key)\n         at Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.CreateAesGcmInstance()\n         at Microsoft.IdentityModel.Tokens.DisposableObjectPool`1.CreateInstance()\n         at Microsoft.IdentityModel.Tokens.DisposableObjectPool`1.Allocate()\n         at Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.DecryptWithAesGcm(Byte[] ciphertext, Byte[] authenticatedData, Byte[] iv, Byte[] authenticationTag)\n         at Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.Decrypt(Byte[] ciphertext, Byte[] authenticatedData, Byte[] iv, Byte[] authenticationTag)\n         at Microsoft.IdentityModel.JsonWebTokens.JwtTokenUtilities.DecryptToken(CryptoProviderFactory cryptoProviderFactory, SecurityKey key, String encAlg, Byte[] ciphertext, Byte[] headerAscii, Byte[] initializationVector, Byte[] authenticationTag)\n         at Microsoft.IdentityModel.JsonWebTokens.JwtTokenUtilities.DecryptJwtToken(SecurityToken securityToken, TokenValidationParameters validationParameters, JwtTokenDecryptionParameters decryptionParameters)\n      \u0027.\n      token: \u0027null\u0027\n```",
                                           "updatedAt":  "2025-02-15T12:47:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86emo2f",
                                           "createdAt":  "2025-02-15T13:36:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "saasen",
                                           "body":  "Based on the cyrptography documentation it says [`AES-GCM` is supported](https://learn.microsoft.com/en-us/dotnet/standard/security/cross-platform-cryptography#authenticated-encryption) and [OAEP](https://learn.microsoft.com/en-us/dotnet/standard/security/cross-platform-cryptography#rsa) (I\u0027m not sure why I can\u0027t see 256 in that table), so I don\u0027t understand what is not working. Shouldn\u0027t this work on Mac on .NET 6 and above?\n\n",
                                           "updatedAt":  "2025-02-15T13:36:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86empM-",
                                           "createdAt":  "2025-02-15T13:40:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEQGNEQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "DaBeSoft",
                                                                               "createdAt":  "2025-04-29T11:33:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "saasen",
                                           "body":  "I managed to get it working by implementing my own `AES128GCM` `AuthenticatedEncryptionProvider`:\n\n```cs\nprivate class Net8AlgorithmProvider : AuthenticatedEncryptionProvider\n{\n    public Net8AlgorithmProvider(SecurityKey key, string algorithm) : base(key, algorithm)\n    {\n    }\n    \n    protected override bool IsSupportedAlgorithm(SecurityKey key, string algorithm)\n    {\n        return algorithm == SecurityAlgorithms.Aes128Gcm;\n    }\n\n    public override AuthenticatedEncryptionResult Encrypt(byte[] plaintext, byte[] authenticatedData, byte[]? iv)\n    {\n        throw new NotImplementedException();\n    }\n\n    public override byte[] Decrypt(byte[] ciphertext, byte[] authenticatedData, byte[] iv, byte[] authenticationTag)\n    {\n        var clearBytes = new byte[ciphertext.Length];\n        using var aesGcm = new AesGcm(GetKeyBytes(Key));\n        aesGcm.Decrypt(iv, ciphertext, authenticationTag, clearBytes, authenticatedData);\n        return clearBytes;\n    }\n}\n```\n\nI had to expand the `ICryptoProvider` like follows:\n\n```cs\npublic class OAEP256CryptoProvider : ICryptoProvider\n{\n    public const string OAEP_256 = \"RSA-OAEP-256\";\n    public const string AES_128 = \"A128GCM\";\n\n    public bool IsSupportedAlgorithm(string algorithm, params object[] args)\n    {\n        return algorithm is OAEP_256 or SecurityAlgorithms.Aes128Gcm;\n    }\n\n    public object Create(string algorithm, params object[] args)\n    {\n        if (algorithm == OAEP_256)\n        {\n            return new RsaOaepKeyWrapProvider(args[0] as SecurityKey, algorithm);\n        }\n        else if (algorithm == SecurityAlgorithms.Aes128Gcm)\n        {\n            return new Net8AlgorithmProvider((SecurityKey)args[0], algorithm);\n        }\n        else\n        {\n            return null;\n        }\n    }\n\n    public void Release(object cryptoInstance)\n    {\n    }\n}\n```\n\nI would love to understand why I need to do this, and why it\u0027s not working natively...",
                                           "updatedAt":  "2025-02-15T13:40:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86emqql",
                                           "createdAt":  "2025-02-15T13:58:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "saasen",
                                           "body":  "Also, based on [this](https://github.com/dotnet/docs/issues/32346), it should work on Mac?",
                                           "updatedAt":  "2025-02-15T13:58:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86feVv5",
                                           "createdAt":  "2025-02-21T20:59:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "Thanks for the journey. I just got back from vacation, and I also appreciate people who follow up their issues with what they discovered afterwards.\n\n\u003e I would love to understand why I need to do this, and why it\u0027s not working natively...\n\nThe short answer is because https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/issues/1293 (which I see you already found) hasn\u0027t been fixed, and they\u0027re upstream of us. We\u0027re not in the habit of adding non-default ICryptoProviders for just our auth handlers. I don\u0027t think there\u0027s a clean way for us to do this, and it would be a nightmare to keep in sync regardless.\n\n\u003e Also, based on [this](https://github.com/dotnet/docs/issues/32346), it should work on Mac?\n\nIt looks like it. Although Microsoft.IdentityModel.Tokens would have to be updated to use System.Security.Cryptography.AesGcm where available rather than p/invoking BCrypt.dll on Windows and failing everywhere else like it does currently. It looks like that\u0027s being tracked by https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/issues/2624.\n\nI recommend upvoting and commenting on those issues if you want to try to increase their prioritization. It can sometimes help. I\u0027m glad you have a working workaround in the meantime.",
                                           "updatedAt":  "2025-02-21T20:59:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86fgoN7",
                                           "createdAt":  "2025-02-22T10:06:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "saasen",
                                           "body":  "Thank you, @halter73, for the detailed answer. I hope you had a nice vacation.\n\nI\u0027m happy there existed a \"backdoor\" for us to inject into the `ICryptoProvider`.\n\nSo this is only an issue on non-Windows platforms? If I understand you correctly, it should work natively on macOS and Linux (with OpenSSL) given the upstream dependencies are updated to use the correct methods? Are there any methods of knowing / running some trivial test code to verify that it works or not on macOS / Linux?\n\nWe are going to deploy this to a k8s cluster, and it will run on Linux. We might see other problems there, since it\u0027s a different OS. Do you know if OpenSSL is included in the default container image for ASP.NET Core (8)?\n\n[The cross-platform cryptography documentation](https://learn.microsoft.com/en-us/dotnet/standard/security/cross-platform-cryptography#rsa) is somewhat confusing since it says `RSA OAEP SHA-1/2` (that includes `RSA-OAEP-256` right?) is supported on both macOS and Linux. The same applies to [the authenticated encryption documentation](https://learn.microsoft.com/en-us/dotnet/standard/security/cross-platform-cryptography#authenticated-encryption) which says that `AES-GCM` is supported on both macOS and Linux.",
                                           "updatedAt":  "2025-02-22T10:12:22Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "OpenIdConnectHandler can\u0027t decrypt token with RSA-OAEP-256 and A128GCM",
        "labels":  [
                       "blocked",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/60506",
        "createdAt":  "2025-02-19T19:34:52Z",
        "number":  60506,
        "author":  "ascott18",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_5ZPw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OronDF343",
                                            "createdAt":  "2025-03-10T14:34:14Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-02-26T18:15:31Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nWhen authenticating a specific page or endpoint with a a specific authentication scheme via `[Authorize(AuthenticationSchemes = \"MySchemeName\")]`, the full authentication properties from authenticating that scheme get dropped by PolicyEvaluator. When I try to read the properties (in order to pass them along to a different sign-in scheme) in my code from IAuthenticateResultFeature, only the expiration property is present.\n\nhttps://github.com/dotnet/aspnetcore/blob/e2151836317a0d027bf06680c59474086268c8af/src/Security/Authorization/Policy/src/PolicyEvaluator.cs#L57-L61\n\nIt appears that PolicyEvaluator is doing this to support merging authentication results from multiple schemes. However, when authenticating only a single scheme for a policy, I think this reduced-functionality merging logic shouldn\u0027t apply since there\u0027s nothing to merge - the singular set of properties from the singular scheme that was authenticated should be passed straight through.\n\n\nWhat PolicyEvaluator receives from authenticating my single scheme:\n\n![Image](https://github.com/user-attachments/assets/057e2009-94f0-477d-823c-8d94eef3c4c0)\n\nWhat AuthorizationMiddleware receives from PolicyEvaluator (and therefore passes along to IAuthenticationResultFeature):\n\n![Image](https://github.com/user-attachments/assets/443203c3-6630-4b78-b91d-418d48915da7)\n\n### Expected Behavior\n\nAuthorizationMiddleware populates IAuthenticationResultFeature with the full properties from the authenticated scheme when the scheme is overridden from the default by a policy (i.e. by attribute) that only authenticates a singular scheme (not multiple schemes that need to be merged)\n\n### Steps To Reproduce\n\nCan provide a repro if needed, but the issue is fairly self-evident from the merging logic code in PolicyEvaluator.\n\n### Exceptions (if any)\n\nN/A\n\n### .NET Version\n\n9.0.102\n\n### Anything else?\n\naspnetcore 9.0.1",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOn39UeQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86ff1R5",
                                           "createdAt":  "2025-02-22T01:35:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "This issue appears similar to #47059. You make a fair point about this being easy to improve in the single scheme case.\n\nIn the meantime, if you don\u0027t want to use a custom `IPolicyEvaluator`, the easiest workaround is probably to get the `AuthenticateResult` directly from your chosen scheme as follows:\n\n```csharp\nvar endpointAuthorizeData = httpContext.GetEndpoint()?.Metadata?.GetMetadata\u003cIAuthorizeData\u003e();\nvar schemeNameOrDefault = endpointAuthorizeData?.AuthenticationSchemes?.Split(\u0027,\u0027)?.FirstOrDefault();\nvar authenticateResult = await httpContext.AuthenticateAsync(schemeNameOrDefault);\n```\n\nThe base `AuthenticationHandler` type [caches the previous result](https://github.com/dotnet/aspnetcore/blob/93f7682ca74f985800737712e06232696a04d40b/src/Security/Authentication/Core/src/AuthenticationHandler.cs#L252), so there shouldn\u0027t be any perf hit. This was the only way to get at the `AuthenticateResult` prior to the introduction of the `IAuthenticateResultFeature` in .NET 6, but I agree we should still make the feature more usable in the scenario.",
                                           "updatedAt":  "2025-02-22T01:35:22Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "PolicyEvaluator drops authentication properties when authenticating a single scheme",
        "labels":  [
                       "enhancement",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/60667",
        "createdAt":  "2025-02-28T19:18:20Z",
        "number":  60667,
        "author":  "ahmed-abdelrazek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-10T17:21:30Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\ni want my front end (web-mobile-desktop) to be able to read the claims in the access token\n\n### Describe the solution you\u0027d like\n\nan option like this that send unprotected jwt access token would be nice \n\n![Image](https://github.com/user-attachments/assets/c4ef23ca-2758-45a3-9dca-8ff2d0e63529)\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsG7bJw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86ga0RI",
                                           "createdAt":  "2025-02-28T19:20:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ahmed-abdelrazek",
                                           "body":  "https://github.com/dotnet/aspnetcore/discussions/59444#discussioncomment-11916536",
                                           "updatedAt":  "2025-02-28T19:20:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86gbFFI",
                                           "createdAt":  "2025-02-28T20:02:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mguinness",
                                           "body":  "To clarify, OP is requesting an additional property be added to the [BearerTokenOptions](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.authentication.bearertoken.bearertokenoptions) class. Hard to discern from just a screenshot.",
                                           "updatedAt":  "2025-02-28T20:02:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86gbMvJ",
                                           "createdAt":  "2025-02-28T20:23:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIFaLQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mguinness",
                                                                               "createdAt":  "2025-02-28T20:55:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ahmed-abdelrazek",
                                           "body":  "\u003e To clarify, OP is requesting an additional property be added to the [BearerTokenOptions](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.authentication.bearertoken.bearertokenoptions) class. Hard to discern from just a screenshot.\n\nno just an idea on how it might get activated (the identity server access token being decrypted jwt)",
                                           "updatedAt":  "2025-02-28T20:23:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86g7A3R",
                                           "createdAt":  "2025-03-05T04:51:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "If the token is issued by an oauth server and is meant for the back end your front end should be treating it as opaque. Whilst it\u0027s typical a oauth server issues a jwt it is by no means guaranteed, and even if it is a jwt, it may be an encrypted jwt, which only the system for which it\u0027s issued can decrypt.\n\nThis takes the simple asp.net identity jwt issuance further away from how an identity issuer should work, and makes it less compatible with AAD and others.\n\n\n\n\n",
                                           "updatedAt":  "2025-03-05T04:51:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86g9yRh",
                                           "createdAt":  "2025-03-05T10:48:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ahmed-abdelrazek",
                                           "body":  "@blowdart in my case tokens are meant for the front end and i don\u0027t want the front to send extra requests to get the same info that already exist in the access token\n\nand what i meant by decrypted/unprotected jwt is something like this\n![Image](https://github.com/user-attachments/assets/5b6b933a-a2e6-4ac7-bb13-ffc99d9268f4)\n\nand not the current one which as far as i know is protected jwt\n![Image](https://github.com/user-attachments/assets/99113c9f-df66-4931-8010-8bb934a94ea0)\n\ni\u0027m not asking for one or the other but the option to choose between the 2 maybe something like\n\n![Image](https://github.com/user-attachments/assets/6aa06422-4bce-48e9-9fce-621342eaff47)",
                                           "updatedAt":  "2025-03-05T10:48:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86hCPyO",
                                           "createdAt":  "2025-03-05T18:16:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIqiXg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ahmed-abdelrazek",
                                                                               "createdAt":  "2025-03-05T18:27:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mguinness",
                                           "body":  "I think the OP\u0027s issue is related to [make the new asp core 8 IdentityConstants.BearerScheme \"unprotected\"](https://github.com/dotnet/aspnetcore/discussions/55106) in that he wants to decode the bearer token.  However based on [Use token-based authentication](https://learn.microsoft.com/en-us/aspnet/core/security/authentication/identity-api-authorization#use-token-based-authentication) this is not the use case.\n\n\u003e The tokens aren\u0027t standard JSON Web Tokens (JWTs). The use of custom tokens is intentional, as the built-in Identity API is meant primarily for simple scenarios.\n\nIt\u0027s a common misconception that is also discussed in [How I Can Decode New .Net 8 AccessToken To Get User Information?](https://www.reddit.com/r/dotnet/comments/1cdevgm)",
                                           "updatedAt":  "2025-03-05T18:16:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86hECZo",
                                           "createdAt":  "2025-03-05T22:08:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "And that was a deliberate choice to not lead people into thinking it was an oauth identity service.\n\nA choice would should, imo, continue",
                                           "updatedAt":  "2025-03-05T22:08:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86wbDmf",
                                           "createdAt":  "2025-06-10T16:11:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ahmed-abdelrazek",
                                           "body":  "@blowdart what about an option to return `id token` as `jwt` beside the access and refresh tokens?",
                                           "updatedAt":  "2025-06-10T16:13:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86wbXB-",
                                           "createdAt":  "2025-06-10T16:43:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "blowdart",
                                           "body":  "I point back to\n\n\u003e that was a deliberate choice to not lead people into thinking it was an oauth identity service.\n\nIf you want an oauth service there are plenty to choose from. ",
                                           "updatedAt":  "2025-06-10T16:43:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86wbtsn",
                                           "createdAt":  "2025-06-10T17:20:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ahmed-abdelrazek",
                                           "body":  "\u003e I point back to\n\u003e \n\u003e \u003e that was a deliberate choice to not lead people into thinking it was an oauth identity service.\n\u003e \n\u003e If you want an oauth service there are plenty to choose from.\n\ni understand the sentiment if you want more features or full fledged identity server try microsoft entra or openiddict or duende or anyother service out there \n\nit\u0027s easier to start a new project with microsoft identity and the default templates specially if the project is small enough and you don\u0027t want any other feature\nthe only thing missing right now (at least for me) is the frontend projects react angular or vue even blazor wasm reading the claims from the token (without extra requests to the backend) and as a work around i rewrite the signin flow to return custom jwt \n\nso i thought it would be nice if that was built in the default library",
                                           "updatedAt":  "2025-06-10T17:21:30Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Add option to `AddBearerToken()` for sending unprotected jwt access token when using Bearer Scheme",
        "labels":  [
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/61168",
        "createdAt":  "2025-03-26T15:13:39Z",
        "number":  61168,
        "author":  "ChrisKlug",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-21T16:39:00Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nDuring integration testing with the WebApplicationFactory, I tend replace the existing authentication method (OIDC) with basic auth to simplify testing. However, in the current model, it seems more or less impossible to remove an authentication handler once it has been added. This is a problem with the OIDC handler, as it makes a request to retrieve the OIDC configuration on startup, which causes problems during testing.\n\n### Describe the solution you\u0027d like\n\nIt would be great to be able to remove an authentication handler after it has been added, e.g. in the ConfigureTestServices method. Alternatively, it could be solved by being able to configure the OIDC handler to not get the configuration automatically.\n\n### Additional context\n\nRight now, my solution is to set a specific environment name in the tests, and have code that checks the environment name before adding the OIDC handler. However, this feels less than optimal, as I don\u0027t want to have test specific code in my production application.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOp_o1gQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86lP4-b",
                                           "createdAt":  "2025-04-02T12:27:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ChrisKlug",
                                           "body":  "The solution that was suggested to me at some point was to use `IAuthenticationSchemeProvider.RemoveScheme`. However, this would require me to build the application first to get hold of the ´IAuthenticationSchemeProvider´. I would like to do it during set-up in ´ConfigureTestServices()´.",
                                           "updatedAt":  "2025-04-02T12:27:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86lS-Cr",
                                           "createdAt":  "2025-04-02T17:09:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "@ChrisKlug, what\u0027s wrong with building the service provider first, then modifying the schemes after? Have you taken a look at [`AuthenticationOptions.SchemeMap`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.authentication.authenticationoptions.schememap?view=aspnetcore-9.0)?",
                                           "updatedAt":  "2025-04-02T17:09:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86lTAy9",
                                           "createdAt":  "2025-04-02T17:14:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ChrisKlug",
                                           "body":  "Is the call to the OIDC configuration endpoint not done during creation? Or is that called at a later point? I thought it was done during creation, in which case it is too late to remove it after creation...",
                                           "updatedAt":  "2025-04-02T17:14:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86lTBYp",
                                           "createdAt":  "2025-04-02T17:15:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ChrisKlug",
                                           "body":  "Also, it would feel better to do it before creation to me. As I really don\u0027t want it in there. But that is a subjective thing I guess",
                                           "updatedAt":  "2025-04-02T17:15:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86l79sw",
                                           "createdAt":  "2025-04-07T16:37:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "\u003e Is the call to the OIDC configuration endpoint not done during creation? Or is that called at a later point?\n\nIt happens on the first request.\n\n@ChrisKlug, is there a reason you could add something to your app\u0027s configuration (e.g., create some kind of testing configuration), and then set up the app\u0027s auth differently depending on the current configuration?",
                                           "updatedAt":  "2025-04-07T16:37:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86l85uM",
                                           "createdAt":  "2025-04-07T18:26:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ChrisKlug",
                                           "body":  "If it\u0027s on first request, I should be able to remove the handler in my test after the creation of the app using the `IAuthenticationSchemeProvider.RemoveScheme`. I thought I tested that, but I\u0027ll have to try again.\n\nI currently have a conditional that only adds the OIDC handler if the environment isn\u0027t my integration testing. But I\u0027d rather not have code that is test specific deployed to test...",
                                           "updatedAt":  "2025-04-07T18:26:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86nB2aj",
                                           "createdAt":  "2025-04-14T16:39:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "To progress further on this issue, I think we\u0027ll need example code that does not work that you would like to have work.",
                                           "updatedAt":  "2025-04-14T16:39:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86n-jWB",
                                           "createdAt":  "2025-04-21T11:07:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ChrisKlug",
                                           "body":  "I created a little sample of what I am talking about. It\u0027s available here: https://github.com/ChrisKlug/asp-net-core-auth-example\n\nIt is quite easily fixed using `IAuthenticationSchemeProvider` after the creation of the app. I am just feeling like it isn\u0027t where I would expect to find it. I would expect to be able to do it in the `ConfigureTestServices` method. Which I guess I why I have never found the `IAuthenticationSchemeProvider` way, as I wasn\u0027t looking to remove it after it had already been created...\n\nI get that it might not be a high priority issue, but I still think it would make it easier to discover if it was available in  `ConfigureTestServices`. In the same way that integration testing ASP.NET Core  would be a lot easier to understand if the NuGet package didn\u0027t include the MVC part...",
                                           "updatedAt":  "2025-04-21T11:08:08Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Make it possible to turn off OpenID Connect configuration retrieval, or enable removal of an added authentication handler",
        "labels":  [
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/61360",
        "createdAt":  "2025-04-07T09:30:52Z",
        "number":  61360,
        "author":  "svrooij",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-29T14:06:02Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nIt seems that [MSAL webassembly](https://github.com/dotnet/aspnetcore/blob/55a1ae7c6de104a9dc50d9dce8e44753ae82345a/src/Components/WebAssembly/Authentication.Msal/src/Interop/package.json#L12) is using a [deprecated](https://www.npmjs.com/package/@azure/msal-browser/v/2.28.3) version of msal-browser\n\nThis is related to [this issue](https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/7685)\n\nMain issue is:\nI want to send the `id_token_hint` to Azure AD B2C, this parameter is specified in the openid connect specs so I don\u0027t understand why it would let me send this thing out.\n\n### Expected Behavior\n\nI expect production code not to use deprecated libraries to do authentication\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0.100\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpiLBrQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86l8AsU",
                                           "createdAt":  "2025-04-07T16:43:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "@wtgodbe, any idea why component governance wouldn\u0027t have caught this?",
                                           "updatedAt":  "2025-04-07T16:43:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86mDTZO",
                                           "createdAt":  "2025-04-08T09:54:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svrooij",
                                           "body":  "@MackinnonBuck great question 😄. Let\u0027s say I would like to contribute to this and have it implemented in dotnet 8 or dotnet 9, which branch should I start with?\n\nThe MSAL WebAssembly implementation is very minimal and can use some improvements. Where can I start?\nSorry if this is documented somewhere, I had a hard time finding it out. Can we even contribute stuff to dotnet 8 or 9 or are it just security updates?",
                                           "updatedAt":  "2025-04-08T09:54:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86mIrBf",
                                           "createdAt":  "2025-04-08T18:11:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wtgodbe",
                                           "body":  "\u003e any idea why component governance wouldn\u0027t have caught this?\n\nCG files issues for components with security vulnerabilities - it wouldn\u0027t necessarily flag for a deprecated version, if that component didn\u0027t have any CVEs filed for it.",
                                           "updatedAt":  "2025-04-08T18:11:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86mIsGt",
                                           "createdAt":  "2025-04-08T18:13:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wtgodbe",
                                           "body":  "\u003e Let\u0027s say I would like to contribute to this and have it implemented in dotnet 8 or dotnet 9, which branch should I start with?\n\nWe would take a version upgrade in 9.0 and 8.0, but we likely wouldn\u0027t take any larger feature-level changes there. If you want, you could contribute the version updates in https://github.com/dotnet/aspnetcore/tree/release/9.0 and https://github.com/dotnet/aspnetcore/tree/release/8.0, and a more fleshed-out feature improvement in https://github.com/dotnet/aspnetcore/tree/main.",
                                           "updatedAt":  "2025-04-08T18:13:07Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Webassembly MSAL unsupported",
        "labels":  [
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/61435",
        "createdAt":  "2025-04-10T21:36:00Z",
        "number":  61435,
        "author":  "JanBN",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-11T19:42:49Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nHello,\n\nI have .net app running in docker and nginx also running in docker container. Nginx is a reverse proxy and ssl termination. I wanted to add google/microsoft authentication, but it does not work on production. From localhost it does work.\n\nI think this is the problem:\nWhen I click on the login the redirect url is correctly generated using https. I\u0027m also correctly redirected to the google and then I\u0027m redirected back after sign in. And then it fails in .net app on this error:\n**AuthenticationFailureException: OAuth token endpoint failure: redirect_uri_mismatch;Description=Bad Request**\n\nI think the problem is that redirect from google arrives to nginx as **https** and nginx sends it to .net app as **http**  **(https vs http)** and therfore there is url mismatch. \nI think I have correctly set up forwarding headers and everything\n\nThis is nginx configuration:\n\n    location / {\n        proxy_pass         http://app_site/;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection keep-alive;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Host $server_name;\n        proxy_cache_bypass $http_upgrade;\n\n        fastcgi_buffers 16 16k;\n        fastcgi_buffer_size 32k;\n    }\n\nThis is program.cs\n```\nvar builder = WebApplication.CreateBuilder(args);\n\n// Configure services\n...\n\nbuilder.Services.AddAuthentication()\n    .AddGoogle(options =\u003e\n        {\n            options.ClientId = configuration[\"AppSettings:Authentication:Google:ClientId\"];\n            options.ClientSecret = configuration[\"AppSettings:Authentication:Google:ClientSecret\"];\n        })\n    .AddMicrosoftAccount(options =\u003e\n        {\n            options.ClientId = configuration[\"AppSettings:Authentication:Microsoft:ClientId\"];\n            options.ClientSecret = configuration[\"AppSettings:Authentication:Microsoft:ClientSecret\"];\n        });\n    ;\n\nbuilder.Services.AddHttpLogging(options =\u003e\n{\n    options.LoggingFields = HttpLoggingFields.RequestPropertiesAndHeaders;\n});\n\nbuilder.Services.Configure\u003cForwardedHeadersOptions\u003e(options =\u003e\n{\n    options.ForwardedHeaders =\n        ForwardedHeaders.XForwardedFor |\n        ForwardedHeaders.XForwardedProto |\n        ForwardedHeaders.XForwardedHost\n        ;\n\n    //  This is the important part for Docker environments:\n    options.KnownNetworks.Clear();\n    options.KnownProxies.Clear();\n\n    // This disables the proxy check completely\n    options.RequireHeaderSymmetry = false;\n    // Allow any proxy since we\u0027re in a contained Docker environment\n    options.ForwardLimit = null;\n});\n\nvar app = builder.Build();\napp.UseForwardedHeaders();\napp.UseHttpLogging();\n\n...\n```\n\nthis is the screenshot of the error\n\n![Image](https://github.com/user-attachments/assets/47c0e88c-32a8-4dac-bb9d-195f3033f0a7)\n\nI have also tried forcing https in program.cs by \n```\napp.Use((context, next) =\u003e\n{\n    // Force HTTPS for all URL generation\n    context.Request.Scheme = \"https\";\n    return next();\n});\n```\nIt didnt help either.\n\nI really dont know where to look and why it just does not work. \nIt seems like Authentication just ignores forwarded headers when validating url, or there is some other problem. I think the redirect url is correct since it gets redirected to the google and goole also approves it, and allow me to sign in\n\nDo you have any idea whats wrong ?\nThank you \n\n\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0.202\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvVfj3Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86mm7iK",
                                           "createdAt":  "2025-04-10T21:38:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "martincostello",
                                           "body":  "Have you configured nginx to forward headers as described in [_Configure ASP.NET Core to work with proxy servers and load balancers_](https://learn.microsoft.com/aspnet/core/host-and-deploy/proxy-load-balancer#nginx-configuration)?",
                                           "updatedAt":  "2025-04-10T21:38:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86mpP0f",
                                           "createdAt":  "2025-04-11T04:52:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JanBN",
                                           "body":  "\u003e Have you configured nginx to forward headers as described in [_Configure ASP.NET Core to work with proxy servers and load balancers_](https://learn.microsoft.com/aspnet/core/host-and-deploy/proxy-load-balancer#nginx-configuration)?\n\nYes I have. In my first post there is also my nginx configuration. I think forwarding headers works, since in the screenshot of the bug there is also visible forwarded header",
                                           "updatedAt":  "2025-04-11T04:52:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86m1D-a",
                                           "createdAt":  "2025-04-12T17:55:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JanBN",
                                           "body":  "I have created also testing repository to double check if the problem is somewhere else in my project.\n\nThis is it: https://github.com/JanBN/external-login-test\n\nIt fails on the same error as above when running behind reverse proxy",
                                           "updatedAt":  "2025-04-12T17:55:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86ycIBF",
                                           "createdAt":  "2025-06-21T18:41:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Peluko",
                                           "body":  "I have this same problem. Have you found some wokaround?",
                                           "updatedAt":  "2025-06-21T18:41:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86yeQV_",
                                           "createdAt":  "2025-06-22T15:25:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JanBN",
                                           "body":  "No, unfortunately not. I’m currently working on other parts of the app. I\u0027m still hoping someone from github could help me with this. If you figure it out please let me know.",
                                           "updatedAt":  "2025-06-22T15:25:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86yxCqK",
                                           "createdAt":  "2025-06-24T07:47:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Peluko",
                                           "body":  "I\u0027ve found that if I run the .NET app with https enabled, it works. So I\u0027m doing so. But one of the advantages of reverse proxy is to let nginx deal with certificates, not our app...\nI\u0027m running the app with the devlopment certificates which I\u0027ve made the nginx machine to trust.\n\nRegards.",
                                           "updatedAt":  "2025-06-24T07:47:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86zE-BC",
                                           "createdAt":  "2025-06-25T11:26:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JanBN",
                                           "body":  "thank you, this seems like a good workaround",
                                           "updatedAt":  "2025-06-25T11:26:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde867PW7j",
                                           "createdAt":  "2025-07-31T21:18:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tfonfara",
                                           "body":  "This bug also affects ASP.NET 8.x. During my research I found, that `8.0.16` is the last version that works correctly, starting from version `8.0.17` ASP.NET seems to ignore the `X-Forwarded-Proto` header. The .NET SDK version doesn\u0027t seem to have any impact on that bug (building on latest 8.x SDK and running with `8.0.16` runtime is a valid workaround for me).\n\nMy test environment was using a multi stage docker build with `mcr.microsoft.com/dotnet/sdk:8.0-bookworm-slim` as build layer and `mcr.microsoft.com/dotnet/aspnet:8.0.16-bookworm-slim` as runtime.",
                                           "updatedAt":  "2025-07-31T21:18:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde867hzue",
                                           "createdAt":  "2025-08-02T04:24:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "johnboker",
                                           "body":  "I got it working by adding `app.UseAuthentication()`.  It would not work at all until this was added, and it had to be right before `app.UseAuthorization()`.\n\n```\napp.UseHttpsRedirection();\napp.UseStaticFiles();\napp.UseRouting();\napp.UseAuthentication();\napp.UseAuthorization();\napp.MapControllerRoute(\n    name: \"default\",\n    pattern: \"{controller=Home}/{action=Index}/{id?}\"\n);\napp.MapRazorPages();\n```",
                                           "updatedAt":  "2025-08-02T04:24:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde869SJyb",
                                           "createdAt":  "2025-08-11T16:11:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JanBN",
                                           "body":  "thank you for the reply. Unfortunately it is not working on my end. Still the same problem",
                                           "updatedAt":  "2025-08-11T16:11:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde869V-Pd",
                                           "createdAt":  "2025-08-11T19:42:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "johnboker",
                                           "body":  "I also have this in my nginx config for the site:\n\n```\nlocation / {\n        proxy_http_version 1.1;\n        proxy_set_header   Upgrade $http_upgrade;\n        proxy_set_header   Connection keep-alive;\n        proxy_set_header   Host $host;\n        proxy_cache_bypass $http_upgrade;\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto https;\n        proxy_set_header X-Forwarded-Scheme https;\n        proxy_pass         http://localhost:5010;\n    }\n```\n\nHopefully you can get it working.",
                                           "updatedAt":  "2025-08-11T19:42:49Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Google/Microsoft authentication does not work behind reverse proxy",
        "labels":  [
                       "investigate",
                       "Needs: Attention :wave:",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/61501",
        "createdAt":  "2025-04-15T08:31:22Z",
        "number":  61501,
        "author":  "MarvinKlein1508",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODPGTnQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "StonedHackerman",
                                            "createdAt":  "2025-05-13T19:19:34Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "StonedHackerman",
                                            "createdAt":  "2025-05-13T19:19:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "boukenka",
                                            "createdAt":  "2025-09-08T14:34:53Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-08-25T17:31:13Z",
        "body":  "I haven\u0027t found any open issues regarding JWT and Blazor in general, so I might end up opening one myself.\n\nThis might be related to [#38111](https://github.com/dotnet/aspnetcore/issues/38111). As well as to my previous issue #59433 which got closed in favor of #55307 (Which only covers WASM btw.)\n\nAlmost every web API uses JSON Web Tokens (JWT) to manage access for API endpoints. This often involves authentication being done on the web API itself, which then returns both an access and a refresh token to the client.\n\nSince I have already authenticated the user on the web API, I want to use these tokens to authenticate my user in my Blazor app as well. But now the topic gets really complicated.\n\nFirst off, the official docs themselves do not contain any information about JWT in Blazor at all. I\u0027ve opened another issue regarding this in the docs repository: https://github.com/dotnet/AspNetCore.Docs/issues/35225\n\nOK, when there are no official docs from Microsoft, let\u0027s search the web! Surely someone was smart enough to figure out how this works! But it turns out that it is extremely difficult to find anything good related to this topic—especially when you only consider Blazor Server, not SSR or WebAssembly.\n\nI\u0027ve literally seen everything here:\n\n- Custom cookie scripts to set cookies from interactive server mode  \n- Storing both the access token and refresh token in local storage and manually applying those values every time you want to call the API  \n- Ignoring refresh tokens altogether and simply providing an access token that expires in x months  \n- Saving the access token as a custom cookie and the refresh token in local storage (to fetch JWT from a custom `AuthenticationStateProvider`)  \n- Saving the JWT as a default claim in standard cookie authentication (often used with long-lived access tokens, since those cookies cannot be changed easily—especially with all the different render modes)  \n- Storing XML files on the server itself, which are read using the user ID and a custom `AuthenticationStateProvider` (Blazor Server and SSR)\n\nI may not be the smartest person when it comes to authentication, but even I can see that there are major security penalties in each of these described \"solutions.\"\n\nStoring this information is only the first part of the story. It gets even more complex when you want to automatically refresh the access token and apply it to all requests from your Blazor app. Depending on your chosen hacky method from above, you either apply those from localStorage or cookies manually for each request. This also isn\u0027t 100% reliable, since you cannot access JSInterop in all render modes from Blazor.\n\nBlazor is a really cool framework, but the authentication part is really hard to overcome—especially for newcomers. I strongly believe that Blazor could be so much more popular if these issues were addressed. Authentication has been driving me insane since .NET 3.1. Up to this date, I still haven’t figured out how to refresh the user\u0027s claims on the fly without logging out and back in.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvte25A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86nJZY3",
                                           "createdAt":  "2025-04-15T08:31:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarvinKlein1508",
                                           "body":  "@javiercn @danroth27 @guardrex @MackinnonBuck @SteveSandersonMS ",
                                           "updatedAt":  "2025-04-15T08:31:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86nKPiO",
                                           "createdAt":  "2025-04-15T09:49:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEObUAg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MarvinKlein1508",
                                                                               "createdAt":  "2025-04-15T18:25:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "guardrex",
                                           "body":  "Thanks @MarvinKlein1508 ... I\u0027ll respond on your docs issue later today.",
                                           "updatedAt":  "2025-04-15T09:49:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86nU_Sh",
                                           "createdAt":  "2025-04-15T19:40:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "guardrex",
                                           "body":  "@javiercn ... I chatted further with @MarvinKlein1508 on the docs issue, and he didn\u0027t realize a couple of things that would\u0027ve helped ...\n\n* \"JWT\" isn\u0027t a great search term in Blazor docs. We mention that in a couple of spots, but Blazor docs mostly only refer to \"access token\" in token-based scenario coverage.\n* The Blazor articles rest on top of the main doc set\u0027s articles and don\u0027t seek to duplicate coverage in common areas. A BWA that adopts global Interactive Server rendering along with a web API secured with JWT Bearer is generally-speaking in overall setup, configuration, and behavior just an ASP.NET Core app with an identity provider/token server and web API with JWT Bearer auth, which is covered by the [main doc set\u0027s article on JWT](https://learn.microsoft.com/aspnet/core/security/authentication/configure-jwt-bearer-authentication). The Blazor docs point this out in a few spots.\n\nI\u0027m going to leave the doc issue open as a reminder to look at how we\u0027re telling devs to use the main doc set\u0027s security articles. I plan to work on our passing tokens in BWAs coverage per Halter\u0027s remarks (on another issue) and work on overall content organization in the Blazor *Security and Identity* node (also another issue), and I\u0027ll probably see if anything can be done to help with @MarvinKlein1508\u0027s doc issue at the same time.\n\nFor our latest, greatest bits, I referred @MarvinKlein1508 to the recent Halter BWA sample apps, which partially address the inquiries here on the PU issue about token management. ",
                                           "updatedAt":  "2025-04-15T19:47:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86oN1cC",
                                           "createdAt":  "2025-04-22T18:52:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Krzywson",
                                           "body":  "Oh yes, the template with Blazor SSR and API Auth will be very useful. It would also be nice if you could select some information from Individual Accounts Users. Like I add a Permissions field and I could read it in a simple way or it would be stored somewhere.",
                                           "updatedAt":  "2025-04-22T18:52:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86oYjQY",
                                           "createdAt":  "2025-04-23T17:21:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danroth27",
                                           "body":  "@claudiaregio",
                                           "updatedAt":  "2025-04-23T17:21:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86oYv-S",
                                           "createdAt":  "2025-04-23T17:43:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "cc @mkArtakMSFT about oauth token refresh: https://github.com/dotnet/aspnetcore/issues/8175\n\n@MarvinKlein1508, we also have docs describing how to use OIDC with the BFF pattern: https://learn.microsoft.com/aspnet/core/blazor/security/blazor-web-app-with-oidc?view=aspnetcore-9.0\u0026pivots=bff-pattern. Is this something you\u0027ve seen?\n\nThere\u0027s also a way to share authentication cookies among ASP.NET Core web apps: https://learn.microsoft.com/aspnet/core/security/cookie-sharing?view=aspnetcore-9.0.",
                                           "updatedAt":  "2025-04-23T17:43:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86oYwf6",
                                           "createdAt":  "2025-04-23T17:44:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "Related: #59290",
                                           "updatedAt":  "2025-04-23T17:44:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86oY2fk",
                                           "createdAt":  "2025-04-23T17:54:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "guardrex",
                                           "body":  "There are significant updates coming soon on passing tokens for web API calls in Blazor Web Apps, including updates to our section on passing tokens, updates to the OIDC sample apps (both Server and Auto versions) that will call a separate web API project, and updates showing how to use the downstream API MS Identity Web package (`Microsoft.Identity.Web.DownstreamApi`) in the Entra BFF sample.\n\nThis work is in progress on https://github.com/dotnet/AspNetCore.Docs/pull/35286 and should be finished and merged by the end of this week 🤞🍀. ",
                                           "updatedAt":  "2025-04-23T17:54:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86oamGa",
                                           "createdAt":  "2025-04-23T21:30:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEPcccA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "guardrex",
                                                                               "createdAt":  "2025-04-23T21:31:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MarvinKlein1508",
                                           "body":  "@MackinnonBuck yes, @guardrex has shown me this guides. His current PR will add more demos for this regarding the other rendermodes. I really like this 🦖 guy.\n\nMy main issue roots down to that I have no idea what OIDC connect even means. I get that this is an auth standard which is widely used but I still need to take into account that I have a pre-existing database with simple usernames and hashed passwords which I cannot simply exchange for something brand new since the entire app relies on this table. I\u0027m still wondering if the OIDC token is even a JWT token since I cannot verify it on jwt.io. I\u0027ve tried creating my custom OIDC server based on openiddict. They provide many samples for different scenarios https://github.com/openiddict/openiddict-samples\n\nThe docs say you shouldn\u0027t create your own custom JWT tokens and you should use 0Auth 2.0 or Open ID Connect standards instead. In my case though it\u0027s only an internal business app which is only available on the local intranet. \n\nSince all the docs only mention Microsoft Entra or stuff within Azure etc. I need to find a way to host this stuff on the local network since all stuff is hosted on-premise.\n\nAre there any good 0Auth 2.0 or Open ID Connect frameworks for ASP.NET Core which you can recommend? ",
                                           "updatedAt":  "2025-04-23T21:30:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86o5Ye8",
                                           "createdAt":  "2025-04-27T19:53:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEbyyXQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MarvinKlein1508",
                                                                               "createdAt":  "2025-07-24T14:19:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichaelHochriegl",
                                           "body":  "\u003e Are there any good 0Auth 2.0 or Open ID Connect frameworks for ASP.NET Core which you can recommend?\n\nNot really a framework for ASP.NET Core, but have you considered using [Keycloak](https://www.keycloak.org/)? It\u0027s a OIDC server basically that you don\u0027t have to implement (auth is hard), so you spin up Keycloak as a container, set up the flows and import your users and can target this Keycloak instance with your apps.",
                                           "updatedAt":  "2025-04-27T19:53:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86pB_Ky",
                                           "createdAt":  "2025-04-28T16:48:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "This Reddit comment from @halter73 might be helpful: https://www.reddit.com/r/dotnet/comments/1k8dlo2/should_i_use_identity_or_an_openid_connect/mp6b19o/?context=2",
                                           "updatedAt":  "2025-04-28T16:48:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86p8rdE",
                                           "createdAt":  "2025-05-05T14:48:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarvinKlein1508",
                                           "body":  "@MichaelHochriegl thanks for the suggestion I will give it a try. \n\nWhich information would I store in my local SQL database then? I need some way to assign the users to customers for example. Therefore they must exist in my database (which they won\u0027t anymore if the auth is being done by Keycloak)",
                                           "updatedAt":  "2025-05-05T14:48:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86p9KVi",
                                           "createdAt":  "2025-05-05T15:32:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichaelHochriegl",
                                           "body":  "\u003e @MichaelHochriegl thanks for the suggestion I will give it a try. \n\u003e \n\u003e Which information would I store in my local SQL database then?\n\nI would store an ID that uniquely identifies the user, so even if the DB gets leaked \"only\" IDs would be leaked.\n\nYou can get the ID from Keycloak via the tokens (depends if you want that in the accesstoken or the idtoken)\n\n",
                                           "updatedAt":  "2025-05-05T15:32:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86p-JTQ",
                                           "createdAt":  "2025-05-05T16:55:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOER-q1w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichaelHochriegl",
                                                                               "createdAt":  "2025-05-13T19:34:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "guardrex",
                                           "body":  "For the docs side of this issue, there have been several updates over the past couple of weeks ...\n\n* The [*Additional Scenarios* article in the Blazor Security node](https://learn.microsoft.com/aspnet/core/blazor/security/additional-scenarios#use-a-token-handler-for-web-api-calls) now has a *Use a token handler for web API calls* section with our latest guidance (and a mention and cross-link for those using MS Identity Web API/packages).\n* The [*Call web API* article](https://learn.microsoft.com/aspnet/core/blazor/call-web-api) has new sections on *Use a token handler for web API calls* and *Microsoft identity platform for web API calls* with updated remarks/cross-links to sample apps that make secure web API calls to external web APIs.\n* The non-BFF patterns of the [BWA+OIDC article](https://learn.microsoft.com/aspnet/core/blazor/security/blazor-web-app-with-oidc) and [BWA+Entra article](https://learn.microsoft.com/aspnet/core/blazor/security/blazor-web-app-with-entra) and their sample apps now have a separate web API to supply weather data using the product unit\u0027s latest recommended approaches, including the use of MS Identity Web API/packages for Entra.\n* The *Secure data in Blazor Web Apps with Interactive Auto rendering* section of the [Security overview article](https://learn.microsoft.com/aspnet/core/blazor/security/#secure-data-in-blazor-web-apps-with-interactive-auto-rendering) now shows example `ServerWeatherForecaster` classes that ...\n  * Create the weather data in the class (our only original example in this section).\n  * Get the weather data from an external web API using a named HTTP client and token handler.\n  * Get the weather data from an external web API using MS Identity Web API/packages.\n\nThere\u0027s one more update that we\u0027re planning on making to improve our passing tokens guidance. This scenario is where the dev really wants the access/refresh token in-hand in their code for direct use. The idea is that the token can go into a user claim in the `OnSigningIn` event. The claim can then be read around the app. When our OIDC sample app `CookieOidcRefresher.ValidateOrRefreshCookieAsync` is called and the user\u0027s tokens are refreshed, the claim can be updated with the new access token. We\u0027re still hashing out the details internally, and I hope we\u0027ll have the guidance in place by EOW (May 9) 🤞🍀. ",
                                           "updatedAt":  "2025-05-05T16:55:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86-1M3J",
                                           "createdAt":  "2025-08-19T17:37:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@MackinnonBuck is this needed for 10?",
                                           "updatedAt":  "2025-08-19T17:37:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86-17bk",
                                           "createdAt":  "2025-08-19T18:41:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "This would fall under the docs improvements covered in https://github.com/dotnet/aspnetcore/issues/59290 (the parent issue), which is currently slotted for RC2, so I would include this in that same bucket.\ncc @halter73",
                                           "updatedAt":  "2025-08-19T18:41:11Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "[Blazor] Improve authentification and usage of web apis (docs improvements)",
        "labels":  [
                       "Docs",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/61610",
        "createdAt":  "2025-04-22T11:08:33Z",
        "number":  61610,
        "author":  "JSparshottO2",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-15T17:16:12Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nI believe this is actually a bug within the MSAL library. I have raised [an issue on that related repo](https://github.com/AzureAD/microsoft-authentication-library-for-dotnet/issues/5213) but it\u0027s pretty silent there. After picking this issue back up today I\u0027ve been looking through the codebase and AddMsalAuthentication, as a call, actually lives in this repo so On the off-chance the issue is here (maybe it\u0027s not passing through the config to the MSAL library), I\u0027m going to raise it here as well. At the very least I hope to drum up some attention on the MSAL issue.\n\nThe issue on the MSAL board accurately reproduces it, copied from that issue for ease:\n\nI am in a Blazor Wasm application. The End-State that I\u0027m trying to get to is on application login, scopes are provided such that 1st and 3rd party resources are accessible using the single login without any future redirecting. In this example I am trying to access a 1st party API and a 3rd party Azure resource (a storage account).\nI am using a custom `TokenCredential` implementation that uses the `IAccessTokenProvider` to request a token with the Azure service scope, and creates an `Azure.Core.AccessToken` that can be used with the `Azure.Storage.Blobs` library.\n\nI\u0027ve tried various combinations of `DefaultAccessTokenScopes` and `AdditionalScopesToConsent`. AdditionalScopesToConsent doesn\u0027t seem to do anything in terms of \"prepping\" the scopes for future use. I\u0027m not even sure it\u0027s purpose really, it seems to do nothing.\n\nDepending on which scope is set as the `DefaultAccessTokenScopes` will dictate which service works.\n\nI\u0027m happy to provide any additional context as needed. I\u0027ve spent the last 2 days both trying to work out the combinations based upon my knowledge, and using the internet to try and work out how I can use the SSO into the blazor app to work with multiple external resources.\n\nN.B. All external resources use the same Microsoft Entra source. Users are configured in the IAM of the related resources.\n\n### Relevant code snippets\n\nProgram.cs\n\n```csharp\n//unrelated code...\nbuilder.Services.AddScoped\u003cTokenCredential, WasmTokenCredential\u003e();\nbuilder.Services.AddMsalAuthentication(options =\u003e\n{\n    builder.Configuration.Bind(\"AzureAd\", options.ProviderOptions.Authentication);\n    options.ProviderOptions.DefaultAccessTokenScopes.Add(\"api://\u003cAPI_resource_id\u003e/access_as_user\");\n    options.ProviderOptions.AdditionalScopesToConsent.Add(\"https://storage.azure.com/.default\");\n    options.UserOptions.RoleClaim = \"roles\";\n});\n//more unrelated code...\n```\n\nWasmTokenCredential.cs\n\n```csharp\nusing Azure.Core;\nusing Microsoft.AspNetCore.Components.WebAssembly.Authentication;\n\nusing AzureAccessToken = Azure.Core.AccessToken;\nusing WasmAccessToken = Microsoft.AspNetCore.Components.WebAssembly.Authentication.AccessToken;\n\nnamespace TokenExample;\n\npublic class WasmTokenCredential : TokenCredential\n{\n    private readonly IAccessTokenProvider _accessTokenProvider;\n\n    public WasmTokenCredential(IAccessTokenProvider accessTokenProvider)\n    {\n        _accessTokenProvider = accessTokenProvider;\n    }\n\n    public override AzureAccessToken GetToken(TokenRequestContext requestContext, CancellationToken cancellationToken)\n        =\u003e throw new NotSupportedException(\"Cannot use synchronous token acquisition in a WebAssembly environment.\");\n\n    public override async ValueTask\u003cAzureAccessToken\u003e GetTokenAsync(TokenRequestContext requestContext, CancellationToken cancellationToken)\n        =\u003e FromWasmResult(await _accessTokenProvider.RequestAccessToken(new()\n        {\n            Scopes = [.. requestContext.Scopes]\n        }));\n\n    private AzureAccessToken FromWasmResult(AccessTokenResult tokenResult)\n    {\n        if (tokenResult.TryGetToken(out WasmAccessToken? accessToken) == false)\n        {\n            throw new InvalidOperationException(\"Failed to obtain an access token.\");\n        }\n        return new AzureAccessToken(accessToken.Value, accessToken.Expires);\n    }\n}\n```\n\nBlobService.cs\n\n```csharp\nusing Azure.Core;\nusing Azure.Storage.Blobs;\nusing Microsoft.Extensions.Options;\n\nnamespace TokenExample;\n\npublic class BlobService\n{\n    private readonly BlobServiceClient _blobServiceClient;\n\n    public BlobService(IOptions\u003cBlobOptions\u003e configOption, TokenCredential credentials)\n    {\n        _blobServiceClient = new BlobServiceClient(new Uri(configOption.Value.Location), credentials);\n    }\n\n    public async Task\u003cbool\u003e HasContainer(string container)\n        =\u003e (await _blobServiceClient.GetBlobContainerClient(container).ExistsAsync()).Value;\n}\n```\n\nappsettings.json\n\n```json\n{\n  \"AzureAd\": {\n    \"ClientId\": \"\u003cCLIENT_ID\u003e\",\n    \"Authority\": \"https://login.microsoftonline.com/\u003cTENANT_ID\u003e\",\n    \"ValidateAuthority\": true\n  },\n  \"Blob\": {\n    \"Location\": \"https://\u003cBLOB_NAME\u003e.blob.core.windows.net\"\n  }\n}\n```\n\n\n### Expected Behavior\n\nOn initial login in blazor WebAssembly, no further login prompts are required for accessing other authorized Azure Resources. (in this example, A blob storage)\n\n### .NET Version\n\n9.0.203",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxEnGFA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86pCD0I",
                                           "createdAt":  "2025-04-28T16:54:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "We think this could be caused by a trimming issue. We\u0027ll need to investigate it further.",
                                           "updatedAt":  "2025-04-28T16:54:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87EScYU",
                                           "createdAt":  "2025-09-15T17:16:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Thank you for filing this issue. In order for us to investigate this issue, please provide [a minimal repro project](https://github.com/dotnet/aspnetcore/blob/main/docs/repro.md) that illustrates the problem without unnecessary code. Please share with us in a public GitHub repo because we cannot open ZIP attachments, and don\u0027t include any confidential content.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-15T17:16:11Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "AdditionalScopesToConsent seemingly being ignored",
        "labels":  [
                       "Needs: Author Feedback",
                       "Needs: Repro",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/61797",
        "createdAt":  "2025-05-05T15:11:30Z",
        "number":  61797,
        "author":  "Coder3333",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-07T17:26:07Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nWhen I call options.ClaimActions.Remove(\"given_name\") on an OpenIdConnectOptions, I do not get \"given_name\" as a claim.  \"given_name\" is definitely in the JWT, and if I use options.MapInboundClaims = false, then \"given_name\" does show up in the claims, but it also disables any claim mappings that I have set.\n\n### Expected Behavior\n\n\"given_name\" would be added to my identity\u0027s claims.\n\n### Steps To Reproduce\n\nCall options.ClaimActions.Remove(\"given_name\") when \"given_name\" is in the JWT.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8\n\n### Anything else?\n\nWhen I call options.ClaimActions.Remove(\"given_name\"), I do see the \"given_name\" action removed from options.ClaimActions that is set by the constructor of OpenIdConnectOptions, but it doesn\u0027t seem to help, as \"given_name\" still does not show up in my claims, where \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname\" is in my claims, but not my JWT.\n\nI see that if I call Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.DefaultInboundClaimTypeMap.Remove(\"given_name\"), that it works and the \"given_name\" claim shows up, even without calling options.ClaimActions.Remove(\"given_name\").  Is this the way this is expected to work?  Shouldn\u0027t the call to ClaimActions.Remove take precedence over the default?\n\nUltimately, I want \"given_name\" to show up as a claim if it is in my JWT.  What is the correct way to do this?  I thought that it would be to call options.ClaimActions.Remove(\"given_name\"), but maybe that is not how this feature was designed.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqfl7mg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86p-J9C",
                                           "createdAt":  "2025-05-05T16:56:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "@Coder3333, what identity provider are you using?\n\nYou could try setting `GetClaimsFromUserInfoEndpoint` to `true`.\n\nIf that doesn\u0027t work, a minimal repro demonstrating the problem would help us investigate the issue further.",
                                           "updatedAt":  "2025-05-05T16:56:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86p-Xua",
                                           "createdAt":  "2025-05-05T17:15:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Coder3333",
                                           "body":  "\u003e [@Coder3333](https://github.com/Coder3333), what identity provider are you using?\n\u003e \n\u003e You could try setting `GetClaimsFromUserInfoEndpoint` to `true`.\n\u003e \n\u003e If that doesn\u0027t work, a minimal repro demonstrating the problem would help us investigate the issue further.\n\nI am just using AddOpenIdConnect and connecting to Azure B2C as the idp.  The JWT has all of the expected attributes, including \"given_name\", but it keeps getting mapped to an alternate claim name.",
                                           "updatedAt":  "2025-05-05T17:15:34Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "options.ClaimActions.Remove(\"given_name\") not working",
        "labels":  [
                       "investigate",
                       "Needs: Attention :wave:",
                       "Needs: Repro",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/61820",
        "createdAt":  "2025-05-07T07:53:20Z",
        "number":  61820,
        "author":  "randelramirez",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T08:08:11Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nI have a ASP.NET 9 BFF that connects to Keycloak for Auth.\n\nOn my BFF I have a /bff/register endpoint like this:\n\n```\napp.MapGet(\"/bff/register\", (HttpContext context) =\u003e\n{\n    var authProperties = new AuthenticationProperties()\n    {\n        RedirectUri = \"/\",\n    };\n\n    return Results.Challenge(authProperties,\n        new List\u003cstring\u003e { \"oidc\" });\n});\n```\n\nand on my OpenIdConnect setup:\n\n```\noptions.Events = new OpenIdConnectEvents\n        {\n            OnRedirectToIdentityProvider = context =\u003e\n            {\n                if (context.Request.Path.HasValue \u0026\u0026 context.Request.Path.Value.Contains(\"bff/register\"))\n                {\n                    context.ProtocolMessage.Prompt = \"create\";\n                }\n\n                return Task.CompletedTask;\n            }\n        };\n```\n\nWith this setup the registration page of Keycloak is shown when using  \"Microsoft.AspNetCore.Authentication.OpenIdConnect\" Version=\"8.0.15\" \n\nBut when I migrated to version 9, it seems the prompt parameter is not being passed properly because the Login UI is displayed instead of the User Registration UI\n\n\n\n### Expected Behavior\n\nThe prompt should be passed properly to the Auth flow properly\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n_No response_\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxVqTUA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86rQkn9",
                                           "createdAt":  "2025-05-12T16:36:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESQU3g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "randelramirez",
                                                                               "createdAt":  "2025-05-15T14:15:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "Thanks for reaching out, @randelramirez.\n\nWould you be able to provide us with a network trace from your browser?",
                                           "updatedAt":  "2025-05-12T16:36:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86r5fV5",
                                           "createdAt":  "2025-05-15T14:15:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "randelramirez",
                                           "body":  "\u003e Thanks for reaching out, [@randelramirez](https://github.com/randelramirez).\n\u003e \n\u003e Would you be able to provide us with a network trace from your browser?\n\nHere\u0027s a network trace for OpenIdConnect 8.0.15 prompt=create is working\n\n[OpenIdConnect_8.0.15.har.zip](https://github.com/user-attachments/files/20229716/OpenIdConnect_8.0.15.har.zip)\n\nFor OpenIdConnect 9.0.5 prompt=create does not work\n\n[OpenIdConnect_9.0.5.har.zip](https://github.com/user-attachments/files/20229743/OpenIdConnect_9.0.5.har.zip)\n\n@MackinnonBuck ",
                                           "updatedAt":  "2025-05-15T14:15:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87EUXNY",
                                           "createdAt":  "2025-09-15T19:42:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "@randelramirez, I think this issue might be caused by the fact that Pushed Authorization Requests (PAR) are enabled by default starting in .NET 9. Could you try disabling PAR by setting `OpenIdConnectOptions.PushedAuthorizationBehavior` to `PushedAuthorizationBehavior.Disable` and see if that resolves your issue? Thanks.",
                                           "updatedAt":  "2025-09-15T19:42:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87EVO7B",
                                           "createdAt":  "2025-09-15T20:45:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiqymw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "randelramirez",
                                                                               "createdAt":  "2025-09-17T15:06:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "@randelramirez also, if possible, would you be able to provide us with a minimal repro, hosted as a public GitHub repository so that we can investigate the issue further? This would be especially helpful if changing the `PushedAuthorizationBehavior` option doesn\u0027t fix the issue.",
                                           "updatedAt":  "2025-09-15T20:45:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87E5JVj",
                                           "createdAt":  "2025-09-17T14:36:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "randelramirez",
                                           "body":  "@MackinnonBuck alright I\u0027ll try tomorrow or if it doesn\u0027t work I\u0027ll provide a repo.\n\nThank you 🙏",
                                           "updatedAt":  "2025-09-17T14:36:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87FHep-",
                                           "createdAt":  "2025-09-18T12:01:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "randelramirez",
                                           "body":  "@MackinnonBuck PushedAuthorizationBehavior.Disable worked ☑️, I\u0027ll put up a mini repo so you guys can further investigate",
                                           "updatedAt":  "2025-09-18T12:01:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87FITUB",
                                           "createdAt":  "2025-09-18T12:52:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "randelramirez",
                                           "body":  "@MackinnonBuck  \n\n[keycloak-asp-netBFF-react.zip](https://github.com/user-attachments/files/22406839/keycloak-asp-netBFF-react.zip)",
                                           "updatedAt":  "2025-09-18T12:53:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87FWpNQ",
                                           "createdAt":  "2025-09-19T07:52:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "randelramirez",
                                           "body":  "@MackinnonBuck btw, I\u0027m for you guys to close this issue, I tried using IdentityServer with asp.net core open id connect v9 and it recognizes the prompt parameter correctly (v8/v9 works correctly)\n\nseems to be an issue on the keycloak side",
                                           "updatedAt":  "2025-09-19T08:08:11Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "context.ProtocolMessage.Prompt is not working on Microsoft.AspNetCore.Authentication.OpenIdConnect",
        "labels":  [
                       "investigate",
                       "feature-oidc",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/61824",
        "createdAt":  "2025-05-07T14:40:54Z",
        "number":  61824,
        "author":  "kiwiwings",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-14T17:08:14Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nThe [LdapAdapter class](https://github.com/dotnet/aspnetcore/blob/main/src/Security/Authentication/Negotiate/src/Internal/LdapAdapter.cs) is using the full down-level logon name to do LDAP queries.\n\nIn our active directory the sAMAccountName doesn\u0027t contain the domain and hence the lookup fails.\nI found definitions which say [it\u0027s a must to contain the domain name](https://serverfault.com/questions/779504/samaccountname-requires-domain-to-authenticate) and [vice versa](https://learn.microsoft.com/en-us/windows/win32/adschema/a-samaccountname)\n\n\n\n### Describe the solution you\u0027d like\n\nWould it be possible to introduce an option to change the behavior of LdapAdapter to omit the domain name on the ldap lookup?\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOq7fhVw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86rQmlD",
                                           "createdAt":  "2025-05-12T16:39:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "@kiwiwings, why doesn\u0027t `sAMAccountName` contain the domain name? How common is this? I\u0027m not an LDAP expert.",
                                           "updatedAt":  "2025-05-12T16:39:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86rV_DE",
                                           "createdAt":  "2025-05-13T00:38:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kiwiwings",
                                           "body":  "@MackinnonBuck I can only guess: because our AD tree is dating back to 2004 and my second link in the description points out, that backslash shouldn\u0027t be part of the sAMAccountName when dealing with old windows versions.\n\nI can\u0027t give you statistics on how often this is the case, but converting the AD entries is also not happening soon.",
                                           "updatedAt":  "2025-05-13T00:38:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86rt-FX",
                                           "createdAt":  "2025-05-14T17:08:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "Thanks for the clarification, @kiwiwings. We\u0027re going to move this issue to the backlog to determine its impact.",
                                           "updatedAt":  "2025-05-14T17:08:09Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Enable domain-less sAMAccountName in LdapAdapter",
        "labels":  [
                       "Needs: Attention :wave:",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/61900",
        "createdAt":  "2025-05-13T14:27:01Z",
        "number":  61900,
        "author":  "SaleSwift",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-17T17:06:22Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\n🔐 Certificate Structure:\nI’m using a custom certificate chain with the following hierarchy:\n\nRoot CA\n └── Intermediate CA\n      └── End-Entity (Leaf) Certificate\nThe Root CA signs the Intermediate CA.\n\nThe Intermediate CA signs the End-Entity (client/leaf) certificate.\n\nThe server trusts only the Root CA. The Intermediate CA is not installed on the server\u0027s trusted certificate store.\n\nThe client certificate includes both the Intermediate and End-Entity certificates in a full chain (e.g., PFX or PEM bundle).\n\n **Problem:**\n**When the client sends the certificate with both the Intermediate and End-Entity certificates:**\n\n**The ASP.NET Certificate Authentication Middleware fails with this error:**\n**PartialChain: unable to get local issuer certificate**\n**The middleware is unable to build a full trust chain, even though the intermediate is present in the client certificate chain.**\n\nIf only the Intermediate certificate is sent by the client, the request is correctly success\n\nExpected Behavior:\nThe middleware should be able to build the chain from the leaf through the intermediate up to the trusted root, using the intermediate provided by the client — as most TLS clients (e.g., OpenSSL, browsers) do.\n\nServer side code \n\n```\npublic static AuthenticationBuilder AddSaleSwiftCertificate(this AuthenticationBuilder builder)\n  {\n      return builder.AddCertificate(options =\u003e\n      {\n          X509Certificate2 rootCertificate = GetRootCertificate();\n\n          options.RevocationMode = X509RevocationMode.NoCheck;\n          options.ChainTrustValidationMode = X509ChainTrustMode.CustomRootTrust;\n          options.CustomTrustStore = [rootCertificate];\n\n          options.Events = new CertificateAuthenticationEvents()\n          {\n              OnCertificateValidated = context =\u003e\n              {\n                  IEnumerable\u003cClaim\u003e claims = ParseSaleSwiftCertificateToClaims(context);\n\n                  ClaimsIdentity claimsIdentity = new(claims, context.Scheme.Name);\n\n                  if (context.Principal == null)\n                  {\n                      context.Principal = new ClaimsPrincipal(claimsIdentity);\n                  }\n                  else\n                  {\n                      context.Principal.AddIdentity(claimsIdentity);\n                  }\n\n                  context.Success();\n\n                  return Task.CompletedTask;\n              }\n          };\n      })\n          .AddCertificateCache(options =\u003e\n          {\n              options.CacheSize = 1024;\n              options.CacheEntryExpiration = TimeSpan.FromMinutes(2);\n          });\n  }\n```\n\nClient side code (HttpClient that communicate with the api)\n\n```\nservices.AddHttpClient\u003cPossHttpClient\u003e(httpClient =\u003e\n    {\n        httpClient.BaseAddress = new Uri(configuration.GetConnectionString(\"PossApi\")!);\n    }).ConfigurePrimaryHttpMessageHandler((serviceProvider) =\u003e\n    {\n        HttpClientHandler httpClientHandler = new();\n        httpClientHandler.ClientCertificateOptions = ClientCertificateOption.Manual;\n        PosServerCertificate posServerCertificate = serviceProvider.GetRequiredService\u003cPosServerCertificate\u003e();\n        httpClientHandler.ClientCertificates.Add(posServerCertificate.Value);\n\n        return httpClientHandler;\n    });\n```\n\n\nQuestion:\nIs this behavior expected in ASP.NET Core?\n\nIs it correct that the server trusts only the root CA, while the client provides both the intermediate and leaf certificates in its chain?\nOr am I missing a required step (e.g., should the server also know about the intermediate)?\n\n\nCertificates are added to files\n\n**PosServer is the leaf**\n**PosCa is the intermidate** \n**SaleSwiftCA is the root**\n\n**All passwords 123456**\n\n[Certificates.zip](https://github.com/user-attachments/files/20189664/Certificates.zip)\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxEpORw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86ruHa6",
                                           "createdAt":  "2025-05-14T17:23:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "@bartonjs, do you happen to know what might be wrong here, at a glance?",
                                           "updatedAt":  "2025-05-14T17:23:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86rufBO",
                                           "createdAt":  "2025-05-14T18:02:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "Without looking inside the zip, the possibilities in my head are:\n\n* There are actually two different intermediate certificates that look like valid signers for the leaf cert, but only one of them looks validly signed by the root.  If the invalid one is sent in the handshake, the chain engine has no reason to look for a \"better\" copy of it.  If the valid one is retrievable by AIA, then \"less data\" would yield \"more success\".\n* There\u0027s some other, irrelevant, cert in a PFX, and you\u0027re not using the one you think you are as the client cert.\n\n",
                                           "updatedAt":  "2025-05-14T18:02:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86rvkhY",
                                           "createdAt":  "2025-05-14T19:47:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "razyhalaby",
                                           "body":  "\u003e Without looking inside the zip, the possibilities in my head are:\n\u003e \n\u003e * There are actually two different intermediate certificates that look like valid signers for the leaf cert, but only one of them looks validly signed by the root.  If the invalid one is sent in the handshake, the chain engine has no reason to look for a \"better\" copy of it.  If the valid one is retrievable by AIA, then \"less data\" would yield \"more success\".\n\u003e * There\u0027s some other, irrelevant, cert in a PFX, and you\u0027re not using the one you think you are as the client cert.\n\u003e \n\u003e \n\nWhat do you mean with two intermediate that are valid from the root\n\nWhen i create the intermediate i save them to .cer file and .pfx\nAnd from the pfx i generate the child one\n\nSo into that child i add the cer intermediate and save it into pfx called leaf with intermediate\nAnd that one i use as client certificate  ",
                                           "updatedAt":  "2025-05-14T19:47:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86rwuDs",
                                           "createdAt":  "2025-05-14T21:54:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "\u003e What do you mean with two intermediate that are valid from the root\n\nBasically, that \"CN=Some Intermediate\" was made, then the certificate was edited in a chain-invalidating way; and maybe a new version of \"CN=Some Intermediate\" was made.  So there are, in the universe, two or three different variants of the same certificate.\n\n\u003e When i create the intermediate...\n\nSounds like that isn\u0027t the state you\u0027re in, then.\n\nAs I said, \"without looking inside the zip\".  I was asked if I knew \"at a glance\" what could cause the state, I answered in the general, not the specific.  So someone\u0027ll have to do some poking at things in a debugger to get more information specific to the situation.",
                                           "updatedAt":  "2025-05-14T21:54:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86rxKHe",
                                           "createdAt":  "2025-05-14T23:07:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "razyhalaby",
                                           "body":  "\u003e \u003e What do you mean with two intermediate that are valid from the root\n\u003e \n\u003e Basically, that \"CN=Some Intermediate\" was made, then the certificate was edited in a chain-invalidating way; and maybe a new version of \"CN=Some Intermediate\" was made.  So there are, in the universe, two or three different variants of the same certificate.\n\u003e \n\u003e \u003e When i create the intermediate...\n\u003e \n\u003e Sounds like that isn\u0027t the state you\u0027re in, then.\n\u003e \n\u003e As I said, \"without looking inside the zip\".  I was asked if I knew \"at a glance\" what could cause the state, I answered in the general, not the specific.  So someone\u0027ll have to do some poking at things in a debugger to get more information specific to the situation.\n\nOh okay I understand.\nI hope someone check the certificates \nCause I think that the certificate authentication of asp net core isnt extract the intermediate sent with leaf as client certificate.",
                                           "updatedAt":  "2025-05-14T23:07:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86rxNjS",
                                           "createdAt":  "2025-05-14T23:17:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "FWIW, I\u0027ve assumed that \"When the client sends the certificate with both the Intermediate and End-Entity certificates... The ASP.NET Certificate Authentication Middleware fails\" means you\u0027ve seen on a network trace that the intermediate certificate was actually sent.\n\nIf the client chain build can\u0027t figure out the certificate automatically, then the client won\u0027t send the intermediate (\"it was in the PFX with the client cert\" isn\u0027t good enough). Then, if the server doesn\u0027t already know about the intermediate, it\u0027ll see it as PartialChain.\n\nI think a client cert for SslStream might be able to use SslStreamCertificateContext.Create(cert, extraCerts) to provide the intermediate (as an extraCerts member) down to the TLS engine.  But for Windows it might just require putting the intermediate certificate into the CurrentUser\\CA (intermediate certificate cache) store.\n\n",
                                           "updatedAt":  "2025-05-14T23:17:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86rxbo2",
                                           "createdAt":  "2025-05-15T00:05:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "razyhalaby",
                                           "body":  "\u003e FWIW, I\u0027ve assumed that \"When the client sends the certificate with both the Intermediate and End-Entity certificates... The ASP.NET Certificate Authentication Middleware fails\" means you\u0027ve seen on a network trace that the intermediate certificate was actually sent.\n\u003e \n\u003e If the client chain build can\u0027t figure out the certificate automatically, then the client won\u0027t send the intermediate (\"it was in the PFX with the client cert\" isn\u0027t good enough). Then, if the server doesn\u0027t already know about the intermediate, it\u0027ll see it as PartialChain.\n\u003e \n\u003e I think a client cert for SslStream might be able to use SslStreamCertificateContext.Create(cert, extraCerts) to provide the intermediate (as an extraCerts member) down to the TLS engine.  But for Windows it might just require putting the intermediate certificate into the CurrentUser\\CA (intermediate certificate cache) store.\n\u003e \n\u003e \n\nAs far as I understand, if the leaf certificate does not include the intermediate certificate, but the intermediate is installed in the Windows Intermediate Certification Authorities store, then Windows should automatically build the full chain when sending the client certificate during the request.\n\nAlternatively, if I bundle the intermediate certificate within the leaf .pfx file, then it should be sent together without relying on the store.\n\nIn any case, I tested three scenarios:\n\t1.\tLeaf certificate only, with intermediate installed in Windows.\n\t2.\tLeaf + intermediate bundled in the .pfx, with intermediate also installed in Windows.\n\t3.\tLeaf + intermediate bundled in the .pfx, with intermediate not installed in Windows.\n\nIn all three cases, the server still fails with a PartialChain error.\n\nHowever, I have not yet used Wireshark to verify whether the client actually sent the intermediate certificate in the TLS handshake.\n\nNote: The server is running on Linux, and the client is on Windows.",
                                           "updatedAt":  "2025-05-15T00:05:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86rxnWd",
                                           "createdAt":  "2025-05-15T00:46:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "\u003e Alternatively, if I bundle the intermediate certificate within the leaf .pfx file, then it should be sent together without relying on the store.\n\nThat is not true.  There\u0027s no affinity from being co-located in a PFX.\n\n(ASP.NET might have a feature that makes it true... but from the low-level chain-building piece, it\u0027s not true)",
                                           "updatedAt":  "2025-05-15T00:47:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86tJ9xw",
                                           "createdAt":  "2025-05-23T16:40:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ShayMusachanov-dev",
                                           "body":  "We are experiencing the exact same issue. Despite the client providing the complete certificate chain (including the intermediate certificate), the ASP.NET Core certificate authentication middleware fails with the PartialChain error because the intermediate certificate is not installed on the server.\n\nImportant clarification: In our use case, we are using certificates solely for authentication (UseAuthentication) and NOT for establishing the TLS connection. This distinction matters because the workaround mentioned in [#42010](https://github.com/dotnet/aspnetcore/issues/42010) (which led to PR [#33953](https://github.com/dotnet/aspnetcore/pull/33953) adding a new UseHttps overload with per-connection callbacks) only applies when certificates are used for TLS establishment, not when they\u0027re used by the authentication middleware.\n\nAfter searching for related issues, I found [#43661](https://github.com/dotnet/aspnetcore/issues/43661) which appears to describe the same problem. That issue points out that this behavior actually violates RFC 5246, which clearly states that servers should use the certificate chain provided by the client during the TLS handshake for validation purposes.\n\nIt\u0027s concerning that this issue has been known since at least 2022 (as evidenced by [#43661](https://github.com/dotnet/aspnetcore/issues/43661)) but still persists. The current implementation forces us to install all intermediate certificates on every server, which is impractical and goes against standard TLS practices where clients provide their certificate chain.\n\nHas there been any progress on fixing this fundamental issue with certificate chain validation in the authentication middleware?",
                                           "updatedAt":  "2025-05-23T16:40:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86tYwLM",
                                           "createdAt":  "2025-05-26T08:27:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "razyhalaby",
                                           "body":  "@bartonjs @MackinnonBuck ",
                                           "updatedAt":  "2025-05-26T13:31:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86uddUP",
                                           "createdAt":  "2025-06-01T10:07:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SaleSwift",
                                           "body":  "Hi @MackinnonBuck, @bartonjs, and team,\n\nThis issue has been open for several weeks now without a clear resolution or official response.\nCould you please provide an update or indicate if there is a planned fix or workaround?\n\nThank you for your time and support!",
                                           "updatedAt":  "2025-06-01T10:07:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde87ESk5H",
                                           "createdAt":  "2025-09-15T17:26:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danroth27",
                                           "body":  "\u003e It\u0027s concerning that this issue has been known since at least 2022 (as evidenced by https://github.com/dotnet/aspnetcore/issues/43661) but still persists. The current implementation forces us to install all intermediate certificates on every server, which is impractical and goes against standard TLS practices where clients provide their certificate chain.\n\n@joperezr I think we should investigate to understand the root cause here and what would it take to address the problem. Then we can decide what timing makes sense given the cost and risk of the fix.",
                                           "updatedAt":  "2025-09-15T17:26:17Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "ASP.NET Certificate Authentication Fails with PartialChain When Intermediate Is Included in Client Certificate",
        "labels":  [
                       "investigate",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/61960",
        "createdAt":  "2025-05-16T10:10:30Z",
        "number":  61960,
        "author":  "galehost",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-15T20:09:54Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nI\u0027m working on a Blazor WebAssembly app that uses MSAL package `Microsoft.Authentication.WebAssembly.Msal` version `8.0.13` for authentication. I configured the MSAL cache to use localStorage by setting the CacheLocation in MsalProviderOptions like this:\n\n```\nbuilder.Services.AddMsalAuthentication(options =\u003e\n{\n    options.ProviderOptions.Cache.CacheLocation = \"localStorage\";\n    // other config...\n});\n```\n\nThis works well initially—tokens are stored and retrieved as expected. However, after a few hours (presumably when the token expires), the app doesn\u0027t seem to automatically acquire a new token. Even when I try to sign out manually using:\n\n`await SignOutManager.SetSignOutState();`\n\n...any pages decorated with `[Authorize]` still redirect to the NotAuthorized view. The only workaround I’ve found is to manually clear localStorage in the browser, which obviously isn’t ideal.\n\nAny insights or suggestions would be greatly appreciated!\n\n### Expected Behavior\n\nThe expected behavior when using localStorage as the cacheLocation in a Blazor WebAssembly app with MSAL should be:\n\n- **Persistent Token Storage**: Tokens (ID, access, and refresh) should persist across browser sessions as long as they are valid and not manually cleared, since localStorage is not cleared on tab or browser close.\n- **Automatic Silent Token Renewal**: When an access token expires, MSAL should attempt to silently acquire a new token using the refresh token (if available and valid), without requiring user interaction.\n- **Graceful Sign-Out**: Calling SignOutManager.SetSignOutState() should clear the authentication state and redirect the user appropriately. After sign-out, protected routes decorated with [Authorize] should redirect to the login page or a configured fallback, not remain stuck on a NotAuthorized view.\n- **No Manual Storage Clearing Required**: Users should not need to manually clear localStorage to resolve expired token issues. The library should handle token lifecycle management internally.\n\n### Steps To Reproduce\n1. Run a Blazor wasm project with Microsoft.Authentication.WebAssembly.Msal\n```\nservices.AddMsalAuthentication(remoteAuthenticationOptions =\u003e\n{\n    remoteAuthenticationOptions.ProviderOptions.Cache.CacheLocation = \"localStorage\";\n    webAssemblyHostBuilder.Configuration.Bind(\n        \"AzureAd\",\n        remoteAuthenticationOptions.ProviderOptions.Authentication\n    );\n});\n```\n\n2. appsettings.json with `AzureAd` section:\n```\n\"AzureAd\": {\n  \"Authority\": \"Your-Authority\",\n  \"ClientId\": \"Your-ClientId\",\n  \"ValidateAuthority\": true\n}\n```\n\n3. Login into the project and wait until the token is expired.\n4. Go back to the page and you\u0027ll not be able to navigate through the page. Token has not been correctly refreshed.\n\nNeed to manually clean localStorage to force app to get a new token.\n\n### .NET Version\n\n9.0.204",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxFKN_w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde87EUo3_",
                                           "createdAt":  "2025-09-15T20:09:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danroth27",
                                           "body":  "We should try out this scenario with a newer version of msal.js. I\u0027ve opened #63688 to track updating to a newer msal.js version.",
                                           "updatedAt":  "2025-09-15T20:09:54Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Blazor WebAssembly + MSAL: Token not refreshing when using localStorage for cacheLocation",
        "labels":  [
                       "investigate",
                       "area-security"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/63663",
        "createdAt":  "2025-09-12T19:12:15Z",
        "number":  63663,
        "author":  "ladeak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-17T17:21:32Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nAdd multiple authentication providers configured. (ie. SAML+cookie and OAuth+JWT).\nAdd the built in Antiforgery CSRF protection.\nEndpoints can accept requests using either authentication method.\n\nFor the Antiforgery token validator, I would like to have an easy way to configure when to run validation or not, so that I can disable it when the client uses a JWT token.\n\n### Describe the solution you\u0027d like\n\nAn override option for the built in middleware or exposing a `ShouldValidate()` `Func\u003c\u003e` option in Add/UseAntiforgery methods.\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxGsByQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde87EawHJ",
                                           "createdAt":  "2025-09-16T05:18:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ladeak",
                                           "body":  "What I end up doing is taking and customizing the [middleware](https://github.com/dotnet/aspnetcore/blob/main/src/Antiforgery/src/AntiforgeryMiddleware.cs) also available in the repo. It would be nice not to know about some of the internals, ie. `__AntiforgeryMiddlewareWithEndpointInvoked` or `AntiforgeryValidationFeature`.\n\nOne approach idea:\n\n```csharp\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddAuthentication(); // Add multiple schemes\nbuilder.Services.AddAuthorization(); // Add multiple policies, setting default and fallback, etc.\nbuilder.Services.AddAntiforgery();\nvar app = builder.Build();\n\napp.UseAuthentication();\napp.UseAuthorization();\n\n// Func\u003cT,bool\u003e parameter 👇 to the authentication type of the identity such is one approach\napp.UseAntiforgery(Func\u003cHttpContext, bool\u003e ctx =\u003e ctx.User.Identity.AuthenticationType == \"jwt\"); \n\napp.MapPost(\"/post\", (HttpContext ctx) =\u003e\n{\n    return \"Hello World\";\n});\n```\n\nSecond approach idea: \n\nAnother approach could be making the current `AntiforgeryMiddleware` public with a protected method: `ShouldValidate`, similar to what the (also non-public) `AutoValidateAntiforgeryTokenAuthorizationFilter` has.\nThen anyone can derive and register the customized middleware in the services.",
                                           "updatedAt":  "2025-09-16T05:19:44Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ShoudValidate for Antiforgery Tokens in Minimal APIs",
        "labels":  [
                       "investigate",
                       "area-security",
                       "feature-antiforgery"
                   ]
    }
]
