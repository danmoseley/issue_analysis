[
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/4961",
        "createdAt":  "2018-12-14T08:30:06Z",
        "number":  4961,
        "author":  "0xced",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCRHfOw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "delixfe",
                                            "createdAt":  "2022-03-02T19:23:40Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2020-11-06T19:18:40Z",
        "body":  "Just letting you know that there\u0027s a current effort to define a standard for health checks: [Health Check Response RFC Draft for HTTP APIs](https://inadarei.github.io/rfc-healthcheck/).\r\n\r\nSee also [Support ASP.NET Core healthchecks #29](https://github.com/inadarei/rfc-healthcheck/issues/29) on their GitHub repository.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKxv8rg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2NTI2ODM3Mw==",
                                           "createdAt":  "2019-02-19T19:07:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBl0B5Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bradygaster",
                                                                               "createdAt":  "2020-11-09T17:07:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ycrumeyrolle",
                                                                               "createdAt":  "2021-04-02T12:01:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "rynowak",
                                           "body":  "Thanks for the suggestion. \r\n\r\nI think what would motivate us to provide something like this in the box would be knowing what kinds of monitoring systems are going to **consume** this format.",
                                           "updatedAt":  "2019-02-19T19:07:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMzI1NDQ0Ng==",
                                           "createdAt":  "2020-11-06T19:18:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBWLIHA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bradygaster",
                                                                               "createdAt":  "2020-11-09T17:07:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mkArtakMSFT",
                                           "body":  "@bradygaster I think this may be something you will be interested in.",
                                           "updatedAt":  "2020-11-06T19:18:40Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Consider \"Health Check Response RFC Draft for HTTP APIs\"",
        "labels":  [
                       "enhancement",
                       "area-healthchecks",
                       "severity-nice-to-have",
                       "affected-very-few"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/6677",
        "createdAt":  "2019-01-14T19:00:45Z",
        "number":  6677,
        "author":  "tillig",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2020-11-06T19:19:20Z",
        "body":  "Issue #2579 added the ability to bind health checks to a specific port so they\u0027re only visible to internal components. Good stuff.\r\n\r\nHowever, it turns out you can\u0027t _dedicate_ the port to management/health check purposes. That is, if there\u0027s a \"main port\" for handling other requests and a \"management port\" for handling health requests... you can still make all requests over that management port that you would over the main port. Setting a port on health checks means the health checks only listen on that port... but the rest of the app (e.g., the MVC middleware) is still listening on all ports.\r\n\r\nIt would be nice if you could specify the health check port and have that be an exclusive handler on that port - _only_ health checks would respond on that port.\r\n\r\nGranted, this is easy enough middleware to write oneself, which is what I\u0027ll end up doing to work around it, but it\u0027d be helpful if this was supported out of the box.\r\n\r\nMy general use case here is Kubernetes and Istio using mTLS authentication. I want Kubernetes to be able to do [readiness/liveness checks on a specific port that bypasses the mTLS because you can\u0027t make Kubernetes use the specified certs for those checks](https://istio.io/docs/tasks/traffic-management/app-health-check/) but I don\u0027t want to leave the \"back door\" open for all the other services in the cluster to bypass the mTLS auth by making calls on the port I leave open for the health checks.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHiKRCQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2NTI2OTYzNg==",
                                           "createdAt":  "2019-02-19T19:11:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rynowak",
                                           "body":  "Hi @tillig - we agree that this is a good idea to have a recipe for. We will need to do some more server and configuration work to make this easy.\r\n\r\nI think you could do this today by placing the health checks middleware before the http redirect. If you register the health checks middleware with a port and an empty path it will respond to all requests for that port.\r\n\r\nhttps://github.com/aspnet/AspNetCore/blob/master/src/Middleware/HealthChecks/src/Builder/HealthCheckApplicationBuilderExtensions.cs",
                                           "updatedAt":  "2019-02-19T19:11:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwNTU4MTgzMw==",
                                           "createdAt":  "2019-06-25T19:09:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tillig",
                                           "body":  "Circling back on this, a concrete example of something that works:\r\n\r\n```c#\r\napp.UseHealthChecks(\"/healthz\", 49331)\r\n   .MapWhen(\r\n     ctx =\u003e ctx.Connection.LocalPort == 49331,\r\n     b =\u003e b.Run(ctx =\u003e { ctx.Response.StatusCode = 400; return Task.CompletedTask; }))\r\n```\r\n\r\nIn this case, if the management port is set up and it\u0027s not a health request, everything else will be 400. However, on the main port for the app, the rest of the app will kick in correctly.\r\n\r\nThis would also allow you to add other checks, like a separate readiness check or something, on the same port as long as the middleware was registered before the `MapWhen`.",
                                           "updatedAt":  "2019-06-25T19:09:29Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Enable health check only management port",
        "labels":  [
                       "enhancement",
                       "area-healthchecks",
                       "severity-nice-to-have",
                       "affected-very-few"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/21890",
        "createdAt":  "2019-01-17T21:06:42Z",
        "number":  21890,
        "author":  "Tratcher",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCCZF3Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tomkerkhove",
                                            "createdAt":  "2019-07-01T07:01:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pascalirminger",
                                            "createdAt":  "2019-09-02T09:29:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andrepf",
                                            "createdAt":  "2020-02-19T09:32:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andrii-litvinov",
                                            "createdAt":  "2020-04-09T17:05:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RagingKore",
                                            "createdAt":  "2020-05-28T10:40:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "moanrose",
                                            "createdAt":  "2020-10-15T10:09:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Trivivium",
                                            "createdAt":  "2021-10-17T13:47:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kdcllc",
                                            "createdAt":  "2021-11-12T23:41:13Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2020-11-06T19:25:26Z",
        "body":  "Epic: aspnet/AspNetCore#8834\r\n\r\nTCP base health checks for generic host without web host.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKCeVTQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2NDI1MzAyNw==",
                                           "createdAt":  "2019-02-15T23:56:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Prototype: https://github.com/glennc/worker/blob/0a454ca3e1c090bb9949290e4cb0043eb4d74a1d/content/infra/SocketHealthCheckPublisher.cs",
                                           "updatedAt":  "2019-02-15T23:56:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MjcxOTM4Mg==",
                                           "createdAt":  "2019-04-12T20:53:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "@anurse @glennc moving to preview6.",
                                           "updatedAt":  "2019-04-12T20:53:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MjcyMjI5NQ==",
                                           "createdAt":  "2019-04-12T21:03:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "I suspect this won\u0027t land in 3.0 at all. I\u0027m going to put this back in the triage queue.",
                                           "updatedAt":  "2019-04-12T21:03:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwNzE0MTg5Ng==",
                                           "createdAt":  "2019-07-01T07:02:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCCZF5A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RagingKore",
                                                                               "createdAt":  "2020-05-28T10:40:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kdcllc",
                                                                               "createdAt":  "2021-11-12T23:41:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tomkerkhove",
                                           "body":  "+1 on this, this is super important for workers - Certainly, if they are running in containers on orchestrators such as Kubernetes.",
                                           "updatedAt":  "2019-07-01T07:02:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MzY4Mjc2NQ==",
                                           "createdAt":  "2020-08-13T20:02:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-08-13T20:02:52Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Tcp health checks",
        "labels":  [
                       "enhancement",
                       "area-healthchecks",
                       "affected-few",
                       "severity-major"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/8530",
        "createdAt":  "2019-03-14T22:28:43Z",
        "number":  8530,
        "author":  "DamianEdwards",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCqLL0Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bronumski",
                                            "createdAt":  "2021-07-16T14:13:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2021-09-22T13:26:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Trivivium",
                                            "createdAt":  "2021-10-17T14:01:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "t-smirnov",
                                            "createdAt":  "2022-08-17T22:58:36Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-08-03T02:51:25Z",
        "body":  "We need to add the overload to Health Checks to enable passing an options configuration delegate when adding Health Checks to services, e.g.:\r\n\r\n``` csharp\r\nservices.AddHealthChecks(options =\u003e\r\n{\r\n    options.AllowCachingResponses = true;\r\n}).AddCheck\u003cMyHealthCheck\u003e()\r\n```\r\n\r\n@rynowak @glennc ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOu5JilA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MzY4NzIyNw==",
                                           "createdAt":  "2020-08-13T20:12:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-08-13T20:12:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzA2MDQxNA==",
                                           "createdAt":  "2020-10-03T07:21:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "weichch",
                                           "body":  "@pranavkm @Kahbazi I\u0027m curious about this issue, because it doesn\u0027t look valid to me.\r\n\r\nThe `AddHealthChecks` method has nothing to do with `HealthCheckOptions`. The `HealthCheckOptions` is the options class for `HealthCheckMiddleware`, and it\u0027s only settable when calling `MapHealthChecks`. So this issue looks similar to https://github.com/dotnet/aspnetcore/issues/18153.\r\n\r\nThe associated PR seems to have added an overload which takes `Action\u003cHealthCheckServiceOptions\u003e`, and it is not what @DamianEdwards asked for? Also, I\u0027d be interested in what the new overload can do because `HealthCheckServiceOptions` only manages the health check registrations that are already manageable via `AddCheck` methods, unless we are thinking of what I raised today https://github.com/dotnet/aspnetcore/issues/26570. \r\n\r\n\r\n",
                                           "updatedAt":  "2020-10-03T10:31:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0OTE5NDY3NQ==",
                                           "createdAt":  "2021-05-26T23:51:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jacobslusser",
                                           "body":  "@DamianEdwards, as pointed out, the `HealthCheckOptions` is used in `MapHealthChecks`, not `AddHealthChecks`. Did you mean to say `MapHealthChecks`?\r\n\r\nCurrently we can do as you suggested like:\r\n```cs\r\nendpoints.MapHealthChecks(\"/health\", new HealthCheckOptions()\r\n{\r\n    AllowCachingResponses = true\r\n});\r\n```\r\nI can send a PR for another overload that uses a configuration delegate like this if that is the ask:\r\n```cs\r\nendpoints.MapHealthChecks(\"/health\", options =\u003e {\r\n{\r\n    options.AllowCachingResponses = true;\r\n};\r\n```",
                                           "updatedAt":  "2021-05-26T23:51:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0OTc4MzU1NA==",
                                           "createdAt":  "2021-05-27T16:45:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "Have to cast my mind way back, but I think @weichch is right and what I was referring to was the fact that the `HealthCheckOptions` should be configurable in the DI container. The middleware would thus have to be updated to take `HealthCheckOptions` from DI in the case an instance wasn\u0027t passed to `MapHealthChecks`.",
                                           "updatedAt":  "2021-05-27T16:45:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde8444n8d",
                                           "createdAt":  "2021-10-29T02:55:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "weichch",
                                           "body":  "@DamianEdwards I think you can already get an instance of `HealthCheckOptions` from DI if not provided to `MapHealthChecks`. The `HealthCheckMiddleware` accepts instance of `IOptions\u003cHealthCheckOptions\u003e` in the constructor, therefore if not passed, an instance is resolved from DI.\r\n\r\nFor example:\r\n```\r\nservices.Configure\u003cHealthCheckOptions\u003e(opt =\u003e\r\n{\r\n    opt.AllowCachingResponses = true;\r\n});\r\n\r\n// This automatically gets the options from DI\r\nendpoints.MapHealthChecks(\"/health\"); \r\n```\r\n\r\nUnless we\u0027re talking about named option per different health check endpoint, which might require a new API to be added:\r\n\r\n```\r\npublic static IEndpointConventionBuilder MapHealthChecks(\r\n    this IEndpointRouteBuilder endpoints,\r\n    string pattern,\r\n    string name)\r\n```\r\nUsage:\r\n```\r\nservices.Configure\u003cHealthCheckOptions\u003e(\"HealthCheckWithCachingResponses\", opt =\u003e\r\n{\r\n    opt.AllowCachingResponses = true;\r\n});\r\n\r\nendpoints.MapHealthChecks(\"/health\", \"HealthCheckWithCachingResponses\"); \r\n```",
                                           "updatedAt":  "2021-10-29T03:01:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85FP5Ex",
                                           "createdAt":  "2022-06-21T14:05:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mu88",
                                           "body":  "Do I understand you correctly that there is nothing to fix/improve, therefore no _good first issue_? 🙂",
                                           "updatedAt":  "2022-06-21T14:05:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde867kmKU",
                                           "createdAt":  "2025-08-03T02:51:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "imparikshith",
                                           "body":  "Hi, I\u0027m interested in this issue.\nCan I contribute!!!",
                                           "updatedAt":  "2025-08-03T02:51:25Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "services.AddHealthChecks missing overload that takes delegate for configuring HealthChecksOptions",
        "labels":  [
                       "enhancement",
                       "area-healthchecks",
                       "good first issue",
                       "severity-minor",
                       "affected-very-few",
                       "help candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/21798",
        "createdAt":  "2019-05-09T13:50:24Z",
        "number":  21798,
        "author":  "viktorpeacock",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCgk7lA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JoshKeegan",
                                            "createdAt":  "2019-05-15T15:22:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stevendarby",
                                            "createdAt":  "2022-06-07T12:31:03Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2020-11-06T19:24:47Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\nWhen registering an async health check, I would like to have access to the service factory so that I can get my health checks to call dependencies that are resolved by the service factory. \r\n\r\n### Describe the solution you\u0027d like\r\nAddAsyncCheck to be able to resolve services via IoC\r\n\r\n### Describe alternatives you\u0027ve considered\r\nCopy DelegateHealthCheck from the extensions library and make it public. Then do the following:\r\n\r\n```\r\nservices.Add(new HealthCheckRegistration(\"bing\", provider =\u003e\r\n                {\r\n                    return new DelegateHealthCheck(async token =\u003e\r\n                    {\r\n                        var bing = provider.GetService\u003cIBingService\u003e();\r\n                        var bingSearchResponse = await bing.Find(new SearchCriteria(\"London\", CountryCode.GB));\r\n                        \r\n                        return bingSearchResponse.Count \u003e 0 \r\n                            ? new HealthCheckResult(HealthStatus.Healthy, \"Bing is there!\") \r\n                            : new HealthCheckResult(HealthStatus.Unhealthy, \"Bing gone walkies!\");\r\n                    });\r\n                }, null, new string[] {\"liveness-external\"}));\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJViC_w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTU1NzQ4OA==",
                                           "createdAt":  "2020-05-08T00:04:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "As part of the migration of components from dotnet/extensions to dotnet/runtime (https://github.com/aspnet/Announcements/issues/411) we will be bulk closing some of the older issues. If you are still interested in having this issue addressed, just comment and the issue will be automatically reactivated (even if you aren\u0027t the author). When you do that, I\u0027ll page the team to come take a look. If you\u0027ve moved on or workaround the issue and no longer need this change, just ignore this and the issue will be closed in **7 days**.\n\nIf you know that the issue affects a package that has moved to a different repo, please consider re-opening the issue in that repo. If you\u0027re unsure, that\u0027s OK, someone from the team can help!",
                                           "updatedAt":  "2020-05-08T00:04:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNjU1NzY4MA==",
                                           "createdAt":  "2020-05-11T08:35:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JoshKeegan",
                                           "body":  "I am still interested in this, although a workaround is available (see original post).",
                                           "updatedAt":  "2020-05-11T08:35:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNjU1NzY5NQ==",
                                           "createdAt":  "2020-05-11T08:35:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Paging @dotnet/extensions-migration ! This issue has been revived from staleness. Please take a look and route to the appropriate repository.",
                                           "updatedAt":  "2020-05-11T08:35:57Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Provide access to service factory when registering async health check",
        "labels":  [
                       "enhancement",
                       "area-healthchecks",
                       "severity-nice-to-have",
                       "affected-very-few"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/14453",
        "createdAt":  "2019-09-26T05:15:51Z",
        "number":  14453,
        "author":  "ThomasBergholdWieser",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBcl4Jw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "joaopgrassi",
                                            "createdAt":  "2019-09-26T10:39:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dasMulli",
                                            "createdAt":  "2019-09-26T14:19:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CosX",
                                            "createdAt":  "2019-10-23T12:45:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "olivierl",
                                            "createdAt":  "2020-04-24T07:01:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GuillaumeGuerra",
                                            "createdAt":  "2021-01-15T13:57:47Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2022-02-12T09:26:56Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\nRight now adding multiple different checks using the same DbContext type will result in some of them being failed, because the DbContext might already be disposed.\r\n\r\nDefault Lifetime of DbContext is scoped, it would be a shame to have to change that to transient for HealthChecks to work properly in this scenarop.\r\n\r\n### Describe the solution you\u0027d like\r\nPlease change or add options to configure this behavior to run every healthcheck in its own scope,\r\n\r\n### Additional context\r\nworking repro here:\r\nhttps://github.com/ThomasBergholdWieser/healthchecksrepro\r\n\r\nJust execute the /health endpoint a few times, it should happen pretty often. Change the Lifetime to Transient to make it work.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPdCc7g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNTM5NzQzNA==",
                                           "createdAt":  "2019-09-26T08:25:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "@ThomasBergholdWieser Thanks for contacting us.\r\n\r\nHave you tried resolving an IServiceScopeFactory within your HealthCheck and using that to create your own scope and resolve the DbContext from there?\r\n",
                                           "updatedAt":  "2019-09-26T08:25:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNTQwNTIyOQ==",
                                           "createdAt":  "2019-09-26T08:46:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dasMulli",
                                           "body":  "But that doesn\u0027t help that the inbox EF health check already created a dbcontext in the parent scope and the new sub-scope resolves the already created context from the parent scope?",
                                           "updatedAt":  "2019-09-26T08:46:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNTQxMDIwMQ==",
                                           "createdAt":  "2019-09-26T08:59:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ThomasBergholdWieser",
                                           "body":  "Injecting the IServiceScopeFactory helps with this check, but somehow i am now getting weird issues with the default AddDbContext Check. I have updated my repro to include another version of the Custom Check with the service scope factory. \r\n\r\nHere is an example response:\r\n\r\n```json\r\n{\r\n  \"status\": \"Unhealthy\",\r\n  \"statusComponents\": [\r\n    {\r\n      \"key\": \"AddDbContextCheck\",\r\n      \"value\": \"Unhealthy\",\r\n      \"desc\": \"An attempt was made to use the context while it is being configured. A DbContext instance cannot be used inside OnConfiguring since it is still being configured at this point. This can happen if a second operation is started on this context before a previous operation completed. Any instance members are not guaranteed to be thread safe.\",\r\n      \"ex\": \"An attempt was made to use the context while it is being configured. A DbContext instance cannot be used inside OnConfiguring since it is still being configured at this point. This can happen if a second operation is started on this context before a previous operation completed. Any instance members are not guaranteed to be thread safe.\"\r\n    },\r\n    {\r\n      \"key\": \"CustomCheckInjectedScopeFactory\",\r\n      \"value\": \"Healthy\",\r\n      \"desc\": null,\r\n      \"ex\": null\r\n    },\r\n    {\r\n      \"key\": \"CustomCheckInjectedContext\",\r\n      \"value\": \"Healthy\",\r\n      \"desc\": null,\r\n      \"ex\": null\r\n    }\r\n  ]\r\n}\r\n```",
                                           "updatedAt":  "2019-09-26T09:03:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNTQzNzE4OA==",
                                           "createdAt":  "2019-09-26T10:12:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "@ThomasBergholdWieser This goes beyond my knowledge. I\u0027m looping in some folks to help here.\r\n\r\n@rynowak @bricelam any ideas on how to integrate EF + Healthchecks??",
                                           "updatedAt":  "2019-09-26T10:12:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNTU3NjY3Ng==",
                                           "createdAt":  "2019-09-26T16:12:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCoBESQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ajcvickers",
                                                                               "createdAt":  "2020-08-14T16:38:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bhoffy2002",
                                                                               "createdAt":  "2021-03-21T13:28:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aleksvujic",
                                                                               "createdAt":  "2022-07-22T08:46:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "rynowak",
                                           "body":  "Can you share the call-stack of the exception you\u0027re hitting?\r\n\r\nhealth checks already creates a scope when it runs so all of your checks will share the same scope. https://github.com/aspnet/Extensions/blob/master/src/HealthChecks/HealthChecks/src/DefaultHealthCheckService.cs#L53\r\n\r\nI expect the problems that you\u0027d hit are related to executing checks *concurrently* which DbContext doesn\u0027t support. We should probably have an option to execute checks serially instead of in parallel.\r\n\r\nCan I ask why you end up needing multiple health checks for the same DbContext? Is this because you want to run multiple queries on the same database and report their results separately as metrics?",
                                           "updatedAt":  "2019-09-26T16:12:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNTYxNjYyNA==",
                                           "createdAt":  "2019-09-26T17:54:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dasMulli",
                                           "body":  "We wanted to create both low-level technical health checks (AddDbContextCheck) and business health checks - e.g. \"a lot of imports are failing\", \"work in progress is stacking up\".\r\n\r\nWe assumed that health checks would be a good abstraction for composing health status. But apparently the lack of scoping with some EF specifics defies that.\r\n\r\nI\u0027d argue that in order to be a good compositional pattern, it should allow for isolation of each component or else it would force users to create an additional layer of abstraction (scope creation + registration of checks that need scope) for it to be usable without fearing unintended side effects of using some components together.\r\n\r\nThis may be a problem once libraries that add to / extend EF contexts (asp.net core identity?, hangfire, openiddict, ...) offer health check components that would otherwise not be able to run alongside one another.",
                                           "updatedAt":  "2019-09-26T17:54:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNjAxMTc1Nw==",
                                           "createdAt":  "2019-09-27T16:36:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rynowak",
                                           "body":  "\u003e But apparently the lack of scoping with some EF specifics defies that.\r\n\r\nSorry, I still don\u0027t get it - we create a scope for all health checks and run them in there. Can you explain how this is causing your problem?\r\n\r\nI\u0027ll try your repro and get back to you. ",
                                           "updatedAt":  "2019-09-27T16:36:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNjAzMzMwMQ==",
                                           "createdAt":  "2019-09-27T17:40:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBNa_Yg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tiakun",
                                                                               "createdAt":  "2019-11-01T11:43:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ajcvickers",
                                                                               "createdAt":  "2020-08-14T16:39:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "dasMulli",
                                           "body":  "Looks like the issue really mostly is that the checks run in parallel. This makes using DbContext checks hard since DbContext is not thread safe.\r\n\r\nThis is a bit interesting since:\r\n* Most other user code is executed serially and thus doesn\u0027t create issues with scoped dependencies. I might be mistaken for that, but do other things like authorisation policies execute in parallel? This really is a bit of a surprise. Could lead other users into similar issues with other non-thread-safe libraries.\r\n* It will be hard to isolate and thread-safe custom checks or create a collection of own checks in addition to libraries that do have dependencies on scoped dependencies.\r\n\r\nThere would be two ways to mitigate this:\r\n1. Option to execute checks serially.\r\n2. Option to create scopes for each check.\r\n\r\n1 should be a good start to help fix such issues. 2. would also fix issues where we can\u0027t control 3rd party checks. Like with EF where there wold be a race if executed serially but could have issues as well when one of the checks creates an instance in the outer scope and then the inner scopes resolve this object again (e.g. EF check that doesn\u0027t create its own scope).",
                                           "updatedAt":  "2019-09-27T17:40:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0ODc2NzMxMA==",
                                           "createdAt":  "2019-11-01T12:13:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tiakun",
                                           "body":  "\u003e There would be two ways to mitigate this:\r\n\u003e \r\n\u003e 1. Option to execute checks serially.\r\n\u003e 2. Option to create scopes for each check.\r\n\r\nBy default, a service scope should be created for each check by HealthCheckService. \r\n\r\nChecking serially is effective but it is more like workaround because checks should be able to run concurrently already just by having their own scope. Using only single scope for all checks like it is right now is also not safe, as the state of the services inside the scope might be altered by prior checks and it might affect the result of latter checks. ",
                                           "updatedAt":  "2019-11-01T12:13:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMDYzNDc0Mg==",
                                           "createdAt":  "2020-04-28T14:15:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBp0yCQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mhmd-azeez",
                                                                               "createdAt":  "2021-05-06T12:09:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Peter-Optiway",
                                           "body":  "I\u0027m also getting the `A second operation started on this context before a previous operation completed. This is usually caused by different threads using the same instance of DbContext. For more information on how to avoid threading issues with DbContext, see https://go.microsoft.com/fwlink/?linkid=2097913.` error.\r\n\r\nWe have `HealthChecks` that take the `DbContext` as a constructor parameter.\r\n\r\nHow do we solve this?",
                                           "updatedAt":  "2020-04-28T14:15:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MzY4NjQyNg==",
                                           "createdAt":  "2020-08-13T20:11:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCRwDHg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "hisuwh",
                                                                               "createdAt":  "2022-03-07T18:16:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-08-13T20:11:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDE1NzEyNw==",
                                           "createdAt":  "2020-08-14T16:30:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bricelam",
                                           "body":  "cc @ajcvickers ",
                                           "updatedAt":  "2020-08-14T16:30:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjcyODk2Mw==",
                                           "createdAt":  "2020-11-24T08:09:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB0Lptg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tiakun",
                                                                               "createdAt":  "2020-11-24T08:37:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "foriequal0",
                                                                               "createdAt":  "2021-01-06T11:38:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "feitzi",
                                                                               "createdAt":  "2021-07-28T11:41:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "rduman",
                                           "body":  "Hi All,\r\n\r\nI had same issue after upgrading project to .net core 3.1. I fixed this problem \r\n\r\n\r\n\r\n```\r\npublic virtual async Task\u003cHealthCheckResult\u003e CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default(CancellationToken))\r\n        {\r\n            using (var scope = serviceProvider.CreateScope())\r\n            {\r\n\r\n                this.healthcheckService = scope.ServiceProvider.GetRequiredService\u003cIHealthcheckService\u003e(); // this calls my repository\r\n                var doProcess = await DoProcess();\r\n                return doProcess;\r\n            }\r\n        }\r\n```\r\nHealthcheck call CheckHealthAsync method for every implemented healthcheck  simultaneously. I created scope for each task and it fixed the problem.\r\n\r\n",
                                           "updatedAt":  "2020-11-24T08:10:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMzQ3ODU4Nw==",
                                           "createdAt":  "2021-05-06T12:21:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mhmd-azeez",
                                           "body":  "This issue still happens in .net 5\r\n\r\nThis exception is thrown if you call /health endpoint concurrently:\r\n```\r\nSystem.InvalidOperationException\r\nAn attempt was made to use the context while it is being configured. A DbContext instance cannot be used inside \u0027OnConfiguring\u0027 since it is still being configured at this point. This can happen if a second operation is started on this context before a previous operation completed. Any instance members are not guaranteed to be thread safe.\r\n\r\nIServiceProvider DbContext.get_InternalServiceProvider()\r\n\r\nAssembly:Microsoft.EntityFrameworkCore\r\nVersion:5.0.5.0\r\nCulture:neutral\r\nPublicKeyToken:adb9793829ddae60\r\nTService InfrastructureExtensions.GetService\u003cTService\u003e(IInfrastructure\u003cIServiceProvider\u003e accessor)\r\n\r\nIDatabaseFacadeDependencies DatabaseFacade.get_Dependencies()\r\n\r\nTask\u003cbool\u003e DatabaseFacade.CanConnectAsync(CancellationToken cancellationToken)\r\n\r\nstatic DbContextHealthCheck\u003cTContext\u003e()+(TContext dbContext, CancellationToken cancellationToken) =\u003e { }\r\n\r\nasync Task\u003cHealthCheckResult\u003e DbContextHealthCheck\u003cTContext\u003e.CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken)\r\n\r\nasync Task\u003cHealthReportEntry\u003e DefaultHealthCheckService.RunCheckAsync(IServiceScope scope, HealthCheckRegistration registration, CancellationToken cancellationToken)\r\n\r\nGET/health\r\n```\r\n\r\nHere is my workaround:\r\n```cs\r\npublic class NpgsqlHealthCheck : IHealthCheck\r\n{\r\n    private string _connectionString;\r\n\r\n    public NpgsqlHealthCheck(IConfiguration configuration)\r\n    {\r\n        _connectionString = configuration.GetConnectionString(\"DefaultConnection\");\r\n    }\r\n\r\n    public async Task\u003cHealthCheckResult\u003e CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default)\r\n    {\r\n        try\r\n        {\r\n            using var connection = new NpgsqlConnection(_connectionString);\r\n\r\n            await connection.OpenAsync();\r\n            await connection.ExecuteScalarAsync(\"select 1;\");\r\n\r\n            return HealthCheckResult.Healthy();\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            return new HealthCheckResult(context.Registration.FailureStatus, exception: ex);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Note:** For some reason, using DbContext using the health check was causing Connection leak. See history for the previous implementation.",
                                           "updatedAt":  "2021-05-08T00:55:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde842NBlQ",
                                           "createdAt":  "2021-08-31T16:18:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "projectje",
                                           "body":  "I notice this problem also in .Net5.\r\n\r\nI have around 50 projects in my solution each with their own contexts. \r\n\r\nEach project has several healthchecks which simply injects the services from the specific project they need since it simply calls methods from these services that on their turn rely on connection being configured.\r\n\r\nBut I think, reading this, that this will never work. \r\n\r\nBut I think it is not really handy to \"get connectionstring\" in every healthcheck. since the methods they call are in the services in the projects. But I think this means that we have to duplicate these methods in the healthchecks?\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2021-08-31T16:18:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde849ne1F",
                                           "createdAt":  "2022-02-09T13:26:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sebbl22",
                                           "body":  "Same problem in our solution",
                                           "updatedAt":  "2022-02-09T13:26:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde8490Jzu",
                                           "createdAt":  "2022-02-12T09:18:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "projectje",
                                           "body":  "Summary of what i now use :\r\n\r\n- the semaphore prevents a gazillion callers all executing it \r\n- the precheck retrieves results from cache since results are only needed to be returned live sometimes and also performed some other checks like if the db is upgrading e.g. does the table it queries exists at all at that moment\r\n- its own scope because to prevent database parallel stuff exceptions\r\n\r\n\r\n\r\n```\r\npublic class Acme_Identity_AdDc_LogCheck : IHealthCheck\r\n{\r\n    public IServiceProvider _serviceProvider;\r\n    private static readonly SemaphoreSlim _mutex = new SemaphoreSlim(1, 1);\r\n    private readonly AcmeIdentityAdDcOptions _options;\r\n\r\n    public Acme_Identity_AdDc_LogCheck(IServiceProvider serviceProvider, IOptionsMonitor\u003cAcmeIdentityAdDcOptions\u003e options)\r\n    {\r\n        _serviceProvider = serviceProvider;\r\n        _options = options.CurrentValue;\r\n    }\r\n\r\n    public async Task\u003cHealthCheckResult\u003e CheckHealthAsync(HealthCheckContext context,\r\n      CancellationToken cancellationToken = default)\r\n    {\r\n        await _mutex.WaitAsync(cancellationToken);\r\n        try\r\n        {\r\n            HealthCheckResult? preCheck = await _serviceProvider.IsDbUpgradingAsync(context);\r\n            if (preCheck.HasValue) return preCheck.Value;\r\n            await using (AsyncServiceScope scope = _serviceProvider.CreateAsyncScope())\r\n            {\r\n                ILogDatabaseService _logDatabaseService = scope.ServiceProvider.GetRequiredService\u003cILogDatabaseService\u003e();\r\n                string errorMessage = await _logDatabaseService.ErrorEntriesInSharedLogTable(IdentityAdDcExtensions.AssemblyName);\r\n                return (errorMessage != string.Empty) ? await context.CacheResultAsync((errorMessage, false), _serviceProvider) :\r\n                    await context.CacheResultAsync((\"OK\", true), _serviceProvider);\r\n            }\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            return await context.CacheResultAsync((ex.Message, false), _serviceProvider, _options.HealthCheckCacheLogCheck.Hours,\r\n                _options.HealthCheckCacheLogCheck.Minutes, _options.HealthCheckCacheLogCheck.Seconds);\r\n        }\r\n        finally\r\n        {\r\n            _mutex.Release();\r\n        }\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2022-02-12T09:26:56Z"
                                       }
                                   ],
                         "totalCount":  17
                     },
        "title":  "Run every healthcheck in its own scope",
        "labels":  [
                       "bug",
                       "area-healthchecks",
                       "severity-major",
                       "affected-medium"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/18153",
        "createdAt":  "2020-01-06T22:30:29Z",
        "number":  18153,
        "author":  "jcoutch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBp4Yg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "srajkovic",
                                            "createdAt":  "2020-05-22T15:45:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tomasz-podolak",
                                            "createdAt":  "2020-05-31T10:53:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "br3nt",
                                            "createdAt":  "2020-07-23T02:47:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "say25",
                                            "createdAt":  "2020-08-13T21:05:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GodVenn",
                                            "createdAt":  "2022-02-18T14:17:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maxkoshevoi",
                                            "createdAt":  "2022-05-24T15:43:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "IGx89",
                                            "createdAt":  "2022-12-23T18:29:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sbaeurle",
                                            "createdAt":  "2023-01-02T07:09:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AdisonCavani",
                                            "createdAt":  "2023-01-27T15:53:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "christianfosli",
                                            "createdAt":  "2023-02-02T15:27:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "VMelnalksnis",
                                            "createdAt":  "2023-03-06T18:17:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "menaheme",
                                            "createdAt":  "2023-07-05T20:59:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ptzedakis",
                                            "createdAt":  "2024-05-29T13:05:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "christianerbsmehl",
                                            "createdAt":  "2024-11-27T15:01:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Luk164",
                                            "createdAt":  "2025-04-24T09:58:39Z"
                                        }
                                    ],
                          "totalCount":  15
                      },
        "updatedAt":  "2020-11-06T19:22:34Z",
        "body":  "\u003c!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\n--\u003e\r\n\r\n### Is your feature request related to a problem? Please describe.\r\nThis feature would directly support development efforts on:\r\nhttps://github.com/domaindrivendev/Swashbuckle.AspNetCore/issues/1058\r\n\r\nWhen adding health checks using `IApplicationBuilder.UseHealthChecks`, the values of path and `HealthCheckOptions` are only used to map `HealthCheckMiddleware`.  After the middleware is registered, there is no way to retrieve this information at runtime.\r\n\r\n### Describe the solution you\u0027d like\r\nTo have [HealthCheckApplicationBuilderExtensions.cs](https://github.com/aspnet/AspNetCore/blob/master/src/Middleware/HealthChecks/src/Builder/HealthCheckApplicationBuilderExtensions.cs) refactored in a non-breaking way so that the path and `HealthCheckOptions` information is accessible at runtime (preferably via dependency injection).\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKehLTg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MzY4NDI0Nw==",
                                           "createdAt":  "2020-08-13T20:05:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-08-13T20:05:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzA4OTQ4Ng==",
                                           "createdAt":  "2020-10-03T11:35:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "weichch",
                                           "body":  "I\u0027m not sure about the path, but for `HealthCheckOptions`, I used a workaround in my project:\r\n\r\n```\r\nvar options = new HealthCheckOptions\r\n{\r\n    Predicate = check =\u003e check.Tags.Contains(\"test\")\r\n};\r\n\r\n// Set options directly to IOptionsMonitor\u003cHealthCheckOptions\u003e\r\napp.ApplicationServices\r\n    .GetRequiredService\u003cIOptionsMonitorCache\u003cHealthCheckOptions\u003e\u003e()\r\n    .TryAdd(\"my-options\", options);\r\n\r\napp.UseHealthChecks(\"/health\", options);\r\n```\r\nThen I can access the options using dependency injection:\r\n```\r\npublic MyController(IOptionsMonitor\u003cHealthCheckOptions\u003e optionsMonitor)\r\n{\r\n    var healthCheckOptions = optionsMonitor.Get(\"my-options\");\r\n}\r\n```\r\n_Note: this doesn\u0027t mean `HealthCheckOptions` can be configured using the options pattern, because by the time `TryAdd` is called, it is unlikely you will have `HealthCheckOptions` already created in the cache, and there is no solid way to determine if you have registered any configuration for `HealthCheckOptions` in `ConfigureServices`._",
                                           "updatedAt":  "2020-10-03T11:35:40Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Health Checks - Register path/options with dependency injection",
        "labels":  [
                       "enhancement",
                       "area-healthchecks",
                       "severity-minor",
                       "affected-very-few"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/26573",
        "createdAt":  "2020-10-03T04:28:30Z",
        "number":  26573,
        "author":  "weichch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-06-20T22:20:34Z",
        "body":  "\u003c!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\n--\u003e\r\n\r\n### Is your feature request related to a problem? Please describe.\r\nThis isn\u0027t related to an issue. It is more of an improvement.\r\n\r\nCurrently the validation of `HealthCheckServiceOptions` happens in [this private method](https://github.com/dotnet/aspnetcore/blob/master/src/HealthChecks/HealthChecks/src/DefaultHealthCheckService.cs#L158).  It\u0027d be better if the code could be moved into an instance of `IValidationOptions\u003cHealthCheckServiceOptions\u003e`.\r\n\r\n### Describe the solution you\u0027d like\r\nSomething like https://github.com/weichch/aspnetcore/pull/3\r\n\r\n### Additional context\r\nIt is also possible to use a dictionary to manage health check registrations if we could make registration name immutable https://github.com/dotnet/aspnetcore/issues/26572. Then validation becomes redundant.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOqf1zg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNTc5ODMyOA==",
                                           "createdAt":  "2020-10-08T20:13:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\nWe\u0027re moving this issue to the `Next sprint planning` milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-10-08T20:13:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde846p_XO",
                                           "createdAt":  "2021-12-01T21:51:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-12-01T21:51:19Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Move validation of HealthCheckServiceOptions to IValidationOptions\u003cHealthCheckServiceOptions\u003e",
        "labels":  [
                       "enhancement",
                       "area-healthchecks",
                       "severity-nice-to-have",
                       "affected-very-few"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/26680",
        "createdAt":  "2020-10-07T23:06:44Z",
        "number":  26680,
        "author":  "toddmeinershagen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-07T20:34:26Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\n\r\nI like the health checks framework and all of the existing health check probes and would like to leverage it within the Azure Function Apps that we build at my company.  \r\n\r\nUnfortunately, when the ```AddHealthChecks()``` extension method is called on the ```IServiceCollection``` of the ```IFunctionsHostBuilder```, it is not only registering the ```DefaultHealthCheckService```, but it is also registering an ```IHostedService``` called ```HealthCheckPublisherHostedService```.  \r\n\r\nThis is of course to support the health check publishers, but Azure Functions currently does not support that service and proactively fails on startup.  (screenshot below) \r\n\r\n![image](https://user-images.githubusercontent.com/177508/95395546-e3046a00-08cc-11eb-9276-b65a0232dfc8.png)\r\n\r\nI would still like to leverage the probes without publishers, but the framework does not have a way to toggle that when adding the health checks.\r\n\r\n### Describe the solution you\u0027d like\r\nI have created a sample project [here](https://github.com/toddmeinershagen/Demo.AzFuncWithHealthChecks) that shows how the health checks framework can be used along with a simple ```HealthCheckFunction``` class.  \r\n\r\nIn order to solve this, I was forced to not only rewrite the ```HealthCheckServiceCollectionExtensions```, but also duplicate all of the internal classes (```DefaultHealthCheckService```, ```HealthCheckLogScope```, ```HealthChecksBuilder```) because they were not accessible outside of the asp.net core framework.\r\n\r\nA few options to consider:\r\n\r\n1. Make the ```DefaultHealthCheckService``` and ```HealthChecksBuilder``` classes public so that at least only one extensions method is needed.\r\n2. Create an overload of the ```AddHealthChecks()``` method that allows for an optional parameter to specify whether to add the ```HealthCheckPublisherHostedService``.\r\n\r\n```csharp\r\npublic static IHealthChecksBuilder AddHealthChecks(this IServiceCollection services, bool useHealthCheckPublishers = true)\r\n```\r\n3. Create an additional extension method ```AddHealthChecksWithoutPublishers()``` that does a similar behavior.\r\n\r\n```csharp\r\npublic static IHealthChecksBuilder AddHealthChecksWithoutPublishers(this IServiceCollection services)\r\n```\r\n4. Perhaps work with the Azure Functions team to make the ```IHostedService``` available for assignment.  Then we could leverage the health checks framework out-of-the-box.  (There may be good reason for this not to exist - especially for consumption-based functions)\r\n\r\nSome discussion about making ```IHostedService``` available in Azure Functions can be found [here](https://stackoverflow.com/questions/59947132/ihostedservice-usable-in-azure-functions-app) and [here](https://github.com/Azure/azure-functions-host/issues/5447#issuecomment-575368316).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnZlV3w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNTc5NzgxNw==",
                                           "createdAt":  "2020-10-08T20:12:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkArtakMSFT",
                                           "body":  "Thanks for contacting us.\r\nCan you try to remove the `HealthCheckPublisherHostedService` registration from the DI container and try. This should probably be a simpler workaround.",
                                           "updatedAt":  "2020-10-08T20:12:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNTc5Nzk1OA==",
                                           "createdAt":  "2020-10-08T20:12:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\nWe\u0027re moving this issue to the `Next sprint planning` milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-10-08T20:12:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNTg0NTcyNQ==",
                                           "createdAt":  "2020-10-08T21:59:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "toddmeinershagen",
                                           "body":  "@mkArtakMSFT Thanks for writing back.  Removing that dependency does work and reduces the amount code needed.  However, because the ```HealthCheckPublisherHostedService``` is also marked as Internal, I have to do an awkward string lookup to remove it from the services collection.\r\n\r\n```csharp\r\nvar serviceDescriptor = services.FirstOrDefault(descriptor =\u003e descriptor.ImplementationType?.Name == \"HealthCheckPublisherHostedService\");\r\nif (serviceDescriptor != null) services.Remove(serviceDescriptor);\r\n            services.Remove(serviceDescriptor);\r\n```\r\n\r\nGood to hear that the team will be looking at this in the next sprint.  It will greatly help the community!",
                                           "updatedAt":  "2020-10-08T21:59:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde846p_Rg",
                                           "createdAt":  "2021-12-01T21:50:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-12-01T21:50:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86dmVXf",
                                           "createdAt":  "2025-02-07T20:33:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "samsp-msft",
                                           "body":  "@captainsafia - what is your plan for healthchecks in the newer functions design?",
                                           "updatedAt":  "2025-02-07T20:33:52Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Health Checks - Open Up for Use In Azure Functions",
        "labels":  [
                       "enhancement",
                       "area-healthchecks",
                       "affected-few",
                       "severity-major"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/29896",
        "createdAt":  "2021-02-04T14:24:55Z",
        "number":  29896,
        "author":  "tobiaswatzek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCwsSKw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dlyz",
                                            "createdAt":  "2022-12-07T09:22:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Temppus",
                                            "createdAt":  "2023-05-23T13:41:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tlgfedericotomasi",
                                            "createdAt":  "2023-06-14T14:59:30Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2023-05-23T13:10:55Z",
        "body":  "\u003c!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\n--\u003e\r\n\r\n### Is your feature request related to a problem? Please describe.\r\n\r\nI am trying to use the `Microsoft.Extensions.Diagnostics.HealthChecks` library in a project but I don\u0027t want to register the default `HealthCheckPublisherHostedService` which is automatically registered when the `AddHealthChecks` extension method is used. I still would like to use the `DefaultHealthCheckService` and the `HealthChecksBuilder` which unfortunately are all marked as `internal` which means that I would have to implement them again in my code.\r\n\r\nWhat I want to do is running my health checks manually with the help of the `DefaultHealthCheckService` inside of an [Orleans](https://github.com/dotnet/orleans) cluster. The reason why I don\u0027t want to register the `HealthCheckPublisherHostedService` is that it would execute and publish all health checks on each node periodically which is unnecessary.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nI would like a method similar to `AddHealthChecks` or  a parameter for `AddHealthChecks` to control if the `HealthCheckPublisherHostedService` gets registered or not.\r\n\r\n### Additional context\r\n\r\nThe corresponding code which registers the `HealthCheckPublisherHostedService` can be found here:\r\nhttps://github.com/dotnet/aspnetcore/blob/7a2b8205fbc9a241c7ee9da86261de3faccd379c/src/HealthChecks/HealthChecks/src/DependencyInjection/HealthCheckServiceCollectionExtensions.cs#L29\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXPExKw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MzQ3NTIxNg==",
                                           "createdAt":  "2021-02-04T17:24:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-02-04T17:24:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MzQ5MDgwMA==",
                                           "createdAt":  "2021-02-04T17:48:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC98VvQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tlgfedericotomasi",
                                                                               "createdAt":  "2023-06-14T15:30:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "pranavkm",
                                           "body":  "@spitzfaust we\u0027ll consider adding this API in a later release. In the meanwhile, you should be able to workaround this by invoking `AddHealthCheckService` on a temp `IServiceCollection` and cherry-pick everything but the hosted service in to the default one. \r\n\r\n```C#\r\nvar temp = new ServiceCollection();\r\ntemp.AddHealthChecks();\r\n\r\nforeach (var descriptor in temp)\r\n{\r\n    if (descriptor.ServiceType != typeof(IHostedService))\r\n    {\r\n        services.Add(descriptor);\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2021-02-04T17:48:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NDA5ODk4OA==",
                                           "createdAt":  "2021-02-05T15:23:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tobiaswatzek",
                                           "body":  "@pranavkm thank you for your reply and the proposed workaround 👍 ",
                                           "updatedAt":  "2021-02-05T15:23:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde8470T5r",
                                           "createdAt":  "2022-01-01T14:49:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ShreyasJejurkar",
                                           "body":  "As per my knowledge and understanding, there can be two ways to address this problem. \r\n1. Add a optional boolean `registerHealthPublisherHostedService` parameter to `HealthCheckServiceCollectionExtensions.AddHealthChecks` and based on that we can register HostedService, by default the value will be `true` to avoid breaking change! \r\n```csharp\r\npublic static IHealthChecksBuilder AddHealthChecks(this IServiceCollection services, bool registerHealthPublisherHostedService = true)\r\n{\r\n}\r\n```\r\n\r\n2. Problem with the above approach what I think, is like going forward if we need to add more configurable settings for user, then it would be a nightmare and code smell to have a bunch of optional parameters to the given method `AddHealthChecks`. \r\nTo address that we can have another option class for HealthCheck, not sure what we name it as there is already `HealthCheckOptions` class in the system. That way we can add more properties to that class and can make it configurable. \r\n\r\n```csharp \r\n// omitting other overloads here\r\npublic static IHealthChecksBuilder AddHealthChecks(this IServiceCollection services, Action\u003csomeHealthCheckOptionsClassName\u003e setupAction) \r\n{\r\n}\r\n```\r\nUsage \r\n```csharp \r\nservices.AddHealthChecks((options) =\u003e {\r\n options.RegisterHealthPublisherHostedService  = false // defaults to true\r\n});\r\n```\r\n\r\n2nd approach is doable, but I am not sure about the options class name and also will it make sense to add another class for configuring HealthChecks, given the fact that we already have one class for such! As per my knowledge, we cannot add a new property to current HealthCheck options to address this issue, because we cannot access HealthCheckOptions because that option is yet to configure because we do that in the middleware pipeline.\r\n\r\nNot sure if creatingScope inside UseHealthCheck() method and adding `HealthCheckPublisherHostedService` to serviceCollection based on new parameter insider `HealthCheckOptions` will be a recommended way or not! \r\n\r\n\r\n\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2022-01-01T14:49:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85c8TEr",
                                           "createdAt":  "2023-05-23T13:10:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD-XzRw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nullpainter",
                                                                               "createdAt":  "2023-06-21T05:39:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dlyz",
                                                                               "createdAt":  "2024-01-30T16:36:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KrishnaAGandhi",
                                                                               "createdAt":  "2024-02-14T05:29:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "david-woakes-n-able",
                                                                               "createdAt":  "2024-12-10T12:24:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "Temppus",
                                           "body":  "Same here. I would like to use only default `DefaultHealthCheckService` registration but do not want to register `HealthCheckPublisherHostedService`. We are having .net core background worker service which is not asp net core based and we want to expose health check endpoints and use current default implementation for `HealthCheckService`.",
                                           "updatedAt":  "2023-05-23T13:10:55Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Make it optional to register HealthCheckPublisherHostedService when using AddHealthChecks",
        "labels":  [
                       "enhancement",
                       "area-healthchecks",
                       "affected-few",
                       "severity-minor"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/32317",
        "createdAt":  "2021-05-01T14:33:42Z",
        "number":  32317,
        "author":  "DurgaPrasadReddyV",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCr2pSw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jesperkristensen",
                                            "createdAt":  "2022-12-13T09:54:43Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-09-24T21:15:51Z",
        "body":  "## Background and Motivation\r\n\r\nCurrently IHealthCheckBuilder provides a \"AddCheck\" method to register a custom health check in my application.\r\n\r\n`services.AddHealthChecks().AddCheck\u003cCustomHealthCheck\u003e(\"CustomHealthCheck\");`\r\n\r\nAnd inline is implementation for CheckHealthAsync method in my CustomHealthCheck class.\r\n\r\n```\r\npublic Task\u003cHealthCheckResult\u003e CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default)\r\n{\r\n        //hardcoding directly the result for explanation purpose\r\n        return Task.FromResult(new HealthCheckResult(HealthStatus.Healthy));\r\n}\r\n```\r\nWe can observe that I am able to return only one HealthCheckResult object from my CustomHealthCheck class.\r\nI am looking for an api from which I can return multiple health check results from a single custom health check class.\r\nInto this custom health check class I would like to add and remove health checks from an external application while the application is running so that there would be no need to modify code and redeploy the application.\r\n\r\n## Proposed API\r\n\r\n`services.AddHealthChecks().AddChecks\u003cCustomHealthChecks\u003e(\"CustomHealthChecks\");`\r\n\r\nAnd inline is implementation for CheckHealthAsync method in my CustomHealthChecks class.\r\nThe interface would be IHealthChecks instead of IHealthCheck which returns a list of HealthCheckResults.\r\n\r\n```\r\npublic Task\u003cList\u003cHealthCheckResult\u003e\u003e CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default)\r\n        {\r\n            //hardcoding result for explanation  \r\n            return Task.FromResult(new List\u003cHealthCheckResult\u003e(){new HealthCheckResult(\r\n                HealthStatus.Healthy)});\r\n        }\r\n```\r\n\r\n## Usage Examples\r\n\r\n`services.AddHealthChecks().AddChecks\u003cCustomHealthChecks\u003e(\"CustomHealthChecks\");`\r\n\r\nWith this registration in my ConfigureServices method I can add 0 to n healthchecks in my CustomHealthChecks class during runtime and return their status by populating the list.\r\n\r\n## Alternative Designs\r\n\r\nCurrently I am populating the IReadOnlyDictionary\u003cstring, object\u003e Data of HealthCheckResult class to meet the requirement of different health checks status added dynamically during runtime.\r\n\r\n## Risks\r\n\r\nNo risk is involved because this is new api.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMeL49w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMDY2NTY3Ng==",
                                           "createdAt":  "2021-05-01T17:25:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Can you use the [API proposal template](https://github.com/dotnet/aspnetcore/issues/new?assignees=\u0026labels=api-suggestion\u0026template=25_api_proposal.md\u0026title=) and propose an API?",
                                           "updatedAt":  "2021-05-01T17:25:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNDYyMzUxOQ==",
                                           "createdAt":  "2021-05-07T17:00:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been automatically marked as stale because it has been marked as requiring author feedback but has not had any activity for **4 days**. It will be closed if no further activity occurs **within 3 days of this comment**. If it *is* closed, feel free to comment when you are able to provide the additional information and we will re-investigate.\n\nSee [our Issue Management Policies](https://aka.ms/aspnet/issue-policies) for more information.",
                                           "updatedAt":  "2021-05-07T17:00:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNTIxOTczMg==",
                                           "createdAt":  "2021-05-08T08:50:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DurgaPrasadReddyV",
                                           "body":  "\u003e Can you use the [API proposal template](https://github.com/dotnet/aspnetcore/issues/new?assignees=\u0026labels=api-suggestion\u0026template=25_api_proposal.md\u0026title=) and propose an API?\r\n\r\nupdated issue with api proposal template.",
                                           "updatedAt":  "2021-05-08T08:50:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNjk1ODQ1NQ==",
                                           "createdAt":  "2021-05-10T16:52:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-05-10T16:52:21Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Provide AddChecks method in IHealthCheckBuilder",
        "labels":  [
                       "enhancement",
                       "area-healthchecks",
                       "api-suggestion"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/33344",
        "createdAt":  "2021-06-07T16:12:36Z",
        "number":  33344,
        "author":  "meggima",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODGetTg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "msallin",
                                            "createdAt":  "2021-06-07T16:21:42Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "msallin",
                                            "createdAt":  "2021-06-07T16:21:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "githubfanster",
                                            "createdAt":  "2021-06-07T16:24:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mwasson74",
                                            "createdAt":  "2022-10-07T13:59:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pavel-usachev",
                                            "createdAt":  "2024-02-09T21:41:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jensgram",
                                            "createdAt":  "2024-04-15T10:31:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "daichi-okamura",
                                            "createdAt":  "2024-05-14T01:33:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sveinungf",
                                            "createdAt":  "2025-07-10T11:01:23Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2025-02-20T08:32:53Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\n\r\nWe use the `services.AddDbContextCheck\u003cAppDbContext\u003e()` method to monitor the connection to the database in our apps. Due to performance reasons we switched to using `IDbContextFactory` to access instances of EF Core DbContext:\r\n\r\n```csharp\r\nservices.AddPooledDbContextFactory\u003cAppDbContext\u003e(dbContextOptions)\r\n```\r\n\r\nWhen we did so, we noticed that the `DbContextHealthCheck` does not support the factory and, thus, we had to register the DbContext directly to keep the HealthCheck working:\r\n\r\n```csharp\r\n// This is just required for the HealthCheck, since it does not (yet?) work with the Factory.\r\nservices.AddDbContextPool\u003cAppDbContext\u003e(dbContextOptions);\r\n```\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nThe `DbContextHealthCheck` should support `IDbContextFactory` without any additional service registrations.\r\n\r\n### Additional context\r\n\r\nWe are willing to invest some time to implement this and submit a pull request. But we need some support on how we should implement this and how the API should look like.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOny-VUw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NjkzODE2NQ==",
                                           "createdAt":  "2021-06-08T17:00:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2021-06-08T17:00:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Ly8pD",
                                           "createdAt":  "2022-10-07T14:08:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mwasson74",
                                           "body":  "Can a \"help-wanted\" label be added to this? I just implemented a class similar to the [DbContextHealthCheck](https://github.com/dotnet/aspnetcore/blob/main/src/Middleware/HealthChecks.EntityFrameworkCore/src/DbContextHealthCheck.cs) that gets a `IDbContextFactory\u003cTContext\u003e` injected in the constructor. I called the class `PooledDbContextHealthCheck` but there may be a way to have `DbContextHealthCheck` seamlessly handle both.\r\n\r\nLooking forward to submitting a PR for this but don\u0027t want to step on anyone\u0027s toes!!",
                                           "updatedAt":  "2022-10-07T14:08:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85p5Aum",
                                           "createdAt":  "2023-10-24T05:18:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Willimaendu",
                                           "body":  "Any news about this? Shouldn\u0027t be a big thing to implement a health check which injects IDbContextFactory\u003cTContext\u003e instead. ",
                                           "updatedAt":  "2023-10-24T05:18:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86fL5VT",
                                           "createdAt":  "2025-02-20T07:42:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tak1za",
                                           "body":  "Anyone who stumbles across this you can add a custom health check like this:\n\n```\nnamespace my_service\n{\n    using Microsoft.EntityFrameworkCore;\n    using Microsoft.Extensions.Diagnostics.HealthChecks;\n    using Microsoft.Extensions.Options;\n    using System.Threading.Tasks;\n    using System.Threading;\n    using System;\n    using System.Diagnostics.CodeAnalysis;\n\n    // Custom health check for IDbContextFactory\u003cTContext\u003e to check if the database is reachable\n    // The default DbContextHealthCheck provided by Microsoft does not work with IDbContextFactory\n    // as raised in this issue here: https://github.com/dotnet/aspnetcore/issues/33344\n    // This class consumes an IDbContextFactory and implements the same method that DbContextHealthCheck does\n\n    [ExcludeFromCodeCoverage]\n    internal sealed class MyDbContextHealthCheckOptions\u003cTContext\u003e where TContext : DbContext\n    {\n        public Func\u003cTContext, CancellationToken, Task\u003cbool\u003e\u003e? CustomTestQuery { get; set; }\n    }\n\n    [ExcludeFromCodeCoverage]\n    internal sealed class MyDbContextHealthCheck\u003cTContext\u003e : IHealthCheck where TContext : DbContext\n    {\n        private static readonly Func\u003cTContext, CancellationToken, Task\u003cbool\u003e\u003e DefaultTestQuery = (TContext dbContext, CancellationToken cancellationToken) =\u003e dbContext.Database.CanConnectAsync(cancellationToken);\n\n        private readonly TContext _dbContext;\n\n        private readonly IOptionsMonitor\u003cMyDbContextHealthCheckOptions\u003cTContext\u003e\u003e _options;\n\n        public MyDbContextHealthCheck(IDbContextFactory\u003cTContext\u003e dbContextFactory, IOptionsMonitor\u003cMyDbContextHealthCheckOptions\u003cTContext\u003e\u003e options)\n        {\n            ArgumentNullException.ThrowIfNull(dbContextFactory, nameof(dbContextFactory));\n            ArgumentNullException.ThrowIfNull(options, nameof(options));\n            _dbContext = dbContextFactory.CreateDbContext();\n            _options = options;\n        }\n\n        public async Task\u003cHealthCheckResult\u003e CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default)\n        {\n            ArgumentNullException.ThrowIfNull(context, nameof(context));\n            Func\u003cTContext, CancellationToken, Task\u003cbool\u003e\u003e func = _options.Get(context.Registration.Name).CustomTestQuery ?? DefaultTestQuery;\n            try\n            {\n                if (await func(_dbContext, cancellationToken))\n                {\n                    return HealthCheckResult.Healthy();\n                }\n\n                return new HealthCheckResult(context.Registration.FailureStatus);\n            }\n            catch (Exception ex)\n            {\n                return HealthCheckResult.Unhealthy(ex.Message, ex);\n            }\n            finally\n            {\n                await _dbContext.DisposeAsync();\n            }\n        }\n    }\n}\n\n```\n\nAnd then use it in your Program.cs/Startup.cs as below:\n\n```\nbuilder.Services\n    .AddHealthChecks()\n    .AddCheck\u003cHealthCheck\u003e(\"Health Check\")\n    .AddCheck\u003cMyDbContextHealthCheck\u003cMyDbContext\u003e\u003e(\"DB Check\");\n```",
                                           "updatedAt":  "2025-02-20T08:32:53Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "`DbContextCheck` should work together with `IDbContextFactory`",
        "labels":  [
                       "enhancement",
                       "area-healthchecks"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/41380",
        "createdAt":  "2022-04-21T17:58:58Z",
        "number":  41380,
        "author":  "RyanLiu99",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-12-08T14:50:34Z",
        "body":  "### Background and motivation\r\n\r\nAddTypeActivatedCheck\u003cT\u003e support additional arguments to concert type constructor which implements IHealthCheck.\r\nThis sounds good idea, but it brought few issues.\r\n\r\nFirst, I feel it is not really needed.\r\n\r\nMore important, it might cause memory leak.\r\n\r\nIt resolves (some) HealthCheck constructor arguments from IoC container, and not resolve HealthCheck itself from Ioc container ( to support additional constructor arguments). This bring few issues:\r\n\r\nThe runtime create particular HealthCheck instance each time Health end point is hit. Since itself is not managed by Ioc container, lifetime does not apply to it. Ioc container cannot dispose it even it is a IDisposable. Heath check Runtime just create it but does not dispose it either. Application cannot dispose it since it was not created by application itself.\r\n\r\nSo it was created each time when health check is performed and never disposed. That can cause resource/memory leak.\r\nI call it \"Memory leak introduced by Ioc container leak\" -- HealthCheck instances are not managed by Ioc container, but their dependencies are. Those dependencies are referred by HealthCheck but their lifetime can out of sync, this can cause another type issue.\r\n\r\n### API Proposal\r\n//Get rid of AddTypeActivatedCheck\u003cT\u003e method.\r\n\r\n```\r\n\r\n\r\n### API Usage\r\n\r\nGet rid of extension method  AddTypeActivatedCheck\u003cT\u003e of IHealthChecksBuilder.\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\nExisting code depends on it need rewritten.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUApIqA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85CLUMQ",
                                           "createdAt":  "2022-04-21T17:59:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-04-21T17:59:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85CLUMS",
                                           "createdAt":  "2022-04-21T18:30:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RyanLiu99",
                                           "body":  "I have no permission to add label, I cannot find heath check area,  seems area-Extensions-DependencyInjection is the closest.",
                                           "updatedAt":  "2022-04-21T18:30:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85CLUMT",
                                           "createdAt":  "2022-04-21T20:42:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nAddTypeActivatedCheck\u003cT\u003e support additional arguments to concert type constructor which implements IHealthCheck.\r\nThis sounds good idea, but it brought few issues.\r\n\r\nFirst, I feel it is not really needed.\r\n\r\nMore important, it might cause memory leak.\r\n\r\nIt resolves (some) HealthCheck constructor arguments from IoC container, and not resolve HealthCheck itself from Ioc container ( to support additional constructor arguments). This bring few issues:\r\n\r\nThe runtime create particular HealthCheck instance each time Health end point is hit. Since itself is not managed by Ioc container, lifetime does not apply to it. Ioc container cannot dispose it even it is a IDisposable. Heath check Runtime just create it but does not dispose it either. Application cannot dispose it since it was not created by application itself.\r\n\r\nSo it was created each time when health check is performed and never disposed. That can cause resource/memory leak.\r\nI call it memory leak introduced by Ioc container leak -- HealthCheck instances are not managed by Ioc container, but their dependencies are. Those dependencies are referred by HealthCheck but their lifetime can out of sync, this can cause another type issue.\n\n### API Proposal\n\n```C#\r\nnamespace System.Collections.Generic\r\n{\r\n    public class MyFancyCollection\u003cT\u003e : IEnumerable\u003cT\u003e\r\n    {\r\n        public void Fancy(T item);\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\nGet rid of extension method  AddTypeActivatedCheck\u003cT\u003e of IHealthChecksBuilder.\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nExisting code depends on it need rewritten.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eRyanLiu99\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-21T20:42:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85CLUMY",
                                           "createdAt":  "2022-04-22T06:19:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "You\u0027re saying we should delete the API and break people that were using it? How about we add a remarks to the API or potentially add an analyzer that puts out a message about this API. \r\n\r\nThis API is still useful if your health check itself isn\u0027t disposable but has disposable dependencies...",
                                           "updatedAt":  "2022-04-22T06:19:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85CLUMb",
                                           "createdAt":  "2022-04-22T16:16:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RyanLiu99",
                                           "body":  "David,  you are right, adding a remark or mark as [Obsolete] is better idea, and/or maybe a warning it will be removed in few version down the road. I was just trying to make my point.  Thanks . \r\n\r\nAnd I think \"Health check itself isn\u0027t disposed but dependencies are disposed\" is a dangerous state to be. ",
                                           "updatedAt":  "2022-04-22T16:27:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85CLUMg",
                                           "createdAt":  "2022-04-22T16:22:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RyanLiu99",
                                           "body":  "While we are keeping the API, the  improvement can be done is for health check runtime to detect if it is a IDisposable/IAsyncDisposable, and dispose it at the end of health check if so.  Health check runtime  creates instance, it is its responsibility to clean it up.  \r\n\r\nBut still some health checks might be too expensive to be created and disposed each time. So this approach is just a comprise, still better is to warn people stay away from AddTypeActivatedCheck\u003cT\u003e( ) .",
                                           "updatedAt":  "2022-04-22T16:25:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85DvXa-",
                                           "createdAt":  "2022-05-24T22:29:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "Triage: We think it would be a possible workaround to see if we can try to resolve `T` from DI first before falling back to `ActivatorUtilities` so the lifetime will be managed by the container if the user puts their health check in DI.\r\n\r\nAlternative: Try to as-cast to `IDisposable` when we are done with the health check.",
                                           "updatedAt":  "2022-05-24T22:29:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85DvXkZ",
                                           "createdAt":  "2022-05-24T22:30:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-05-24T22:30:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85QCkio",
                                           "createdAt":  "2022-12-08T14:50:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rjgotten",
                                           "body":  "\u003e And I think \"Health check itself isn\u0027t disposed but dependencies are disposed\" is a dangerous state to be.\r\n\r\nHealth-checks themselves are run once and then discarded. So really; having disposable dependencies while the check itself is not, is only \u0027dangerous\u0027 in the sense of running into `ObjectDisposedException` when developers go out of their way to consciously craft a custom health check which manages to somehow retain dependencies in persistent state after their life time has expended. And honestly; isn\u0027t that\u0027s squarely in \"don\u0027t do stupid stuff\"-territory?\r\n\r\n\u003e But still some health checks might be too expensive to be created and disposed each time. So this approach is just a comprise, still better is to warn people stay away from AddTypeActivatedCheck( ) .\r\n\r\nIf one does not recreate health checks for each pass, then how would one handle health checks that need scoped or transient dependencies? Let\u0027s say I have a health check that is configurable via the Options framework and takes an `IOptionsSnapshot\u003c\u003e` so it automatically takes up to date values whenever the underlying configuration is changed.\r\nThat already relies on `IHealthCheck` either being scoped or being transient...\r\n\r\n\r\n",
                                           "updatedAt":  "2022-12-08T14:50:33Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Get rid of  IHealthChecksBuilder.AddTypeActivatedCheck\u003cT\u003e in Microsoft.Extensions.DependencyInjection.HealthChecksBuilderAddCheckExtensions",
        "labels":  [
                       "area-healthchecks",
                       "api-suggestion"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/42241",
        "createdAt":  "2022-06-16T20:51:17Z",
        "number":  42241,
        "author":  "dlyz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC2zMFQ==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "Tim-Utelogy",
                                            "createdAt":  "2023-08-02T06:21:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GureevLeonid",
                                            "createdAt":  "2024-03-26T16:45:02Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-06-21T22:43:44Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nAssuming we use a health check publisher pattern, when we actively push health state to some external system.\r\nLet\u0027s consider an [example from official docs](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/health-checks?view=aspnetcore-6.0#separate-readiness-and-liveness-probes):\r\n\r\n```cs\r\npublic class StartupHealthCheck : IHealthCheck\r\n{\r\n    private volatile bool _isReady;\r\n\r\n    public bool StartupCompleted\r\n    {\r\n        get =\u003e _isReady;\r\n        set =\u003e _isReady = value;\r\n    }\r\n\r\n    public Task\u003cHealthCheckResult\u003e CheckHealthAsync(\r\n        HealthCheckContext context, CancellationToken cancellationToken = default)\r\n    {\r\n        if (StartupCompleted)\r\n        {\r\n            return Task.FromResult(HealthCheckResult.Healthy(\"The startup task has completed.\"));\r\n        }\r\n\r\n        return Task.FromResult(HealthCheckResult.Unhealthy(\"That startup task is still running.\"));\r\n    }\r\n}\r\n```\r\n\r\nImportant thing in this example is that we know exactly when the health state changes - when property `StartupCompleted` changes.\r\nBut in the box there is only `HealthCheckPublisherHostedService` that pushes health reports to publishers only on timer (default interval is 30 seconds). So there might be a noticeable delay between health state change and report of this state.\r\n\r\nOnly available solution out of the box is to make publish intervals smaller, but it probably will waste the processor more that it should, considering that most of the time there are no problems with the health.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nIt would be nice to have a way to (actively) notify `HealthCheckPublisherHostedService` when the health state changes as an addition to periodical reports.\r\n\r\nFor example we can use ChangeToken pattern from options:\r\n\r\n```cs\r\ninterface IHealthChangeTokenSource\r\n{\r\n  IChangeToken GetChangeToken();\r\n}\r\n```\r\n\r\nSo `HealthCheckPublisherHostedService` will inject `IEnumerable\u003cIHealthChangeTokenSource\u003e` from the container, track change tokens and report whenever something changes.\r\n\r\nIn this case the example might look like this:\r\n\r\n```cs\r\npublic class StartupHealthCheck : IHealthCheck, IHealthChangeTokenSource\r\n{\r\n    private volatile bool _isReady;\r\n\r\n    public bool StartupCompleted\r\n    {\r\n        get =\u003e _isReady;\r\n        set\r\n        {\r\n            _isReady = value;\r\n            OnChange();\r\n        }\r\n    }\r\n\r\n    private CancellationTokenSource _changeTokenSource = new();\r\n\r\n    public IChangeToken GetChangeToken() =\u003e new CancellationChangeToken(_changeTokenSource.Token);\r\n\r\n    private void OnChange()\r\n    {\r\n        var previousToken = Interlocked.Exchange(ref _changeTokenSource, new CancellationTokenSource());\r\n        previousToken.Cancel();\r\n    }\r\n\r\n    public Task\u003cHealthCheckResult\u003e CheckHealthAsync(\r\n        HealthCheckContext context, CancellationToken cancellationToken = default)\r\n    {\r\n        if (StartupCompleted)\r\n        {\r\n            return Task.FromResult(HealthCheckResult.Healthy(\"The startup task has completed.\"));\r\n        }\r\n\r\n        return Task.FromResult(HealthCheckResult.Unhealthy(\"That startup task is still running.\"));\r\n    }\r\n}\r\n```\r\n\r\nThere even might be a helper abstract class that will implement change token update logic (provide protected OnChange method) to make it easier for health check implementers.\r\n\r\nThe registration of `StartupHealthCheck` will change from\r\n\r\n```cs\r\nbuilder.Services.AddSingleton\u003cStartupHealthCheck\u003e();\r\n```\r\n\r\nto\r\n\r\n```cs\r\nbuilder.Services.AddSingleton\u003cStartupHealthCheck\u003e();\r\nbuilder.Services.AddSingleton\u003cIHealthChangeTokenSource\u003e(sp =\u003e sp.GetRequiredService\u003cStartupHealthCheck\u003e());\r\n```\r\n\r\nIf this case will be considered too custom to support out of the box, it will be nice to have at least an opportunity to implement it in my own project. Now this requires a nasty workaround: I have to delete `HealthCheckPublisherHostedService` and implement my own with almost the same code (see also #29896).\r\n\r\n\r\n\r\n### Additional context\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORUlZcg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85FSUI7",
                                           "createdAt":  "2022-06-21T22:32:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2022-06-21T22:32:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85FSVly",
                                           "createdAt":  "2022-06-21T22:43:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODCdr-A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "Tim-Utelogy",
                                                                               "createdAt":  "2023-08-02T06:21:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "This is an interesting idea but a fair-sized change to health checks. I think we\u0027d need to see if more people are interested in being able to receive health checks changes in real-time before we invest in this feature.\r\n\r\nAn alternative idea is reducing the interval of checks in HealthCheckPublisherHostedService.",
                                           "updatedAt":  "2022-06-21T22:43:44Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Health Checks: publish health report on event",
        "labels":  [
                       "area-healthchecks"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/46054",
        "createdAt":  "2022-12-20T15:49:07Z",
        "number":  46054,
        "author":  "bakgerman",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-20T16:17:34Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nMay be related to Issue 45278\r\n\r\nThis NuGet package Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore version 7.0.x only supports NET 7.0\r\n\r\nBut...\r\nMicrosoft.Extensions.Diagnostics.HealthChecks 7.0.x supports NET Standard 2.0, 4.6.2, and 7.0\r\nMicrosoft.Extensions.Diagnostics.HealthChecks.Abstractions 7.0.x supports NET Standard 2.0, and 4.6.2\r\nMicrosoft.EntityFrameworkCore.* 7.0.x supports NET 6.0\r\n\n\n### Describe the solution you\u0027d like\n\nIf the item being health checked, EntityFrameworkCore 7.0.x, supports NET 6.0, and the 2 NuGet packages for Microsoft.Extensions.Diagnostics.HealthChecks listed above support 6.0 by supporting Standard 2.0, then shouldn\u0027t this package support NET 6, instead of just NET 7.0?\r\n\r\nI have EntityFrameworkCore 7.0.x working fine on NET 6.0, and using HealthChecks NuGets 6.0.x.\r\nAnd it works fine, but I should really be able to update the Hea;lthChecks NuGets to 7.0.x\r\nWhen I update Microsoft.Extensions.Diagnostics.HealthChecks and Microsoft.Extensions.Diagnostics.HealthChecks.Abstractions to 7.0.x and have to leave Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore on 6.0.x I get a run time exception.\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmyPhjw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85SRYAc",
                                           "createdAt":  "2022-12-20T17:59:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "@javiercn I don\u0027t think we own this. It is shipped out of the ASP.NET Core repo: https://github.com/dotnet/aspnetcore/tree/main/src/Middleware/HealthChecks.EntityFrameworkCore",
                                           "updatedAt":  "2022-12-20T17:59:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SaSmM",
                                           "createdAt":  "2023-01-14T01:26:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "Moving to web-frameworks since it\u0027s health checks.",
                                           "updatedAt":  "2023-01-14T01:26:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85TTGno",
                                           "createdAt":  "2023-01-19T19:51:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rafikiassumani-msft",
                                           "body":  "@bakgerman Unfortunately we do not support this at the moment and making the changes will require a lot of work. Would you be able to upgrade your runtime to 7.0.x ? ",
                                           "updatedAt":  "2023-01-19T19:51:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85TTGqQ",
                                           "createdAt":  "2023-01-19T19:51:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-01-19T19:51:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86bI-GP",
                                           "createdAt":  "2025-01-20T16:17:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "berubejp",
                                           "body":  "It still is the same behavior with net8.0 and net9.0. We are referencing `Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore` in our private nuget package used in many aspnet core projects.\n\nThis is the kind of non sense that it creates.\n```\n\u003cItemGroup\u003e\n\t\u003cPackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"9.0.1\" /\u003e\n\u003c/ItemGroup\u003e\n\u003cItemGroup Condition=\" \u0027$(TargetFramework)\u0027 == \u0027net8.0\u0027 \"\u003e\n\t\u003cPackageReference Include=\"Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore\" Version=\"8.0.12\" /\u003e\n\u003c/ItemGroup\u003e\n\u003cItemGroup Condition=\" \u0027$(TargetFramework)\u0027 == \u0027net9.0\u0027 \"\u003e\n\t\u003cPackageReference Include=\"Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore\" Version=\"9.0.1\" /\u003e\n\u003c/ItemGroup\u003e\n```",
                                           "updatedAt":  "2025-01-20T16:17:33Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore NuGet version 7.0.x does not support NET 6.0.x, but the EntityFrameworkCore 7.0.x does support NET 6.0.x.",
        "labels":  [
                       "area-healthchecks"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/45873",
        "createdAt":  "2023-01-04T17:23:59Z",
        "number":  45873,
        "author":  "Vshishkar",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-15T21:51:10Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nBased on the code at [```HealthCheckPubliserHosterService``` ](https://github.com/dotnet/aspnetcore/blob/main/src/HealthChecks/HealthChecks/src/HealthCheckPublisherHostedService.cs#L154 ) DefaultHealthCheckService should not throw exceptions, but if there is exception on initialization of a [health check ](https://github.com/dotnet/aspnetcore/blob/843f1a76e770cdcd4e1b249f9f7d51ebf9e0e762/src/HealthChecks/HealthChecks/src/DefaultHealthCheckService.cs#L81) service doesn\u0027t properly handle it, which leads to failure of publishing health report. \r\n\r\nFor example if there is a dependency of a health check which is not registered in container, health check initialization would throw exception. \n\n### Expected Behavior\n\n`HealthCheckService` would return failed with failure of health check. \r\n\r\nIt\u0027s arguable whether failure of health check initialization should be reported the same as failure of logic within health check, but it must be reported  in some way.\n\n### Steps To Reproduce\n\nCreate a simple health check with missing dependency: \r\n```\r\n\tpublic class NonWorkingHealthCheck : IHealthCheck\r\n\t{\r\n\t\tpublic NonWorkingHealthCheck(string param, IDependency dep) {}\r\n\t\t\r\n\t\tpublic Task\u003cHealthCheckResult\u003e CheckHealthAsync(\r\n\t\t    HealthCheckContext context,\r\n\t\t    CancellationToken cancellationToken = default)\r\n\t\t         =\u003e Task.FromResult(HealthCheckResult.Healthy());\r\n\r\n        interface IDependency {}\r\n```\r\n\r\nAnd register this health check: \r\n\r\n```\r\nbuilder.AddTypeActivatedCheck\u003cNonWorkingHealthCheck\u003e(\"NonWorking\", \"param1\");\r\n```\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n7.0\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqUXZXA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85R0W8n",
                                           "createdAt":  "2023-01-05T20:08:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "Is this exception being thrown at startup or during the health check request? Doesn\u0027t this result in a empty 500 response?",
                                           "updatedAt":  "2023-01-05T20:08:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85R0XMW",
                                           "createdAt":  "2023-01-05T20:09:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Hi @Vshishkar. We have added the \"Needs: Author Feedback\" label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
                                           "updatedAt":  "2023-01-05T20:09:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85R3o5h",
                                           "createdAt":  "2023-01-06T11:57:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Vshishkar",
                                           "body":  "@halter73 this exception been thrown during health check request.\r\nMy undesrtanding of health check desing were that if they throw exceptions, exception will be handled and unhealthy report will be published. \r\n\r\nIn my team we build our custom health report publisher (inspired by [HealthCheckPubliserHosterService](https://github.com/dotnet/aspnetcore/blob/main/src/HealthChecks/HealthChecks/src/HealthCheckPublisherHostedService.cs#L154)) and we never expected the exception from HealthCheckService. In the result our publisher never published health report to service fabric cluster and our services were reported healthy. \r\n\r\nI have a proposed fix: just move health check creating into try/catch which is already in place in the DefaultHealthCheckService or create health check validation at healthCheckBuilder. I would love to contribute these changes myself. \r\n\r\n",
                                           "updatedAt":  "2023-01-06T11:57:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SrfFF",
                                           "createdAt":  "2023-01-18T14:07:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Vshishkar",
                                           "body":  "@halter73 I also want to add that not only DI mssconfiguration could lead to exception. Basically any code that throws exception in the contructor of health check won\u0027t produce the report. I feel that this should be changed, because the design of health checks makes me depend on health reports. \r\n\r\nRight know exception will be thrown and it would be very hard to find it and analyze that it was connected with health checks. And you will have to specifically look for it. \r\n\r\nOn the other hand it\u0027s more likely that you will be monitoring health of your app and will fix problem much quicker.",
                                           "updatedAt":  "2023-01-18T14:07:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85UzKuJ",
                                           "createdAt":  "2023-02-08T14:37:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Vshishkar",
                                           "body":  "Hi @halter73 could you please address my comments? ",
                                           "updatedAt":  "2023-02-08T14:37:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86pRdlc",
                                           "createdAt":  "2025-04-29T19:04:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RyanThomas73",
                                           "body":  "We encountered this problem recently and found it to be a very confusing and poor experience to have our health reports simply fail to publish anywhere.\n\nSuggested areas for improvement:\n\n1. As the original requestor suggested, moving [the health check factory instantiation call](https://github.com/dotnet/aspnetcore/blob/843f1a76e770cdcd4e1b249f9f7d51ebf9e0e762/src/HealthChecks/HealthChecks/src/DefaultHealthCheckService.cs#L81) inside the [try/catch block](https://github.com/dotnet/aspnetcore/blob/843f1a76e770cdcd4e1b249f9f7d51ebf9e0e762/src/HealthChecks/HealthChecks/src/DefaultHealthCheckService.cs#L96) would help ensure that such factory calls do not prevent the overall health report from being built.\n\n2. Currently, the HealthCheckPublisherHostedService [always logs at Debug level even when the publishing failed due to an exception](https://github.com/dotnet/aspnetcore/blob/6b2fb91adb2adbbf94dd4bfdf4260235cc0acc15/src/HealthChecks/HealthChecks/src/HealthCheckPublisherHostedService.cs#L170). Updating the behavior to log at a higher log level such as Warning or Error in the event of an exception bubbling up to that point would help prevent being unintentionally blind to the publishing failing.\n\n3. A nice-to-have feature enhancement would be for the HealthCheckPublisherHostedService to supply an extension point through which library consumers could specify additional behavior for such error cases. For example, a separate hypothetical IHealthCheckPublishingErrorHandler interface that we could implement to and register against the service collection that would be called inside that catch block linked above in my suggestion no 2.",
                                           "updatedAt":  "2025-04-29T19:04:27Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "DefaultHealthCheckService throws exception ",
        "labels":  [
                       "area-healthchecks",
                       "Needs: Attention :wave:"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/46099",
        "createdAt":  "2023-01-14T00:16:30Z",
        "number":  46099,
        "author":  "JamesNK",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-15T21:51:10Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nHealth checks reuses a logging ID and name for end events at different log levels. We don\u0027t do this anywhere else in ASP.NET Core.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/4535ea1263e9a24ca8d37b7266797fe1563b8b12/src/HealthChecks/HealthChecks/src/DefaultHealthCheckService.cs#L220-L229\n\n### Expected Behavior\n\nI think we should have different log messages for different events to be consistent with the rest of the logging.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n_No response_\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWJNhrQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85SaNjT",
                                           "createdAt":  "2023-01-14T00:21:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "Similar to https://github.com/dotnet/aspnetcore/issues/46072",
                                           "updatedAt":  "2023-01-14T00:21:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85SaNzT",
                                           "createdAt":  "2023-01-14T00:24:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "Ah, I hadn\u0027t seen that.\r\n\r\nThe difference is those duplicates look like accidents. Health checks look like it was intentionally designed with duplicates.",
                                           "updatedAt":  "2023-01-14T00:24:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Yh5De",
                                           "createdAt":  "2023-03-27T15:00:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Also note that there are duplicate Ids for HealthCheckPublisherError and HealthCheckPublisherTimeout.\r\n\r\n\u003chttps://github.com/dotnet/aspnetcore/blob/6a6d775f49623bbd742c02f89d373630668547bb/src/HealthChecks/HealthChecks/src/HealthCheckPublisherHostedService.cs#L201-L202\u003e\r\n\r\n\u003chttps://github.com/dotnet/aspnetcore/blob/6a6d775f49623bbd742c02f89d373630668547bb/src/HealthChecks/HealthChecks/src/HealthCheckPublisherHostedService.cs#L236-L245\u003e",
                                           "updatedAt":  "2023-03-27T15:00:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85YkXec",
                                           "createdAt":  "2023-03-27T22:13:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mitchdenny",
                                           "body":  "What would be the possible reason for deliberately duplicating the event IDs here? I think it would be good to fix this but I have two thoughts:\r\n\r\n1. Why was it done like this in the first place (Chesterton\u0027s fence)?\r\n2. What level of concern do we have about changing these event ids being a breaking change?",
                                           "updatedAt":  "2023-03-27T22:13:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Ykbmh",
                                           "createdAt":  "2023-03-27T22:28:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "This was likely done because the logs are basically for the same thing, an error occurred during `PublishAsync`. You can even see in the code that the logs are used right next to each other, just for different exception types:\r\nhttps://github.com/dotnet/aspnetcore/blob/6a6d775f49623bbd742c02f89d373630668547bb/src/HealthChecks/HealthChecks/src/HealthCheckPublisherHostedService.cs#L183-L190",
                                           "updatedAt":  "2023-03-27T22:28:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Yk2Gt",
                                           "createdAt":  "2023-03-28T00:51:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mitchdenny",
                                           "body":  "They are semantically different though. A timeout (notified via a cancellation exception) is very different to an exception that you also happen to record an elapsed time for.\r\n\r\n(not doubting your reasoning though ;P)",
                                           "updatedAt":  "2023-03-28T00:51:45Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Duplicate logging ID and name in health checks",
        "labels":  [
                       "area-healthchecks"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/47616",
        "createdAt":  "2023-04-09T20:23:50Z",
        "number":  47616,
        "author":  "milen-denev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-15T21:51:11Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\n**Introduction:**\r\nI am not quite sure where should I post this feature request, but because the nuget packages that I am trying to use to achieve this results lead to this repo, I am posting here my proposition.\r\n\r\n**What my configuration is:** \r\nI have a Host app, running as WindowsService on a server, with several services added using .AddHostedService\u003c\u003e()\r\nAlso I have services.Configure\u003cHostOptions\u003e -\u003e BackgroundServiceExceptionBehavior = BackgroundServiceExceptionBehavior.Ignore \r\n**What I am trying to achieve:**\r\nSometimes my services may crash due to dynamic changes, and misconfiguration and mostly due to the fact that I am not using try catch patterns. In case a background service crashes I get an event in the Event Viewer, but this has to be manually checked, or reported by users that something isn\u0027t running at all or use try finally to make the service report itself.\r\nIn case if there is permanent issue that has to be resolved manually, it may be better to leave the BackgroundService \"crashed\" / inactive and after the issue is fixed, having the whole service restarted in order to be updated by the \"patching\" service.\n\n### Describe the solution you\u0027d like\n\n1. The solution that I would love to see is to be able from other service or from other place (ex. in the Main() method) to check the status of the BackgroundService, ex. if it\u0027s running, starting, stopping, inactive. \r\n2. It may be great to be able to have another method within the service itself, that runs in parallel to the main thread / Task, and allows to be used like heartbeat that reports somewhere that the service is alive, and still use the Task.Delay() to configure how frequenlty to give a heartbeat. \r\n3. A control over the services like Something.Stop() / Start() / Pause() may be useful (ex. updating some app that the service depends on and pausing until it\u0027s done). \r\n4. Some straightforward way to collect \"diagnostic\" or other data from the main thread, like how much time took for the latest query to execute, like back-and-forth thingie between the hearbeat thread and main the thread.\n\n### Additional context\n\nCurrently I digged as much as I can and I didn\u0027t find absolutely anything that could help me with monitoring, controlling or at least getting the state of a BackgroundService (without using Azure Monitoring). Azure Monitoring and Application Insights it\u0027s a great service , but it\u0027s not free (1.94 EUR for log injection per GB) and if I want to actully use this data for something outside the Azure portal, I have to use the LogAnalytics API and kusto query language. If there is any other way except this one, I would be very happy to hear it.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgoS_YA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85ZfD6D",
                                           "createdAt":  "2023-04-10T02:29:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "What exactly are you looking for? UI? An API? It’s unclear from this description…",
                                           "updatedAt":  "2023-04-10T02:29:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85ZgcG0",
                                           "createdAt":  "2023-04-10T10:56:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "milen-denev",
                                           "body":  "For sure I am looking for an API to be used. I don\u0027t think that an UI fits in this case anyways, I cannot imagine a windows service having a UI for checking it\u0027s health, the way AddHealthChecksUI does for ASP.NET Core websites. \r\n\r\nBut if someone comes up with an idea , let\u0027s say going to \"localhost:5932\" and opening up a webpage thats looking like the AddHealthChecksUI , it might be great feature. \r\n\r\nAlthough the core functionallity, of being able to check the status of a BackgroundService and it\u0027s state is much more importatnt.",
                                           "updatedAt":  "2023-04-10T10:56:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85Zh-yv",
                                           "createdAt":  "2023-04-10T17:17:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Can you write this health check today? Enumerate all hosted services, case to BackgroundService an check the Task (https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.backgroundservice.executetask?view=dotnet-plat-ext-7.0#microsoft-extensions-hosting-backgroundservice-executetask) to see if it’s faulted?\r\n\r\nI’m still not 100% sure what you’re asking for API wise. Are these background services that you wrote? Why can’t they handle errors or report health status ?\r\n",
                                           "updatedAt":  "2023-04-10T17:17:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85ZnC0-",
                                           "createdAt":  "2023-04-11T13:58:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "milen-denev",
                                           "body":  "Ok so, here is what I did. I am not quite sure if it\u0027s a good \"design choise\" or it\u0027s the best way to do it: \r\n\r\nI wrote an new class which inherits the BackgroundService \r\n\r\n```cs\r\npublic abstract class ExtendedBackgroundService : BackgroundService\r\n{\r\n    public TimeSpan HeartbeatDelay { get; set; } = TimeSpan.FromSeconds(1);\r\n    public DateTime LastFired { get =\u003e lastFired; set =\u003e lastFired = DateTime.Now; }\r\n    public ServiceStatus Status { get =\u003e status; set =\u003e status = ServiceStatus.Running; }\r\n    private DateTime lastFired { get; set; }\r\n    private ServiceStatus status { get; set; }\r\n\r\n    private Task HealthCheckTask { get; set; }\r\n\r\n    public override async Task StartAsync(CancellationToken cancellationToken)\r\n    {\r\n        HealthCheckTask = await Task.Factory.StartNew(async () =\u003e await HeartbeatAsync(cancellationToken), cancellationToken, TaskCreationOptions.LongRunning, TaskScheduler.Current);\r\n        await base.StartAsync(cancellationToken);\r\n    }\r\n\r\n    public virtual async Task HeartbeatAsync(CancellationToken stoppingToken)\r\n    {\r\n        while (!stoppingToken.IsCancellationRequested)\r\n        {\r\n            lastFired = DateTime.Now;\r\n            status = ServiceStatus.Running;\r\n            Console.WriteLine(\"Running\");\r\n            await Task.Delay(HeartbeatDelay, stoppingToken);\r\n        }\r\n    }\r\n\r\n    protected override Task ExecuteAsync(CancellationToken stoppingToken)\r\n    {\r\n        return Task.CompletedTask;\r\n    }\r\n\r\n    public override Task StopAsync(CancellationToken cancellationToken)\r\n    {\r\n        Status = ServiceStatus.Stopped;\r\n        HealthCheckTask.Dispose();\r\n        return base.StopAsync(cancellationToken);\r\n    }\r\n}\r\n\r\npublic enum ServiceStatus\r\n{\r\n    Started,\r\n    Running,\r\n    Stopped\r\n}\r\n```\r\n\r\nAnd there is a sample of the \"MyService\" which inherits the ExtendedBackgroundService:\r\n\r\n```cs\r\npublic class MyService : ExtendedBackgroundService\r\n{\r\n    private readonly MyContext myContext;\r\n    private readonly SomeManager someManager;\r\n\r\n    public ProductPointsService(MyContext myContext, SomeManager someManager)\r\n    {\r\n        this.myContext = myContext;\r\n        this.someManager = someManager;\r\n        HeartbeatDelay = TimeSpan.FromSeconds(5);\r\n    }\r\n\r\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\r\n    {\r\n        while (!stoppingToken.IsCancellationRequested)\r\n        {\r\n            await someManager.DoingSomething();\r\n            await Task.Delay(TimeSpan.FromHours(24), stoppingToken);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAnd finally the a HealthCheckService:\r\n\r\n```cs\r\npublic class HealthCheckService : BackgroundService\r\n{\r\n    private readonly IServiceProvider _serviceProvider;\r\n\r\n    public HealthCheckService(IServiceProvider serviceProvider)\r\n    {\r\n        _serviceProvider = serviceProvider;\r\n    }\r\n\r\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\r\n    {\r\n        while (!stoppingToken.IsCancellationRequested)\r\n        {\r\n            using (var scope = _serviceProvider.CreateScope())\r\n            {\r\n                var host = scope.ServiceProvider.GetRequiredService\u003cIHost\u003e();\r\n               //I say IHostedService because if I try to GetServices\u003cExtendedBackgroundService\u003e it simply doesn\u0027t work\r\n                var hostedServices = host.Services.GetServices\u003cIHostedService\u003e();\r\n\r\n                foreach (var service in hostedServices)\r\n                {\r\n                    if(service.GetType().Name == \"MyService\")\r\n                    {\r\n                        var _service = service as ExtendedBackgroundService;\r\n                    }\r\n                }\r\n            }\r\n\r\n            await Task.Delay(1000, stoppingToken);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis is what you mean by \"Enumerate all hosted services, case to BackgroundService an check the Task\" ? \r\n",
                                           "updatedAt":  "2023-04-11T15:26:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86CgGH-",
                                           "createdAt":  "2024-06-25T16:49:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dulatr",
                                           "body":  "This issue is similar to what I\u0027m also looking for but I\u0027m not using windows services.\r\n\r\nCame across this open issue and interpreted @davidfowl\u0027s statement as such:\r\n\r\n```cs\r\npublic sealed class WorkerHealthCheck : IHealthCheck\r\n{\r\n\tprivate readonly IServiceProvider _services;\r\n\r\n\tpublic WorkerHealthCheck(IServiceProvider services)\r\n\t{\r\n\t\t_services = services;\r\n\t}\r\n\r\n\tpublic Task\u003cHealthCheckResult\u003e CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = new CancellationToken())\r\n\t{\r\n\r\n\t\tvar workers = _services\r\n\t\t\t.GetServices\u003cIHostedService\u003e()\r\n\t\t\t.Where(service =\u003e service is MyWorker)\r\n\t\t\t.ToList();\r\n\r\n\t\tif (workers.Any())\r\n\t\t{\r\n\t\t        // could also just check status of all workers of type or whatever \r\n\t\t\tvar worker = workers.First() as MyWorker;\r\n\t\t\tvar status = worker?.ExecuteTask?.Status;\r\n\t\t\tif (status is not null)\r\n\t\t\t{\r\n\t\t\t\treturn Task.FromResult(status == TaskStatus.Faulted\r\n\t\t\t\t\t? HealthCheckResult.Unhealthy(\"MyWorker is not running\", worker?.ExecuteTask?.Exception) : HealthCheckResult.Healthy(\"MyWorker is running\"));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn Task.FromResult(HealthCheckResult.Healthy(\"No worker was started\"));\r\n\t}\r\n}\r\n```\r\n\r\nWhich could be extended to a more involved status check on the service itself. However I am running into an issue where the status of the execute task for my worker is always awaiting activation. The worker itself does basically this:\r\n\r\n```cs\r\npublic sealed class MyWorker : BackgroundService\r\n{\r\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\r\n    {\r\n        // setup\r\n        \r\n        while (!stoppingToken.IsCancellationRequested)\r\n        {\r\n            // await and handle service bus messages\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n@milen-denev Did you end up getting your solution to work? I know this is a bit old at this point but issue was still open.\r\n\r\nI feel like I\u0027m misunderstanding something pretty basic, but I\u0027m not sure why when I check the status of the execution task it is always awaiting activation. Any help would be appreciated. ",
                                           "updatedAt":  "2024-06-25T16:49:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86ChL9g",
                                           "createdAt":  "2024-06-25T18:51:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "milen-denev",
                                           "body":  "@Dulatr I think you have to implement the WorkerHealthCheck logic within another ExecuteAsync function of another service. All I was trying to point out is that there is nothing (that I am aware of) does exactly that, like health checks, stopping starting, pausing, restarting a BackgroundService. I hope to have soon something simple to use that does that.",
                                           "updatedAt":  "2024-06-25T18:51:53Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Health Checking / Heartbeat for BackgroundService, IHostedService",
        "labels":  [
                       "area-healthchecks"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/49715",
        "createdAt":  "2023-07-28T23:43:30Z",
        "number":  49715,
        "author":  "halter73",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-15T21:51:11Z",
        "body":  "              I would love for these to be really deterministic though. So it\u0027d even pass given a starved scheduler and whatnot. If you\u0027re feeling ambitious, you could kick the tires on the [new TimeProvider API](https://github.com/dotnet/runtime/issues/36617#issuecomment-1468661805). It was basically made for exactly this use case, so you wouldn\u0027t have to go and make your own custom abstraction. It was just merged 4 days ago, so it\u0027s not available quite yet in the aspnetcore repo, but it should arrive in the next SDK update which usually happens Monday. It\u0027s already available in the [latest installer](https://github.com/dotnet/installer#table).\r\n\r\n_Originally posted by @halter73 in https://github.com/dotnet/aspnetcore/pull/42646#discussion_r1151263096_\r\n            ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Use TimeProvider in M.E.Diagnostics.HealthChecks",
        "labels":  [
                       "area-healthchecks"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/49745",
        "createdAt":  "2023-07-31T04:38:23Z",
        "number":  49745,
        "author":  "captainsafia",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-18T20:35:47Z",
        "body":  "\u003c!--\r\nNote this issue template is specifically for failing tests within the dotnet/aspnetcore repo.\r\n--\u003e\r\n\r\n## Failing Test(s)\r\n\r\n\u003c!--\r\nProvide the fully qualified name(s) of the failing tests.\r\n--\u003e\r\n\r\n- Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckPublisherHostedServiceTest.RunAsync_WaitsForCompletion_Single_RegistrationParameters\r\n\r\n## Error Message\r\n\r\n\u003c!--\r\nProvide the error message associated with the test failure, if applicable.\r\n--\u003e\r\n\r\n```text\r\nAssert.Contains() Failure\r\nNot found: CheckDelay1Period9\r\nIn value:  String[] [\"CheckDefault\", \"CheckDelay1Period18\", \"CheckDelay2Period18\"]\r\n```\r\n\r\n## Stacktrace\r\n\r\n\u003cdetails\u003e\r\n\u003c!--\r\nProvide the stack trace associated with the test failure, if applicable.\r\n--\u003e\r\n\r\n```text\r\n   at Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckPublisherHostedServiceTest.RunAsync_WaitsForCompletion_Single_RegistrationParameters() in /_/src/HealthChecks/HealthChecks/test/HealthCheckPublisherHostedServiceTest.cs:line 388\r\n--- End of stack trace from previous location ---\r\n```\r\n\u003c/details\u003e\r\n\r\n\r\n## Logs\r\n\r\n\u003cdetails\u003e\r\n\u003c!--\r\nIf this is a Helix test failure, include the text of the .log artifact from the failing test.\r\nNote that you have to be signed in to Azure DevOps to see the test artifacts.\r\n--\u003e\r\n\r\n```text\r\n\r\n```\r\n\u003c/details\u003e\r\n\r\n## Build\r\n\r\n\u003c!--\r\nProvide a link to the build where the test failure occurred.\r\n--\u003e\r\n\r\n- https://dev.azure.com/dnceng-public/public/_build/results?buildId=356938\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=7511354\u0026resultId=122241\u0026paneView=debug\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvqLPTw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde8686FWq",
                                           "createdAt":  "2025-08-08T21:25:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "feherzsolt",
                                           "body":  "Hi,\nI have spent some time investigating this and in my opinion the issue is a race condition with the TestPublisher [here](https://github.com/dotnet/aspnetcore/blob/main/src/HealthChecks/HealthChecks/test/HealthCheckPublisherHostedServiceTest.cs#L814). My observation is the flaky test is writing mulitple reports from multiple timer at around the same time. In my opinion the fix would be easy, using a thread safe collection. Do you think this worth pursuing? ( I can implement this modification. )",
                                           "updatedAt":  "2025-08-08T21:54:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde8686GDr",
                                           "createdAt":  "2025-08-08T21:26:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "feherzsolt",
                                           "body":  "In my opinion the same applies to https://github.com/dotnet/aspnetcore/issues/56245",
                                           "updatedAt":  "2025-08-08T21:26:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde869QeD4",
                                           "createdAt":  "2025-08-11T14:50:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "captainsafia",
                                           "body":  "@feherzsolt That seems like a reasonable thing to try. We can see if using a concurrent collection improves things here.",
                                           "updatedAt":  "2025-08-11T14:50:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86-ZUe8",
                                           "createdAt":  "2025-08-17T11:00:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "feherzsolt",
                                           "body":  "Hi i have tried to find a way to validate these modifications. In my opinion the best way would be to check test failure rate for these test. I was looking to find this data, got lost a bit. Could you help what would be the best way to validate please?",
                                           "updatedAt":  "2025-08-17T11:00:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86-lrQ9",
                                           "createdAt":  "2025-08-18T16:08:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "captainsafia",
                                           "body":  "@feherzsolt We typically apply a test-fixed label to the issue then monitor the test for 30 days before unquarantining to verify that the fix worked.",
                                           "updatedAt":  "2025-08-18T16:08:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde86-os9P",
                                           "createdAt":  "2025-08-18T20:35:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "feherzsolt",
                                           "body":  "Thank you, let\u0027s do that. I have created the PR https://github.com/dotnet/aspnetcore/pull/63299",
                                           "updatedAt":  "2025-08-18T20:35:47Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Quarantine RunAsync_WaitsForCompletion_Single_RegistrationParameters",
        "labels":  [
                       "test-failure",
                       "area-healthchecks"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/52335",
        "createdAt":  "2023-11-23T16:15:50Z",
        "number":  52335,
        "author":  "KirkMunroSagent",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCBXCw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ozsvart-karoly-nx",
                                            "createdAt":  "2025-05-05T10:37:44Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-15T21:51:12Z",
        "body":  "Since starting the discussion below, I have confirmed my findings.\r\n\r\nToday Health Checks don\u0027t fully support DI, even though they are advertised as supporting DI.\r\n\r\nThe reason they don\u0027t fully support DI is simple:\r\nBy default, due to [this line of ASP.NET code](https://github.com/dotnet/aspnetcore/blob/e0b78d39d1ac84a4ece9ee4568b4e45114ea0627/src/HealthChecks/HealthChecks/src/DefaultHealthCheckService.cs#L78), every health check is invoked in a new scope. That means that state information inside of any scoped services will never be available to a health check that consumes that service via DI. This becomes an issue if your authorization layer updates scoped service state with the expectancy that said state information will be available to other services (or health checks) that consume that scoped service. It doesn\u0027t matter if you invoke your health checks using `HealthCheckService.CheckHealthAsync` nor if you define your health checks using `AuthorizationEndpointConventionBuilderExtensions.RequireAuthorization`, the result is the same -- a new scope is created, eliminating any utility offered through the use of scoped services before the health check was invoked.\r\n\r\nThere is no documentation that highlights this DI limitation with health checks.\r\n\r\nThe following workarounds may resolve this issue, but only for some scenarios, and it is dependent on the implementation:\r\n- use some other way to pass state (`HttpContext.Items`, `HttpRequest.Headers`, `ClaimsPrincipal.Claims`, etc.)\r\n- create a copy of the internal `DefaultHealthCheckService` class, register your copy as a singleton, update it such that it does not create a new scope for every health check, and inject that instead of injecting `HealthCheckService` when using `HealthCheckService.CheckHealthAsync`\r\n\r\nThe former workaround is not always possible (highly dependent on how you are invoking health checks), and often undesirable (state information that is only required internally within a service shouldn\u0027t unnecessarily be stored in headers or claims).\r\n\r\nThe latter workaround resolves the issue for health checks invoked using `HealthCheckService.CheckHealthAsync`; however, it does nothing for health checks configured with `RequireAuthorization` where the authorization layer uses scoped services that are later referenced by a health check, because the default behavior for health checks remains the same.\r\n\r\nIn my testing, I\u0027ve applied the latter workaround, and for my purposes it works very well. The significant downside is that I\u0027ve had to copy 337 lines of ASP.NET code just to remove two of them and change one other.\r\n \r\nI understand that this is an infrequent issue (use of DI/authorization in health checks is uncommon). I also understand that the current behavior is likely due to a desire to keep code simple (since Health Checks are invoked in parallel, using a new scope for each one eliminates the need to worry about scoped services not using constructs like `AsyncLocal` or other thread safety measures where appropriate). That said, I would still like to see this issue addressed, ideally by providing options allowing devs to have their health checks run using DI scoped services just like any other service can, with state being respected.\r\n\r\nWhat resolution would you be willing to consider?\r\n\r\nI can create a PR with whatever enhancements are agreed upon to support this scenario, which ideally would allow someone like me to do what I\u0027m doing without having to copy the bulk of the `DefaultHealthCheckService` code like I\u0027m doing now. I\u0027m not looking to change any defaults here -- I\u0027m simply looking for extensibility options that allow devs who are using DI and authorization in health checks to be able to depend on them working just like DI does in other services, with docs explaining that those options mean the services that are DI\u0027ed into the health checks involved must be able to run safely when executed in parallel.\r\n\r\nThanks for your time.\r\n\r\n### Discussed in https://github.com/dotnet/aspnetcore/discussions/52086\r\n\r\n\u003cdiv type=\u0027discussions-op-text\u0027\u003e\r\n\r\n\u003csup\u003eOriginally posted by **KirkMunroSagent** November 15, 2023\u003c/sup\u003e\r\nI\u0027m facing a challenge with Health Checks and scope and I\u0027m not quite sure what to do about it. My challenge seems to come down to [this line of ASP.NET code](https://github.com/dotnet/aspnetcore/blob/e0b78d39d1ac84a4ece9ee4568b4e45114ea0627/src/HealthChecks/HealthChecks/src/DefaultHealthCheckService.cs#L78).\r\n\r\nHere\u0027s the issue:\r\nWe\u0027re using DI in Health Checks. I\u0027m invoking Health Checks programmatically by DI\u0027ing `HealthCheckService` into a controller and calling its `CheckHealthAsync` method. The controller method in question uses a policy that has a requirement authorization handler which references a scoped DI service that identifies who the caller is. That scoped \"caller id\" service is used later on in other services to get the caller id information, and since it\u0027s scoped, the information is available; however, if I try to get the caller id information from the same service DI\u0027ed into my Health Check, the information is not available seemingly because of the line in question above, which creates a new scope for each health check that is run. Why create a new scope for every health check that is identified to be run according to the predicate?\r\n\r\nIs the answer that Health Checks \"support\" DI, meaning that DI is only properly supported when the health check in question is invoked via ASP.NET\u0027s internal uris, but if you invoke Health Checks via the public `HealthCheckService.CheckHealthAsync` method, then your DI scope is reset for each health check, which may break how scoped DI works in some scenarios because services are injected in a brand new scope instead of being used in the current scope, so you\u0027ll lose any information that was being retained in a scope-injected DI service before you programmatically invoked the health check?\r\n\r\nThis seems like a bug to me.\r\n\r\nIf I invoke a health check via an endpoint that has a DI\u0027ed `HealthCheckService.CheckHealthAsync`, that should be done using my current scope from the endpoint invocation instead of creating a new scope for each health check. Even if I invoke a set of health checks using an internal uri and ASP.NET\u0027s default invocation mechanism, I would have expected that to be done using a single scope for all health checks that are run instead of creating a new scope for each health check that is to be run based on the predicate that was passed in. Anything else seems contrary to how scoping and DI is designed to work, no? Otherwise the Health Check is DI\u0027ing its services from a different container, losing access to anything scoped that may have been updated during authentication or during the invocation of the endpoint itself if it did any work with scoped services that it expected would be available to the Health Checks that it is about to run.\r\n\r\nAll of that said, does anyone have any idea how I can preserve my current scope when running health checks programmatically? I can always create my own `ScopedHealthCheckService` and DI that instead of `HealthCheckService` to perform the execution within the same scope, but I\u0027d really prefer not copying all of that code just to skip that one line.\u003c/div\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Health Checks, Dependency Injection, and Scope",
        "labels":  [
                       "area-healthchecks"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/53670",
        "createdAt":  "2024-01-28T04:44:35Z",
        "number":  53670,
        "author":  "thompson-tomo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-15T21:51:12Z",
        "body":  "## Summary\n\nI want to have some general Health publisher\u0027s available which publish to common targets ie log file, System.Diagnostic.\n\n## Motivation and goals\n\nI want to make it as easy as possible for developers to be able record the results of the configured health checks and monitor them over time. It should not matter if on-premise or cloud software.\n\nWith this change I will be able to collect log files from site \u0026 to see what the health has been for a period of time. Note A key thing would be to ensure that appropriate log levels are used\n\n## In scope\n\nRelease of new nuget package\n- Microsoft.Extensions.Diagnostics.HealthChecks.Publishers.Logger which is used to write health info to logs during development \u0026 offline cases etc\n- Microsoft.Extensions.Diagnostics.HealthChecks.Publishers.DiagnosticticSource which is used to write health info as metrics and can then be processed by other tools ie otel collectors\n\n## Out of scope\n\nSupporting any logger other Microsoft.Extensions.Logger\n\n## Examples\n\nThe idea is to make it as simple for developer to enable and as such the idea would be:\n```\nbuilder.Services.AddHealthPublisherLogger();\n```\nOr \n\n```\nbuilder.Services.AddHealthPublisherDiagnosticSource();\n```\n\n\nObviously it should be possible to define the HealthCheckPublisherOptions just like if it was explicitly added.\n\n# Detailed design\n\nTo eliminate log spam The following mapping of the health status is needed.\n- **Error** first instance of a failure\n- **Warning** subsequent instance of a failed health check\n- **Info** first instance of a service going healthy\n- **Debug** subsequent instance of a healthy health check\n\nFor diagnostic source the key thing is all the attributes of report data are exposed as attributes.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcg1XkQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde85yDO9t",
                                           "createdAt":  "2024-01-28T04:48:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Why does this need to be in the box? Why not write one for your on prem software?",
                                           "updatedAt":  "2024-01-28T04:48:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85yDPXm",
                                           "createdAt":  "2024-01-28T04:59:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "thompson-tomo",
                                           "body":  "Writing one is not the issue, I am more than happy to write it \u0026 then it submit it as a PR etc. I am more thinking for key Microsoft libraries ie logger, System.DiagnosticSource should the appropriate publisher be provided in a similar manner to configuration, logging or do we simply rely on third parties to manage it in it\u0027s entirety.",
                                           "updatedAt":  "2024-01-28T04:59:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85yDPe3",
                                           "createdAt":  "2024-01-28T05:02:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "thompson-tomo",
                                           "body":  "For instance with the System.Diagnostic publisher it would then facilitate aspire to visualise the result of the health checks.",
                                           "updatedAt":  "2024-01-28T05:02:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85yDPkQ",
                                           "createdAt":  "2024-01-28T05:03:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "If there were a set of concrete scenarios then we would add this. I\u0027ll leave this open but I don\u0027t see a reason to add this to the framework.",
                                           "updatedAt":  "2024-01-28T05:03:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85yDQgm",
                                           "createdAt":  "2024-01-28T05:17:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "thompson-tomo",
                                           "body":  "So the scenarios, I see would be Aspire \u0026 OTEL more broadly as they could utilise the metrics such a publisher would have access to \u0026 would be able to provide.\n\nAt the same time having a publisher writing to logs is useful not just for my case but also for general debugging/development. ",
                                           "updatedAt":  "2024-01-28T05:17:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85yDQ-Y",
                                           "createdAt":  "2024-01-28T05:25:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Right, if that how aspire choses to implement health checks (which isn\u0027t the plan right now), that would be a +1, but we don\u0027t have a logging publisher as a scenario for health checks.",
                                           "updatedAt":  "2024-01-28T05:25:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde85yDVeR",
                                           "createdAt":  "2024-01-28T06:50:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "thompson-tomo",
                                           "body":  "I have reworked the description to make it more descriptive and it now encompasses the 2 use cases with the scenarios for each mentioned. Obviously Aspire would fall under the DiagnosticSource option.",
                                           "updatedAt":  "2024-01-28T06:50:00Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Provide common IHealthCheckPublisher implementation",
        "labels":  [
                       "area-healthchecks",
                       "design-proposal"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/54449",
        "createdAt":  "2024-03-08T21:43:50Z",
        "number":  54449,
        "author":  "mbjasonayer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-15T21:51:13Z",
        "body":  "## Background and Motivation\r\n\r\nI frequently find myself needing to use the `Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder.Add(HealthCheckRegistration registration)` extension method to register health checks that require use of the `IServiceProvider` to setup the Health check dependencies. It would be nice to have an API for this scenario for registering health checks in consistency with the other extension methods, such as:\r\n\r\n```csharp\r\npublic static IHealthChecksBuilder AddCheck\u003cT\u003e(\r\n    this IHealthChecksBuilder builder,\r\n    string name,\r\n    HealthStatus? failureStatus,\r\n    IEnumerable\u003cstring\u003e tags) where T : class, IHealthCheck\r\n```\r\netc...\r\n\r\n## Proposed API\r\n\r\nThe API I would like to propose is as follows:\r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.DependencyInjection;\r\n\r\npublic static class HealthChecksBuilderAddCheckExtensions\r\n{\r\n    // existing code omitted for brevity\r\n    \r\n    public static IHealthChecksBuilder AddCheck\u003cT\u003e(\r\n        this IHealthChecksBuilder builder,\r\n        string name,\r\n        Func\u003cIServiceProvider, IHealthCheck\u003e factory,\r\n        HealthStatus? failureStatus = null,\r\n        IEnumerable\u003cstring\u003e? tags = null) where T : class, IHealthCheck\r\n    {\r\n        return builder.Add(new HealthCheckRegistration(name, factory, failureStatus, tags));\r\n    }\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\nThe usage of this API would simplify registering of a health check that requires the use of the `IServiceProvider`:\r\n\r\n```csharp\r\nservices.AddHealthChecks()\r\n    .AddCheck(\"DbConnectionCheck\", sp =\u003e\r\n    {\r\n        var configuration = sp.GetRequiredService\u003cIConfiguration\u003e();\r\n\tvar connectionString = configuration.GetConnectionString(\"DefaultConnectionString\");\r\n\tvar provider = configuration.GetValue\u003cstring\u003e(\"Configuration:DbProvider\");\r\n\treturn new DbConnectionCheck(connectionString, dbProvider);\r\n    }, HealthStatus.Unhealthy, new[] { \"dependency\", \"db-dependency\" });\r\n```\r\n\r\n## Alternative Designs\r\n\r\nNone\r\n\r\n## Risks\r\n\r\nNo known risks.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Add new IHealthChecksBuilder extension method.",
        "labels":  [
                       "area-healthchecks",
                       "api-suggestion"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/56028",
        "createdAt":  "2024-06-03T02:57:25Z",
        "number":  56028,
        "author":  "thompson-tomo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-15T21:51:13Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI am trying to observe the entire operation \u0026 health of my system by using open telemetry and health checks.\n\n### Describe the solution you\u0027d like\n\nThe following is the full objective which could be delivered in stages.\r\n\r\n- an activity is created for each health check which can allow for analysis of duration to complete.\r\n- The activityId is populated to the data property using a strong keyed field or alternatively dedicated property so that the activity can be connected to the publishing process.\r\n- An event is created on the activity if monitoring is enabled (default false) with the health check result and the data fields as tags as defined in the otel spec\n\n### Additional context\n\nCurrently it is possible to to make a health check publisher which produces the otel event however what is missing is the ability to connect it to the original activity.\n\nDiscussion in the connected otel issue which would result in otel providing an interim message for the final point: https://github.com/open-telemetry/opentelemetry-dotnet-contrib/issues/1855",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Health checks should help facilitate OTEL tracing ",
        "labels":  [
                       "area-healthchecks"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/56245",
        "createdAt":  "2024-06-14T21:33:59Z",
        "number":  56245,
        "author":  "BrennanConroy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-15T21:51:14Z",
        "body":  "\u003c!--\r\nNote this issue template is specifically for failing tests within the dotnet/aspnetcore repo.\r\n--\u003e\r\n\r\n## Failing Test(s)\r\n\r\n\u003c!--\r\nProvide the fully qualified name(s) of the failing tests.\r\n--\u003e\r\n\r\n- Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckPublisherHostedServiceTest.RunAsync_CanFilterHealthChecks\r\n\r\n## Error Message\r\n\r\n\u003c!--\r\nProvide the error message associated with the test failure, if applicable.\r\n--\u003e\r\n\r\n```text\r\nSystem.InvalidOperationException : Collection was modified; enumeration operation may not execute.\r\n```\r\n\r\n## Stacktrace\r\n\r\n\u003cdetails\u003e\r\n\u003c!--\r\nProvide the stack trace associated with the test failure, if applicable.\r\n--\u003e\r\n\r\n```text\r\n   at System.Collections.Generic.List`1.Enumerator.MoveNextRare()\r\n   at System.Collections.Generic.List`1.Enumerator.MoveNext()\r\n   at System.Linq.Enumerable.SelectManySingleSelectorIterator`2.ToArray()\r\n   at System.Linq.Enumerable.OrderedIterator`1.ToArray()\r\n   at Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckPublisherHostedServiceTest.RunAsync_CanFilterHealthChecks() in /_/src/HealthChecks/HealthChecks/test/HealthCheckPublisherHostedServiceTest.cs:line 656\r\n--- End of stack trace from previous location ---\r\n```\r\n\u003c/details\u003e\r\n\r\n\r\n## Logs\r\n\r\nNone\r\n\r\n## Build\r\n\r\nhttps://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-aspnetcore-refs-heads-main-b3576f6780e94a028f/Microsoft.Extensions.Diagnostics.HealthChecks.Tests--net9.0/1/console.6c8c27aa.log?helixlogtype=result\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Quarantine RunAsync_CanFilterHealthChecks",
        "labels":  [
                       "test-failure",
                       "area-healthchecks"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/56789",
        "createdAt":  "2024-07-15T09:52:48Z",
        "number":  56789,
        "author":  "anirugu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-15T21:51:14Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\napp.MapHealthChecks(\"/Ramesh/Suresh\").AllowAnonymous();\r\n\r\nThe app I am working on has a endpoint which should statically return the \"Health\" in the response so UI aware of backend is running fine. The expectation is Health endpoint is called without passing token.\r\n\r\nI have added an authentication scheme in the application. The problem is this authentication handler code is called when someone called the health or swagger endpoint.\r\n\r\nI am expecting it to allow these endpoints without authentication.  The response come from health endpoint is \"Healthy\", This means authentication code is not able to stopped it and in logs it\u0027s written as \"Can\u0027t authenticate\" but in actual the user is able to see the response.\r\n\r\nSo, Authentication is not working, and user got response. My expectation is when allowanonymous  is called then it should not go to Authentication code.\r\n\r\n\n\n### Expected Behavior\n\nAllowAnonymous() doesn\u0027t make this code to bypass authentication code. Even without it it\u0027s goes to Authentication code and auth code is not able to stopped it. Response is coming even there is nothing in header.\r\nExpectation is either it\u0027s work this way or that way.\r\n\r\nAllowAnyonymous() should be able to bypass. If default behavior is authenticate the request then it should failed rather then give response even without token in header.\n\n### Steps To Reproduce\n\nuse both Authentication and MapHealthCheck()\n\n### Exceptions (if any)\n\nNA\n\n### .NET Version\n\n8.0.206\n\n### Anything else?\n\nNA",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhNqpOQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86E2qk5",
                                           "createdAt":  "2024-07-15T16:33:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "This is by design. AuthN still runs so the `HttpContext.User` property can be populated even if AuthZ will ignore auth requirements due to AllowAnonymous. This is so user code can still look at the `User` property if it wants to do its own AuthZ or for any other reasons.",
                                           "updatedAt":  "2024-07-15T16:33:26Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "AddHealthChecks() doesn\u0027t work with AllowAnonymous in dotnet 8",
        "labels":  [
                       "area-healthchecks"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/56815",
        "createdAt":  "2024-07-16T09:13:40Z",
        "number":  56815,
        "author":  "MileaRobertStefan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-15T21:51:15Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWhen implementing a health check using the IHealthCheck interface, the service enters a \"shutting down\" state where it completes its current tasks before stopping. During this state, the health check returns an \"unhealthy\" status to prevent the service from accepting new tasks. However, this results in the health check repeatedly logging errors, which in turn triggers alerts.\r\n\n\n### Expected Behavior\n\nThe health check should return \"unhealthy\" to prevent new tasks from being assigned to the service.\r\nThe system should handle the \"unhealthy\" status gracefully without repeatedly logging errors or triggering alert\n\n### Steps To Reproduce\n\nImplement a health check using the IHealthCheck interface.\r\nInitiate the service and allow it to process tasks.\r\nTransition the service into a \"shutting down\" state where it completes ongoing tasks and then stops.\r\nObserve the health check status during the \"shutting down\" state.\n\n### Exceptions (if any)\n\nI should be able to configure the log level.\n\n### .NET Version\n\n8.0.300\n\n### Anything else?\n\nFake errors: \r\n![image](https://github.com/user-attachments/assets/f8e27103-d144-4854-bf6e-64c6979dcc89)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "HealthCheck forcefully logs error on HealthCheckResult.Unhealthy",
        "labels":  [
                       "area-healthchecks"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/58369",
        "createdAt":  "2024-10-11T17:20:30Z",
        "number":  58369,
        "author":  "zdenek-jelinek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-15T21:51:15Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nDocumentation of each overload of [UseHealthChecks](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.healthcheckapplicationbuilderextensions.usehealthchecks) contains a remark that states\n\u003eIf path is set to null or the empty string then the health check middleware will ignore the URL path and process all requests. **If path is set to a non-empty value, the health check middleware will process requests with a URL that matches the provided value of path case-insensitively, allowing for an extra trailing slash (\u0027/\u0027) character.**\n\n(emphasis mine)\n\nHowever, in spite of this description, I am not able to specify a path in a way that would match request path both with and without trailing slash:\n| Configured Path | Request Path | Match |\n| --- | --- | --- |\n| `/health-check-1` | `/health-check-1` | ✅ |\n| `/health-check-1` | `/health-check-1/` | ❌ |\n| `/health-check-2/` | `/health-check-2/` | ✅ |\n| `/health-check-2/` | `/health-check-2` | ❌ |\n\nI am also not sure whether the trailing slash tolerance applies to request path or the configured path based on the description. Request path seems more intuitive, though (i.e. `/health-check-1` should also match `/health-check-1/`).\n\n### Expected Behavior\n\nUnless I understand the documentation wrong, it should be possible to configure a single path to match a request path both with and without a trailing slash. This would align the behavior with `MapHealthChecks` which currently supports this.\n\nIf that\u0027s not possible, the documentation should be updated to reflect the actual behavior - i.e. don\u0027t mention trailing slash acceptance if it does not happen. It would also make sense to note that the behavior is different from the endpoint-based version in [UseHealthChecks vs MapHealthChecks section of Health Checks documentation](https://learn.microsoft.com/en-us/aspnet/core/host-and-deploy/health-checks?view=aspnetcore-8.0#usehealthchecks-vs-maphealthchecks).\n\n### Steps To Reproduce\n\n1. Create a new ASP.NET Core 8 Web API with Controllers project\n2. In Program.cs, add a dummy health check registration to services\n   ```csharp\n   // Add services to the container.\n   builder.Services.AddHealthChecks().AddCheck(\"heart-beat\", () =\u003e HealthCheckResult.Healthy());\n   ```\n3. In Program.cs, register health check middlewares with and without a trailing slash in the path\n   ```csharp\n   // Configure the HTTP request pipeline.\n   app\n       .UseHealthChecks(\"/health-check-1\")\n       .UseHealthChecks(\"/health-check-2/\");\n   ```\n4. Run the application. Send requests according to the above table to observe that only `/health-check-1` and `/health-check-2/` actually respond with health data, whereas `/health-check-1/` and `/health-check-2` respond with HTTP 404 Not Found.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.400\n\n### Anything else?\n\nI have checked the code and the logic in [HealthCheckApplicationBuilderExtensions](https://github.com/dotnet/aspnetcore/blob/3f1acb59718cadf111a0a796681e3d3509bb3381/src/Middleware/HealthChecks/src/Builder/HealthCheckApplicationBuilderExtensions.cs#L225-L226) works this way because:\n- For request path `/health-check-1/` and configured path `/health-check-1`, the `remaining` from `StartsWithSegments` has the value of `\"/\"` which is not empty. \n- For request path `/health-check-2` and configured path `/health-check-2/`, the `StartsWithSegments` returns `false`. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "UseHealthChecks does not allow trailing slash as documented",
        "labels":  [
                       "area-healthchecks"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/58541",
        "createdAt":  "2024-10-21T12:23:13Z",
        "number":  58541,
        "author":  "ibruynin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-15T21:51:15Z",
        "body":  "I\u0027m trying to propagate the degraded health from the API to the UI (using that API) as follows:\n\nAPI:8080/health returns ``JsonSerializer.Serialize\u003cHealthReport\u003e(result)``\n\nUI:8080/health returns health info based on the result of the API\n\n```\nvar s = await response.Content.ReadAsStringAsync();                \nvar hr = JsonNode.Parse(s).AsObject();\nvar entries = hr[\"Entries\"];\nvar entry = entries[\"API_XYZ\"];\nvar hres = Int32.Parse(entry[\"Status\"].ToString());\nHealthStatus status = (HealthStatus)hres;\nreturn status switch\n{\n    HealthStatus.Healthy =\u003e HealthCheckResult.Healthy(\"Degraded API up\"),\n    HealthStatus.Degraded =\u003e HealthCheckResult.Degraded(\"Degraded API up, but degraded\"),\n    HealthStatus.Unhealthy =\u003e HealthCheckResult.Unhealthy(\"Degraded API unavailable\")\n};\n```\nIt would be cleaner (and more typesafe) if the following was possible:\n```\nvar s = await response.Content.ReadAsStringAsync();                \nvar hr = JsonSerializer.Deserialize\u003cHealthReport\u003e(s);\n```\nBut that\u0027s not possible due to the lack of a default constructor:\n`System.NotSupportedException: \u0027Deserialization of types without a parameterless constructor, a singular parameterized constructor, or a parameterized constructor annotated with \u0027JsonConstructorAttribute\u0027 is not supported. Type \u0027Microsoft.Extensions.Diagnostics.HealthChecks.HealthReport\u0027. `\n\nExtending the type is also not a workaround, since the class is sealed.\n\nAre we trying to do something that\u0027s not intended to do?\nThoughts welcome.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkj7yqg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde86SPvKq",
                                           "createdAt":  "2024-11-03T22:23:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "surgicalcoder",
                                           "body":  "@ibruynin I ran into the same problem, I managed to get around it by getting GH Copilot to write a custom JSON Converter:\n\n```\npublic class HealthReportJsonConverter : JsonConverter\u003cHealthReport\u003e\n{\n    public override HealthReport Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)\n    {\n        if (reader.TokenType != JsonTokenType.StartObject)\n        {\n            throw new JsonException();\n        }\n\n        var entries = new Dictionary\u003cstring, HealthReportEntry\u003e();\n        TimeSpan totalDuration = TimeSpan.Zero;\n        HealthStatus status = HealthStatus.Healthy;\n\n        while (reader.Read())\n        {\n            if (reader.TokenType == JsonTokenType.EndObject)\n            {\n                return new HealthReport(entries, status, totalDuration);\n            }\n\n            if (reader.TokenType != JsonTokenType.PropertyName)\n            {\n                throw new JsonException();\n            }\n\n            string propertyName = reader.GetString();\n            reader.Read();\n\n            switch (propertyName.ToLowerInvariant())\n            {\n                case \"entries\":\n                    entries = JsonSerializer.Deserialize\u003cDictionary\u003cstring, HealthReportEntry\u003e\u003e(ref reader, new JsonSerializerOptions { Converters = { new HealthReportEntryJsonConverter() } });\n                    break;\n                case \"totalduration\":\n                    totalDuration = JsonSerializer.Deserialize\u003cTimeSpan\u003e(ref reader, options);\n                    break;\n                case \"status\":\n                    status = (HealthStatus)reader.GetInt32();\n                    break;\n                default:\n                    throw new JsonException($\"Unexpected property: {propertyName}\");\n            }\n        }\n\n        throw new JsonException();\n    }\n\n    public override void Write(Utf8JsonWriter writer, HealthReport value, JsonSerializerOptions options)\n    {\n        writer.WriteStartObject();\n\n        writer.WritePropertyName(\"Entries\");\n        JsonSerializer.Serialize(writer, value.Entries, options);\n\n        writer.WritePropertyName(\"TotalDuration\");\n        JsonSerializer.Serialize(writer, value.TotalDuration, options);\n\n        writer.WritePropertyName(\"Status\");\n        writer.WriteNumberValue((int)value.Status);\n\n        writer.WriteEndObject();\n    }\n}\n\n\npublic class HealthReportEntryJsonConverter : JsonConverter\u003cHealthReportEntry\u003e\n{\n    public override HealthReportEntry Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)\n    {\n        if (reader.TokenType != JsonTokenType.StartObject)\n        {\n            throw new JsonException();\n        }\n\n        HealthStatus status = HealthStatus.Healthy;\n        string? description = null;\n        TimeSpan duration = TimeSpan.Zero;\n        Exception? exception = null;\n        var data = new Dictionary\u003cstring, object\u003e();\n        IEnumerable\u003cstring\u003e? tags = null;\n\n        while (reader.Read())\n        {\n            if (reader.TokenType == JsonTokenType.EndObject)\n            {\n                return new HealthReportEntry(status, description, duration, exception, data, tags);\n            }\n\n            if (reader.TokenType != JsonTokenType.PropertyName)\n            {\n                throw new JsonException();\n            }\n\n            string propertyName = reader.GetString();\n            reader.Read();\n\n            switch (propertyName.ToLowerInvariant())\n            {\n                case \"status\":\n                    status = (HealthStatus)reader.GetInt32();\n                    break;\n                case \"description\":\n                    description = reader.GetString();\n                    break;\n                case \"duration\":\n                    duration = JsonSerializer.Deserialize\u003cTimeSpan\u003e(ref reader, options);\n                    break;\n                case \"exception\":\n                    exception = JsonSerializer.Deserialize\u003cException\u003e(ref reader, options);\n                    break;\n                case \"data\":\n                    data = JsonSerializer.Deserialize\u003cDictionary\u003cstring, object\u003e\u003e(ref reader, options);\n                    break;\n                case \"tags\":\n                    tags = JsonSerializer.Deserialize\u003cIEnumerable\u003cstring\u003e\u003e(ref reader, options);\n                    break;\n                default:\n                    throw new JsonException($\"Unexpected property: {propertyName}\");\n            }\n        }\n\n        throw new JsonException();\n    }\n\n    public override void Write(Utf8JsonWriter writer, HealthReportEntry value, JsonSerializerOptions options)\n    {\n        writer.WriteStartObject();\n\n        writer.WritePropertyName(\"Status\");\n        writer.WriteNumberValue((int)value.Status);\n\n        writer.WritePropertyName(\"Description\");\n        writer.WriteStringValue(value.Description);\n\n        writer.WritePropertyName(\"Duration\");\n        JsonSerializer.Serialize(writer, value.Duration, options);\n\n        writer.WritePropertyName(\"Exception\");\n        JsonSerializer.Serialize(writer, value.Exception, options);\n\n        writer.WritePropertyName(\"Data\");\n        JsonSerializer.Serialize(writer, value.Data, options);\n\n        writer.WritePropertyName(\"Tags\");\n        JsonSerializer.Serialize(writer, value.Tags, options);\n\n        writer.WriteEndObject();\n    }\n}\n```\n\nSeems to have done the trick for me, hope it helps.",
                                           "updatedAt":  "2024-11-03T22:23:42Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Health propagation between API an UI not possible due to sealed \u0026 un(de)serializable",
        "labels":  [
                       "area-healthchecks"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/59561",
        "createdAt":  "2024-12-19T09:33:39Z",
        "number":  59561,
        "author":  "Ben555555",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODJFWcA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexb5dh",
                                            "createdAt":  "2025-07-30T05:03:37Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-15T21:51:16Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nCurrently there is no way to run health checks like DbContextCheck periodically. Therefor the Health check endpoints can be abused to be very exhaustive for the API.\n\n### Describe the solution you\u0027d like\n\nThere are already HealthCheckPublishers but currently even when they are applied the checks are made on each request. It would be nice if there was an option to use this also for returning the last published check results. It would be even better to be able to cache the results without an additional publisher by just using an additional setting or allowing to hook into the process to add a cache.\n\n### Additional context\n\n```\npublic class PeriodHealthCheckPublisher : IHealthCheckPublisher\n{\n    public Task PublishAsync(HealthReport report, CancellationToken cancellationToken)\n    {\n        return Task.CompletedTask;\n    }\n}\n\nservices.Configure\u003cHealthCheckPublisherOptions\u003e(options =\u003e\n{\n    options.Delay = TimeSpan.FromSeconds(2); // Initial delay\n    options.Period = TimeSpan.FromSeconds(60); // delay between checks\n    options.Predicate = _ =\u003e true;\n});\n\nservices.AddSingleton\u003cIHealthCheckPublisher, PeriodHealthCheckPublisher\u003e();\n\nservices.AddHealthChecks();\n```\n\nCurrently whenever the healthcheck endpoint is called all the checks are executed again.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "HealthCheck add possibility to cache checks and protect API from DDOS attacks",
        "labels":  [
                       "area-healthchecks"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/aspnetcore/issues/62600",
        "createdAt":  "2025-07-08T14:29:49Z",
        "number":  62600,
        "author":  "im-aIex",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-15T21:51:16Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nThe current default implementation of `DbContextHealthCheck` uses `dbContext.Database.CanConnectAsync(token)` to determine the health status of the DB. The implementation of `CanConnectAsync` swallows errors and only returns `true`/`false` based on if it was able to connect or not. This does not give adequate details when health checks fail.\n\n### Describe the solution you\u0027d like\n\nUpdate the default implementation of `DbContextHealthCheck` to properly log and have the health result contain any exceptions thrown when attempting to connect to the DB. This could either be just using its own \"SELECT 1\" logic or changing the default implementation to call `ExistsAsync` instead, since `CanConnectAsync` is just a wrapper around `ExistsAsync` that swallows errors.\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvHb4GA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDOAQzde868dXUi",
                                           "createdAt":  "2025-08-06T22:24:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "feherzsolt",
                                           "body":  "Hi @im-aIex, i checked the method you suggested and that seem missing from the generic DatabaseFacade. https://github.com/dotnet/efcore/blob/main/src/EFCore/Infrastructure/DatabaseFacade.cs. In my opinion the existing implementation is attempting to use a generic solution. As an alternative a customTestQuery could be used where a customized operation could be implemented:\n`builder.Services.AddHealthChecks().AddDbContextCheck\u003cMyDbContext\u003e(\n    customTestQuery: (context, cancellationToken) =\u003e context.Database.CanConnectAsync(cancellationToken));`\nThis could be applied for relational databases. Would that work?\n\n",
                                           "updatedAt":  "2025-08-06T22:24:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDOAQzde868dvgY",
                                           "createdAt":  "2025-08-06T23:30:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "im-aIex",
                                           "body":  "yeah, I understand the desire to keep the implementation generic, and that supplying my own `CustomTestQuery` is a workaround. I just don\u0027t think it is expected behavior, or very useful, for the default behavior of a health check to not report the errors when it is unhealthy. something could be done within the health check to determine a better method to use other than `CanConnectAsync`, if available, or something could be done upstream to the DBFacade to expose `ExistsAsync`.",
                                           "updatedAt":  "2025-08-06T23:30:55Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "DbContextHealthCheck should properly log all failure exception by default",
        "labels":  [
                       "area-healthchecks"
                   ]
    }
]
